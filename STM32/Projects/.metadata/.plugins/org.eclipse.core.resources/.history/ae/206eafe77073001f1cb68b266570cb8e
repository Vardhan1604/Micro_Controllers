#include "stm32wbaxx_hal.h"
#include "dht11.h"
#include "liquidcrystal_i2c.h" // Include your I2C lcd driver header file

// Function prototypes
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);

int main(void)
{
    // Initialize the HAL Library
    HAL_Init();

    // Configure the system clock
    SystemClock_Config();

    // Initialize all configured peripherals
    MX_GPIO_Init();
    MX_I2C1_Init();

    // Initialize the DHT11 sensor
    if (DHT11_Init() != HAL_OK)
    {
        // Initialization Error
        while (1);
    }

    // Initialize the I2C lcd
    lcd_Init(); // Assuming your lcd init function is named lcd_Init

    // Main loop
    while (1)
    {
        uint8_t temperature = 0;
        uint8_t humidity = 0;

        // Send start signal and read data from the DHT11 sensor
        if (DHT11_Read(&temperature, &humidity) == HAL_OK)
        {
            // Clear the lcd
            lcd_Clear(); // Assuming your function to clear the screen is named lcd_Clear

            // Print temperature and humidity to the lcd
            lcd_SetCursor(0, 0); // Set cursor to the first line
            lcd_Printf("Temp: %d C", temperature); // Assuming your function is lcd_Printf

            lcd_SetCursor(1, 0); // Set cursor to the second line
            lcd_Printf("Humidity: %d %%", humidity); // Assuming your function is lcd_Printf
        }
        else
        {
            // Handle sensor read error
            lcd_SetCursor(0, 0); // Set cursor to the first line
            lcd_Printf("Sensor error!"); // Print error message
        }

        // Wait before next read
        HAL_Delay(2000); // Delay in milliseconds
    }
}

// Initialize GPIO pins
static void MX_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    __HAL_RCC_GPIOB_CLK_ENABLE(); // Enable GPIOB clock

    // Initialize GPIO pin as output for the DHT11 sensor
    GPIO_InitStruct.Pin = GPIO_PIN_1; // Adjust pin according to your setup
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    // Set the pin high initially
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
}

// Initialize I2C1
static void MX_I2C1_Init(void)
{
    I2C_HandleTypeDef hi2c1;

    hi2c1.Instance = I2C1;
    hi2c1.Init.ClockSpeed = 100000; // I2C speed
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    hi2c1.Init.OwnAddress2 = 0;
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
    HAL_I2C_Init(&hi2c1);
}

// Configure the system clock
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    HAL_RCC_OscConfig(&RCC_OscInitStruct);

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
}
