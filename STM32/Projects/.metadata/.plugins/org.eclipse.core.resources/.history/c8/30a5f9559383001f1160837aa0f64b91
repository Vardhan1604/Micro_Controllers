#include "dht11.h"

uint8_t RHI, RHD, TCI, TCD, SUM;
uint32_t pMillis, cMillis;
float tCelsius = 0;
float tFahrenheit = 0;
float RH = 0;


uint8_t DHT11_Start(void) {
    uint8_t Response = 0;
    GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
    GPIO_InitStructPrivate.Pin = DHT11_PIN;
    GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
    HAL_Delay(20);   // wait for 20ms
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
    microDelay(30);   // wait for 30us
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
    GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
    microDelay(40);

    if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
        microDelay(80);
        if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) Response = 1;
    }

    pMillis = HAL_GetTick();
    cMillis = HAL_GetTick();
    while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && (pMillis + 2 > cMillis)) {
        cMillis = HAL_GetTick();
    }
    return Response;
}

uint8_t DHT11_Read(void) {
    uint8_t a, b = 0; // Initialize b
    for (a = 0; a < 8; a++) {
        pMillis = HAL_GetTick();
        cMillis = HAL_GetTick();
        while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && (pMillis + 2 > cMillis)) {
            cMillis = HAL_GetTick();
        }
        microDelay(40);   // wait for 40 us
        if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
            b &= ~(1 << (7 - a));
        } else {
            b |= (1 << (7 - a));
        }
        pMillis = HAL_GetTick();
        cMillis = HAL_GetTick();
        while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && (pMillis + 2 > cMillis)) {
            cMillis = HAL_GetTick();
        }
    }
    return b;
}
float getTemperature()
{
    if (DHT11_Start())
    {
        int RHI = DHT11_Read(); // Relative humidity integral
        int RHD = DHT11_Read(); // Relative humidity decimal
        int TCI = DHT11_Read(); // Celsius integral
        int TCD = DHT11_Read(); // Celsius decimal
        int SUM = DHT11_Read(); // Check sum

        // Debug: Print the raw values
      //  printf("Raw values: RHI=%d, RHD=%d, TCI=%d, TCD=%d, SUM=%d\n", RHI, RHD, TCI, TCD, SUM);

        // Verify checksum: SUM should equal RHI + RHD + TCI + TCD
        if (SUM == (RHI + RHD + TCI + TCD)) // Checksum validation
        {
            return (float)TCI + (float)(TCD / 10.0); // Return temperature
        }
    }
    return -1; // Return -1 in case of error
}

float getHumidity()
{
    if (DHT11_Start())
    {
        int RHI = DHT11_Read(); // Relative humidity integral
        int RHD = DHT11_Read(); // Relative humidity decimal
        int TCI = DHT11_Read(); // Celsius integral
        int TCD = DHT11_Read(); // Celsius decimal
        int SUM = DHT11_Read(); // Check sum

        // Debug: Print the raw values

        // Verify checksum: SUM should equal RHI + RHD + TCI + TCD
        if (SUM == (RHI + RHD + TCI + TCD)) // Checksum validation
        {
            return (float)RHI + (float)(RHD / 10.0); // Return humidity
        }
    }
    return -1; // Return -1 in case of error
}
