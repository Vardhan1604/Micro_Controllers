
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000015c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d9c  0800015c  0800015c  0000115c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08002ef8  08002ef8  00003ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f00  08002f00  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f00  08002f00  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f00  08002f00  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f00  08002f00  00003f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f04  08002f04  00003f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002f08  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002f14  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002f14  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3a3  00000000  00000000  00004042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b88  00000000  00000000  000103e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00011f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a7  00000000  00000000  00012c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020836  00000000  00000000  000135a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbf7  00000000  00000000  00033ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d31a8  00000000  00000000  000419d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114b7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003508  00000000  00000000  00114bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001180c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800015c <__do_global_dtors_aux>:
 800015c:	b510      	push	{r4, lr}
 800015e:	4c05      	ldr	r4, [pc, #20]	@ (8000174 <__do_global_dtors_aux+0x18>)
 8000160:	7823      	ldrb	r3, [r4, #0]
 8000162:	b933      	cbnz	r3, 8000172 <__do_global_dtors_aux+0x16>
 8000164:	4b04      	ldr	r3, [pc, #16]	@ (8000178 <__do_global_dtors_aux+0x1c>)
 8000166:	b113      	cbz	r3, 800016e <__do_global_dtors_aux+0x12>
 8000168:	4804      	ldr	r0, [pc, #16]	@ (800017c <__do_global_dtors_aux+0x20>)
 800016a:	f3af 8000 	nop.w
 800016e:	2301      	movs	r3, #1
 8000170:	7023      	strb	r3, [r4, #0]
 8000172:	bd10      	pop	{r4, pc}
 8000174:	2000000c 	.word	0x2000000c
 8000178:	00000000 	.word	0x00000000
 800017c:	08002ee0 	.word	0x08002ee0

08000180 <frame_dummy>:
 8000180:	b508      	push	{r3, lr}
 8000182:	4b03      	ldr	r3, [pc, #12]	@ (8000190 <frame_dummy+0x10>)
 8000184:	b11b      	cbz	r3, 800018e <frame_dummy+0xe>
 8000186:	4903      	ldr	r1, [pc, #12]	@ (8000194 <frame_dummy+0x14>)
 8000188:	4803      	ldr	r0, [pc, #12]	@ (8000198 <frame_dummy+0x18>)
 800018a:	f3af 8000 	nop.w
 800018e:	bd08      	pop	{r3, pc}
 8000190:	00000000 	.word	0x00000000
 8000194:	20000010 	.word	0x20000010
 8000198:	08002ee0 	.word	0x08002ee0

0800019c <SetPWMDutyCycle>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SetPWMDutyCycle(uint32_t dutyCycle) {
 800019c:	b480      	push	{r7}
 800019e:	b085      	sub	sp, #20
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
    if (dutyCycle <= 100) {
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2b64      	cmp	r3, #100	@ 0x64
 80001a8:	d80d      	bhi.n	80001c6 <SetPWMDutyCycle+0x2a>
        uint32_t pulse = (999 * dutyCycle) / 100; // Calculate pulse width
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80001b0:	fb02 f303 	mul.w	r3, r2, r3
 80001b4:	4a07      	ldr	r2, [pc, #28]	@ (80001d4 <SetPWMDutyCycle+0x38>)
 80001b6:	fba2 2303 	umull	r2, r3, r2, r3
 80001ba:	095b      	lsrs	r3, r3, #5
 80001bc:	60fb      	str	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 80001be:	4b06      	ldr	r3, [pc, #24]	@ (80001d8 <SetPWMDutyCycle+0x3c>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	68fa      	ldr	r2, [r7, #12]
 80001c4:	635a      	str	r2, [r3, #52]	@ 0x34
    }
}
 80001c6:	bf00      	nop
 80001c8:	3714      	adds	r7, #20
 80001ca:	46bd      	mov	sp, r7
 80001cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	51eb851f 	.word	0x51eb851f
 80001d8:	20000028 	.word	0x20000028

080001dc <SetPWMDutyCycle1>:
    void SetPWMDutyCycle1(uint32_t dutyCycle) {
 80001dc:	b480      	push	{r7}
 80001de:	b085      	sub	sp, #20
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
        if (dutyCycle <= 100) {
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b64      	cmp	r3, #100	@ 0x64
 80001e8:	d80d      	bhi.n	8000206 <SetPWMDutyCycle1+0x2a>
            uint32_t pulse = (999 * dutyCycle) / 100; // Calculate pulse width
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80001f0:	fb02 f303 	mul.w	r3, r2, r3
 80001f4:	4a07      	ldr	r2, [pc, #28]	@ (8000214 <SetPWMDutyCycle1+0x38>)
 80001f6:	fba2 2303 	umull	r2, r3, r2, r3
 80001fa:	095b      	lsrs	r3, r3, #5
 80001fc:	60fb      	str	r3, [r7, #12]
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse);
 80001fe:	4b06      	ldr	r3, [pc, #24]	@ (8000218 <SetPWMDutyCycle1+0x3c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	68fa      	ldr	r2, [r7, #12]
 8000204:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
    }
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	51eb851f 	.word	0x51eb851f
 8000218:	20000028 	.word	0x20000028

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 fba3 	bl	800096c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f84d 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 f973 	bl	8000514 <MX_GPIO_Init>
  MX_ICACHE_Init();
 800022e:	f000 f8a2 	bl	8000376 <MX_ICACHE_Init>
  MX_TIM1_Init();
 8000232:	f000 f8b3 	bl	800039c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000236:	2108      	movs	r1, #8
 8000238:	4821      	ldr	r0, [pc, #132]	@ (80002c0 <main+0xa4>)
 800023a:	f001 fe93 	bl	8001f64 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for (int i = 0; i <= 100; i += 10) {
 800023e:	2300      	movs	r3, #0
 8000240:	60fb      	str	r3, [r7, #12]
 8000242:	e009      	b.n	8000258 <main+0x3c>
 	             SetPWMDutyCycle1(i);
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	4618      	mov	r0, r3
 8000248:	f7ff ffc8 	bl	80001dc <SetPWMDutyCycle1>
	             HAL_Delay(20); // Wait for a second
 800024c:	2014      	movs	r0, #20
 800024e:	f000 fc4b 	bl	8000ae8 <HAL_Delay>
	  for (int i = 0; i <= 100; i += 10) {
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	330a      	adds	r3, #10
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	2b64      	cmp	r3, #100	@ 0x64
 800025c:	ddf2      	ble.n	8000244 <main+0x28>
	         }
	  for (int j = 100; j >= 0; j -= 10) {
 800025e:	2364      	movs	r3, #100	@ 0x64
 8000260:	60bb      	str	r3, [r7, #8]
 8000262:	e009      	b.n	8000278 <main+0x5c>
		              SetPWMDutyCycle(j);
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	4618      	mov	r0, r3
 8000268:	f7ff ff98 	bl	800019c <SetPWMDutyCycle>
	 	             HAL_Delay(20); // Wait for a second
 800026c:	2014      	movs	r0, #20
 800026e:	f000 fc3b 	bl	8000ae8 <HAL_Delay>
	  for (int j = 100; j >= 0; j -= 10) {
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	3b0a      	subs	r3, #10
 8000276:	60bb      	str	r3, [r7, #8]
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	2b00      	cmp	r3, #0
 800027c:	daf2      	bge.n	8000264 <main+0x48>
	 	         }
	  for (int i = 0; i <= 100; i += 10) {
 800027e:	2300      	movs	r3, #0
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	e009      	b.n	8000298 <main+0x7c>
	 	             SetPWMDutyCycle(i);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4618      	mov	r0, r3
 8000288:	f7ff ff88 	bl	800019c <SetPWMDutyCycle>
	 	             HAL_Delay(20); // Wait for a second
 800028c:	2014      	movs	r0, #20
 800028e:	f000 fc2b 	bl	8000ae8 <HAL_Delay>
	  for (int i = 0; i <= 100; i += 10) {
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	330a      	adds	r3, #10
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b64      	cmp	r3, #100	@ 0x64
 800029c:	ddf2      	ble.n	8000284 <main+0x68>
	 	         }
	 	  for (int j = 100; j >= 0; j -= 10) {
 800029e:	2364      	movs	r3, #100	@ 0x64
 80002a0:	603b      	str	r3, [r7, #0]
 80002a2:	e009      	b.n	80002b8 <main+0x9c>
	 	 	             SetPWMDutyCycle1(j);
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ff98 	bl	80001dc <SetPWMDutyCycle1>
	 	 	             HAL_Delay(20); // Wait for a second
 80002ac:	2014      	movs	r0, #20
 80002ae:	f000 fc1b 	bl	8000ae8 <HAL_Delay>
	 	  for (int j = 100; j >= 0; j -= 10) {
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	3b0a      	subs	r3, #10
 80002b6:	603b      	str	r3, [r7, #0]
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	daf2      	bge.n	80002a4 <main+0x88>
	  for (int i = 0; i <= 100; i += 10) {
 80002be:	e7be      	b.n	800023e <main+0x22>
 80002c0:	20000028 	.word	0x20000028

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b098      	sub	sp, #96	@ 0x60
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0320 	add.w	r3, r7, #32
 80002ce:	2240      	movs	r2, #64	@ 0x40
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 fdd8 	bl	8002e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	463b      	mov	r3, r7
 80002da:	2220      	movs	r2, #32
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fdd2 	bl	8002e88 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002e4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80002e8:	f000 ff50 	bl	800118c <HAL_PWREx_ControlVoltageScaling>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80002f2:	f000 f99d 	bl	8000630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f6:	2302      	movs	r3, #2
 80002f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000300:	2310      	movs	r3, #16
 8000302:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
 8000304:	2302      	movs	r3, #2
 8000306:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
 8000308:	2302      	movs	r3, #2
 800030a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL1.PLLM = 1;
 800030c:	2301      	movs	r3, #1
 800030e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL1.PLLN = 9;
 8000310:	2309      	movs	r3, #9
 8000312:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL1.PLLP = 2;
 8000314:	2302      	movs	r3, #2
 8000316:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL1.PLLQ = 2;
 8000318:	2302      	movs	r3, #2
 800031a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLR = 3;
 800031c:	2303      	movs	r3, #3
 800031e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL1.PLLFractional = 3072;
 8000320:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000324:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000326:	f107 0320 	add.w	r3, r7, #32
 800032a:	4618      	mov	r0, r3
 800032c:	f000 ff8c 	bl	8001248 <HAL_RCC_OscConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000336:	f000 f97b 	bl	8000630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033a:	233f      	movs	r3, #63	@ 0x3f
 800033c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK7|RCC_CLOCKTYPE_HCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033e:	2303      	movs	r3, #3
 8000340:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB7CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHB5_PLL1_CLKDivider = RCC_SYSCLK_PLL1_DIV2;
 8000352:	2304      	movs	r3, #4
 8000354:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHB5_HSEHSI_CLKDivider = RCC_SYSCLK_HSEHSI_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800035a:	463b      	mov	r3, r7
 800035c:	2101      	movs	r1, #1
 800035e:	4618      	mov	r0, r3
 8000360:	f001 fb5c 	bl	8001a1c <HAL_RCC_ClockConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800036a:	f000 f961 	bl	8000630 <Error_Handler>
  }
}
 800036e:	bf00      	nop
 8000370:	3760      	adds	r7, #96	@ 0x60
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}

08000376 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000376:	b580      	push	{r7, lr}
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800037a:	2000      	movs	r0, #0
 800037c:	f000 fed6 	bl	800112c <HAL_ICACHE_ConfigAssociativityMode>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000386:	f000 f953 	bl	8000630 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800038a:	f000 feef 	bl	800116c <HAL_ICACHE_Enable>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000394:	f000 f94c 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}

0800039c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b09c      	sub	sp, #112	@ 0x70
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
 80003ca:	611a      	str	r2, [r3, #16]
 80003cc:	615a      	str	r2, [r3, #20]
 80003ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2234      	movs	r2, #52	@ 0x34
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f002 fd56 	bl	8002e88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003dc:	4b4b      	ldr	r3, [pc, #300]	@ (800050c <MX_TIM1_Init+0x170>)
 80003de:	4a4c      	ldr	r2, [pc, #304]	@ (8000510 <MX_TIM1_Init+0x174>)
 80003e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 80003e2:	4b4a      	ldr	r3, [pc, #296]	@ (800050c <MX_TIM1_Init+0x170>)
 80003e4:	2231      	movs	r2, #49	@ 0x31
 80003e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e8:	4b48      	ldr	r3, [pc, #288]	@ (800050c <MX_TIM1_Init+0x170>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80003ee:	4b47      	ldr	r3, [pc, #284]	@ (800050c <MX_TIM1_Init+0x170>)
 80003f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80003f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f6:	4b45      	ldr	r3, [pc, #276]	@ (800050c <MX_TIM1_Init+0x170>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003fc:	4b43      	ldr	r3, [pc, #268]	@ (800050c <MX_TIM1_Init+0x170>)
 80003fe:	2200      	movs	r2, #0
 8000400:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000402:	4b42      	ldr	r3, [pc, #264]	@ (800050c <MX_TIM1_Init+0x170>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000408:	4840      	ldr	r0, [pc, #256]	@ (800050c <MX_TIM1_Init+0x170>)
 800040a:	f001 fcf3 	bl	8001df4 <HAL_TIM_Base_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000414:	f000 f90c 	bl	8000630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000418:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800041c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800041e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000422:	4619      	mov	r1, r3
 8000424:	4839      	ldr	r0, [pc, #228]	@ (800050c <MX_TIM1_Init+0x170>)
 8000426:	f001 ff91 	bl	800234c <HAL_TIM_ConfigClockSource>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000430:	f000 f8fe 	bl	8000630 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000434:	4835      	ldr	r0, [pc, #212]	@ (800050c <MX_TIM1_Init+0x170>)
 8000436:	f001 fd34 	bl	8001ea2 <HAL_TIM_PWM_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000440:	f000 f8f6 	bl	8000630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000444:	2300      	movs	r3, #0
 8000446:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000448:	2300      	movs	r3, #0
 800044a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800044c:	2300      	movs	r3, #0
 800044e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000450:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000454:	4619      	mov	r1, r3
 8000456:	482d      	ldr	r0, [pc, #180]	@ (800050c <MX_TIM1_Init+0x170>)
 8000458:	f002 fc28 	bl	8002cac <HAL_TIMEx_MasterConfigSynchronization>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000462:	f000 f8e5 	bl	8000630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000466:	2360      	movs	r3, #96	@ 0x60
 8000468:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800046e:	2300      	movs	r3, #0
 8000470:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000472:	2300      	movs	r3, #0
 8000474:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000476:	2300      	movs	r3, #0
 8000478:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800047a:	2300      	movs	r3, #0
 800047c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800047e:	2300      	movs	r3, #0
 8000480:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000482:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000486:	2200      	movs	r2, #0
 8000488:	4619      	mov	r1, r3
 800048a:	4820      	ldr	r0, [pc, #128]	@ (800050c <MX_TIM1_Init+0x170>)
 800048c:	f001 fe4a 	bl	8002124 <HAL_TIM_PWM_ConfigChannel>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000496:	f000 f8cb 	bl	8000630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800049a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800049e:	2208      	movs	r2, #8
 80004a0:	4619      	mov	r1, r3
 80004a2:	481a      	ldr	r0, [pc, #104]	@ (800050c <MX_TIM1_Init+0x170>)
 80004a4:	f001 fe3e 	bl	8002124 <HAL_TIM_PWM_ConfigChannel>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80004ae:	f000 f8bf 	bl	8000630 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004b2:	2300      	movs	r3, #0
 80004b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004b6:	2300      	movs	r3, #0
 80004b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80004d0:	2300      	movs	r3, #0
 80004d2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004d4:	2300      	movs	r3, #0
 80004d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80004dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80004e2:	2300      	movs	r3, #0
 80004e4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004e6:	2300      	movs	r3, #0
 80004e8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4619      	mov	r1, r3
 80004ee:	4807      	ldr	r0, [pc, #28]	@ (800050c <MX_TIM1_Init+0x170>)
 80004f0:	f002 fc44 	bl	8002d7c <HAL_TIMEx_ConfigBreakDeadTime>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80004fa:	f000 f899 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004fe:	4803      	ldr	r0, [pc, #12]	@ (800050c <MX_TIM1_Init+0x170>)
 8000500:	f000 f8d8 	bl	80006b4 <HAL_TIM_MspPostInit>

}
 8000504:	bf00      	nop
 8000506:	3770      	adds	r7, #112	@ 0x70
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000028 	.word	0x20000028
 8000510:	40012c00 	.word	0x40012c00

08000514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 030c 	add.w	r3, r7, #12
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b3e      	ldr	r3, [pc, #248]	@ (8000624 <MX_GPIO_Init+0x110>)
 800052c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000530:	4a3c      	ldr	r2, [pc, #240]	@ (8000624 <MX_GPIO_Init+0x110>)
 8000532:	f043 0302 	orr.w	r3, r3, #2
 8000536:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800053a:	4b3a      	ldr	r3, [pc, #232]	@ (8000624 <MX_GPIO_Init+0x110>)
 800053c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000540:	f003 0302 	and.w	r3, r3, #2
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4b36      	ldr	r3, [pc, #216]	@ (8000624 <MX_GPIO_Init+0x110>)
 800054a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800054e:	4a35      	ldr	r2, [pc, #212]	@ (8000624 <MX_GPIO_Init+0x110>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000558:	4b32      	ldr	r3, [pc, #200]	@ (8000624 <MX_GPIO_Init+0x110>)
 800055a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	4b2f      	ldr	r3, [pc, #188]	@ (8000624 <MX_GPIO_Init+0x110>)
 8000568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800056c:	4a2d      	ldr	r2, [pc, #180]	@ (8000624 <MX_GPIO_Init+0x110>)
 800056e:	f043 0304 	orr.w	r3, r3, #4
 8000572:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000576:	4b2b      	ldr	r3, [pc, #172]	@ (8000624 <MX_GPIO_Init+0x110>)
 8000578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800057c:	f003 0304 	and.w	r3, r3, #4
 8000580:	603b      	str	r3, [r7, #0]
 8000582:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800058a:	4827      	ldr	r0, [pc, #156]	@ (8000628 <MX_GPIO_Init+0x114>)
 800058c:	f000 fd7a 	bl	8001084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USART1_TX_Pin */
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 8000590:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000594:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000596:	2302      	movs	r3, #2
 8000598:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005a2:	2307      	movs	r3, #7
 80005a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	4619      	mov	r1, r3
 80005ac:	481e      	ldr	r0, [pc, #120]	@ (8000628 <MX_GPIO_Init+0x114>)
 80005ae:	f000 fc1d 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b8:	2301      	movs	r3, #1
 80005ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c0:	2302      	movs	r3, #2
 80005c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	4619      	mov	r1, r3
 80005ca:	4817      	ldr	r0, [pc, #92]	@ (8000628 <MX_GPIO_Init+0x114>)
 80005cc:	f000 fc0e 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pin : USART1_RX_Pin */
  GPIO_InitStruct.Pin = USART1_RX_Pin;
 80005d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d6:	2302      	movs	r3, #2
 80005d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005e2:	2307      	movs	r3, #7
 80005e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART1_RX_GPIO_Port, &GPIO_InitStruct);
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	4619      	mov	r1, r3
 80005ec:	480f      	ldr	r0, [pc, #60]	@ (800062c <MX_GPIO_Init+0x118>)
 80005ee:	f000 fbfd 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 80005f2:	2340      	movs	r3, #64	@ 0x40
 80005f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	4619      	mov	r1, r3
 8000606:	4808      	ldr	r0, [pc, #32]	@ (8000628 <MX_GPIO_Init+0x114>)
 8000608:	f000 fbf0 	bl	8000dec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI6_IRQn, 0, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2100      	movs	r1, #0
 8000610:	2011      	movs	r0, #17
 8000612:	f000 fb45 	bl	8000ca0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 8000616:	2011      	movs	r0, #17
 8000618:	f000 fb5f 	bl	8000cda <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800061c:	bf00      	nop
 800061e:	3720      	adds	r7, #32
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	46020c00 	.word	0x46020c00
 8000628:	42020400 	.word	0x42020400
 800062c:	42020000 	.word	0x42020000

08000630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000634:	b672      	cpsid	i
}
 8000636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <Error_Handler+0x8>

0800063c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <HAL_MspInit+0x30>)
 8000644:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000648:	4a08      	ldr	r2, [pc, #32]	@ (800066c <HAL_MspInit+0x30>)
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <HAL_MspInit+0x30>)
 8000654:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000658:	f003 0304 	and.w	r3, r3, #4
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	46020c00 	.word	0x46020c00

08000670 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a0b      	ldr	r2, [pc, #44]	@ (80006ac <HAL_TIM_Base_MspInit+0x3c>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d10e      	bne.n	80006a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000682:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <HAL_TIM_Base_MspInit+0x40>)
 8000684:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000688:	4a09      	ldr	r2, [pc, #36]	@ (80006b0 <HAL_TIM_Base_MspInit+0x40>)
 800068a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800068e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000692:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <HAL_TIM_Base_MspInit+0x40>)
 8000694:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000698:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	40012c00 	.word	0x40012c00
 80006b0:	46020c00 	.word	0x46020c00

080006b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a13      	ldr	r2, [pc, #76]	@ (8000720 <HAL_TIM_MspPostInit+0x6c>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d11f      	bne.n	8000716 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b13      	ldr	r3, [pc, #76]	@ (8000724 <HAL_TIM_MspPostInit+0x70>)
 80006d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006dc:	4a11      	ldr	r2, [pc, #68]	@ (8000724 <HAL_TIM_MspPostInit+0x70>)
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <HAL_TIM_MspPostInit+0x70>)
 80006e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ec:	f003 0302 	and.w	r3, r3, #2
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB8     ------> TIM1_CH1
    PB4 (NJTRST)     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4;
 80006f4:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80006f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fa:	2302      	movs	r3, #2
 80006fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000706:	2301      	movs	r3, #1
 8000708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	@ (8000728 <HAL_TIM_MspPostInit+0x74>)
 8000712:	f000 fb6b 	bl	8000dec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000716:	bf00      	nop
 8000718:	3720      	adds	r7, #32
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40012c00 	.word	0x40012c00
 8000724:	46020c00 	.word	0x46020c00
 8000728:	42020400 	.word	0x42020400

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <NMI_Handler+0x4>

08000734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <MemManage_Handler+0x4>

08000744 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <UsageFault_Handler+0x4>

08000754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000782:	f000 f991 	bl	8000aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}

0800078a <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 800078e:	2040      	movs	r0, #64	@ 0x40
 8000790:	f000 fc90 	bl	80010b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  __IO uint32_t tmpreg;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <SystemInit+0x20>)
 800079e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007a2:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <SystemInit+0x20>)
 80007a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  CLEAR_BIT(ADC4->CR, ADC_CR_ADVREGEN);

  /* Disable ADC kernel clock */
  CLEAR_BIT(RCC->AHB4ENR, RCC_AHB4ENR_ADC4EN);
#endif
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b089      	sub	sp, #36	@ 0x24
 80007c0:	af00      	add	r7, sp, #0
  uint32_t plln;
  float_t fracn;
  float_t pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 80007c2:	4b4f      	ldr	r3, [pc, #316]	@ (8000900 <SystemCoreClockUpdate+0x144>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	f003 030c 	and.w	r3, r3, #12
 80007ca:	2b08      	cmp	r3, #8
 80007cc:	d002      	beq.n	80007d4 <SystemCoreClockUpdate+0x18>
 80007ce:	2b0c      	cmp	r3, #12
 80007d0:	d00b      	beq.n	80007ea <SystemCoreClockUpdate+0x2e>
 80007d2:	e07d      	b.n	80008d0 <SystemCoreClockUpdate+0x114>
  {
    case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
      SystemCoreClock = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 80007d4:	4b4a      	ldr	r3, [pc, #296]	@ (8000900 <SystemCoreClockUpdate+0x144>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	0d1b      	lsrs	r3, r3, #20
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	4a49      	ldr	r2, [pc, #292]	@ (8000904 <SystemCoreClockUpdate+0x148>)
 80007e0:	fa22 f303 	lsr.w	r3, r2, r3
 80007e4:	4a48      	ldr	r2, [pc, #288]	@ (8000908 <SystemCoreClockUpdate+0x14c>)
 80007e6:	6013      	str	r3, [r2, #0]
      break;
 80007e8:	e076      	b.n	80008d8 <SystemCoreClockUpdate+0x11c>

    case (RCC_CFGR1_SWS_0 | RCC_CFGR1_SWS_1):  /* PLL1 used as system clock source */
      /* PLL_VCO = (PLLsource / PLLM) * PLLN * FractionnalPart
          SYSCLK = PLL_VCO / PLLR */
      /* Get PLL1 CFGR and DIVR register values */
      tmp1 = RCC->PLL1CFGR;
 80007ea:	4b45      	ldr	r3, [pc, #276]	@ (8000900 <SystemCoreClockUpdate+0x144>)
 80007ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007ee:	61fb      	str	r3, [r7, #28]
      tmp2 = RCC->PLL1DIVR;
 80007f0:	4b43      	ldr	r3, [pc, #268]	@ (8000900 <SystemCoreClockUpdate+0x144>)
 80007f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007f4:	617b      	str	r3, [r7, #20]

      /* Retrieve PLL1 multiplication factor and divider */
      pllm = ((tmp1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	3301      	adds	r3, #1
 8000800:	613b      	str	r3, [r7, #16]
      plln = (tmp2 & RCC_PLL1DIVR_PLL1N) + 1U;
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000808:	3301      	adds	r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
      pllr = ((tmp2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	0e1b      	lsrs	r3, r3, #24
 8000810:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000814:	3301      	adds	r3, #1
 8000816:	60bb      	str	r3, [r7, #8]

      /* Check if fractional part is enable */
      if ((tmp1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	f003 0310 	and.w	r3, r3, #16
 800081e:	2b00      	cmp	r3, #0
 8000820:	d00b      	beq.n	800083a <SystemCoreClockUpdate+0x7e>
      {
        fracn = (float_t)((uint32_t)((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8000822:	4b37      	ldr	r3, [pc, #220]	@ (8000900 <SystemCoreClockUpdate+0x144>)
 8000824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000826:	08db      	lsrs	r3, r3, #3
 8000828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800082c:	ee07 3a90 	vmov	s15, r3
 8000830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000834:	edc7 7a06 	vstr	s15, [r7, #24]
 8000838:	e002      	b.n	8000840 <SystemCoreClockUpdate+0x84>
      }
      else
      {
        fracn = (float_t)0U;
 800083a:	f04f 0300 	mov.w	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
      }

      /* determine PLL source */
      pllsource = (tmp1 & RCC_PLL1CFGR_PLL1SRC);
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	f003 0303 	and.w	r3, r3, #3
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d003      	beq.n	8000856 <SystemCoreClockUpdate+0x9a>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b03      	cmp	r3, #3
 8000852:	d003      	beq.n	800085c <SystemCoreClockUpdate+0xa0>
 8000854:	e00c      	b.n	8000870 <SystemCoreClockUpdate+0xb4>
      switch (pllsource)
      {
        /* HSI used as PLL1 clock source */
        case RCC_PLL1CFGR_PLL1SRC_1:
          tmp1 = HSI_VALUE;
 8000856:	4b2d      	ldr	r3, [pc, #180]	@ (800090c <SystemCoreClockUpdate+0x150>)
 8000858:	61fb      	str	r3, [r7, #28]
          break;
 800085a:	e00c      	b.n	8000876 <SystemCoreClockUpdate+0xba>

        /* HSE used as PLL1 clock source */
        case (RCC_PLL1CFGR_PLL1SRC_0 | RCC_PLL1CFGR_PLL1SRC_1):
          tmp1 = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 800085c:	4b28      	ldr	r3, [pc, #160]	@ (8000900 <SystemCoreClockUpdate+0x144>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	0d1b      	lsrs	r3, r3, #20
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	4a27      	ldr	r2, [pc, #156]	@ (8000904 <SystemCoreClockUpdate+0x148>)
 8000868:	fa22 f303 	lsr.w	r3, r2, r3
 800086c:	61fb      	str	r3, [r7, #28]
          break;
 800086e:	e002      	b.n	8000876 <SystemCoreClockUpdate+0xba>

        default:
          tmp1 = 0U;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
          break;
 8000874:	bf00      	nop
      }

      /* Compute VCO output frequency */
      pllvco = ((float_t) tmp1 / (float_t)pllm) * (((float_t)plln + (float_t)(fracn / (float_t)0x2000U)));
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	ee07 3a90 	vmov	s15, r3
 8000886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800088a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	ee07 3a90 	vmov	s15, r3
 8000894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000898:	ed97 6a06 	vldr	s12, [r7, #24]
 800089c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8000910 <SystemCoreClockUpdate+0x154>
 80008a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80008a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80008a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ac:	edc7 7a00 	vstr	s15, [r7]
      SystemCoreClock = (uint32_t)((float_t)(pllvco / (float_t)pllr));
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	ee07 3a90 	vmov	s15, r3
 80008b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008ba:	edd7 6a00 	vldr	s13, [r7]
 80008be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008c6:	ee17 2a90 	vmov	r2, s15
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <SystemCoreClockUpdate+0x14c>)
 80008cc:	601a      	str	r2, [r3, #0]
      break;
 80008ce:	e003      	b.n	80008d8 <SystemCoreClockUpdate+0x11c>

    case 0x00u:  /* HSI used as system clock source */
    default:
      SystemCoreClock = HSI_VALUE;
 80008d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <SystemCoreClockUpdate+0x14c>)
 80008d2:	4a0e      	ldr	r2, [pc, #56]	@ (800090c <SystemCoreClockUpdate+0x150>)
 80008d4:	601a      	str	r2, [r3, #0]
      break;
 80008d6:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp1 = AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)];
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <SystemCoreClockUpdate+0x144>)
 80008da:	6a1b      	ldr	r3, [r3, #32]
 80008dc:	f003 0307 	and.w	r3, r3, #7
 80008e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000914 <SystemCoreClockUpdate+0x158>)
 80008e2:	5cd3      	ldrb	r3, [r2, r3]
 80008e4:	61fb      	str	r3, [r7, #28]

  /* HCLK clock frequency */
  SystemCoreClock >>= tmp1;
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <SystemCoreClockUpdate+0x14c>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	fa22 f303 	lsr.w	r3, r2, r3
 80008f0:	4a05      	ldr	r2, [pc, #20]	@ (8000908 <SystemCoreClockUpdate+0x14c>)
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	bf00      	nop
 80008f6:	3724      	adds	r7, #36	@ 0x24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	46020c00 	.word	0x46020c00
 8000904:	01e84800 	.word	0x01e84800
 8000908:	20000000 	.word	0x20000000
 800090c:	00f42400 	.word	0x00f42400
 8000910:	46000000 	.word	0x46000000
 8000914:	08002ef8 	.word	0x08002ef8

08000918 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000950 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800091c:	f7ff ff3c 	bl	8000798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000920:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000922:	e003      	b.n	800092c <LoopCopyDataInit>

08000924 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000924:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000926:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000928:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800092a:	3104      	adds	r1, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800092c:	480a      	ldr	r0, [pc, #40]	@ (8000958 <LoopForever+0xa>)
	ldr	r3, =_edata
 800092e:	4b0b      	ldr	r3, [pc, #44]	@ (800095c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000930:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000932:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000934:	d3f6      	bcc.n	8000924 <CopyDataInit>
	ldr	r2, =_sbss
 8000936:	4a0a      	ldr	r2, [pc, #40]	@ (8000960 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000938:	e002      	b.n	8000940 <LoopFillZerobss>

0800093a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800093a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800093c:	f842 3b04 	str.w	r3, [r2], #4

08000940 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000940:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <LoopForever+0x16>)
	cmp	r2, r3
 8000942:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000944:	d3f9      	bcc.n	800093a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000946:	f002 faa7 	bl	8002e98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800094a:	f7ff fc67 	bl	800021c <main>

0800094e <LoopForever>:

LoopForever:
    b LoopForever
 800094e:	e7fe      	b.n	800094e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000950:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 8000954:	08002f08 	.word	0x08002f08
	ldr	r0, =_sdata
 8000958:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800095c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000960:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000964:	20000078 	.word	0x20000078

08000968 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC4_IRQHandler>
	...

0800096c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000970:	4b0d      	ldr	r3, [pc, #52]	@ (80009a8 <HAL_Init+0x3c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0c      	ldr	r2, [pc, #48]	@ (80009a8 <HAL_Init+0x3c>)
 8000976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800097a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800097c:	2003      	movs	r0, #3
 800097e:	f000 f984 	bl	8000c8a <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 8000982:	f7ff ff1b 	bl	80007bc <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000986:	2004      	movs	r0, #4
 8000988:	f000 f9d8 	bl	8000d3c <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800098c:	200f      	movs	r0, #15
 800098e:	f000 f80d 	bl	80009ac <HAL_InitTick>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <HAL_Init+0x30>
  {
    return HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	e002      	b.n	80009a2 <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800099c:	f7ff fe4e 	bl	800063c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40022000 	.word	0x40022000

080009ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80009b8:	4b36      	ldr	r3, [pc, #216]	@ (8000a94 <HAL_InitTick+0xe8>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	e062      	b.n	8000a8a <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80009c4:	4b34      	ldr	r3, [pc, #208]	@ (8000a98 <HAL_InitTick+0xec>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f003 0304 	and.w	r3, r3, #4
 80009cc:	2b04      	cmp	r3, #4
 80009ce:	d10c      	bne.n	80009ea <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80009d0:	4b32      	ldr	r3, [pc, #200]	@ (8000a9c <HAL_InitTick+0xf0>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000a94 <HAL_InitTick+0xe8>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009de:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	e03d      	b.n	8000a66 <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 80009ea:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa0 <HAL_InitTick+0xf4>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80009f4:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80009fc:	d025      	beq.n	8000a4a <HAL_InitTick+0x9e>
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000a04:	d82e      	bhi.n	8000a64 <HAL_InitTick+0xb8>
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d004      	beq.n	8000a16 <HAL_InitTick+0x6a>
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000a12:	d00d      	beq.n	8000a30 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8000a14:	e026      	b.n	8000a64 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000a16:	4b21      	ldr	r3, [pc, #132]	@ (8000a9c <HAL_InitTick+0xf0>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a94 <HAL_InitTick+0xe8>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000a24:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2c:	60fb      	str	r3, [r7, #12]
        break;
 8000a2e:	e01a      	b.n	8000a66 <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000a30:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <HAL_InitTick+0xe8>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a3e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a46:	60fb      	str	r3, [r7, #12]
        break;
 8000a48:	e00d      	b.n	8000a66 <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000a4a:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <HAL_InitTick+0xe8>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a58:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a60:	60fb      	str	r3, [r7, #12]
        break;
 8000a62:	e000      	b.n	8000a66 <HAL_InitTick+0xba>
        break;
 8000a64:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f000 f946 	bl	8000cf8 <HAL_SYSTICK_Config>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e009      	b.n	8000a8a <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a76:	2200      	movs	r2, #0
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7e:	f000 f90f 	bl	8000ca0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000a82:	4a08      	ldr	r2, [pc, #32]	@ (8000aa4 <HAL_InitTick+0xf8>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008
 8000a98:	e000e010 	.word	0xe000e010
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	46020c00 	.word	0x46020c00
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_IncTick+0x20>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <HAL_IncTick+0x24>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <HAL_IncTick+0x24>)
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000074 	.word	0x20000074

08000ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <HAL_GetTick+0x14>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000074 	.word	0x20000074

08000ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af0:	f7ff ffee 	bl	8000ad0 <HAL_GetTick>
 8000af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b00:	d005      	beq.n	8000b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <HAL_Delay+0x44>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	461a      	mov	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b0e:	bf00      	nop
 8000b10:	f7ff ffde 	bl	8000ad0 <HAL_GetTick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d8f7      	bhi.n	8000b10 <HAL_Delay+0x28>
  {
  }
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000008 	.word	0x20000008

08000b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b40:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b62:	4a04      	ldr	r2, [pc, #16]	@ (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	60d3      	str	r3, [r2, #12]
}
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b7c:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <__NVIC_GetPriorityGrouping+0x18>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	f003 0307 	and.w	r3, r3, #7
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	db0b      	blt.n	8000bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	f003 021f 	and.w	r2, r3, #31
 8000bac:	4907      	ldr	r1, [pc, #28]	@ (8000bcc <__NVIC_EnableIRQ+0x38>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	095b      	lsrs	r3, r3, #5
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	@ (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	@ (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	@ 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	@ 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ff4c 	bl	8000b30 <__NVIC_SetPriorityGrouping>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
 8000cae:	f7ff ff63 	bl	8000b78 <__NVIC_GetPriorityGrouping>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f003 0307 	and.w	r3, r3, #7
 8000cb8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f7ff ffb0 	bl	8000c24 <NVIC_EncodePriority>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff7f 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbaxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff53 	bl	8000b94 <__NVIC_EnableIRQ>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d08:	d301      	bcc.n	8000d0e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e00d      	b.n	8000d2a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d38 <HAL_SYSTICK_Config+0x40>)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000d16:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <HAL_SYSTICK_Config+0x40>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_SYSTICK_Config+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a05      	ldr	r2, [pc, #20]	@ (8000d38 <HAL_SYSTICK_Config+0x40>)
 8000d22:	f043 0303 	orr.w	r3, r3, #3
 8000d26:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000e010 	.word	0xe000e010

08000d3c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	d844      	bhi.n	8000dd4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d50 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d50:	08000d73 	.word	0x08000d73
 8000d54:	08000d91 	.word	0x08000d91
 8000d58:	08000db3 	.word	0x08000db3
 8000d5c:	08000dd5 	.word	0x08000dd5
 8000d60:	08000d65 	.word	0x08000d65
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000d64:	4b1f      	ldr	r3, [pc, #124]	@ (8000de4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a1e      	ldr	r2, [pc, #120]	@ (8000de4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d6a:	f043 0304 	orr.w	r3, r3, #4
 8000d6e:	6013      	str	r3, [r2, #0]
      break;
 8000d70:	e031      	b.n	8000dd6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000d72:	4b1c      	ldr	r3, [pc, #112]	@ (8000de4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a1b      	ldr	r2, [pc, #108]	@ (8000de4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d78:	f023 0304 	bic.w	r3, r3, #4
 8000d7c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000de8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d84:	4a18      	ldr	r2, [pc, #96]	@ (8000de8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d86:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000d8e:	e022      	b.n	8000dd6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000d90:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a13      	ldr	r2, [pc, #76]	@ (8000de4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d96:	f023 0304 	bic.w	r3, r3, #4
 8000d9a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000da6:	4a10      	ldr	r2, [pc, #64]	@ (8000de8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000da8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000db0:	e011      	b.n	8000dd6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a0b      	ldr	r2, [pc, #44]	@ (8000de4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000db8:	f023 0304 	bic.w	r3, r3, #4
 8000dbc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000dc8:	4a07      	ldr	r2, [pc, #28]	@ (8000de8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000dca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000dd2:	e000      	b.n	8000dd6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000dd4:	bf00      	nop
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e010 	.word	0xe000e010
 8000de8:	46020c00 	.word	0x46020c00

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000dfa:	e130      	b.n	800105e <HAL_GPIO_Init+0x272>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	2101      	movs	r1, #1
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	fa01 f303 	lsl.w	r3, r1, r3
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 8122 	beq.w	8001058 <HAL_GPIO_Init+0x26c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d005      	beq.n	8000e2c <HAL_GPIO_Init+0x40>
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d130      	bne.n	8000e8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	68da      	ldr	r2, [r3, #12]
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e62:	2201      	movs	r2, #1
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	f003 0201 	and.w	r2, r3, #1
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d017      	beq.n	8000eca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d123      	bne.n	8000f1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	220f      	movs	r2, #15
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	691a      	ldr	r2, [r3, #16]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	08da      	lsrs	r2, r3, #3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3208      	adds	r2, #8
 8000f18:	6939      	ldr	r1, [r7, #16]
 8000f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0203 	and.w	r2, r3, #3
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d07c      	beq.n	8001058 <HAL_GPIO_Init+0x26c>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000f5e:	4a47      	ldr	r2, [pc, #284]	@ (800107c <HAL_GPIO_Init+0x290>)
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	3318      	adds	r3, #24
 8000f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	220f      	movs	r2, #15
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	0a9a      	lsrs	r2, r3, #10
 8000f86:	4b3e      	ldr	r3, [pc, #248]	@ (8001080 <HAL_GPIO_Init+0x294>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	f002 0203 	and.w	r2, r2, #3
 8000f90:	00d2      	lsls	r2, r2, #3
 8000f92:	4093      	lsls	r3, r2
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000f9a:	4938      	ldr	r1, [pc, #224]	@ (800107c <HAL_GPIO_Init+0x290>)
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	3318      	adds	r3, #24
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fa8:	4b34      	ldr	r3, [pc, #208]	@ (800107c <HAL_GPIO_Init+0x290>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x1e0>
        {
          temp |= iocurrent;
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fcc:	4a2b      	ldr	r2, [pc, #172]	@ (800107c <HAL_GPIO_Init+0x290>)
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800107c <HAL_GPIO_Init+0x290>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x20a>
        {
          temp |= iocurrent;
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ff6:	4a21      	ldr	r2, [pc, #132]	@ (800107c <HAL_GPIO_Init+0x290>)
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <HAL_GPIO_Init+0x290>)
 8000ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001022:	4a16      	ldr	r2, [pc, #88]	@ (800107c <HAL_GPIO_Init+0x290>)
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 800102a:	4b14      	ldr	r3, [pc, #80]	@ (800107c <HAL_GPIO_Init+0x290>)
 800102c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001050:	4a0a      	ldr	r2, [pc, #40]	@ (800107c <HAL_GPIO_Init+0x290>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	fa22 f303 	lsr.w	r3, r2, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	f47f aec7 	bne.w	8000dfc <HAL_GPIO_Init+0x10>
  }
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	371c      	adds	r7, #28
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	46022000 	.word	0x46022000
 8001080:	002f7f7f 	.word	0x002f7f7f

08001084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	807b      	strh	r3, [r7, #2]
 8001090:	4613      	mov	r3, r2
 8001092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001094:	787b      	ldrb	r3, [r7, #1]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800109a:	887a      	ldrh	r2, [r7, #2]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010a0:	e002      	b.n	80010a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00U)
 80010be:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	4013      	ands	r3, r2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d006      	beq.n	80010d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80010ca:	4a0c      	ldr	r2, [pc, #48]	@ (80010fc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f814 	bl	8001100 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00U)
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	4013      	ands	r3, r2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80010e4:	4a05      	ldr	r2, [pc, #20]	@ (80010fc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 f812 	bl	8001116 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	46022000 	.word	0x46022000

08001100 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e007      	b.n	800115a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800114a:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 0204 	bic.w	r2, r3, #4
 8001152:	4905      	ldr	r1, [pc, #20]	@ (8001168 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4313      	orrs	r3, r2
 8001158:	600b      	str	r3, [r1, #0]
  }

  return status;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40030400 	.word	0x40030400

0800116c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001170:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <HAL_ICACHE_Enable+0x1c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <HAL_ICACHE_Enable+0x1c>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	40030400 	.word	0x40030400

0800118c <HAL_PWREx_ControlVoltageScaling>:
  *        only take effect after the 2.4 GHz RADIO has entered Sleep or Deepsleep mode.
  * @note  In range 2, the 2.4 GHz RADIO shall not transmit nor receive.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  uint32_t vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001194:	4b29      	ldr	r3, [pc, #164]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800119c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d101      	bne.n	80011aa <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e042      	b.n	8001230 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Set voltage scaling level */
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 80011aa:	4b24      	ldr	r3, [pc, #144]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80011b2:	4922      	ldr	r1, [pc, #136]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	60cb      	str	r3, [r1, #12]


  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 80011ba:	4b21      	ldr	r3, [pc, #132]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2232      	movs	r2, #50	@ 0x32
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001244 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0c9b      	lsrs	r3, r3, #18
 80011cc:	3301      	adds	r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80011d0:	e002      	b.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
  {
    timeout--;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80011d8:	4b18      	ldr	r3, [pc, #96]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <HAL_PWREx_ControlVoltageScaling+0x5e>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1f3      	bne.n	80011d2 <HAL_PWREx_ControlVoltageScaling+0x46>
  }

  /* Check time out  */
  if (timeout == 0U)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <HAL_PWREx_ControlVoltageScaling+0x68>
  {
    return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e01d      	b.n	8001230 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Wait until ACTVOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2232      	movs	r2, #50	@ 0x32
 80011fa:	fb02 f303 	mul.w	r3, r2, r3
 80011fe:	4a11      	ldr	r2, [pc, #68]	@ (8001244 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8001200:	fba2 2303 	umull	r2, r3, r2, r3
 8001204:	0c9b      	lsrs	r3, r3, #18
 8001206:	3301      	adds	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800120a:	e002      	b.n	8001212 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	3b01      	subs	r3, #1
 8001210:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001212:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001216:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d102      	bne.n	8001224 <HAL_PWREx_ControlVoltageScaling+0x98>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1f3      	bne.n	800120c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out  */
  if (timeout == 0U)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_PWREx_ControlVoltageScaling+0xa2>
  {
    return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e000      	b.n	8001230 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	46020800 	.word	0x46020800
 8001240:	20000000 	.word	0x20000000
 8001244:	431bde83 	.word	0x431bde83

08001248 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	@ 0x30
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t mask;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e3d9      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800125a:	4b90      	ldr	r3, [pc, #576]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	623b      	str	r3, [r7, #32]
  pllsrc = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001264:	4b8d      	ldr	r3, [pc, #564]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 8001266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d072      	beq.n	8001360 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL1 in these cases it is not allowed to be disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	2b08      	cmp	r3, #8
 800127e:	d005      	beq.n	800128c <HAL_RCC_OscConfig+0x44>
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	2b0c      	cmp	r3, #12
 8001284:	d12a      	bne.n	80012dc <HAL_RCC_OscConfig+0x94>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSE)))
 8001286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001288:	2b03      	cmp	r3, #3
 800128a:	d127      	bne.n	80012dc <HAL_RCC_OscConfig+0x94>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <HAL_RCC_OscConfig+0x50>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e3ba      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Otherwise, applying divider is allowed */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	2b08      	cmp	r3, #8
 800129c:	d15f      	bne.n	800135e <HAL_RCC_OscConfig+0x116>
        {
          assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

          /* Adjust the HSE division factor */
          __HAL_RCC_HSE_CONFIG(RCC_HSE_ON | RCC_OscInitStruct->HSEDiv);
 800129e:	4b7f      	ldr	r3, [pc, #508]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	4a7b      	ldr	r2, [pc, #492]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 80012ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b2:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSE value */
          SystemCoreClock = (HSE_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSEPRE)) >> RCC_CR_HSEPRE_Pos)));
 80012b4:	4b79      	ldr	r3, [pc, #484]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0d1b      	lsrs	r3, r3, #20
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	4a78      	ldr	r2, [pc, #480]	@ (80014a0 <HAL_RCC_OscConfig+0x258>)
 80012c0:	fa22 f303 	lsr.w	r3, r2, r3
 80012c4:	4a77      	ldr	r2, [pc, #476]	@ (80014a4 <HAL_RCC_OscConfig+0x25c>)
 80012c6:	6013      	str	r3, [r2, #0]

          /* Adapt Systick interrupt period */
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012c8:	4b77      	ldr	r3, [pc, #476]	@ (80014a8 <HAL_RCC_OscConfig+0x260>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fb6d 	bl	80009ac <HAL_InitTick>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d042      	beq.n	800135e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e398      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01f      	beq.n	8001324 <HAL_RCC_OscConfig+0xdc>
      {
        assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG((RCC_OscInitStruct->HSEState | RCC_OscInitStruct->HSEDiv));
 80012e4:	4b6d      	ldr	r3, [pc, #436]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6859      	ldr	r1, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	430b      	orrs	r3, r1
 80012f6:	4969      	ldr	r1, [pc, #420]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff fbe8 	bl	8000ad0 <HAL_GetTick>
 8001300:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0xce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fbe4 	bl	8000ad0 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	@ 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e37b      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001316:	4b61      	ldr	r3, [pc, #388]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0xbc>
 8001322:	e01d      	b.n	8001360 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001324:	4b5d      	ldr	r3, [pc, #372]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	495a      	ldr	r1, [pc, #360]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001336:	f7ff fbcb 	bl	8000ad0 <HAL_GetTick>
 800133a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800133e:	f7ff fbc7 	bl	8000ad0 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b64      	cmp	r3, #100	@ 0x64
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e35e      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001350:	4b52      	ldr	r3, [pc, #328]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f0      	bne.n	800133e <HAL_RCC_OscConfig+0xf6>
 800135c:	e000      	b.n	8001360 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800135e:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d05a      	beq.n	8001422 <HAL_RCC_OscConfig+0x1da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800136c:	6a3b      	ldr	r3, [r7, #32]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d005      	beq.n	800137e <HAL_RCC_OscConfig+0x136>
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	2b0c      	cmp	r3, #12
 8001376:	d113      	bne.n	80013a0 <HAL_RCC_OscConfig+0x158>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSI)))
 8001378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800137a:	2b02      	cmp	r3, #2
 800137c:	d110      	bne.n	80013a0 <HAL_RCC_OscConfig+0x158>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_OscConfig+0x142>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e341      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b44      	ldr	r3, [pc, #272]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	041b      	lsls	r3, r3, #16
 8001398:	4940      	ldr	r1, [pc, #256]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 800139a:	4313      	orrs	r3, r2
 800139c:	610b      	str	r3, [r1, #16]
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800139e:	e040      	b.n	8001422 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d023      	beq.n	80013f0 <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a8:	4b3c      	ldr	r3, [pc, #240]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a3b      	ldr	r2, [pc, #236]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 80013ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b4:	f7ff fb8c 	bl	8000ad0 <HAL_GetTick>
 80013b8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013bc:	f7ff fb88 	bl	8000ad0 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e31f      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ce:	4b33      	ldr	r3, [pc, #204]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f0      	beq.n	80013bc <HAL_RCC_OscConfig+0x174>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013da:	4b30      	ldr	r3, [pc, #192]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	041b      	lsls	r3, r3, #16
 80013e8:	492c      	ldr	r1, [pc, #176]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	610b      	str	r3, [r1, #16]
 80013ee:	e018      	b.n	8001422 <HAL_RCC_OscConfig+0x1da>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f0:	4b2a      	ldr	r3, [pc, #168]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a29      	ldr	r2, [pc, #164]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 80013f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff fb68 	bl	8000ad0 <HAL_GetTick>
 8001400:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x1ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001404:	f7ff fb64 	bl	8000ad0 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e2fb      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001416:	4b21      	ldr	r3, [pc, #132]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x1bc>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 80d2 	beq.w	80015d4 <HAL_RCC_OscConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001430:	2300      	movs	r3, #0
 8001432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Update LSI1 configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8001436:	4b19      	ldr	r3, [pc, #100]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 8001438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	d111      	bne.n	8001468 <HAL_RCC_OscConfig+0x220>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001444:	4b15      	ldr	r3, [pc, #84]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 8001446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800144a:	4a14      	ldr	r2, [pc, #80]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <HAL_RCC_OscConfig+0x254>)
 8001456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001462:	2301      	movs	r3, #1
 8001464:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001468:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <HAL_RCC_OscConfig+0x264>)
 800146a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d123      	bne.n	80014bc <HAL_RCC_OscConfig+0x274>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001474:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <HAL_RCC_OscConfig+0x264>)
 8001476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001478:	4a0c      	ldr	r2, [pc, #48]	@ (80014ac <HAL_RCC_OscConfig+0x264>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001480:	f7ff fb26 	bl	8000ad0 <HAL_GetTick>
 8001484:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001486:	e013      	b.n	80014b0 <HAL_RCC_OscConfig+0x268>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001488:	f7ff fb22 	bl	8000ad0 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d90c      	bls.n	80014b0 <HAL_RCC_OscConfig+0x268>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e2b9      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
 800149a:	bf00      	nop
 800149c:	46020c00 	.word	0x46020c00
 80014a0:	01e84800 	.word	0x01e84800
 80014a4:	20000000 	.word	0x20000000
 80014a8:	20000004 	.word	0x20000004
 80014ac:	46020800 	.word	0x46020800
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80014b0:	4ba4      	ldr	r3, [pc, #656]	@ (8001744 <HAL_RCC_OscConfig+0x4fc>)
 80014b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0e5      	beq.n	8001488 <HAL_RCC_OscConfig+0x240>
        }
      }
    }

    /* Get BDCR1 register value */
    tmpreg1 = RCC->BDCR1;
 80014bc:	4ba2      	ldr	r3, [pc, #648]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 80014be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014c2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Define mask depending on LSI presence */
    mask = RCC_BDCR1_LSI1ON;
 80014c4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80014c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_LSI2_SUPPORT)
    mask |= RCC_BDCR1_LSI2ON;
#endif /* RCC_LSI2_SUPPORT */

    /* Check the LSI1 State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d056      	beq.n	8001580 <HAL_RCC_OscConfig+0x338>
    {
      if ((RCC_OscInitStruct->LSIState & RCC_LSI1_ON) != 0x00u)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d030      	beq.n	8001540 <HAL_RCC_OscConfig+0x2f8>
      {
        /* Check LSI1 division factor */
        assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

        /* Check is LSIDiv is requested to be changed and LSI is already ON */
        if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_BDCR1_LSI1PREDIV)) && ((tmpreg1 & RCC_BDCR1_LSI1RDY) != 0x00u))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69da      	ldr	r2, [r3, #28]
 80014e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d020      	beq.n	800152e <HAL_RCC_OscConfig+0x2e6>
 80014ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d01b      	beq.n	800152e <HAL_RCC_OscConfig+0x2e6>
        {
          /* Disable LSI1 */
          tmpreg1 &= ~RCC_BDCR1_LSI1ON;
 80014f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80014fc:	62bb      	str	r3, [r7, #40]	@ 0x28
          RCC->BDCR1 = tmpreg1;
 80014fe:	4a92      	ldr	r2, [pc, #584]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 8001500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001502:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001506:	f7ff fae3 	bl	8000ad0 <HAL_GetTick>
 800150a:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is disabled */
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x2d8>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800150e:	f7ff fadf 	bl	8000ad0 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b14      	cmp	r3, #20
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x2d8>
            {
              /* LSI1 may be forced ON by IWDG */
              return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e276      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8001520:	4b89      	ldr	r3, [pc, #548]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 8001522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001526:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1ef      	bne.n	800150e <HAL_RCC_OscConfig+0x2c6>
          HAL_Delay(1);
#endif
        }

        /* Set LSI1 division factor */
        tmpreg1 &= ~RCC_BDCR1_LSI1PREDIV;
 800152e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001530:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001534:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800153c:	4313      	orrs	r3, r2
 800153e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Enable Concerned LSI */
      tmpreg1 |= RCC_OscInitStruct->LSIState;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001546:	4313      	orrs	r3, r2
 8001548:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 800154a:	4a7f      	ldr	r2, [pc, #508]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 800154c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800154e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001552:	f7ff fabd 	bl	8000ad0 <HAL_GetTick>
 8001556:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready : LSIRDY bit is position ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x324>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155a:	f7ff fab9 	bl	8000ad0 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b14      	cmp	r3, #20
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x324>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e250      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 800156c:	4b76      	ldr	r3, [pc, #472]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 800156e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4013      	ands	r3, r2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0ed      	beq.n	800155a <HAL_RCC_OscConfig+0x312>
 800157e:	e01d      	b.n	80015bc <HAL_RCC_OscConfig+0x374>
#endif
    }
    else
    {
      /* Disable the Internal Low Speed oscillator LSI1 and LSI2 is available */
      tmpreg1 &= ~mask;
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	43db      	mvns	r3, r3
 8001584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001586:	4013      	ands	r3, r2
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 800158a:	4a6f      	ldr	r2, [pc, #444]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 800158c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001592:	f7ff fa9d 	bl	8000ad0 <HAL_GetTick>
 8001596:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is disabled : LSIRDY bit position is ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x364>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159a:	f7ff fa99 	bl	8000ad0 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b14      	cmp	r3, #20
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x364>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e230      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 80015ac:	4b66      	ldr	r3, [pc, #408]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 80015ae:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4013      	ands	r3, r2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1ee      	bne.n	800159a <HAL_RCC_OscConfig+0x352>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d107      	bne.n	80015d4 <HAL_RCC_OscConfig+0x38c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c4:	4b60      	ldr	r3, [pc, #384]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 80015c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ca:	4a5f      	ldr	r2, [pc, #380]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 80015cc:	f023 0304 	bic.w	r3, r3, #4
 80015d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80e2 	beq.w	80017a6 <HAL_RCC_OscConfig+0x55e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 80015e8:	4b57      	ldr	r3, [pc, #348]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 80015ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d111      	bne.n	800161a <HAL_RCC_OscConfig+0x3d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b54      	ldr	r3, [pc, #336]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 80015f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015fc:	4a52      	ldr	r2, [pc, #328]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 80015fe:	f043 0304 	orr.w	r3, r3, #4
 8001602:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001606:	4b50      	ldr	r3, [pc, #320]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 8001608:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001614:	2301      	movs	r3, #1
 8001616:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800161a:	4b4a      	ldr	r3, [pc, #296]	@ (8001744 <HAL_RCC_OscConfig+0x4fc>)
 800161c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d118      	bne.n	8001658 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001626:	4b47      	ldr	r3, [pc, #284]	@ (8001744 <HAL_RCC_OscConfig+0x4fc>)
 8001628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162a:	4a46      	ldr	r2, [pc, #280]	@ (8001744 <HAL_RCC_OscConfig+0x4fc>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001632:	f7ff fa4d 	bl	8000ad0 <HAL_GetTick>
 8001636:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163a:	f7ff fa49 	bl	8000ad0 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e1e0      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800164c:	4b3d      	ldr	r3, [pc, #244]	@ (8001744 <HAL_RCC_OscConfig+0x4fc>)
 800164e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x3f2>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d051      	beq.n	8001704 <HAL_RCC_OscConfig+0x4bc>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_LSESYSEN);
 8001660:	4b39      	ldr	r3, [pc, #228]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 8001662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001666:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800166a:	62bb      	str	r3, [r7, #40]	@ 0x28
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001672:	4313      	orrs	r3, r2
 8001674:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8001676:	4a34      	ldr	r2, [pc, #208]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 8001678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800167a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167e:	f7ff fa27 	bl	8000ad0 <HAL_GetTick>
 8001682:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 8001684:	e00a      	b.n	800169c <HAL_RCC_OscConfig+0x454>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001686:	f7ff fa23 	bl	8000ad0 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001694:	4293      	cmp	r3, r2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x454>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e1b8      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 800169c:	4b2a      	ldr	r3, [pc, #168]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 800169e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0ed      	beq.n	8001686 <HAL_RCC_OscConfig+0x43e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR1_LSESYSEN) != 0U)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d01e      	beq.n	80016f4 <HAL_RCC_OscConfig+0x4ac>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x486>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7ff fa0a 	bl	8000ad0 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x486>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e19f      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 80016ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 80016d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0ed      	beq.n	80016b8 <HAL_RCC_OscConfig+0x470>
 80016dc:	e057      	b.n	800178e <HAL_RCC_OscConfig+0x546>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff f9f7 	bl	8000ad0 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e18c      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 80016f4:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 80016f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1ed      	bne.n	80016de <HAL_RCC_OscConfig+0x496>
 8001702:	e044      	b.n	800178e <HAL_RCC_OscConfig+0x546>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR1, (RCC_BDCR1_LSEON | RCC_BDCR1_LSESYSEN));
 8001704:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 8001706:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800170a:	4a0f      	ldr	r2, [pc, #60]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 800170c:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8001710:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR1, RCC_BDCR1_LSEBYP);
 8001714:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 8001716:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800171a:	4a0b      	ldr	r2, [pc, #44]	@ (8001748 <HAL_RCC_OscConfig+0x500>)
 800171c:	f023 0304 	bic.w	r3, r3, #4
 8001720:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001724:	f7ff f9d4 	bl	8000ad0 <HAL_GetTick>
 8001728:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 800172a:	e00f      	b.n	800174c <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172c:	f7ff f9d0 	bl	8000ad0 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d906      	bls.n	800174c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e165      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
 8001742:	bf00      	nop
 8001744:	46020800 	.word	0x46020800
 8001748:	46020c00 	.word	0x46020c00
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 800174c:	4b98      	ldr	r3, [pc, #608]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 800174e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1e8      	bne.n	800172c <HAL_RCC_OscConfig+0x4e4>
        }
      }

      if (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSEN) != 0U)
 800175a:	4b95      	ldr	r3, [pc, #596]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 800175c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001764:	2b00      	cmp	r3, #0
 8001766:	d012      	beq.n	800178e <HAL_RCC_OscConfig+0x546>
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff f9b1 	bl	8000ad0 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e146      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8001780:	4b8b      	ldr	r3, [pc, #556]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 8001782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001786:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1ed      	bne.n	800176a <HAL_RCC_OscConfig+0x522>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800178e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001796:	4b86      	ldr	r3, [pc, #536]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 8001798:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800179c:	4a84      	ldr	r2, [pc, #528]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 800179e:	f023 0304 	bic.w	r3, r3, #4
 80017a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if ((RCC_OscInitStruct->PLL1.PLLState) != RCC_PLL_NONE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 812e 	beq.w	8001a0c <HAL_RCC_OscConfig+0x7c4>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b0:	6a3b      	ldr	r3, [r7, #32]
 80017b2:	2b0c      	cmp	r3, #12
 80017b4:	f000 80ba 	beq.w	800192c <HAL_RCC_OscConfig+0x6e4>
    {
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_ON)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	f040 8093 	bne.w	80018e8 <HAL_RCC_OscConfig+0x6a0>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL1.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL1.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL1.PLLR));

        /* Disable the main PLL1. */
        tmpreg1 = (RCC->CR & ~RCC_CR_PLL1ON);
 80017c2:	4b7b      	ldr	r3, [pc, #492]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017ca:	62bb      	str	r3, [r7, #40]	@ 0x28
        RCC->CR = tmpreg1;
 80017cc:	4a78      	ldr	r2, [pc, #480]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 80017ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d2:	f7ff f97d 	bl	8000ad0 <HAL_GetTick>
 80017d6:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        do
        {
          tmpreg1 = RCC->CR;
 80017d8:	4b75      	ldr	r3, [pc, #468]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	62bb      	str	r3, [r7, #40]	@ 0x28
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017de:	f7ff f977 	bl	8000ad0 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e10e      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
          }
        } while ((tmpreg1 & RCC_CR_PLL1RDY) != 0U);
 80017f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1ee      	bne.n	80017d8 <HAL_RCC_OscConfig+0x590>

        /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
        if (RCC_OscInitStruct->PLL1.PLLSource == RCC_PLLSOURCE_HSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d108      	bne.n	8001814 <HAL_RCC_OscConfig+0x5cc>
        {
          /* Clock source is HSE or HSE/2 */
          pllsrc = HSE_VALUE >> ((tmpreg1 & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos);
 8001802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001804:	0d1b      	lsrs	r3, r3, #20
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	4a6a      	ldr	r2, [pc, #424]	@ (80019b4 <HAL_RCC_OscConfig+0x76c>)
 800180c:	fa22 f303 	lsr.w	r3, r2, r3
 8001810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001812:	e001      	b.n	8001818 <HAL_RCC_OscConfig+0x5d0>
        }
        else
        {
          /* Clock source is HSI */
          pllsrc = HSI_VALUE;
 8001814:	4b68      	ldr	r3, [pc, #416]	@ (80019b8 <HAL_RCC_OscConfig+0x770>)
 8001816:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Compute VCO input frequency depending on M divider */
        pllsrc = (pllsrc / RCC_OscInitStruct->PLL1.PLLM);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	62fb      	str	r3, [r7, #44]	@ 0x2c
        assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllsrc));

        if (pllsrc > PLL_INPUTRANGE0_FREQMAX)
 8001824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001826:	4a65      	ldr	r2, [pc, #404]	@ (80019bc <HAL_RCC_OscConfig+0x774>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d902      	bls.n	8001832 <HAL_RCC_OscConfig+0x5ea>
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE1;
 800182c:	230c      	movs	r3, #12
 800182e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001830:	e001      	b.n	8001836 <HAL_RCC_OscConfig+0x5ee>
        }
        else
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE0;
 8001832:	2300      	movs	r3, #0
 8001834:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Configure PLL1 source, PLLM divider, VCO input range and enable PLL1R output. Clear also FRACEN*/
        tmpreg2 = RCC->PLL1CFGR;
 8001836:	4b5e      	ldr	r3, [pc, #376]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 8001838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183a:	617b      	str	r3, [r7, #20]
        tmpreg2 &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1RGE | RCC_PLL1CFGR_PLL1FRACEN | RCC_PLL1CFGR_PLL1M);
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f423 63e3 	bic.w	r3, r3, #1816	@ 0x718
 8001842:	f023 0307 	bic.w	r3, r3, #7
 8001846:	617b      	str	r3, [r7, #20]
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800184c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800184e:	431a      	orrs	r2, r3
                    ((RCC_OscInitStruct->PLL1.PLLM - 1u) << RCC_PLL1CFGR_PLL1M_Pos) | RCC_PLL1CFGR_PLL1REN);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001854:	3b01      	subs	r3, #1
 8001856:	021b      	lsls	r3, r3, #8
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8001858:	431a      	orrs	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	4313      	orrs	r3, r2
 800185e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001862:	617b      	str	r3, [r7, #20]
        RCC->PLL1CFGR = tmpreg2;
 8001864:	4a52      	ldr	r2, [pc, #328]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLLN multiplication factor and PLLP, PLLQ, PLLR dividers */
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186e:	1e5a      	subs	r2, r3, #1
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001874:	3b01      	subs	r3, #1
 8001876:	025b      	lsls	r3, r3, #9
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8001878:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLQ - 1u) << RCC_PLL1DIVR_PLL1Q_Pos) |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800187e:	3b01      	subs	r3, #1
 8001880:	041b      	lsls	r3, r3, #16
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 8001882:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLR - 1u) << RCC_PLL1DIVR_PLL1R_Pos));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001888:	3b01      	subs	r3, #1
 800188a:	061b      	lsls	r3, r3, #24
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 800188c:	4313      	orrs	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
        RCC->PLL1DIVR = tmpreg2;
 8001890:	4a47      	ldr	r2, [pc, #284]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	6353      	str	r3, [r2, #52]	@ 0x34

        if (RCC_OscInitStruct->PLL1.PLLFractional != 0x00u)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00a      	beq.n	80018b4 <HAL_RCC_OscConfig+0x66c>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018a2:	4a43      	ldr	r2, [pc, #268]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	6393      	str	r3, [r2, #56]	@ 0x38

          /* Enable PLL1FRACEN */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 80018a8:	4b41      	ldr	r3, [pc, #260]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 80018aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ac:	4a40      	ldr	r2, [pc, #256]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 80018ae:	f043 0310 	orr.w	r3, r3, #16
 80018b2:	6293      	str	r3, [r2, #40]	@ 0x28
        }

        /* Enable the main PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80018b4:	4b3e      	ldr	r3, [pc, #248]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a3d      	ldr	r2, [pc, #244]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 80018ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff f906 	bl	8000ad0 <HAL_GetTick>
 80018c4:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x692>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c8:	f7ff f902 	bl	8000ad0 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e099      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80018da:	4b35      	ldr	r3, [pc, #212]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0x680>
 80018e6:	e091      	b.n	8001a0c <HAL_RCC_OscConfig+0x7c4>
        }
      }
      else
      {
        /* Disable the main PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80018e8:	4b31      	ldr	r3, [pc, #196]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a30      	ldr	r2, [pc, #192]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 80018ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff f8ec 	bl	8000ad0 <HAL_GetTick>
 80018f8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x6c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff f8e8 	bl	8000ad0 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x6c6>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e07f      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800190e:	4b28      	ldr	r3, [pc, #160]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x6b4>
          }
        }

        /* CLear the PLL1 source and disable outputs to save power when PLL1 is off */
        CLEAR_BIT(RCC->PLL1CFGR, (RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | \
 800191a:	4b25      	ldr	r3, [pc, #148]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 800191c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800191e:	4a24      	ldr	r2, [pc, #144]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 8001920:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001924:	f023 0303 	bic.w	r3, r3, #3
 8001928:	6293      	str	r3, [r2, #40]	@ 0x28
 800192a:	e06f      	b.n	8001a0c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL1 used as System clock source */
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d101      	bne.n	8001938 <HAL_RCC_OscConfig+0x6f0>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e06a      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        tmpreg1 = RCC->PLL1CFGR;
 8001938:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 800193a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800193c:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg2 = RCC->PLL1DIVR;
 800193e:	4b1c      	ldr	r3, [pc, #112]	@ (80019b0 <HAL_RCC_OscConfig+0x768>)
 8001940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001942:	617b      	str	r3, [r7, #20]

        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 8001944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001946:	f003 0203 	and.w	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194e:	429a      	cmp	r2, r3
 8001950:	d12b      	bne.n	80019aa <HAL_RCC_OscConfig+0x762>
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 8001952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	f003 0207 	and.w	r2, r3, #7
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195e:	3b01      	subs	r3, #1
        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d122      	bne.n	80019aa <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196e:	3b01      	subs	r3, #1
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d11a      	bne.n	80019aa <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	0a5b      	lsrs	r3, r3, #9
 8001978:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001980:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 8001982:	429a      	cmp	r2, r3
 8001984:	d111      	bne.n	80019aa <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	0c1b      	lsrs	r3, r3, #16
 800198a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001992:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d108      	bne.n	80019aa <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) != (RCC_OscInitStruct->PLL1.PLLR - 1u)))
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	0e1b      	lsrs	r3, r3, #24
 800199c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019a4:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d00a      	beq.n	80019c0 <HAL_RCC_OscConfig+0x778>
        {
          return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e02f      	b.n	8001a0e <HAL_RCC_OscConfig+0x7c6>
 80019ae:	bf00      	nop
 80019b0:	46020c00 	.word	0x46020c00
 80019b4:	01e84800 	.word	0x01e84800
 80019b8:	00f42400 	.word	0x00f42400
 80019bc:	007a1200 	.word	0x007a1200
        }
        else
        {
          /* Check if only fractional part needs to be updated  */
          tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 80019c0:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <HAL_RCC_OscConfig+0x7d0>)
 80019c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c4:	08db      	lsrs	r3, r3, #3
 80019c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80019ca:	62bb      	str	r3, [r7, #40]	@ 0x28

          if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d01a      	beq.n	8001a0c <HAL_RCC_OscConfig+0x7c4>
          {
            assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

            /* Disable PLL1FRACEN */
            __HAL_RCC_PLL1_FRACN_DISABLE();
 80019d6:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <HAL_RCC_OscConfig+0x7d0>)
 80019d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019da:	4a0f      	ldr	r2, [pc, #60]	@ (8001a18 <HAL_RCC_OscConfig+0x7d0>)
 80019dc:	f023 0310 	bic.w	r3, r3, #16
 80019e0:	6293      	str	r3, [r2, #40]	@ 0x28

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019e2:	f7ff f875 	bl	8000ad0 <HAL_GetTick>
 80019e6:	61f8      	str	r0, [r7, #28]

            /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
            while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80019e8:	bf00      	nop
 80019ea:	f7ff f871 	bl	8000ad0 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d0f9      	beq.n	80019ea <HAL_RCC_OscConfig+0x7a2>
            {
            }

            /* Configure PLL1 PLL1FRACN */
            __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019fa:	4a07      	ldr	r2, [pc, #28]	@ (8001a18 <HAL_RCC_OscConfig+0x7d0>)
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	6393      	str	r3, [r2, #56]	@ 0x38

            /* Enable PLL1FRACEN to latch new value. */
            __HAL_RCC_PLL1_FRACN_ENABLE();
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <HAL_RCC_OscConfig+0x7d0>)
 8001a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a04:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <HAL_RCC_OscConfig+0x7d0>)
 8001a06:	f043 0310 	orr.w	r3, r3, #16
 8001a0a:	6293      	str	r3, [r2, #40]	@ 0x28
          }
        }
      }
    }
  }
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3730      	adds	r7, #48	@ 0x30
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	46020c00 	.word	0x46020c00

08001a1c <HAL_RCC_ClockConfig>:
  *         HCLK5 prescaler is switched automatically by hardware, but configuration shall
  *         always be performed before setting new PLL1 source as Sysclk source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e115      	b.n	8001c5c <HAL_RCC_ClockConfig+0x240>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a30:	4b8c      	ldr	r3, [pc, #560]	@ (8001c64 <HAL_RCC_ClockConfig+0x248>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d910      	bls.n	8001a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b89      	ldr	r3, [pc, #548]	@ (8001c64 <HAL_RCC_ClockConfig+0x248>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 020f 	bic.w	r2, r3, #15
 8001a46:	4987      	ldr	r1, [pc, #540]	@ (8001c64 <HAL_RCC_ClockConfig+0x248>)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b85      	ldr	r3, [pc, #532]	@ (8001c64 <HAL_RCC_ClockConfig+0x248>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0fd      	b.n	8001c5c <HAL_RCC_ClockConfig+0x240>
  }

  /*-------------------------- HCLK5 Configuration --------------------------*/
  /* HCLK5 prescaler is switched automatically by hardware, but configuration shall
    always be performed before setting new PLL1 source as Sysclk source. */
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK5) == RCC_CLOCKTYPE_HCLK5)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0320 	and.w	r3, r3, #32
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00d      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x6c>
  {
    assert_param(IS_RCC_HCLK5_HSEHSI(RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
    assert_param(IS_RCC_HCLK5_PLL1(RCC_ClkInitStruct->AHB5_PLL1_CLKDivider));
    MODIFY_REG(RCC->CFGR4, (RCC_CFGR4_HDIV5 | RCC_CFGR4_HPRE5),
 8001a6c:	4b7e      	ldr	r3, [pc, #504]	@ (8001c68 <HAL_RCC_ClockConfig+0x24c>)
 8001a6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a72:	f023 0217 	bic.w	r2, r3, #23
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6999      	ldr	r1, [r3, #24]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	430b      	orrs	r3, r1
 8001a80:	4979      	ldr	r1, [pc, #484]	@ (8001c68 <HAL_RCC_ClockConfig+0x24c>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
               (RCC_ClkInitStruct->AHB5_PLL1_CLKDivider | RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d06f      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 8001a94:	4b74      	ldr	r3, [pc, #464]	@ (8001c68 <HAL_RCC_ClockConfig+0x24c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	617b      	str	r3, [r7, #20]

    /* PLL1 is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d118      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the PLL1 ready flag */
      if ((tmpreg1 & RCC_CR_PLL1RDY) == 0U)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0d5      	b.n	8001c5c <HAL_RCC_ClockConfig+0x240>
      }
      else
      {
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8001ab0:	4b6d      	ldr	r3, [pc, #436]	@ (8001c68 <HAL_RCC_ClockConfig+0x24c>)
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	f003 020c 	and.w	r2, r3, #12
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d01a      	beq.n	8001af8 <HAL_RCC_ClockConfig+0xdc>
        {
          /* Whatever is PLL frequency, use step prediv to reach maximum frequency. */
          /* Select pll1r to be prediv with 2-step divider when selected as Sysclk source */
          MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRESTEP, RCC_PLL1CFGR_PLL1RCLKPRE);
 8001ac2:	4b69      	ldr	r3, [pc, #420]	@ (8001c68 <HAL_RCC_ClockConfig+0x24c>)
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001aca:	4a67      	ldr	r2, [pc, #412]	@ (8001c68 <HAL_RCC_ClockConfig+0x24c>)
 8001acc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ad0:	6293      	str	r3, [r2, #40]	@ 0x28
 8001ad2:	e011      	b.n	8001af8 <HAL_RCC_ClockConfig+0xdc>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d106      	bne.n	8001aea <HAL_RCC_ClockConfig+0xce>
      {
        /* Check the HSE ready flag */
        if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d108      	bne.n	8001af8 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e0b8      	b.n	8001c5c <HAL_RCC_ClockConfig+0x240>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0b1      	b.n	8001c5c <HAL_RCC_ClockConfig+0x240>
        }
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001af8:	4b5b      	ldr	r3, [pc, #364]	@ (8001c68 <HAL_RCC_ClockConfig+0x24c>)
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	f023 0203 	bic.w	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4958      	ldr	r1, [pc, #352]	@ (8001c68 <HAL_RCC_ClockConfig+0x24c>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b0a:	f7fe ffe1 	bl	8000ad0 <HAL_GetTick>
 8001b0e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_ClockConfig+0x10c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b12:	f7fe ffdd 	bl	8000ad0 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e099      	b.n	8001c5c <HAL_RCC_ClockConfig+0x240>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8001b28:	4b4f      	ldr	r3, [pc, #316]	@ (8001c68 <HAL_RCC_ClockConfig+0x24c>)
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	f003 020c 	and.w	r2, r3, #12
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d1eb      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xf6>
      }
    }

    /* If PLL1rCLK is asked to be SYSCLK source, clear prediv. */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d118      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x158>
    {
      /* Set PLL1R prediv to not divided */
      CLEAR_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRE);
 8001b42:	4b49      	ldr	r3, [pc, #292]	@ (8001c68 <HAL_RCC_ClockConfig+0x24c>)
 8001b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b46:	4a48      	ldr	r2, [pc, #288]	@ (8001c68 <HAL_RCC_ClockConfig+0x24c>)
 8001b48:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001b4c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4e:	f7fe ffbf 	bl	8000ad0 <HAL_GetTick>
 8001b52:	60f8      	str	r0, [r7, #12]

      /* Wait until PLL1 not divided is ready */
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_ClockConfig+0x14c>
      {
        if ((HAL_GetTick() - tickstart) > PLL1_NDIV_TIMEOUT_VALUE)
 8001b56:	f7fe ffbb 	bl	8000ad0 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b0a      	cmp	r3, #10
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_ClockConfig+0x14c>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e079      	b.n	8001c5c <HAL_RCC_ClockConfig+0x240>
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8001b68:	4b3f      	ldr	r3, [pc, #252]	@ (8001c68 <HAL_RCC_ClockConfig+0x24c>)
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 8001b74:	4b3c      	ldr	r3, [pc, #240]	@ (8001c68 <HAL_RCC_ClockConfig+0x24c>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00a      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f023 0307 	bic.w	r3, r3, #7
 8001b90:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00a      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bb2:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x1ca>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001bd4:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8001be2:	2301      	movs	r3, #1
 8001be4:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x1d6>
  {
    RCC->CFGR2 = tmpreg1;
 8001bec:	4a1e      	ldr	r2, [pc, #120]	@ (8001c68 <HAL_RCC_ClockConfig+0x24c>)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK7 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK7) == RCC_CLOCKTYPE_PCLK7)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB7CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB7CLKDivider);
 8001bfe:	4a1a      	ldr	r2, [pc, #104]	@ (8001c68 <HAL_RCC_ClockConfig+0x24c>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c06:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <HAL_RCC_ClockConfig+0x248>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d210      	bcs.n	8001c36 <HAL_RCC_ClockConfig+0x21a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c14:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <HAL_RCC_ClockConfig+0x248>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 020f 	bic.w	r2, r3, #15
 8001c1c:	4911      	ldr	r1, [pc, #68]	@ (8001c64 <HAL_RCC_ClockConfig+0x248>)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c24:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <HAL_RCC_ClockConfig+0x248>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x21a>
    {
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e012      	b.n	8001c5c <HAL_RCC_ClockConfig+0x240>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001c36:	f000 f81f 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <HAL_RCC_ClockConfig+0x24c>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	4909      	ldr	r1, [pc, #36]	@ (8001c6c <HAL_RCC_ClockConfig+0x250>)
 8001c46:	5ccb      	ldrb	r3, [r1, r3]
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4c:	4a08      	ldr	r2, [pc, #32]	@ (8001c70 <HAL_RCC_ClockConfig+0x254>)
 8001c4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c50:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <HAL_RCC_ClockConfig+0x258>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fea9 	bl	80009ac <HAL_InitTick>
 8001c5a:	4603      	mov	r3, r0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40022000 	.word	0x40022000
 8001c68:	46020c00 	.word	0x46020c00
 8001c6c:	08002ef8 	.word	0x08002ef8
 8001c70:	20000000 	.word	0x20000000
 8001c74:	20000004 	.word	0x20000004

08001c78 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
  uint32_t sysclk;

  /* Get SYSCLK source */
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x48>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	607b      	str	r3, [r7, #4]

  if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d102      	bne.n	8001c94 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x4c>)
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	e00f      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d109      	bne.n	8001cae <HAL_RCC_GetSysClockFreq+0x36>
  {
    /* HSE used as system clock source. Check if HSE is divided by 2 */
    sysclk = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8001c9a:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x48>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	0d1b      	lsrs	r3, r3, #20
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	4a08      	ldr	r2, [pc, #32]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x50>)
 8001ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	e002      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else
  {
    /* PLL1 used as system clock source */
    sysclk = HAL_RCC_GetPLL1RFreq();
 8001cae:	f000 f80d 	bl	8001ccc <HAL_RCC_GetPLL1RFreq>
 8001cb2:	6078      	str	r0, [r7, #4]
  }

  return sysclk;
 8001cb4:	687b      	ldr	r3, [r7, #4]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	46020c00 	.word	0x46020c00
 8001cc4:	00f42400 	.word	0x00f42400
 8001cc8:	01e84800 	.word	0x01e84800

08001ccc <HAL_RCC_GetPLL1RFreq>:
/**
  * @brief  Return the PLL1R frequency.
  * @retval PLL1R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL1RFreq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL1R divider */
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <HAL_RCC_GetPLL1RFreq+0x34>)
 8001cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cd6:	0e1b      	lsrs	r3, r3, #24
 8001cd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cdc:	3301      	adds	r3, #1
 8001cde:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL1R one */
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 8001ce0:	f000 f810 	bl	8001d04 <RCC_PLL1_GetVCOOutputFreq>
 8001ce4:	eef0 7a40 	vmov.f32	s15, s0
 8001ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cec:	ee17 2a90 	vmov	r2, s15
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	46020c00 	.word	0x46020c00

08001d04 <RCC_PLL1_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL1 VCO output frequency
  * @retval Value of PLL1 VCO output frequency
  */
static float_t RCC_PLL1_GetVCOOutputFreq(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
  float_t pllm;
  float_t plln;
  float_t pllfracn;

  /* Get PLL1 DIVR register value */
  tmpreg1 = RCC->PLL1DIVR;
 8001d0a:	4b36      	ldr	r3, [pc, #216]	@ (8001de4 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 multiplication factor */
  tmp = (tmpreg1 & RCC_PLL1DIVR_PLL1N) + 1U;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d16:	3301      	adds	r3, #1
 8001d18:	617b      	str	r3, [r7, #20]
  plln = (float_t) tmp;
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	ee07 3a90 	vmov	s15, r3
 8001d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d24:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Get PLL1 CFGR register value */
  tmpreg1 = RCC->PLL1CFGR;
 8001d28:	4b2e      	ldr	r3, [pc, #184]	@ (8001de4 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 divider */
  tmp = ((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	3301      	adds	r3, #1
 8001d38:	617b      	str	r3, [r7, #20]
  pllm = (float_t) tmp;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	ee07 3a90 	vmov	s15, r3
 8001d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d44:	edc7 7a01 	vstr	s15, [r7, #4]

  /* Check if fractional part is enable */
  if ((tmpreg1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d006      	beq.n	8001d60 <RCC_PLL1_GetVCOOutputFreq+0x5c>
  {
    tmp = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 8001d52:	4b24      	ldr	r3, [pc, #144]	@ (8001de4 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8001d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d56:	08db      	lsrs	r3, r3, #3
 8001d58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	e001      	b.n	8001d64 <RCC_PLL1_GetVCOOutputFreq+0x60>
  }
  else
  {
    tmp = 0u;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  }
  pllfracn = (float_t)tmp;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d6e:	edc7 7a00 	vstr	s15, [r7]

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLL1CFGR_PLL1SRC)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d002      	beq.n	8001d82 <RCC_PLL1_GetVCOOutputFreq+0x7e>
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d003      	beq.n	8001d88 <RCC_PLL1_GetVCOOutputFreq+0x84>
 8001d80:	e013      	b.n	8001daa <RCC_PLL1_GetVCOOutputFreq+0xa6>
  {
    /* HSI used as PLL1 clock source */
    case RCC_PLLSOURCE_HSI:
      pllsrc = (float_t)HSI_VALUE;
 8001d82:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <RCC_PLL1_GetVCOOutputFreq+0xe4>)
 8001d84:	613b      	str	r3, [r7, #16]
      break;
 8001d86:	e014      	b.n	8001db2 <RCC_PLL1_GetVCOOutputFreq+0xae>

    /* HSE used as PLL1 clock source */
    case RCC_PLLSOURCE_HSE:
      tmp = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8001d88:	4b16      	ldr	r3, [pc, #88]	@ (8001de4 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0d1b      	lsrs	r3, r3, #20
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	4a16      	ldr	r2, [pc, #88]	@ (8001dec <RCC_PLL1_GetVCOOutputFreq+0xe8>)
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
 8001d98:	617b      	str	r3, [r7, #20]
      pllsrc = (float_t)tmp;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001da4:	edc7 7a04 	vstr	s15, [r7, #16]
      break;
 8001da8:	e003      	b.n	8001db2 <RCC_PLL1_GetVCOOutputFreq+0xae>

    default:
      pllsrc = (float_t)0;
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]
      break;
 8001db0:	bf00      	nop
  }

  /* Compute VCO output frequency */
  return ((pllsrc / pllm) * (plln + (pllfracn / (float_t)0x2000u)));
 8001db2:	edd7 6a04 	vldr	s13, [r7, #16]
 8001db6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dbe:	edd7 7a00 	vldr	s15, [r7]
 8001dc2:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8001df0 <RCC_PLL1_GetVCOOutputFreq+0xec>
 8001dc6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001dca:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dda:	371c      	adds	r7, #28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	46020c00 	.word	0x46020c00
 8001de8:	4b742400 	.word	0x4b742400
 8001dec:	01e84800 	.word	0x01e84800
 8001df0:	46000000 	.word	0x46000000

08001df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e049      	b.n	8001e9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7fe fc28 	bl	8000670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f000 fb64 	bl	8002500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e049      	b.n	8001f48 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d106      	bne.n	8001ece <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f841 	bl	8001f50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3304      	adds	r3, #4
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	f000 fb0d 	bl	8002500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d109      	bne.n	8001f88 <HAL_TIM_PWM_Start+0x24>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	bf14      	ite	ne
 8001f80:	2301      	movne	r3, #1
 8001f82:	2300      	moveq	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	e03c      	b.n	8002002 <HAL_TIM_PWM_Start+0x9e>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d109      	bne.n	8001fa2 <HAL_TIM_PWM_Start+0x3e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	bf14      	ite	ne
 8001f9a:	2301      	movne	r3, #1
 8001f9c:	2300      	moveq	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	e02f      	b.n	8002002 <HAL_TIM_PWM_Start+0x9e>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d109      	bne.n	8001fbc <HAL_TIM_PWM_Start+0x58>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	bf14      	ite	ne
 8001fb4:	2301      	movne	r3, #1
 8001fb6:	2300      	moveq	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	e022      	b.n	8002002 <HAL_TIM_PWM_Start+0x9e>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2b0c      	cmp	r3, #12
 8001fc0:	d109      	bne.n	8001fd6 <HAL_TIM_PWM_Start+0x72>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	bf14      	ite	ne
 8001fce:	2301      	movne	r3, #1
 8001fd0:	2300      	moveq	r3, #0
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	e015      	b.n	8002002 <HAL_TIM_PWM_Start+0x9e>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b10      	cmp	r3, #16
 8001fda:	d109      	bne.n	8001ff0 <HAL_TIM_PWM_Start+0x8c>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	bf14      	ite	ne
 8001fe8:	2301      	movne	r3, #1
 8001fea:	2300      	moveq	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	e008      	b.n	8002002 <HAL_TIM_PWM_Start+0x9e>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	bf14      	ite	ne
 8001ffc:	2301      	movne	r3, #1
 8001ffe:	2300      	moveq	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e07e      	b.n	8002108 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d104      	bne.n	800201a <HAL_TIM_PWM_Start+0xb6>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2202      	movs	r2, #2
 8002014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002018:	e023      	b.n	8002062 <HAL_TIM_PWM_Start+0xfe>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b04      	cmp	r3, #4
 800201e:	d104      	bne.n	800202a <HAL_TIM_PWM_Start+0xc6>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002028:	e01b      	b.n	8002062 <HAL_TIM_PWM_Start+0xfe>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b08      	cmp	r3, #8
 800202e:	d104      	bne.n	800203a <HAL_TIM_PWM_Start+0xd6>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002038:	e013      	b.n	8002062 <HAL_TIM_PWM_Start+0xfe>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b0c      	cmp	r3, #12
 800203e:	d104      	bne.n	800204a <HAL_TIM_PWM_Start+0xe6>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002048:	e00b      	b.n	8002062 <HAL_TIM_PWM_Start+0xfe>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b10      	cmp	r3, #16
 800204e:	d104      	bne.n	800205a <HAL_TIM_PWM_Start+0xf6>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002058:	e003      	b.n	8002062 <HAL_TIM_PWM_Start+0xfe>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2202      	movs	r2, #2
 800205e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2201      	movs	r2, #1
 8002068:	6839      	ldr	r1, [r7, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fdf8 	bl	8002c60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a26      	ldr	r2, [pc, #152]	@ (8002110 <HAL_TIM_PWM_Start+0x1ac>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d009      	beq.n	800208e <HAL_TIM_PWM_Start+0x12a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a25      	ldr	r2, [pc, #148]	@ (8002114 <HAL_TIM_PWM_Start+0x1b0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d004      	beq.n	800208e <HAL_TIM_PWM_Start+0x12a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a23      	ldr	r2, [pc, #140]	@ (8002118 <HAL_TIM_PWM_Start+0x1b4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d101      	bne.n	8002092 <HAL_TIM_PWM_Start+0x12e>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_TIM_PWM_Start+0x130>
 8002092:	2300      	movs	r3, #0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a18      	ldr	r2, [pc, #96]	@ (8002110 <HAL_TIM_PWM_Start+0x1ac>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d009      	beq.n	80020c6 <HAL_TIM_PWM_Start+0x162>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020ba:	d004      	beq.n	80020c6 <HAL_TIM_PWM_Start+0x162>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a16      	ldr	r2, [pc, #88]	@ (800211c <HAL_TIM_PWM_Start+0x1b8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d115      	bne.n	80020f2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	4b14      	ldr	r3, [pc, #80]	@ (8002120 <HAL_TIM_PWM_Start+0x1bc>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b06      	cmp	r3, #6
 80020d6:	d015      	beq.n	8002104 <HAL_TIM_PWM_Start+0x1a0>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020de:	d011      	beq.n	8002104 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f0:	e008      	b.n	8002104 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	e000      	b.n	8002106 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002104:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40012c00 	.word	0x40012c00
 8002114:	40014400 	.word	0x40014400
 8002118:	40014800 	.word	0x40014800
 800211c:	40000400 	.word	0x40000400
 8002120:	00010007 	.word	0x00010007

08002124 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800213e:	2302      	movs	r3, #2
 8002140:	e0ff      	b.n	8002342 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b14      	cmp	r3, #20
 800214e:	f200 80f0 	bhi.w	8002332 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002152:	a201      	add	r2, pc, #4	@ (adr r2, 8002158 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002158:	080021ad 	.word	0x080021ad
 800215c:	08002333 	.word	0x08002333
 8002160:	08002333 	.word	0x08002333
 8002164:	08002333 	.word	0x08002333
 8002168:	080021ed 	.word	0x080021ed
 800216c:	08002333 	.word	0x08002333
 8002170:	08002333 	.word	0x08002333
 8002174:	08002333 	.word	0x08002333
 8002178:	0800222f 	.word	0x0800222f
 800217c:	08002333 	.word	0x08002333
 8002180:	08002333 	.word	0x08002333
 8002184:	08002333 	.word	0x08002333
 8002188:	0800226f 	.word	0x0800226f
 800218c:	08002333 	.word	0x08002333
 8002190:	08002333 	.word	0x08002333
 8002194:	08002333 	.word	0x08002333
 8002198:	080022b1 	.word	0x080022b1
 800219c:	08002333 	.word	0x08002333
 80021a0:	08002333 	.word	0x08002333
 80021a4:	08002333 	.word	0x08002333
 80021a8:	080022f1 	.word	0x080022f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fa1e 	bl	80025f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0208 	orr.w	r2, r2, #8
 80021c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0204 	bic.w	r2, r2, #4
 80021d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6999      	ldr	r1, [r3, #24]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	619a      	str	r2, [r3, #24]
      break;
 80021ea:	e0a5      	b.n	8002338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fa7a 	bl	80026ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6999      	ldr	r1, [r3, #24]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	021a      	lsls	r2, r3, #8
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	619a      	str	r2, [r3, #24]
      break;
 800222c:	e084      	b.n	8002338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68b9      	ldr	r1, [r7, #8]
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fad3 	bl	80027e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0208 	orr.w	r2, r2, #8
 8002248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69da      	ldr	r2, [r3, #28]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0204 	bic.w	r2, r2, #4
 8002258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69d9      	ldr	r1, [r3, #28]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	61da      	str	r2, [r3, #28]
      break;
 800226c:	e064      	b.n	8002338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68b9      	ldr	r1, [r7, #8]
 8002274:	4618      	mov	r0, r3
 8002276:	f000 fb2b 	bl	80028d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69da      	ldr	r2, [r3, #28]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	69d9      	ldr	r1, [r3, #28]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	021a      	lsls	r2, r3, #8
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	61da      	str	r2, [r3, #28]
      break;
 80022ae:	e043      	b.n	8002338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 fb84 	bl	80029c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0208 	orr.w	r2, r2, #8
 80022ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0204 	bic.w	r2, r2, #4
 80022da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80022ee:	e023      	b.n	8002338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fbbc 	bl	8002a74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800230a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800231a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	021a      	lsls	r2, r3, #8
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002330:	e002      	b.n	8002338 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	75fb      	strb	r3, [r7, #23]
      break;
 8002336:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002340:	7dfb      	ldrb	r3, [r7, #23]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop

0800234c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_TIM_ConfigClockSource+0x1c>
 8002364:	2302      	movs	r3, #2
 8002366:	e0c2      	b.n	80024ee <HAL_TIM_ConfigClockSource+0x1a2>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002386:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800238a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002392:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a55      	ldr	r2, [pc, #340]	@ (80024f8 <HAL_TIM_ConfigClockSource+0x1ac>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	f000 808d 	beq.w	80024c2 <HAL_TIM_ConfigClockSource+0x176>
 80023a8:	4a53      	ldr	r2, [pc, #332]	@ (80024f8 <HAL_TIM_ConfigClockSource+0x1ac>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	f200 8092 	bhi.w	80024d4 <HAL_TIM_ConfigClockSource+0x188>
 80023b0:	4a52      	ldr	r2, [pc, #328]	@ (80024fc <HAL_TIM_ConfigClockSource+0x1b0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	f000 8085 	beq.w	80024c2 <HAL_TIM_ConfigClockSource+0x176>
 80023b8:	4a50      	ldr	r2, [pc, #320]	@ (80024fc <HAL_TIM_ConfigClockSource+0x1b0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	f200 808a 	bhi.w	80024d4 <HAL_TIM_ConfigClockSource+0x188>
 80023c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023c4:	d03a      	beq.n	800243c <HAL_TIM_ConfigClockSource+0xf0>
 80023c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023ca:	f200 8083 	bhi.w	80024d4 <HAL_TIM_ConfigClockSource+0x188>
 80023ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023d2:	f000 8082 	beq.w	80024da <HAL_TIM_ConfigClockSource+0x18e>
 80023d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023da:	d87b      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x188>
 80023dc:	2b70      	cmp	r3, #112	@ 0x70
 80023de:	d016      	beq.n	800240e <HAL_TIM_ConfigClockSource+0xc2>
 80023e0:	2b70      	cmp	r3, #112	@ 0x70
 80023e2:	d877      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x188>
 80023e4:	2b60      	cmp	r3, #96	@ 0x60
 80023e6:	d04c      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x136>
 80023e8:	2b60      	cmp	r3, #96	@ 0x60
 80023ea:	d873      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x188>
 80023ec:	2b50      	cmp	r3, #80	@ 0x50
 80023ee:	d038      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0x116>
 80023f0:	2b50      	cmp	r3, #80	@ 0x50
 80023f2:	d86f      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x188>
 80023f4:	2b40      	cmp	r3, #64	@ 0x40
 80023f6:	d054      	beq.n	80024a2 <HAL_TIM_ConfigClockSource+0x156>
 80023f8:	2b40      	cmp	r3, #64	@ 0x40
 80023fa:	d86b      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x188>
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d060      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0x176>
 8002400:	2b20      	cmp	r3, #32
 8002402:	d867      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x188>
 8002404:	2b00      	cmp	r3, #0
 8002406:	d05c      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0x176>
 8002408:	2b10      	cmp	r3, #16
 800240a:	d05a      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0x176>
 800240c:	e062      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x188>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800241e:	f000 fbff 	bl	8002c20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002430:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	609a      	str	r2, [r3, #8]
      break;
 800243a:	e04f      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x190>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800244c:	f000 fbe8 	bl	8002c20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800245e:	609a      	str	r2, [r3, #8]
      break;
 8002460:	e03c      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x190>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800246e:	461a      	mov	r2, r3
 8002470:	f000 fb5a 	bl	8002b28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2150      	movs	r1, #80	@ 0x50
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fbb3 	bl	8002be6 <TIM_ITRx_SetConfig>
      break;
 8002480:	e02c      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x190>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800248e:	461a      	mov	r2, r3
 8002490:	f000 fb79 	bl	8002b86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2160      	movs	r1, #96	@ 0x60
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fba3 	bl	8002be6 <TIM_ITRx_SetConfig>
      break;
 80024a0:	e01c      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x190>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ae:	461a      	mov	r2, r3
 80024b0:	f000 fb3a 	bl	8002b28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2140      	movs	r1, #64	@ 0x40
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 fb93 	bl	8002be6 <TIM_ITRx_SetConfig>
      break;
 80024c0:	e00c      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x190>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4619      	mov	r1, r3
 80024cc:	4610      	mov	r0, r2
 80024ce:	f000 fb8a 	bl	8002be6 <TIM_ITRx_SetConfig>
      break;
 80024d2:	e003      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x190>
    }

    default:
      status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
      break;
 80024d8:	e000      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x190>
      break;
 80024da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	00100040 	.word	0x00100040
 80024fc:	00100030 	.word	0x00100030

08002500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a34      	ldr	r2, [pc, #208]	@ (80025e4 <TIM_Base_SetConfig+0xe4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d007      	beq.n	8002528 <TIM_Base_SetConfig+0x28>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800251e:	d003      	beq.n	8002528 <TIM_Base_SetConfig+0x28>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a31      	ldr	r2, [pc, #196]	@ (80025e8 <TIM_Base_SetConfig+0xe8>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d108      	bne.n	800253a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800252e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a29      	ldr	r2, [pc, #164]	@ (80025e4 <TIM_Base_SetConfig+0xe4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00f      	beq.n	8002562 <TIM_Base_SetConfig+0x62>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002548:	d00b      	beq.n	8002562 <TIM_Base_SetConfig+0x62>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a26      	ldr	r2, [pc, #152]	@ (80025e8 <TIM_Base_SetConfig+0xe8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d007      	beq.n	8002562 <TIM_Base_SetConfig+0x62>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a25      	ldr	r2, [pc, #148]	@ (80025ec <TIM_Base_SetConfig+0xec>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d003      	beq.n	8002562 <TIM_Base_SetConfig+0x62>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a24      	ldr	r2, [pc, #144]	@ (80025f0 <TIM_Base_SetConfig+0xf0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d108      	bne.n	8002574 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	4313      	orrs	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a12      	ldr	r2, [pc, #72]	@ (80025e4 <TIM_Base_SetConfig+0xe4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d007      	beq.n	80025b0 <TIM_Base_SetConfig+0xb0>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a12      	ldr	r2, [pc, #72]	@ (80025ec <TIM_Base_SetConfig+0xec>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d003      	beq.n	80025b0 <TIM_Base_SetConfig+0xb0>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a11      	ldr	r2, [pc, #68]	@ (80025f0 <TIM_Base_SetConfig+0xf0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d103      	bne.n	80025b8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d105      	bne.n	80025d6 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f023 0201 	bic.w	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	611a      	str	r2, [r3, #16]
  }
}
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40012c00 	.word	0x40012c00
 80025e8:	40000400 	.word	0x40000400
 80025ec:	40014400 	.word	0x40014400
 80025f0:	40014800 	.word	0x40014800

080025f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f023 0201 	bic.w	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f023 0303 	bic.w	r3, r3, #3
 800262e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f023 0302 	bic.w	r3, r3, #2
 8002640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4313      	orrs	r3, r2
 800264a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a24      	ldr	r2, [pc, #144]	@ (80026e0 <TIM_OC1_SetConfig+0xec>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d007      	beq.n	8002664 <TIM_OC1_SetConfig+0x70>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a23      	ldr	r2, [pc, #140]	@ (80026e4 <TIM_OC1_SetConfig+0xf0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d003      	beq.n	8002664 <TIM_OC1_SetConfig+0x70>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a22      	ldr	r2, [pc, #136]	@ (80026e8 <TIM_OC1_SetConfig+0xf4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d10c      	bne.n	800267e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f023 0308 	bic.w	r3, r3, #8
 800266a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f023 0304 	bic.w	r3, r3, #4
 800267c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a17      	ldr	r2, [pc, #92]	@ (80026e0 <TIM_OC1_SetConfig+0xec>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <TIM_OC1_SetConfig+0xa2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a16      	ldr	r2, [pc, #88]	@ (80026e4 <TIM_OC1_SetConfig+0xf0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d003      	beq.n	8002696 <TIM_OC1_SetConfig+0xa2>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a15      	ldr	r2, [pc, #84]	@ (80026e8 <TIM_OC1_SetConfig+0xf4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d111      	bne.n	80026ba <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800269c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	621a      	str	r2, [r3, #32]
}
 80026d4:	bf00      	nop
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40012c00 	.word	0x40012c00
 80026e4:	40014400 	.word	0x40014400
 80026e8:	40014800 	.word	0x40014800

080026ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f023 0210 	bic.w	r2, r3, #16
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800271a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800271e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	021b      	lsls	r3, r3, #8
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f023 0320 	bic.w	r3, r3, #32
 800273a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a22      	ldr	r2, [pc, #136]	@ (80027d4 <TIM_OC2_SetConfig+0xe8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d10d      	bne.n	800276c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800276a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a19      	ldr	r2, [pc, #100]	@ (80027d4 <TIM_OC2_SetConfig+0xe8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d007      	beq.n	8002784 <TIM_OC2_SetConfig+0x98>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a18      	ldr	r2, [pc, #96]	@ (80027d8 <TIM_OC2_SetConfig+0xec>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d003      	beq.n	8002784 <TIM_OC2_SetConfig+0x98>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a17      	ldr	r2, [pc, #92]	@ (80027dc <TIM_OC2_SetConfig+0xf0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d113      	bne.n	80027ac <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800278a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002792:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	621a      	str	r2, [r3, #32]
}
 80027c6:	bf00      	nop
 80027c8:	371c      	adds	r7, #28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40014400 	.word	0x40014400
 80027dc:	40014800 	.word	0x40014800

080027e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800280e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800282c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	4313      	orrs	r3, r2
 8002838:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a21      	ldr	r2, [pc, #132]	@ (80028c4 <TIM_OC3_SetConfig+0xe4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d10d      	bne.n	800285e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002848:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	4313      	orrs	r3, r2
 8002854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800285c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a18      	ldr	r2, [pc, #96]	@ (80028c4 <TIM_OC3_SetConfig+0xe4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d007      	beq.n	8002876 <TIM_OC3_SetConfig+0x96>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a17      	ldr	r2, [pc, #92]	@ (80028c8 <TIM_OC3_SetConfig+0xe8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d003      	beq.n	8002876 <TIM_OC3_SetConfig+0x96>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a16      	ldr	r2, [pc, #88]	@ (80028cc <TIM_OC3_SetConfig+0xec>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d113      	bne.n	800289e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800287c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	621a      	str	r2, [r3, #32]
}
 80028b8:	bf00      	nop
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	40012c00 	.word	0x40012c00
 80028c8:	40014400 	.word	0x40014400
 80028cc:	40014800 	.word	0x40014800

080028d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800290a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800291e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	031b      	lsls	r3, r3, #12
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a22      	ldr	r2, [pc, #136]	@ (80029b8 <TIM_OC4_SetConfig+0xe8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d10d      	bne.n	8002950 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800293a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	031b      	lsls	r3, r3, #12
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800294e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a19      	ldr	r2, [pc, #100]	@ (80029b8 <TIM_OC4_SetConfig+0xe8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d007      	beq.n	8002968 <TIM_OC4_SetConfig+0x98>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a18      	ldr	r2, [pc, #96]	@ (80029bc <TIM_OC4_SetConfig+0xec>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d003      	beq.n	8002968 <TIM_OC4_SetConfig+0x98>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a17      	ldr	r2, [pc, #92]	@ (80029c0 <TIM_OC4_SetConfig+0xf0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d113      	bne.n	8002990 <TIM_OC4_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800296e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002976:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	019b      	lsls	r3, r3, #6
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	019b      	lsls	r3, r3, #6
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	621a      	str	r2, [r3, #32]
}
 80029aa:	bf00      	nop
 80029ac:	371c      	adds	r7, #28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40012c00 	.word	0x40012c00
 80029bc:	40014400 	.word	0x40014400
 80029c0:	40014800 	.word	0x40014800

080029c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002a08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	041b      	lsls	r3, r3, #16
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a13      	ldr	r2, [pc, #76]	@ (8002a68 <TIM_OC5_SetConfig+0xa4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <TIM_OC5_SetConfig+0x6a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a12      	ldr	r2, [pc, #72]	@ (8002a6c <TIM_OC5_SetConfig+0xa8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d003      	beq.n	8002a2e <TIM_OC5_SetConfig+0x6a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a11      	ldr	r2, [pc, #68]	@ (8002a70 <TIM_OC5_SetConfig+0xac>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d109      	bne.n	8002a42 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	621a      	str	r2, [r3, #32]
}
 8002a5c:	bf00      	nop
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	40012c00 	.word	0x40012c00
 8002a6c:	40014400 	.word	0x40014400
 8002a70:	40014800 	.word	0x40014800

08002a74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002aba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	051b      	lsls	r3, r3, #20
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a14      	ldr	r2, [pc, #80]	@ (8002b1c <TIM_OC6_SetConfig+0xa8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d007      	beq.n	8002ae0 <TIM_OC6_SetConfig+0x6c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a13      	ldr	r2, [pc, #76]	@ (8002b20 <TIM_OC6_SetConfig+0xac>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <TIM_OC6_SetConfig+0x6c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a12      	ldr	r2, [pc, #72]	@ (8002b24 <TIM_OC6_SetConfig+0xb0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d109      	bne.n	8002af4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	029b      	lsls	r3, r3, #10
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	621a      	str	r2, [r3, #32]
}
 8002b0e:	bf00      	nop
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40012c00 	.word	0x40012c00
 8002b20:	40014400 	.word	0x40014400
 8002b24:	40014800 	.word	0x40014800

08002b28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	f023 0201 	bic.w	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f023 030a 	bic.w	r3, r3, #10
 8002b64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	621a      	str	r2, [r3, #32]
}
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b087      	sub	sp, #28
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f023 0210 	bic.w	r2, r3, #16
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	031b      	lsls	r3, r3, #12
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002bc2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	621a      	str	r2, [r3, #32]
}
 8002bda:	bf00      	nop
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002bfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f043 0307 	orr.w	r3, r3, #7
 8002c0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	609a      	str	r2, [r3, #8]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	021a      	lsls	r2, r3, #8
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	609a      	str	r2, [r3, #8]
}
 8002c54:	bf00      	nop
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	2201      	movs	r2, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a1a      	ldr	r2, [r3, #32]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	43db      	mvns	r3, r3
 8002c82:	401a      	ands	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a1a      	ldr	r2, [r3, #32]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	fa01 f303 	lsl.w	r3, r1, r3
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	621a      	str	r2, [r3, #32]
}
 8002c9e:	bf00      	nop
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e051      	b.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a22      	ldr	r2, [pc, #136]	@ (8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d108      	bne.n	8002d00 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002cf4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a14      	ldr	r2, [pc, #80]	@ (8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d009      	beq.n	8002d3c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d30:	d004      	beq.n	8002d3c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a10      	ldr	r2, [pc, #64]	@ (8002d78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d10c      	bne.n	8002d56 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40012c00 	.word	0x40012c00
 8002d78:	40000400 	.word	0x40000400

08002d7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e06e      	b.n	8002e76 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	041b      	lsls	r3, r3, #16
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a17      	ldr	r2, [pc, #92]	@ (8002e84 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d11c      	bne.n	8002e64 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e34:	051b      	lsls	r3, r3, #20
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40012c00 	.word	0x40012c00

08002e88 <memset>:
 8002e88:	4402      	add	r2, r0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d100      	bne.n	8002e92 <memset+0xa>
 8002e90:	4770      	bx	lr
 8002e92:	f803 1b01 	strb.w	r1, [r3], #1
 8002e96:	e7f9      	b.n	8002e8c <memset+0x4>

08002e98 <__libc_init_array>:
 8002e98:	b570      	push	{r4, r5, r6, lr}
 8002e9a:	4d0d      	ldr	r5, [pc, #52]	@ (8002ed0 <__libc_init_array+0x38>)
 8002e9c:	2600      	movs	r6, #0
 8002e9e:	4c0d      	ldr	r4, [pc, #52]	@ (8002ed4 <__libc_init_array+0x3c>)
 8002ea0:	1b64      	subs	r4, r4, r5
 8002ea2:	10a4      	asrs	r4, r4, #2
 8002ea4:	42a6      	cmp	r6, r4
 8002ea6:	d109      	bne.n	8002ebc <__libc_init_array+0x24>
 8002ea8:	4d0b      	ldr	r5, [pc, #44]	@ (8002ed8 <__libc_init_array+0x40>)
 8002eaa:	2600      	movs	r6, #0
 8002eac:	4c0b      	ldr	r4, [pc, #44]	@ (8002edc <__libc_init_array+0x44>)
 8002eae:	f000 f817 	bl	8002ee0 <_init>
 8002eb2:	1b64      	subs	r4, r4, r5
 8002eb4:	10a4      	asrs	r4, r4, #2
 8002eb6:	42a6      	cmp	r6, r4
 8002eb8:	d105      	bne.n	8002ec6 <__libc_init_array+0x2e>
 8002eba:	bd70      	pop	{r4, r5, r6, pc}
 8002ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec0:	3601      	adds	r6, #1
 8002ec2:	4798      	blx	r3
 8002ec4:	e7ee      	b.n	8002ea4 <__libc_init_array+0xc>
 8002ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eca:	3601      	adds	r6, #1
 8002ecc:	4798      	blx	r3
 8002ece:	e7f2      	b.n	8002eb6 <__libc_init_array+0x1e>
 8002ed0:	08002f00 	.word	0x08002f00
 8002ed4:	08002f00 	.word	0x08002f00
 8002ed8:	08002f00 	.word	0x08002f00
 8002edc:	08002f04 	.word	0x08002f04

08002ee0 <_init>:
 8002ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee2:	bf00      	nop
 8002ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee6:	bc08      	pop	{r3}
 8002ee8:	469e      	mov	lr, r3
 8002eea:	4770      	bx	lr

08002eec <_fini>:
 8002eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eee:	bf00      	nop
 8002ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ef2:	bc08      	pop	{r3}
 8002ef4:	469e      	mov	lr, r3
 8002ef6:	4770      	bx	lr
