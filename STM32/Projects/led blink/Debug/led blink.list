
led blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000015c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cfc  0800015c  0800015c  0000115c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002e58  08002e58  00003e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ec0  08002ec0  0000403c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ec0  08002ec0  00003ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ec8  08002ec8  0000403c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ec8  08002ec8  00003ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ecc  08002ecc  00003ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08002ed0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000003c  08002f0c  0000403c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002f0c  00004124  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca10  00000000  00000000  00004072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bdf  00000000  00000000  00010a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00012668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000782  00000000  00000000  00013040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020900  00000000  00000000  000137c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d229  00000000  00000000  000340c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccb8b  00000000  00000000  000412eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010de76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b0  00000000  00000000  0010debc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  0011066c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800015c <__do_global_dtors_aux>:
 800015c:	b510      	push	{r4, lr}
 800015e:	4c05      	ldr	r4, [pc, #20]	@ (8000174 <__do_global_dtors_aux+0x18>)
 8000160:	7823      	ldrb	r3, [r4, #0]
 8000162:	b933      	cbnz	r3, 8000172 <__do_global_dtors_aux+0x16>
 8000164:	4b04      	ldr	r3, [pc, #16]	@ (8000178 <__do_global_dtors_aux+0x1c>)
 8000166:	b113      	cbz	r3, 800016e <__do_global_dtors_aux+0x12>
 8000168:	4804      	ldr	r0, [pc, #16]	@ (800017c <__do_global_dtors_aux+0x20>)
 800016a:	f3af 8000 	nop.w
 800016e:	2301      	movs	r3, #1
 8000170:	7023      	strb	r3, [r4, #0]
 8000172:	bd10      	pop	{r4, pc}
 8000174:	2000003c 	.word	0x2000003c
 8000178:	00000000 	.word	0x00000000
 800017c:	08002e40 	.word	0x08002e40

08000180 <frame_dummy>:
 8000180:	b508      	push	{r3, lr}
 8000182:	4b03      	ldr	r3, [pc, #12]	@ (8000190 <frame_dummy+0x10>)
 8000184:	b11b      	cbz	r3, 800018e <frame_dummy+0xe>
 8000186:	4903      	ldr	r1, [pc, #12]	@ (8000194 <frame_dummy+0x14>)
 8000188:	4803      	ldr	r0, [pc, #12]	@ (8000198 <frame_dummy+0x18>)
 800018a:	f3af 8000 	nop.w
 800018e:	bd08      	pop	{r3, pc}
 8000190:	00000000 	.word	0x00000000
 8000194:	20000040 	.word	0x20000040
 8000198:	08002e40 	.word	0x08002e40

0800019c <__aeabi_uldivmod>:
 800019c:	b953      	cbnz	r3, 80001b4 <__aeabi_uldivmod+0x18>
 800019e:	b94a      	cbnz	r2, 80001b4 <__aeabi_uldivmod+0x18>
 80001a0:	2900      	cmp	r1, #0
 80001a2:	bf08      	it	eq
 80001a4:	2800      	cmpeq	r0, #0
 80001a6:	bf1c      	itt	ne
 80001a8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ac:	f04f 30ff 	movne.w	r0, #4294967295
 80001b0:	f000 b97e 	b.w	80004b0 <__aeabi_idiv0>
 80001b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001bc:	f000 f806 	bl	80001cc <__udivmoddi4>
 80001c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c8:	b004      	add	sp, #16
 80001ca:	4770      	bx	lr

080001cc <__udivmoddi4>:
 80001cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001d0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80001d2:	460c      	mov	r4, r1
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d14d      	bne.n	8000274 <__udivmoddi4+0xa8>
 80001d8:	428a      	cmp	r2, r1
 80001da:	460f      	mov	r7, r1
 80001dc:	4684      	mov	ip, r0
 80001de:	4696      	mov	lr, r2
 80001e0:	fab2 f382 	clz	r3, r2
 80001e4:	d960      	bls.n	80002a8 <__udivmoddi4+0xdc>
 80001e6:	b14b      	cbz	r3, 80001fc <__udivmoddi4+0x30>
 80001e8:	fa02 fe03 	lsl.w	lr, r2, r3
 80001ec:	f1c3 0220 	rsb	r2, r3, #32
 80001f0:	409f      	lsls	r7, r3
 80001f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80001f6:	fa20 f202 	lsr.w	r2, r0, r2
 80001fa:	4317      	orrs	r7, r2
 80001fc:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000200:	fa1f f48e 	uxth.w	r4, lr
 8000204:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000208:	fbb7 f1f6 	udiv	r1, r7, r6
 800020c:	fb06 7711 	mls	r7, r6, r1, r7
 8000210:	fb01 f004 	mul.w	r0, r1, r4
 8000214:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000218:	4290      	cmp	r0, r2
 800021a:	d908      	bls.n	800022e <__udivmoddi4+0x62>
 800021c:	eb1e 0202 	adds.w	r2, lr, r2
 8000220:	f101 37ff 	add.w	r7, r1, #4294967295
 8000224:	d202      	bcs.n	800022c <__udivmoddi4+0x60>
 8000226:	4290      	cmp	r0, r2
 8000228:	f200 812d 	bhi.w	8000486 <__udivmoddi4+0x2ba>
 800022c:	4639      	mov	r1, r7
 800022e:	1a12      	subs	r2, r2, r0
 8000230:	fa1f fc8c 	uxth.w	ip, ip
 8000234:	fbb2 f0f6 	udiv	r0, r2, r6
 8000238:	fb06 2210 	mls	r2, r6, r0, r2
 800023c:	fb00 f404 	mul.w	r4, r0, r4
 8000240:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000244:	4564      	cmp	r4, ip
 8000246:	d908      	bls.n	800025a <__udivmoddi4+0x8e>
 8000248:	eb1e 0c0c 	adds.w	ip, lr, ip
 800024c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000250:	d202      	bcs.n	8000258 <__udivmoddi4+0x8c>
 8000252:	4564      	cmp	r4, ip
 8000254:	f200 811a 	bhi.w	800048c <__udivmoddi4+0x2c0>
 8000258:	4610      	mov	r0, r2
 800025a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800025e:	ebac 0c04 	sub.w	ip, ip, r4
 8000262:	2100      	movs	r1, #0
 8000264:	b125      	cbz	r5, 8000270 <__udivmoddi4+0xa4>
 8000266:	fa2c f303 	lsr.w	r3, ip, r3
 800026a:	2200      	movs	r2, #0
 800026c:	e9c5 3200 	strd	r3, r2, [r5]
 8000270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000274:	428b      	cmp	r3, r1
 8000276:	d905      	bls.n	8000284 <__udivmoddi4+0xb8>
 8000278:	b10d      	cbz	r5, 800027e <__udivmoddi4+0xb2>
 800027a:	e9c5 0100 	strd	r0, r1, [r5]
 800027e:	2100      	movs	r1, #0
 8000280:	4608      	mov	r0, r1
 8000282:	e7f5      	b.n	8000270 <__udivmoddi4+0xa4>
 8000284:	fab3 f183 	clz	r1, r3
 8000288:	2900      	cmp	r1, #0
 800028a:	d14d      	bne.n	8000328 <__udivmoddi4+0x15c>
 800028c:	42a3      	cmp	r3, r4
 800028e:	f0c0 80f2 	bcc.w	8000476 <__udivmoddi4+0x2aa>
 8000292:	4290      	cmp	r0, r2
 8000294:	f080 80ef 	bcs.w	8000476 <__udivmoddi4+0x2aa>
 8000298:	4606      	mov	r6, r0
 800029a:	4623      	mov	r3, r4
 800029c:	4608      	mov	r0, r1
 800029e:	2d00      	cmp	r5, #0
 80002a0:	d0e6      	beq.n	8000270 <__udivmoddi4+0xa4>
 80002a2:	e9c5 6300 	strd	r6, r3, [r5]
 80002a6:	e7e3      	b.n	8000270 <__udivmoddi4+0xa4>
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	f040 80a2 	bne.w	80003f2 <__udivmoddi4+0x226>
 80002ae:	1a8a      	subs	r2, r1, r2
 80002b0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80002b4:	fa1f f68e 	uxth.w	r6, lr
 80002b8:	2101      	movs	r1, #1
 80002ba:	fbb2 f4f7 	udiv	r4, r2, r7
 80002be:	fb07 2014 	mls	r0, r7, r4, r2
 80002c2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002ca:	fb06 f004 	mul.w	r0, r6, r4
 80002ce:	4290      	cmp	r0, r2
 80002d0:	d90f      	bls.n	80002f2 <__udivmoddi4+0x126>
 80002d2:	eb1e 0202 	adds.w	r2, lr, r2
 80002d6:	f104 38ff 	add.w	r8, r4, #4294967295
 80002da:	bf2c      	ite	cs
 80002dc:	f04f 0901 	movcs.w	r9, #1
 80002e0:	f04f 0900 	movcc.w	r9, #0
 80002e4:	4290      	cmp	r0, r2
 80002e6:	d903      	bls.n	80002f0 <__udivmoddi4+0x124>
 80002e8:	f1b9 0f00 	cmp.w	r9, #0
 80002ec:	f000 80c8 	beq.w	8000480 <__udivmoddi4+0x2b4>
 80002f0:	4644      	mov	r4, r8
 80002f2:	1a12      	subs	r2, r2, r0
 80002f4:	fa1f fc8c 	uxth.w	ip, ip
 80002f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000300:	fb00 f606 	mul.w	r6, r0, r6
 8000304:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000308:	4566      	cmp	r6, ip
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x152>
 800030c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000310:	f100 32ff 	add.w	r2, r0, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x150>
 8000316:	4566      	cmp	r6, ip
 8000318:	f200 80bb 	bhi.w	8000492 <__udivmoddi4+0x2c6>
 800031c:	4610      	mov	r0, r2
 800031e:	ebac 0c06 	sub.w	ip, ip, r6
 8000322:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000326:	e79d      	b.n	8000264 <__udivmoddi4+0x98>
 8000328:	f1c1 0620 	rsb	r6, r1, #32
 800032c:	408b      	lsls	r3, r1
 800032e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000332:	fa22 f706 	lsr.w	r7, r2, r6
 8000336:	fa20 fc06 	lsr.w	ip, r0, r6
 800033a:	40f4      	lsrs	r4, r6
 800033c:	408a      	lsls	r2, r1
 800033e:	431f      	orrs	r7, r3
 8000340:	ea4e 030c 	orr.w	r3, lr, ip
 8000344:	fa00 fe01 	lsl.w	lr, r0, r1
 8000348:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000350:	fa1f fc87 	uxth.w	ip, r7
 8000354:	fbb4 f0f8 	udiv	r0, r4, r8
 8000358:	fb08 4410 	mls	r4, r8, r0, r4
 800035c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000360:	fb00 f90c 	mul.w	r9, r0, ip
 8000364:	45a1      	cmp	r9, r4
 8000366:	d90e      	bls.n	8000386 <__udivmoddi4+0x1ba>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 3aff 	add.w	sl, r0, #4294967295
 800036e:	bf2c      	ite	cs
 8000370:	f04f 0b01 	movcs.w	fp, #1
 8000374:	f04f 0b00 	movcc.w	fp, #0
 8000378:	45a1      	cmp	r9, r4
 800037a:	d903      	bls.n	8000384 <__udivmoddi4+0x1b8>
 800037c:	f1bb 0f00 	cmp.w	fp, #0
 8000380:	f000 8093 	beq.w	80004aa <__udivmoddi4+0x2de>
 8000384:	4650      	mov	r0, sl
 8000386:	eba4 0409 	sub.w	r4, r4, r9
 800038a:	fa1f f983 	uxth.w	r9, r3
 800038e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000392:	fb08 4413 	mls	r4, r8, r3, r4
 8000396:	fb03 fc0c 	mul.w	ip, r3, ip
 800039a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039e:	45a4      	cmp	ip, r4
 80003a0:	d906      	bls.n	80003b0 <__udivmoddi4+0x1e4>
 80003a2:	193c      	adds	r4, r7, r4
 80003a4:	f103 38ff 	add.w	r8, r3, #4294967295
 80003a8:	d201      	bcs.n	80003ae <__udivmoddi4+0x1e2>
 80003aa:	45a4      	cmp	ip, r4
 80003ac:	d87a      	bhi.n	80004a4 <__udivmoddi4+0x2d8>
 80003ae:	4643      	mov	r3, r8
 80003b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003b4:	eba4 040c 	sub.w	r4, r4, ip
 80003b8:	fba0 9802 	umull	r9, r8, r0, r2
 80003bc:	4544      	cmp	r4, r8
 80003be:	46cc      	mov	ip, r9
 80003c0:	4643      	mov	r3, r8
 80003c2:	d302      	bcc.n	80003ca <__udivmoddi4+0x1fe>
 80003c4:	d106      	bne.n	80003d4 <__udivmoddi4+0x208>
 80003c6:	45ce      	cmp	lr, r9
 80003c8:	d204      	bcs.n	80003d4 <__udivmoddi4+0x208>
 80003ca:	3801      	subs	r0, #1
 80003cc:	ebb9 0c02 	subs.w	ip, r9, r2
 80003d0:	eb68 0307 	sbc.w	r3, r8, r7
 80003d4:	b15d      	cbz	r5, 80003ee <__udivmoddi4+0x222>
 80003d6:	ebbe 020c 	subs.w	r2, lr, ip
 80003da:	eb64 0403 	sbc.w	r4, r4, r3
 80003de:	fa04 f606 	lsl.w	r6, r4, r6
 80003e2:	fa22 f301 	lsr.w	r3, r2, r1
 80003e6:	40cc      	lsrs	r4, r1
 80003e8:	431e      	orrs	r6, r3
 80003ea:	e9c5 6400 	strd	r6, r4, [r5]
 80003ee:	2100      	movs	r1, #0
 80003f0:	e73e      	b.n	8000270 <__udivmoddi4+0xa4>
 80003f2:	fa02 fe03 	lsl.w	lr, r2, r3
 80003f6:	f1c3 0120 	rsb	r1, r3, #32
 80003fa:	fa04 f203 	lsl.w	r2, r4, r3
 80003fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000408:	fa20 f101 	lsr.w	r1, r0, r1
 800040c:	fa1f f68e 	uxth.w	r6, lr
 8000410:	fbb4 f0f7 	udiv	r0, r4, r7
 8000414:	430a      	orrs	r2, r1
 8000416:	fb07 4410 	mls	r4, r7, r0, r4
 800041a:	0c11      	lsrs	r1, r2, #16
 800041c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000420:	fb00 f406 	mul.w	r4, r0, r6
 8000424:	428c      	cmp	r4, r1
 8000426:	d90e      	bls.n	8000446 <__udivmoddi4+0x27a>
 8000428:	eb1e 0101 	adds.w	r1, lr, r1
 800042c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000430:	bf2c      	ite	cs
 8000432:	f04f 0901 	movcs.w	r9, #1
 8000436:	f04f 0900 	movcc.w	r9, #0
 800043a:	428c      	cmp	r4, r1
 800043c:	d902      	bls.n	8000444 <__udivmoddi4+0x278>
 800043e:	f1b9 0f00 	cmp.w	r9, #0
 8000442:	d02c      	beq.n	800049e <__udivmoddi4+0x2d2>
 8000444:	4640      	mov	r0, r8
 8000446:	1b09      	subs	r1, r1, r4
 8000448:	b292      	uxth	r2, r2
 800044a:	fbb1 f4f7 	udiv	r4, r1, r7
 800044e:	fb07 1114 	mls	r1, r7, r4, r1
 8000452:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000456:	fb04 f106 	mul.w	r1, r4, r6
 800045a:	4291      	cmp	r1, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x2a2>
 800045e:	eb1e 0202 	adds.w	r2, lr, r2
 8000462:	f104 38ff 	add.w	r8, r4, #4294967295
 8000466:	d201      	bcs.n	800046c <__udivmoddi4+0x2a0>
 8000468:	4291      	cmp	r1, r2
 800046a:	d815      	bhi.n	8000498 <__udivmoddi4+0x2cc>
 800046c:	4644      	mov	r4, r8
 800046e:	1a52      	subs	r2, r2, r1
 8000470:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000474:	e721      	b.n	80002ba <__udivmoddi4+0xee>
 8000476:	1a86      	subs	r6, r0, r2
 8000478:	eb64 0303 	sbc.w	r3, r4, r3
 800047c:	2001      	movs	r0, #1
 800047e:	e70e      	b.n	800029e <__udivmoddi4+0xd2>
 8000480:	3c02      	subs	r4, #2
 8000482:	4472      	add	r2, lr
 8000484:	e735      	b.n	80002f2 <__udivmoddi4+0x126>
 8000486:	3902      	subs	r1, #2
 8000488:	4472      	add	r2, lr
 800048a:	e6d0      	b.n	800022e <__udivmoddi4+0x62>
 800048c:	44f4      	add	ip, lr
 800048e:	3802      	subs	r0, #2
 8000490:	e6e3      	b.n	800025a <__udivmoddi4+0x8e>
 8000492:	44f4      	add	ip, lr
 8000494:	3802      	subs	r0, #2
 8000496:	e742      	b.n	800031e <__udivmoddi4+0x152>
 8000498:	3c02      	subs	r4, #2
 800049a:	4472      	add	r2, lr
 800049c:	e7e7      	b.n	800046e <__udivmoddi4+0x2a2>
 800049e:	3802      	subs	r0, #2
 80004a0:	4471      	add	r1, lr
 80004a2:	e7d0      	b.n	8000446 <__udivmoddi4+0x27a>
 80004a4:	3b02      	subs	r3, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	e782      	b.n	80003b0 <__udivmoddi4+0x1e4>
 80004aa:	3802      	subs	r0, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	e76a      	b.n	8000386 <__udivmoddi4+0x1ba>

080004b0 <__aeabi_idiv0>:
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop

080004b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b8:	f000 fc72 	bl	8000da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004bc:	f000 f868 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c0:	f000 f8d2 	bl	8000668 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80004c4:	f000 f8bc 	bl	8000640 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80004c8:	2000      	movs	r0, #0
 80004ca:	f000 fa47 	bl	800095c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80004ce:	2001      	movs	r0, #1
 80004d0:	f000 fa44 	bl	800095c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80004d4:	2002      	movs	r0, #2
 80004d6:	f000 fa41 	bl	800095c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(B1, BUTTON_MODE_EXTI);
 80004da:	2101      	movs	r1, #1
 80004dc:	2000      	movs	r0, #0
 80004de:	f000 faa3 	bl	8000a28 <BSP_PB_Init>
  BSP_PB_Init(B2, BUTTON_MODE_EXTI);
 80004e2:	2101      	movs	r1, #1
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fa9f 	bl	8000a28 <BSP_PB_Init>
  BSP_PB_Init(B3, BUTTON_MODE_EXTI);
 80004ea:	2101      	movs	r1, #1
 80004ec:	2002      	movs	r0, #2
 80004ee:	f000 fa9b 	bl	8000a28 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80004f2:	4b24      	ldr	r3, [pc, #144]	@ (8000584 <main+0xd0>)
 80004f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004f8:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80004fa:	4b22      	ldr	r3, [pc, #136]	@ (8000584 <main+0xd0>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000500:	4b20      	ldr	r3, [pc, #128]	@ (8000584 <main+0xd0>)
 8000502:	2200      	movs	r2, #0
 8000504:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000506:	4b1f      	ldr	r3, [pc, #124]	@ (8000584 <main+0xd0>)
 8000508:	2200      	movs	r2, #0
 800050a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800050c:	4b1d      	ldr	r3, [pc, #116]	@ (8000584 <main+0xd0>)
 800050e:	2200      	movs	r2, #0
 8000510:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000512:	491c      	ldr	r1, [pc, #112]	@ (8000584 <main+0xd0>)
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fb65 	bl	8000be4 <BSP_COM_Init>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <main+0x70>
  {
    Error_Handler();
 8000520:	f000 f8cc 	bl	80006bc <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  if(HAL_GPIO_ReadPin(B1_GPIO_PORT, B1_PIN)==GPIO_PIN_RESET){
 8000524:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000528:	4817      	ldr	r0, [pc, #92]	@ (8000588 <main+0xd4>)
 800052a:	f001 f805 	bl	8001538 <HAL_GPIO_ReadPin>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d107      	bne.n	8000544 <main+0x90>

		HAL_Delay(250);
 8000534:	20fa      	movs	r0, #250	@ 0xfa
 8000536:	f000 fcf1 	bl	8000f1c <HAL_Delay>
	  	HAL_GPIO_TogglePin(LD1_GPIO_PORT, LD1_PIN);
 800053a:	2110      	movs	r1, #16
 800053c:	4813      	ldr	r0, [pc, #76]	@ (800058c <main+0xd8>)
 800053e:	f001 f82b 	bl	8001598 <HAL_GPIO_TogglePin>
 8000542:	e7ef      	b.n	8000524 <main+0x70>
	  }
	  else if(HAL_GPIO_ReadPin(B2_GPIO_PORT, B2_PIN)==GPIO_PIN_RESET){
 8000544:	2140      	movs	r1, #64	@ 0x40
 8000546:	4811      	ldr	r0, [pc, #68]	@ (800058c <main+0xd8>)
 8000548:	f000 fff6 	bl	8001538 <HAL_GPIO_ReadPin>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d108      	bne.n	8000564 <main+0xb0>

	  		HAL_Delay(250);
 8000552:	20fa      	movs	r0, #250	@ 0xfa
 8000554:	f000 fce2 	bl	8000f1c <HAL_Delay>
	  	  	HAL_GPIO_TogglePin(LD2_GPIO_PORT, LD2_PIN);
 8000558:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800055c:	480b      	ldr	r0, [pc, #44]	@ (800058c <main+0xd8>)
 800055e:	f001 f81b 	bl	8001598 <HAL_GPIO_TogglePin>
 8000562:	e7df      	b.n	8000524 <main+0x70>
	  	  }
	  else if(HAL_GPIO_ReadPin(B3_GPIO_PORT, B3_PIN)==GPIO_PIN_RESET){
 8000564:	2180      	movs	r1, #128	@ 0x80
 8000566:	4809      	ldr	r0, [pc, #36]	@ (800058c <main+0xd8>)
 8000568:	f000 ffe6 	bl	8001538 <HAL_GPIO_ReadPin>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d1d8      	bne.n	8000524 <main+0x70>

	  	  		HAL_Delay(250);
 8000572:	20fa      	movs	r0, #250	@ 0xfa
 8000574:	f000 fcd2 	bl	8000f1c <HAL_Delay>
	  	  	  	HAL_GPIO_TogglePin(LD3_GPIO_PORT, LD3_PIN);
 8000578:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800057c:	4803      	ldr	r0, [pc, #12]	@ (800058c <main+0xd8>)
 800057e:	f001 f80b 	bl	8001598 <HAL_GPIO_TogglePin>
	  if(HAL_GPIO_ReadPin(B1_GPIO_PORT, B1_PIN)==GPIO_PIN_RESET){
 8000582:	e7cf      	b.n	8000524 <main+0x70>
 8000584:	20000058 	.word	0x20000058
 8000588:	42020800 	.word	0x42020800
 800058c:	42020400 	.word	0x42020400

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b098      	sub	sp, #96	@ 0x60
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2240      	movs	r2, #64	@ 0x40
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 fc21 	bl	8002de6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	463b      	mov	r3, r7
 80005a6:	2220      	movs	r2, #32
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fc1b 	bl	8002de6 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005b0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80005b4:	f001 f876 	bl	80016a4 <HAL_PWREx_ControlVoltageScaling>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80005be:	f000 f87d 	bl	80006bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c2:	2302      	movs	r3, #2
 80005c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL1.PLLM = 1;
 80005d8:	2301      	movs	r3, #1
 80005da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL1.PLLN = 8;
 80005dc:	2308      	movs	r3, #8
 80005de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL1.PLLP = 2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL1.PLLQ = 2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLR = 2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0320 	add.w	r3, r7, #32
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 f8b3 	bl	8001760 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000600:	f000 f85c 	bl	80006bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	233f      	movs	r3, #63	@ 0x3f
 8000606:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK7|RCC_CLOCKTYPE_HCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2303      	movs	r3, #3
 800060a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB7CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHB5_PLL1_CLKDivider = RCC_SYSCLK_PLL1_DIV2;
 800061c:	2304      	movs	r3, #4
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHB5_HSEHSI_CLKDivider = RCC_SYSCLK_HSEHSI_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	2101      	movs	r1, #1
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fc83 	bl	8001f34 <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000634:	f000 f842 	bl	80006bc <Error_Handler>
  }
}
 8000638:	bf00      	nop
 800063a:	3760      	adds	r7, #96	@ 0x60
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000644:	2000      	movs	r0, #0
 8000646:	f000 fffd 	bl	8001644 <HAL_ICACHE_ConfigAssociativityMode>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000650:	f000 f834 	bl	80006bc <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000654:	f001 f816 	bl	8001684 <HAL_ICACHE_Enable>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800065e:	f000 f82d 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <MX_GPIO_Init+0x50>)
 8000670:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000674:	4a10      	ldr	r2, [pc, #64]	@ (80006b8 <MX_GPIO_Init+0x50>)
 8000676:	f043 0304 	orr.w	r3, r3, #4
 800067a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800067e:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <MX_GPIO_Init+0x50>)
 8000680:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <MX_GPIO_Init+0x50>)
 800068e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000692:	4a09      	ldr	r2, [pc, #36]	@ (80006b8 <MX_GPIO_Init+0x50>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800069c:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <MX_GPIO_Init+0x50>)
 800069e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	46020c00 	.word	0x46020c00

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <Error_Handler+0x8>

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <HAL_MspInit+0x30>)
 80006d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80006d4:	4a08      	ldr	r2, [pc, #32]	@ (80006f8 <HAL_MspInit+0x30>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80006de:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <HAL_MspInit+0x30>)
 80006e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	46020c00 	.word	0x46020c00

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <NMI_Handler+0x4>

08000704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <HardFault_Handler+0x4>

0800070c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <MemManage_Handler+0x4>

08000714 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <UsageFault_Handler+0x4>

08000724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000752:	f000 fbc3 	bl	8000edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}

0800075a <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_PIN);
 800075e:	2040      	movs	r0, #64	@ 0x40
 8000760:	f000 ff34 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}

08000768 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_PIN);
 800076c:	2080      	movs	r0, #128	@ 0x80
 800076e:	f000 ff2d 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}

08000776 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_PIN);
 800077a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800077e:	f000 ff25 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  __IO uint32_t tmpreg;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <SystemInit+0x20>)
 800078e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000792:	4a05      	ldr	r2, [pc, #20]	@ (80007a8 <SystemInit+0x20>)
 8000794:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000798:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  CLEAR_BIT(ADC4->CR, ADC_CR_ADVREGEN);

  /* Disable ADC kernel clock */
  CLEAR_BIT(RCC->AHB4ENR, RCC_AHB4ENR_ADC4EN);
#endif
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	@ 0x24
 80007b0:	af00      	add	r7, sp, #0
  uint32_t plln;
  float_t fracn;
  float_t pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 80007b2:	4b4f      	ldr	r3, [pc, #316]	@ (80008f0 <SystemCoreClockUpdate+0x144>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	f003 030c 	and.w	r3, r3, #12
 80007ba:	2b08      	cmp	r3, #8
 80007bc:	d002      	beq.n	80007c4 <SystemCoreClockUpdate+0x18>
 80007be:	2b0c      	cmp	r3, #12
 80007c0:	d00b      	beq.n	80007da <SystemCoreClockUpdate+0x2e>
 80007c2:	e07d      	b.n	80008c0 <SystemCoreClockUpdate+0x114>
  {
    case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
      SystemCoreClock = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 80007c4:	4b4a      	ldr	r3, [pc, #296]	@ (80008f0 <SystemCoreClockUpdate+0x144>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	0d1b      	lsrs	r3, r3, #20
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	4a49      	ldr	r2, [pc, #292]	@ (80008f4 <SystemCoreClockUpdate+0x148>)
 80007d0:	fa22 f303 	lsr.w	r3, r2, r3
 80007d4:	4a48      	ldr	r2, [pc, #288]	@ (80008f8 <SystemCoreClockUpdate+0x14c>)
 80007d6:	6013      	str	r3, [r2, #0]
      break;
 80007d8:	e076      	b.n	80008c8 <SystemCoreClockUpdate+0x11c>

    case (RCC_CFGR1_SWS_0 | RCC_CFGR1_SWS_1):  /* PLL1 used as system clock source */
      /* PLL_VCO = (PLLsource / PLLM) * PLLN * FractionnalPart
          SYSCLK = PLL_VCO / PLLR */
      /* Get PLL1 CFGR and DIVR register values */
      tmp1 = RCC->PLL1CFGR;
 80007da:	4b45      	ldr	r3, [pc, #276]	@ (80008f0 <SystemCoreClockUpdate+0x144>)
 80007dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007de:	61fb      	str	r3, [r7, #28]
      tmp2 = RCC->PLL1DIVR;
 80007e0:	4b43      	ldr	r3, [pc, #268]	@ (80008f0 <SystemCoreClockUpdate+0x144>)
 80007e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007e4:	617b      	str	r3, [r7, #20]

      /* Retrieve PLL1 multiplication factor and divider */
      pllm = ((tmp1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	3301      	adds	r3, #1
 80007f0:	613b      	str	r3, [r7, #16]
      plln = (tmp2 & RCC_PLL1DIVR_PLL1N) + 1U;
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80007f8:	3301      	adds	r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
      pllr = ((tmp2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	0e1b      	lsrs	r3, r3, #24
 8000800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000804:	3301      	adds	r3, #1
 8000806:	60bb      	str	r3, [r7, #8]

      /* Check if fractional part is enable */
      if ((tmp1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	f003 0310 	and.w	r3, r3, #16
 800080e:	2b00      	cmp	r3, #0
 8000810:	d00b      	beq.n	800082a <SystemCoreClockUpdate+0x7e>
      {
        fracn = (float_t)((uint32_t)((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8000812:	4b37      	ldr	r3, [pc, #220]	@ (80008f0 <SystemCoreClockUpdate+0x144>)
 8000814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800081c:	ee07 3a90 	vmov	s15, r3
 8000820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000824:	edc7 7a06 	vstr	s15, [r7, #24]
 8000828:	e002      	b.n	8000830 <SystemCoreClockUpdate+0x84>
      }
      else
      {
        fracn = (float_t)0U;
 800082a:	f04f 0300 	mov.w	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
      }

      /* determine PLL source */
      pllsource = (tmp1 & RCC_PLL1CFGR_PLL1SRC);
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	f003 0303 	and.w	r3, r3, #3
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b02      	cmp	r3, #2
 800083c:	d003      	beq.n	8000846 <SystemCoreClockUpdate+0x9a>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2b03      	cmp	r3, #3
 8000842:	d003      	beq.n	800084c <SystemCoreClockUpdate+0xa0>
 8000844:	e00c      	b.n	8000860 <SystemCoreClockUpdate+0xb4>
      switch (pllsource)
      {
        /* HSI used as PLL1 clock source */
        case RCC_PLL1CFGR_PLL1SRC_1:
          tmp1 = HSI_VALUE;
 8000846:	4b2d      	ldr	r3, [pc, #180]	@ (80008fc <SystemCoreClockUpdate+0x150>)
 8000848:	61fb      	str	r3, [r7, #28]
          break;
 800084a:	e00c      	b.n	8000866 <SystemCoreClockUpdate+0xba>

        /* HSE used as PLL1 clock source */
        case (RCC_PLL1CFGR_PLL1SRC_0 | RCC_PLL1CFGR_PLL1SRC_1):
          tmp1 = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 800084c:	4b28      	ldr	r3, [pc, #160]	@ (80008f0 <SystemCoreClockUpdate+0x144>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	0d1b      	lsrs	r3, r3, #20
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	4a27      	ldr	r2, [pc, #156]	@ (80008f4 <SystemCoreClockUpdate+0x148>)
 8000858:	fa22 f303 	lsr.w	r3, r2, r3
 800085c:	61fb      	str	r3, [r7, #28]
          break;
 800085e:	e002      	b.n	8000866 <SystemCoreClockUpdate+0xba>

        default:
          tmp1 = 0U;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
          break;
 8000864:	bf00      	nop
      }

      /* Compute VCO output frequency */
      pllvco = ((float_t) tmp1 / (float_t)pllm) * (((float_t)plln + (float_t)(fracn / (float_t)0x2000U)));
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	ee07 3a90 	vmov	s15, r3
 800086c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	ee07 3a90 	vmov	s15, r3
 8000876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800087a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	ee07 3a90 	vmov	s15, r3
 8000884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000888:	ed97 6a06 	vldr	s12, [r7, #24]
 800088c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8000900 <SystemCoreClockUpdate+0x154>
 8000890:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800089c:	edc7 7a00 	vstr	s15, [r7]
      SystemCoreClock = (uint32_t)((float_t)(pllvco / (float_t)pllr));
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	ee07 3a90 	vmov	s15, r3
 80008a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008aa:	edd7 6a00 	vldr	s13, [r7]
 80008ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008b6:	ee17 2a90 	vmov	r2, s15
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <SystemCoreClockUpdate+0x14c>)
 80008bc:	601a      	str	r2, [r3, #0]
      break;
 80008be:	e003      	b.n	80008c8 <SystemCoreClockUpdate+0x11c>

    case 0x00u:  /* HSI used as system clock source */
    default:
      SystemCoreClock = HSI_VALUE;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <SystemCoreClockUpdate+0x14c>)
 80008c2:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <SystemCoreClockUpdate+0x150>)
 80008c4:	601a      	str	r2, [r3, #0]
      break;
 80008c6:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp1 = AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)];
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <SystemCoreClockUpdate+0x144>)
 80008ca:	6a1b      	ldr	r3, [r3, #32]
 80008cc:	f003 0307 	and.w	r3, r3, #7
 80008d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000904 <SystemCoreClockUpdate+0x158>)
 80008d2:	5cd3      	ldrb	r3, [r2, r3]
 80008d4:	61fb      	str	r3, [r7, #28]

  /* HCLK clock frequency */
  SystemCoreClock >>= tmp1;
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <SystemCoreClockUpdate+0x14c>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	fa22 f303 	lsr.w	r3, r2, r3
 80008e0:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <SystemCoreClockUpdate+0x14c>)
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	bf00      	nop
 80008e6:	3724      	adds	r7, #36	@ 0x24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	46020c00 	.word	0x46020c00
 80008f4:	01e84800 	.word	0x01e84800
 80008f8:	20000000 	.word	0x20000000
 80008fc:	00f42400 	.word	0x00f42400
 8000900:	46000000 	.word	0x46000000
 8000904:	08002e98 	.word	0x08002e98

08000908 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000908:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000940 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800090c:	f7ff ff3c 	bl	8000788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000910:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000912:	e003      	b.n	800091c <LoopCopyDataInit>

08000914 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000914:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000916:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000918:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800091a:	3104      	adds	r1, #4

0800091c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800091c:	480a      	ldr	r0, [pc, #40]	@ (8000948 <LoopForever+0xa>)
	ldr	r3, =_edata
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000920:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000922:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000924:	d3f6      	bcc.n	8000914 <CopyDataInit>
	ldr	r2, =_sbss
 8000926:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000928:	e002      	b.n	8000930 <LoopFillZerobss>

0800092a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800092a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800092c:	f842 3b04 	str.w	r3, [r2], #4

08000930 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000930:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <LoopForever+0x16>)
	cmp	r2, r3
 8000932:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000934:	d3f9      	bcc.n	800092a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000936:	f002 fa5f 	bl	8002df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800093a:	f7ff fdbb 	bl	80004b4 <main>

0800093e <LoopForever>:

LoopForever:
    b LoopForever
 800093e:	e7fe      	b.n	800093e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000940:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 8000944:	08002ed0 	.word	0x08002ed0
	ldr	r0, =_sdata
 8000948:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800094c:	2000003c 	.word	0x2000003c
	ldr	r2, =_sbss
 8000950:	2000003c 	.word	0x2000003c
	ldr	r3, = _ebss
 8000954:	20000124 	.word	0x20000124

08000958 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC4_IRQHandler>
	...

0800095c <BSP_LED_Init>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	@ 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LD1)
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d10f      	bne.n	800098c <BSP_LED_Init+0x30>
  {
    LD1_GPIO_CLK_ENABLE();
 800096c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a1c <BSP_LED_Init+0xc0>)
 800096e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000972:	4a2a      	ldr	r2, [pc, #168]	@ (8000a1c <BSP_LED_Init+0xc0>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800097c:	4b27      	ldr	r3, [pc, #156]	@ (8000a1c <BSP_LED_Init+0xc0>)
 800097e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	e021      	b.n	80009d0 <BSP_LED_Init+0x74>
  }
  else if (Led == LD2)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d10f      	bne.n	80009b2 <BSP_LED_Init+0x56>
  {
    LD2_GPIO_CLK_ENABLE();
 8000992:	4b22      	ldr	r3, [pc, #136]	@ (8000a1c <BSP_LED_Init+0xc0>)
 8000994:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000998:	4a20      	ldr	r2, [pc, #128]	@ (8000a1c <BSP_LED_Init+0xc0>)
 800099a:	f043 0302 	orr.w	r3, r3, #2
 800099e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009a2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a1c <BSP_LED_Init+0xc0>)
 80009a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009a8:	f003 0302 	and.w	r3, r3, #2
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	e00e      	b.n	80009d0 <BSP_LED_Init+0x74>
  }
  else /* Led = LD3 */
  {
    LD3_GPIO_CLK_ENABLE();
 80009b2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a1c <BSP_LED_Init+0xc0>)
 80009b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009b8:	4a18      	ldr	r2, [pc, #96]	@ (8000a1c <BSP_LED_Init+0xc0>)
 80009ba:	f043 0302 	orr.w	r3, r3, #2
 80009be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009c2:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <BSP_LED_Init+0xc0>)
 80009c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	4a13      	ldr	r2, [pc, #76]	@ (8000a20 <BSP_LED_Init+0xc4>)
 80009d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 80009de:	2301      	movs	r3, #1
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e2:	2302      	movs	r3, #2
 80009e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	4a0e      	ldr	r2, [pc, #56]	@ (8000a24 <BSP_LED_Init+0xc8>)
 80009ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ee:	f107 0214 	add.w	r2, r7, #20
 80009f2:	4611      	mov	r1, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 fc53 	bl	80012a0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <BSP_LED_Init+0xc8>)
 80009fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4a06      	ldr	r2, [pc, #24]	@ (8000a20 <BSP_LED_Init+0xc4>)
 8000a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f000 fdab 	bl	8001568 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000a12:	2300      	movs	r3, #0
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3728      	adds	r7, #40	@ 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	46020c00 	.word	0x46020c00
 8000a20:	20000004 	.word	0x20000004
 8000a24:	2000000c 	.word	0x2000000c

08000a28 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code.
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b094      	sub	sp, #80	@ 0x50
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	460a      	mov	r2, r1
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	4613      	mov	r3, r2
 8000a36:	71bb      	strb	r3, [r7, #6]
  int32_t               status = BSP_ERROR_NONE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_B1_IT_PRIORITY,
 8000a3c:	4a5b      	ldr	r2, [pc, #364]	@ (8000bac <BSP_PB_Init+0x184>)
 8000a3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a42:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                                       BSP_B2_IT_PRIORITY,
                                                       BSP_B3_IT_PRIORITY};
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {B1_EXTI_LINE, B2_EXTI_LINE, B3_EXTI_LINE};
 8000a48:	4a59      	ldr	r2, [pc, #356]	@ (8000bb0 <BSP_PB_Init+0x188>)
 8000a4a:	f107 0320 	add.w	r3, r7, #32
 8000a4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  BSP_EXTI_LineCallback ButtonCallback[BUTTONn]     = {B1_EXTI_Callback,
 8000a54:	4a57      	ldr	r2, [pc, #348]	@ (8000bb4 <BSP_PB_Init+0x18c>)
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                                       B2_EXTI_Callback,
                                                       B3_EXTI_Callback};

  /* Enable the BUTTON clock */
  if (Button == B1)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d10f      	bne.n	8000a86 <BSP_PB_Init+0x5e>
  {
    B1_GPIO_CLK_ENABLE();
 8000a66:	4b54      	ldr	r3, [pc, #336]	@ (8000bb8 <BSP_PB_Init+0x190>)
 8000a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a6c:	4a52      	ldr	r2, [pc, #328]	@ (8000bb8 <BSP_PB_Init+0x190>)
 8000a6e:	f043 0304 	orr.w	r3, r3, #4
 8000a72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a76:	4b50      	ldr	r3, [pc, #320]	@ (8000bb8 <BSP_PB_Init+0x190>)
 8000a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	e021      	b.n	8000aca <BSP_PB_Init+0xa2>
  }
  else if (Button == B2)
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d10f      	bne.n	8000aac <BSP_PB_Init+0x84>
  {
    B2_GPIO_CLK_ENABLE();
 8000a8c:	4b4a      	ldr	r3, [pc, #296]	@ (8000bb8 <BSP_PB_Init+0x190>)
 8000a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a92:	4a49      	ldr	r2, [pc, #292]	@ (8000bb8 <BSP_PB_Init+0x190>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a9c:	4b46      	ldr	r3, [pc, #280]	@ (8000bb8 <BSP_PB_Init+0x190>)
 8000a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	e00e      	b.n	8000aca <BSP_PB_Init+0xa2>
  }
  else /* B3 */
  {
    B3_GPIO_CLK_ENABLE();
 8000aac:	4b42      	ldr	r3, [pc, #264]	@ (8000bb8 <BSP_PB_Init+0x190>)
 8000aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ab2:	4a41      	ldr	r2, [pc, #260]	@ (8000bb8 <BSP_PB_Init+0x190>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000abc:	4b3e      	ldr	r3, [pc, #248]	@ (8000bb8 <BSP_PB_Init+0x190>)
 8000abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  }

  GPIO_Init.Pin   = BUTTON_PIN[Button];
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	4a3b      	ldr	r2, [pc, #236]	@ (8000bbc <BSP_PB_Init+0x194>)
 8000ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_Init.Pull  = GPIO_PULLUP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	647b      	str	r3, [r7, #68]	@ 0x44

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000adc:	79bb      	ldrb	r3, [r7, #6]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d10b      	bne.n	8000afa <BSP_PB_Init+0xd2>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	4a35      	ldr	r2, [pc, #212]	@ (8000bc0 <BSP_PB_Init+0x198>)
 8000aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aee:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000af2:	4611      	mov	r1, r2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fbd3 	bl	80012a0 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8000afa:	79bb      	ldrb	r3, [r7, #6]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d14f      	bne.n	8000ba0 <BSP_PB_Init+0x178>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
 8000b00:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	4a2d      	ldr	r2, [pc, #180]	@ (8000bc0 <BSP_PB_Init+0x198>)
 8000b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 fbc3 	bl	80012a0 <HAL_GPIO_Init>

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 8000b1a:	79fa      	ldrb	r2, [r7, #7]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	4a27      	ldr	r2, [pc, #156]	@ (8000bc4 <BSP_PB_Init+0x19c>)
 8000b26:	441a      	add	r2, r3
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	3350      	adds	r3, #80	@ 0x50
 8000b2e:	443b      	add	r3, r7
 8000b30:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000b34:	4619      	mov	r1, r3
 8000b36:	4610      	mov	r0, r2
 8000b38:	f000 fb9e 	bl	8001278 <HAL_EXTI_GetHandle>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d12b      	bne.n	8000b9a <BSP_PB_Init+0x172>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_FALLING_CB_ID, ButtonCallback[Button]) == HAL_OK)
 8000b42:	79fa      	ldrb	r2, [r7, #7]
 8000b44:	4613      	mov	r3, r2
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	4413      	add	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8000bc4 <BSP_PB_Init+0x19c>)
 8000b4e:	1898      	adds	r0, r3, r2
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	3350      	adds	r3, #80	@ 0x50
 8000b56:	443b      	add	r3, r7
 8000b58:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	2102      	movs	r1, #2
 8000b60:	f000 fb5e 	bl	8001220 <HAL_EXTI_RegisterCallback>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d113      	bne.n	8000b92 <BSP_PB_Init+0x16a>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], BSP_BUTTON_IT_PRIO[Button], 0x00);
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	4a16      	ldr	r2, [pc, #88]	@ (8000bc8 <BSP_PB_Init+0x1a0>)
 8000b6e:	56d0      	ldrsb	r0, [r2, r3]
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	3350      	adds	r3, #80	@ 0x50
 8000b76:	443b      	add	r3, r7
 8000b78:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f000 faa8 	bl	80010d4 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	4a10      	ldr	r2, [pc, #64]	@ (8000bc8 <BSP_PB_Init+0x1a0>)
 8000b88:	56d3      	ldrsb	r3, [r2, r3]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 fabf 	bl	800110e <HAL_NVIC_EnableIRQ>
 8000b90:	e006      	b.n	8000ba0 <BSP_PB_Init+0x178>
      }
      else
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8000b92:	f06f 0303 	mvn.w	r3, #3
 8000b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000b98:	e002      	b.n	8000ba0 <BSP_PB_Init+0x178>
      }
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8000b9a:	f06f 0303 	mvn.w	r3, #3
 8000b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return status;
 8000ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3750      	adds	r7, #80	@ 0x50
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	08002e74 	.word	0x08002e74
 8000bb0:	08002e80 	.word	0x08002e80
 8000bb4:	08002e8c 	.word	0x08002e8c
 8000bb8:	46020c00 	.word	0x46020c00
 8000bbc:	20000018 	.word	0x20000018
 8000bc0:	20000020 	.word	0x20000020
 8000bc4:	200000fc 	.word	0x200000fc
 8000bc8:	2000002c 	.word	0x2000002c

08000bcc <BSP_PB_Callback>:
  *     @arg B2
  *     @arg B3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code.
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d103      	bne.n	8000c02 <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8000bfa:	f06f 0301 	mvn.w	r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	e026      	b.n	8000c50 <BSP_COM_Init+0x6c>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
 8000c02:	79fa      	ldrb	r2, [r7, #7]
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	4915      	ldr	r1, [pc, #84]	@ (8000c5c <BSP_COM_Init+0x78>)
 8000c08:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c0c:	4914      	ldr	r1, [pc, #80]	@ (8000c60 <BSP_COM_Init+0x7c>)
 8000c0e:	2094      	movs	r0, #148	@ 0x94
 8000c10:	fb00 f303 	mul.w	r3, r0, r3
 8000c14:	440b      	add	r3, r1
 8000c16:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	2294      	movs	r2, #148	@ 0x94
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a0f      	ldr	r2, [pc, #60]	@ (8000c60 <BSP_COM_Init+0x7c>)
 8000c22:	4413      	add	r3, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f863 	bl	8000cf0 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d10f      	bne.n	8000c50 <BSP_COM_Init+0x6c>
    {
      if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	2294      	movs	r2, #148	@ 0x94
 8000c34:	fb02 f303 	mul.w	r3, r2, r3
 8000c38:	4a09      	ldr	r2, [pc, #36]	@ (8000c60 <BSP_COM_Init+0x7c>)
 8000c3a:	4413      	add	r3, r2
 8000c3c:	6839      	ldr	r1, [r7, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f810 	bl	8000c64 <MX_USART1_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d002      	beq.n	8000c50 <BSP_COM_Init+0x6c>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8000c4a:	f06f 0303 	mvn.w	r3, #3
 8000c4e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return status;
 8000c50:	68fb      	ldr	r3, [r7, #12]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000030 	.word	0x20000030
 8000c60:	20000068 	.word	0x20000068

08000c64 <MX_USART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	891b      	ldrh	r3, [r3, #8]
 8000c82:	461a      	mov	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	895b      	ldrh	r3, [r3, #10]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	220c      	movs	r2, #12
 8000c96:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	899b      	ldrh	r3, [r3, #12]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ca8:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f001 fb7e 	bl	80023b8 <HAL_UART_Init>
 8000cbc:	4603      	mov	r3, r0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <B1_EXTI_Callback>:
/**
  * @brief  B1 EXTI line detection callbacks.
  * @retval None.
  */
static void B1_EXTI_Callback(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
  BSP_PB_Callback(B1);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff ff7e 	bl	8000bcc <BSP_PB_Callback>
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <B2_EXTI_Callback>:
/**
  * @brief  B2 EXTI line detection callbacks.
  * @retval None.
  */
static void B2_EXTI_Callback(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(B2);
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff ff77 	bl	8000bcc <BSP_PB_Callback>
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <B3_EXTI_Callback>:
/**
  * @brief  B3 EXTI line detection callbacks.
  * @retval None.
  */
static void B3_EXTI_Callback(void)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	af00      	add	r7, sp, #0
  BSP_PB_Callback(B3);
 8000ce6:	2002      	movs	r0, #2
 8000ce8:	f7ff ff70 	bl	8000bcc <BSP_PB_Callback>
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	@ 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable COM and GPIO clocks */
  COM1_TX_GPIO_CLK_ENABLE();
 8000cf8:	4b26      	ldr	r3, [pc, #152]	@ (8000d94 <UART_MspInit+0xa4>)
 8000cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cfe:	4a25      	ldr	r2, [pc, #148]	@ (8000d94 <UART_MspInit+0xa4>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d08:	4b22      	ldr	r3, [pc, #136]	@ (8000d94 <UART_MspInit+0xa4>)
 8000d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000d16:	4b1f      	ldr	r3, [pc, #124]	@ (8000d94 <UART_MspInit+0xa4>)
 8000d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000d94 <UART_MspInit+0xa4>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d26:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <UART_MspInit+0xa4>)
 8000d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
  COM1_CLK_ENABLE();
 8000d34:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <UART_MspInit+0xa4>)
 8000d36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d3a:	4a16      	ldr	r2, [pc, #88]	@ (8000d94 <UART_MspInit+0xa4>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d40:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000d44:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <UART_MspInit+0xa4>)
 8000d46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM1_TX_PIN;
 8000d52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d56:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Alternate = COM1_TX_AF;
 8000d64:	2307      	movs	r3, #7
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &GPIO_Init);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480a      	ldr	r0, [pc, #40]	@ (8000d98 <UART_MspInit+0xa8>)
 8000d70:	f000 fa96 	bl	80012a0 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM1_RX_PIN;
 8000d74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_Init.Alternate = COM1_RX_AF;
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &GPIO_Init);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <UART_MspInit+0xac>)
 8000d86:	f000 fa8b 	bl	80012a0 <HAL_GPIO_Init>
}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	@ 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	46020c00 	.word	0x46020c00
 8000d98:	42020400 	.word	0x42020400
 8000d9c:	42020000 	.word	0x42020000

08000da0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <HAL_Init+0x3c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0c      	ldr	r2, [pc, #48]	@ (8000ddc <HAL_Init+0x3c>)
 8000daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db0:	2003      	movs	r0, #3
 8000db2:	f000 f984 	bl	80010be <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 8000db6:	f7ff fcf9 	bl	80007ac <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000dba:	2004      	movs	r0, #4
 8000dbc:	f000 f9d8 	bl	8001170 <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc0:	200f      	movs	r0, #15
 8000dc2:	f000 f80d 	bl	8000de0 <HAL_InitTick>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_Init+0x30>
  {
    return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e002      	b.n	8000dd6 <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd0:	f7ff fc7a 	bl	80006c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40022000 	.word	0x40022000

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000dec:	4b36      	ldr	r3, [pc, #216]	@ (8000ec8 <HAL_InitTick+0xe8>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e062      	b.n	8000ebe <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000df8:	4b34      	ldr	r3, [pc, #208]	@ (8000ecc <HAL_InitTick+0xec>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 0304 	and.w	r3, r3, #4
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d10c      	bne.n	8000e1e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000e04:	4b32      	ldr	r3, [pc, #200]	@ (8000ed0 <HAL_InitTick+0xf0>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec8 <HAL_InitTick+0xe8>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	e03d      	b.n	8000e9a <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 8000e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed4 <HAL_InitTick+0xf4>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e24:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000e28:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000e30:	d025      	beq.n	8000e7e <HAL_InitTick+0x9e>
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000e38:	d82e      	bhi.n	8000e98 <HAL_InitTick+0xb8>
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d004      	beq.n	8000e4a <HAL_InitTick+0x6a>
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000e46:	d00d      	beq.n	8000e64 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8000e48:	e026      	b.n	8000e98 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000e4a:	4b21      	ldr	r3, [pc, #132]	@ (8000ed0 <HAL_InitTick+0xf0>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec8 <HAL_InitTick+0xe8>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	4619      	mov	r1, r3
 8000e54:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000e58:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e60:	60fb      	str	r3, [r7, #12]
        break;
 8000e62:	e01a      	b.n	8000e9a <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000e64:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <HAL_InitTick+0xe8>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e72:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7a:	60fb      	str	r3, [r7, #12]
        break;
 8000e7c:	e00d      	b.n	8000e9a <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000e7e:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <HAL_InitTick+0xe8>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e88:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e8c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e94:	60fb      	str	r3, [r7, #12]
        break;
 8000e96:	e000      	b.n	8000e9a <HAL_InitTick+0xba>
        break;
 8000e98:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000e9a:	68f8      	ldr	r0, [r7, #12]
 8000e9c:	f000 f946 	bl	800112c <HAL_SYSTICK_Config>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e009      	b.n	8000ebe <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb2:	f000 f90f 	bl	80010d4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000eb6:	4a08      	ldr	r2, [pc, #32]	@ (8000ed8 <HAL_InitTick+0xf8>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000038 	.word	0x20000038
 8000ecc:	e000e010 	.word	0xe000e010
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	46020c00 	.word	0x46020c00
 8000ed8:	20000034 	.word	0x20000034

08000edc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	@ (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000038 	.word	0x20000038
 8000f00:	20000120 	.word	0x20000120

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	@ (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000120 	.word	0x20000120

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff ffee 	bl	8000f04 <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f34:	d005      	beq.n	8000f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_Delay+0x44>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f42:	bf00      	nop
 8000f44:	f7ff ffde 	bl	8000f04 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d8f7      	bhi.n	8000f44 <HAL_Delay+0x28>
  {
  }
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000038 	.word	0x20000038

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	@ (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db0b      	blt.n	8000ff2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4907      	ldr	r1, [pc, #28]	@ (8001000 <__NVIC_EnableIRQ+0x38>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000e100 	.word	0xe000e100

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	@ (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	@ (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	@ 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	@ 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ff4c 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
 80010e2:	f7ff ff63 	bl	8000fac <__NVIC_GetPriorityGrouping>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ffb0 	bl	8001058 <NVIC_EncodePriority>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff7f 	bl	8001004 <__NVIC_SetPriority>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbaxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff53 	bl	8000fc8 <__NVIC_EnableIRQ>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800113c:	d301      	bcc.n	8001142 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800113e:	2301      	movs	r3, #1
 8001140:	e00d      	b.n	800115e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001142:	4a0a      	ldr	r2, [pc, #40]	@ (800116c <HAL_SYSTICK_Config+0x40>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800114a:	4b08      	ldr	r3, [pc, #32]	@ (800116c <HAL_SYSTICK_Config+0x40>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <HAL_SYSTICK_Config+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a05      	ldr	r2, [pc, #20]	@ (800116c <HAL_SYSTICK_Config+0x40>)
 8001156:	f043 0303 	orr.w	r3, r3, #3
 800115a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e010 	.word	0xe000e010

08001170 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b04      	cmp	r3, #4
 800117c:	d844      	bhi.n	8001208 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800117e:	a201      	add	r2, pc, #4	@ (adr r2, 8001184 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	080011a7 	.word	0x080011a7
 8001188:	080011c5 	.word	0x080011c5
 800118c:	080011e7 	.word	0x080011e7
 8001190:	08001209 	.word	0x08001209
 8001194:	08001199 	.word	0x08001199
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001198:	4b1f      	ldr	r3, [pc, #124]	@ (8001218 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a1e      	ldr	r2, [pc, #120]	@ (8001218 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	6013      	str	r3, [r2, #0]
      break;
 80011a4:	e031      	b.n	800120a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80011a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001218 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001218 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011ac:	f023 0304 	bic.w	r3, r3, #4
 80011b0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80011b2:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b8:	4a18      	ldr	r2, [pc, #96]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011ba:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80011be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80011c2:	e022      	b.n	800120a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80011c4:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a13      	ldr	r2, [pc, #76]	@ (8001218 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011ca:	f023 0304 	bic.w	r3, r3, #4
 80011ce:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80011da:	4a10      	ldr	r2, [pc, #64]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80011e4:	e011      	b.n	800120a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80011e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001218 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011ec:	f023 0304 	bic.w	r3, r3, #4
 80011f0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80011fc:	4a07      	ldr	r2, [pc, #28]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001202:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001206:	e000      	b.n	800120a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001208:	bf00      	nop
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010
 800121c:	46020c00 	.word	0x46020c00

08001220 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	460b      	mov	r3, r1
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001232:	7afb      	ldrb	r3, [r7, #11]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d011      	beq.n	800125c <HAL_EXTI_RegisterCallback+0x3c>
 8001238:	2b02      	cmp	r3, #2
 800123a:	dc13      	bgt.n	8001264 <HAL_EXTI_RegisterCallback+0x44>
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <HAL_EXTI_RegisterCallback+0x26>
 8001240:	2b01      	cmp	r3, #1
 8001242:	d007      	beq.n	8001254 <HAL_EXTI_RegisterCallback+0x34>
 8001244:	e00e      	b.n	8001264 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	609a      	str	r2, [r3, #8]
      break;
 8001252:	e00a      	b.n	800126a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	605a      	str	r2, [r3, #4]
      break;
 800125a:	e006      	b.n	800126a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	609a      	str	r2, [r3, #8]
      break;
 8001262:	e002      	b.n	800126a <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	75fb      	strb	r3, [r7, #23]
      break;
 8001268:	bf00      	nop
  }

  return status;
 800126a:	7dfb      	ldrb	r3, [r7, #23]
}
 800126c:	4618      	mov	r0, r3
 800126e:	371c      	adds	r7, #28
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e003      	b.n	8001294 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001292:	2300      	movs	r3, #0
  }
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012ae:	e130      	b.n	8001512 <HAL_GPIO_Init+0x272>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2101      	movs	r1, #1
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	4013      	ands	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 8122 	beq.w	800150c <HAL_GPIO_Init+0x26c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d005      	beq.n	80012e0 <HAL_GPIO_Init+0x40>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d130      	bne.n	8001342 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001316:	2201      	movs	r2, #1
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	f003 0201 	and.w	r2, r3, #1
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	2b03      	cmp	r3, #3
 800134c:	d017      	beq.n	800137e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	2203      	movs	r2, #3
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d123      	bne.n	80013d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	08da      	lsrs	r2, r3, #3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3208      	adds	r2, #8
 8001392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	691a      	ldr	r2, [r3, #16]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	08da      	lsrs	r2, r3, #3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3208      	adds	r2, #8
 80013cc:	6939      	ldr	r1, [r7, #16]
 80013ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2203      	movs	r2, #3
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0203 	and.w	r2, r3, #3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d07c      	beq.n	800150c <HAL_GPIO_Init+0x26c>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001412:	4a47      	ldr	r2, [pc, #284]	@ (8001530 <HAL_GPIO_Init+0x290>)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3318      	adds	r3, #24
 800141a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	220f      	movs	r2, #15
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	0a9a      	lsrs	r2, r3, #10
 800143a:	4b3e      	ldr	r3, [pc, #248]	@ (8001534 <HAL_GPIO_Init+0x294>)
 800143c:	4013      	ands	r3, r2
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	f002 0203 	and.w	r2, r2, #3
 8001444:	00d2      	lsls	r2, r2, #3
 8001446:	4093      	lsls	r3, r2
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800144e:	4938      	ldr	r1, [pc, #224]	@ (8001530 <HAL_GPIO_Init+0x290>)
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	3318      	adds	r3, #24
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800145c:	4b34      	ldr	r3, [pc, #208]	@ (8001530 <HAL_GPIO_Init+0x290>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	43db      	mvns	r3, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x1e0>
        {
          temp |= iocurrent;
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001480:	4a2b      	ldr	r2, [pc, #172]	@ (8001530 <HAL_GPIO_Init+0x290>)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001486:	4b2a      	ldr	r3, [pc, #168]	@ (8001530 <HAL_GPIO_Init+0x290>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	43db      	mvns	r3, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x20a>
        {
          temp |= iocurrent;
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014aa:	4a21      	ldr	r2, [pc, #132]	@ (8001530 <HAL_GPIO_Init+0x290>)
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001530 <HAL_GPIO_Init+0x290>)
 80014b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014d6:	4a16      	ldr	r2, [pc, #88]	@ (8001530 <HAL_GPIO_Init+0x290>)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <HAL_GPIO_Init+0x290>)
 80014e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001504:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <HAL_GPIO_Init+0x290>)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	fa22 f303 	lsr.w	r3, r2, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	f47f aec7 	bne.w	80012b0 <HAL_GPIO_Init+0x10>
  }
}
 8001522:	bf00      	nop
 8001524:	bf00      	nop
 8001526:	371c      	adds	r7, #28
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	46022000 	.word	0x46022000
 8001534:	002f7f7f 	.word	0x002f7f7f

08001538 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	887b      	ldrh	r3, [r7, #2]
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e001      	b.n	800155a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800155a:	7bfb      	ldrb	r3, [r7, #15]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
 8001574:	4613      	mov	r3, r2
 8001576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001578:	787b      	ldrb	r3, [r7, #1]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001584:	e002      	b.n	800158c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4013      	ands	r3, r2
 80015b0:	041a      	lsls	r2, r3, #16
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	43d9      	mvns	r1, r3
 80015b6:	887b      	ldrh	r3, [r7, #2]
 80015b8:	400b      	ands	r3, r1
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	619a      	str	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00U)
 80015d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	4013      	ands	r3, r2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d006      	beq.n	80015f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80015e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001614 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f814 	bl	8001618 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00U)
 80015f0:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d006      	beq.n	800160a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80015fc:	4a05      	ldr	r2, [pc, #20]	@ (8001614 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	4618      	mov	r0, r3
 8001606:	f000 f812 	bl	800162e <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	46022000 	.word	0x46022000

08001618 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001650:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	e007      	b.n	8001672 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001662:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f023 0204 	bic.w	r2, r3, #4
 800166a:	4905      	ldr	r1, [pc, #20]	@ (8001680 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001672:	7bfb      	ldrb	r3, [r7, #15]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40030400 	.word	0x40030400

08001684 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001688:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <HAL_ICACHE_Enable+0x1c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a04      	ldr	r2, [pc, #16]	@ (80016a0 <HAL_ICACHE_Enable+0x1c>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	40030400 	.word	0x40030400

080016a4 <HAL_PWREx_ControlVoltageScaling>:
  *        only take effect after the 2.4 GHz RADIO has entered Sleep or Deepsleep mode.
  * @note  In range 2, the 2.4 GHz RADIO shall not transmit nor receive.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  uint32_t vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80016ac:	4b29      	ldr	r3, [pc, #164]	@ (8001754 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80016ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016b4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d101      	bne.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e042      	b.n	8001748 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Set voltage scaling level */
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 80016c2:	4b24      	ldr	r3, [pc, #144]	@ (8001754 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80016ca:	4922      	ldr	r1, [pc, #136]	@ (8001754 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	60cb      	str	r3, [r1, #12]


  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 80016d2:	4b21      	ldr	r3, [pc, #132]	@ (8001758 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2232      	movs	r2, #50	@ 0x32
 80016d8:	fb02 f303 	mul.w	r3, r2, r3
 80016dc:	4a1f      	ldr	r2, [pc, #124]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	0c9b      	lsrs	r3, r3, #18
 80016e4:	3301      	adds	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80016e8:	e002      	b.n	80016f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
  {
    timeout--;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80016f0:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <HAL_PWREx_ControlVoltageScaling+0x5e>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f3      	bne.n	80016ea <HAL_PWREx_ControlVoltageScaling+0x46>
  }

  /* Check time out  */
  if (timeout == 0U)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_PWREx_ControlVoltageScaling+0x68>
  {
    return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e01d      	b.n	8001748 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Wait until ACTVOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2232      	movs	r2, #50	@ 0x32
 8001712:	fb02 f303 	mul.w	r3, r2, r3
 8001716:	4a11      	ldr	r2, [pc, #68]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8001718:	fba2 2303 	umull	r2, r3, r2, r3
 800171c:	0c9b      	lsrs	r3, r3, #18
 800171e:	3301      	adds	r3, #1
 8001720:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001722:	e002      	b.n	800172a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3b01      	subs	r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800172c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800172e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d102      	bne.n	800173c <HAL_PWREx_ControlVoltageScaling+0x98>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f3      	bne.n	8001724 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out  */
  if (timeout == 0U)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_PWREx_ControlVoltageScaling+0xa2>
  {
    return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e000      	b.n	8001748 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	46020800 	.word	0x46020800
 8001758:	20000000 	.word	0x20000000
 800175c:	431bde83 	.word	0x431bde83

08001760 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	@ 0x30
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t mask;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e3d9      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001772:	4b90      	ldr	r3, [pc, #576]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	623b      	str	r3, [r7, #32]
  pllsrc = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800177c:	4b8d      	ldr	r3, [pc, #564]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 800177e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d072      	beq.n	8001878 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL1 in these cases it is not allowed to be disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	2b08      	cmp	r3, #8
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_OscConfig+0x44>
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	2b0c      	cmp	r3, #12
 800179c:	d12a      	bne.n	80017f4 <HAL_RCC_OscConfig+0x94>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSE)))
 800179e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d127      	bne.n	80017f4 <HAL_RCC_OscConfig+0x94>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_OscConfig+0x50>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e3ba      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Otherwise, applying divider is allowed */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017b0:	6a3b      	ldr	r3, [r7, #32]
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d15f      	bne.n	8001876 <HAL_RCC_OscConfig+0x116>
        {
          assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

          /* Adjust the HSE division factor */
          __HAL_RCC_HSE_CONFIG(RCC_HSE_ON | RCC_OscInitStruct->HSEDiv);
 80017b6:	4b7f      	ldr	r3, [pc, #508]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	4a7b      	ldr	r2, [pc, #492]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 80017c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ca:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSE value */
          SystemCoreClock = (HSE_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSEPRE)) >> RCC_CR_HSEPRE_Pos)));
 80017cc:	4b79      	ldr	r3, [pc, #484]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	0d1b      	lsrs	r3, r3, #20
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	4a78      	ldr	r2, [pc, #480]	@ (80019b8 <HAL_RCC_OscConfig+0x258>)
 80017d8:	fa22 f303 	lsr.w	r3, r2, r3
 80017dc:	4a77      	ldr	r2, [pc, #476]	@ (80019bc <HAL_RCC_OscConfig+0x25c>)
 80017de:	6013      	str	r3, [r2, #0]

          /* Adapt Systick interrupt period */
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017e0:	4b77      	ldr	r3, [pc, #476]	@ (80019c0 <HAL_RCC_OscConfig+0x260>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fafb 	bl	8000de0 <HAL_InitTick>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d042      	beq.n	8001876 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e398      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d01f      	beq.n	800183c <HAL_RCC_OscConfig+0xdc>
      {
        assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG((RCC_OscInitStruct->HSEState | RCC_OscInitStruct->HSEDiv));
 80017fc:	4b6d      	ldr	r3, [pc, #436]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	430b      	orrs	r3, r1
 800180e:	4969      	ldr	r1, [pc, #420]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 8001810:	4313      	orrs	r3, r2
 8001812:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff fb76 	bl	8000f04 <HAL_GetTick>
 8001818:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0xce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fb72 	bl	8000f04 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	@ 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e37b      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800182e:	4b61      	ldr	r3, [pc, #388]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0xbc>
 800183a:	e01d      	b.n	8001878 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183c:	4b5d      	ldr	r3, [pc, #372]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	495a      	ldr	r1, [pc, #360]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7ff fb59 	bl	8000f04 <HAL_GetTick>
 8001852:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001856:	f7ff fb55 	bl	8000f04 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b64      	cmp	r3, #100	@ 0x64
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e35e      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001868:	4b52      	ldr	r3, [pc, #328]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f0      	bne.n	8001856 <HAL_RCC_OscConfig+0xf6>
 8001874:	e000      	b.n	8001878 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001876:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d05a      	beq.n	800193a <HAL_RCC_OscConfig+0x1da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <HAL_RCC_OscConfig+0x136>
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	2b0c      	cmp	r3, #12
 800188e:	d113      	bne.n	80018b8 <HAL_RCC_OscConfig+0x158>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSI)))
 8001890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001892:	2b02      	cmp	r3, #2
 8001894:	d110      	bne.n	80018b8 <HAL_RCC_OscConfig+0x158>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_OscConfig+0x142>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e341      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a2:	4b44      	ldr	r3, [pc, #272]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	041b      	lsls	r3, r3, #16
 80018b0:	4940      	ldr	r1, [pc, #256]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	610b      	str	r3, [r1, #16]
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80018b6:	e040      	b.n	800193a <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d023      	beq.n	8001908 <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c0:	4b3c      	ldr	r3, [pc, #240]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a3b      	ldr	r2, [pc, #236]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff fb1a 	bl	8000f04 <HAL_GetTick>
 80018d0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d4:	f7ff fb16 	bl	8000f04 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e31f      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e6:	4b33      	ldr	r3, [pc, #204]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x174>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f2:	4b30      	ldr	r3, [pc, #192]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	041b      	lsls	r3, r3, #16
 8001900:	492c      	ldr	r1, [pc, #176]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 8001902:	4313      	orrs	r3, r2
 8001904:	610b      	str	r3, [r1, #16]
 8001906:	e018      	b.n	800193a <HAL_RCC_OscConfig+0x1da>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001908:	4b2a      	ldr	r3, [pc, #168]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a29      	ldr	r2, [pc, #164]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 800190e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7ff faf6 	bl	8000f04 <HAL_GetTick>
 8001918:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x1ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191c:	f7ff faf2 	bl	8000f04 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e2fb      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800192e:	4b21      	ldr	r3, [pc, #132]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x1bc>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80d2 	beq.w	8001aec <HAL_RCC_OscConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Update LSI1 configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 800194e:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 8001950:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d111      	bne.n	8001980 <HAL_RCC_OscConfig+0x220>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195c:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 800195e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001962:	4a14      	ldr	r2, [pc, #80]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800196c:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <HAL_RCC_OscConfig+0x254>)
 800196e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800197a:	2301      	movs	r3, #1
 800197c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001980:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <HAL_RCC_OscConfig+0x264>)
 8001982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d123      	bne.n	80019d4 <HAL_RCC_OscConfig+0x274>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800198c:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <HAL_RCC_OscConfig+0x264>)
 800198e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001990:	4a0c      	ldr	r2, [pc, #48]	@ (80019c4 <HAL_RCC_OscConfig+0x264>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001998:	f7ff fab4 	bl	8000f04 <HAL_GetTick>
 800199c:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800199e:	e013      	b.n	80019c8 <HAL_RCC_OscConfig+0x268>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a0:	f7ff fab0 	bl	8000f04 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d90c      	bls.n	80019c8 <HAL_RCC_OscConfig+0x268>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e2b9      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
 80019b2:	bf00      	nop
 80019b4:	46020c00 	.word	0x46020c00
 80019b8:	01e84800 	.word	0x01e84800
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000034 	.word	0x20000034
 80019c4:	46020800 	.word	0x46020800
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80019c8:	4ba4      	ldr	r3, [pc, #656]	@ (8001c5c <HAL_RCC_OscConfig+0x4fc>)
 80019ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0e5      	beq.n	80019a0 <HAL_RCC_OscConfig+0x240>
        }
      }
    }

    /* Get BDCR1 register value */
    tmpreg1 = RCC->BDCR1;
 80019d4:	4ba2      	ldr	r3, [pc, #648]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 80019d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019da:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Define mask depending on LSI presence */
    mask = RCC_BDCR1_LSI1ON;
 80019dc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80019e0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_LSI2_SUPPORT)
    mask |= RCC_BDCR1_LSI2ON;
#endif /* RCC_LSI2_SUPPORT */

    /* Check the LSI1 State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d056      	beq.n	8001a98 <HAL_RCC_OscConfig+0x338>
    {
      if ((RCC_OscInitStruct->LSIState & RCC_LSI1_ON) != 0x00u)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d030      	beq.n	8001a58 <HAL_RCC_OscConfig+0x2f8>
      {
        /* Check LSI1 division factor */
        assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

        /* Check is LSIDiv is requested to be changed and LSI is already ON */
        if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_BDCR1_LSI1PREDIV)) && ((tmpreg1 & RCC_BDCR1_LSI1RDY) != 0x00u))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69da      	ldr	r2, [r3, #28]
 80019fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d020      	beq.n	8001a46 <HAL_RCC_OscConfig+0x2e6>
 8001a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d01b      	beq.n	8001a46 <HAL_RCC_OscConfig+0x2e6>
        {
          /* Disable LSI1 */
          tmpreg1 &= ~RCC_BDCR1_LSI1ON;
 8001a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a10:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001a14:	62bb      	str	r3, [r7, #40]	@ 0x28
          RCC->BDCR1 = tmpreg1;
 8001a16:	4a92      	ldr	r2, [pc, #584]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a1e:	f7ff fa71 	bl	8000f04 <HAL_GetTick>
 8001a22:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is disabled */
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x2d8>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a26:	f7ff fa6d 	bl	8000f04 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b14      	cmp	r3, #20
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x2d8>
            {
              /* LSI1 may be forced ON by IWDG */
              return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e276      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8001a38:	4b89      	ldr	r3, [pc, #548]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001a3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1ef      	bne.n	8001a26 <HAL_RCC_OscConfig+0x2c6>
          HAL_Delay(1);
#endif
        }

        /* Set LSI1 division factor */
        tmpreg1 &= ~RCC_BDCR1_LSI1PREDIV;
 8001a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a54:	4313      	orrs	r3, r2
 8001a56:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Enable Concerned LSI */
      tmpreg1 |= RCC_OscInitStruct->LSIState;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8001a62:	4a7f      	ldr	r2, [pc, #508]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6a:	f7ff fa4b 	bl	8000f04 <HAL_GetTick>
 8001a6e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready : LSIRDY bit is position ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x324>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a72:	f7ff fa47 	bl	8000f04 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b14      	cmp	r3, #20
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x324>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e250      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8001a84:	4b76      	ldr	r3, [pc, #472]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001a86:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0ed      	beq.n	8001a72 <HAL_RCC_OscConfig+0x312>
 8001a96:	e01d      	b.n	8001ad4 <HAL_RCC_OscConfig+0x374>
#endif
    }
    else
    {
      /* Disable the Internal Low Speed oscillator LSI1 and LSI2 is available */
      tmpreg1 &= ~mask;
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8001aa2:	4a6f      	ldr	r2, [pc, #444]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aa6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aaa:	f7ff fa2b 	bl	8000f04 <HAL_GetTick>
 8001aae:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is disabled : LSIRDY bit position is ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x364>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab2:	f7ff fa27 	bl	8000f04 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b14      	cmp	r3, #20
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x364>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e230      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8001ac4:	4b66      	ldr	r3, [pc, #408]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001ac6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1ee      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x352>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d107      	bne.n	8001aec <HAL_RCC_OscConfig+0x38c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001adc:	4b60      	ldr	r3, [pc, #384]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ae2:	4a5f      	ldr	r2, [pc, #380]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001ae4:	f023 0304 	bic.w	r3, r3, #4
 8001ae8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 80e2 	beq.w	8001cbe <HAL_RCC_OscConfig+0x55e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8001b00:	4b57      	ldr	r3, [pc, #348]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d111      	bne.n	8001b32 <HAL_RCC_OscConfig+0x3d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	4b54      	ldr	r3, [pc, #336]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b14:	4a52      	ldr	r2, [pc, #328]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001b16:	f043 0304 	orr.w	r3, r3, #4
 8001b1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001b1e:	4b50      	ldr	r3, [pc, #320]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001b32:	4b4a      	ldr	r3, [pc, #296]	@ (8001c5c <HAL_RCC_OscConfig+0x4fc>)
 8001b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d118      	bne.n	8001b70 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001b3e:	4b47      	ldr	r3, [pc, #284]	@ (8001c5c <HAL_RCC_OscConfig+0x4fc>)
 8001b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b42:	4a46      	ldr	r2, [pc, #280]	@ (8001c5c <HAL_RCC_OscConfig+0x4fc>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4a:	f7ff f9db 	bl	8000f04 <HAL_GetTick>
 8001b4e:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b52:	f7ff f9d7 	bl	8000f04 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e1e0      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001b64:	4b3d      	ldr	r3, [pc, #244]	@ (8001c5c <HAL_RCC_OscConfig+0x4fc>)
 8001b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x3f2>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d051      	beq.n	8001c1c <HAL_RCC_OscConfig+0x4bc>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_LSESYSEN);
 8001b78:	4b39      	ldr	r3, [pc, #228]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001b7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b82:	62bb      	str	r3, [r7, #40]	@ 0x28
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8001b8e:	4a34      	ldr	r2, [pc, #208]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b96:	f7ff f9b5 	bl	8000f04 <HAL_GetTick>
 8001b9a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x454>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f7ff f9b1 	bl	8000f04 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x454>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e1b8      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001bb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0ed      	beq.n	8001b9e <HAL_RCC_OscConfig+0x43e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR1_LSESYSEN) != 0U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d01e      	beq.n	8001c0c <HAL_RCC_OscConfig+0x4ac>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 8001bce:	e00a      	b.n	8001be6 <HAL_RCC_OscConfig+0x486>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd0:	f7ff f998 	bl	8000f04 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x486>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e19f      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 8001be6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001be8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0ed      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x470>
 8001bf4:	e057      	b.n	8001ca6 <HAL_RCC_OscConfig+0x546>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf6:	f7ff f985 	bl	8000f04 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e18c      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8001c0c:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001c0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1ed      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x496>
 8001c1a:	e044      	b.n	8001ca6 <HAL_RCC_OscConfig+0x546>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR1, (RCC_BDCR1_LSEON | RCC_BDCR1_LSESYSEN));
 8001c1c:	4b10      	ldr	r3, [pc, #64]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001c1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c22:	4a0f      	ldr	r2, [pc, #60]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001c24:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8001c28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR1, RCC_BDCR1_LSEBYP);
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001c2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c32:	4a0b      	ldr	r2, [pc, #44]	@ (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001c34:	f023 0304 	bic.w	r3, r3, #4
 8001c38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3c:	f7ff f962 	bl	8000f04 <HAL_GetTick>
 8001c40:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8001c42:	e00f      	b.n	8001c64 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c44:	f7ff f95e 	bl	8000f04 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d906      	bls.n	8001c64 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e165      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
 8001c5a:	bf00      	nop
 8001c5c:	46020800 	.word	0x46020800
 8001c60:	46020c00 	.word	0x46020c00
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8001c64:	4b98      	ldr	r3, [pc, #608]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001c66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1e8      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4e4>
        }
      }

      if (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSEN) != 0U)
 8001c72:	4b95      	ldr	r3, [pc, #596]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d012      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x546>
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7ff f93f 	bl	8000f04 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e146      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8001c98:	4b8b      	ldr	r3, [pc, #556]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001c9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1ed      	bne.n	8001c82 <HAL_RCC_OscConfig+0x522>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ca6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d107      	bne.n	8001cbe <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cae:	4b86      	ldr	r3, [pc, #536]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb4:	4a84      	ldr	r2, [pc, #528]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001cb6:	f023 0304 	bic.w	r3, r3, #4
 8001cba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if ((RCC_OscInitStruct->PLL1.PLLState) != RCC_PLL_NONE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 812e 	beq.w	8001f24 <HAL_RCC_OscConfig+0x7c4>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	f000 80ba 	beq.w	8001e44 <HAL_RCC_OscConfig+0x6e4>
    {
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_ON)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	f040 8093 	bne.w	8001e00 <HAL_RCC_OscConfig+0x6a0>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL1.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL1.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL1.PLLR));

        /* Disable the main PLL1. */
        tmpreg1 = (RCC->CR & ~RCC_CR_PLL1ON);
 8001cda:	4b7b      	ldr	r3, [pc, #492]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
        RCC->CR = tmpreg1;
 8001ce4:	4a78      	ldr	r2, [pc, #480]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cea:	f7ff f90b 	bl	8000f04 <HAL_GetTick>
 8001cee:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        do
        {
          tmpreg1 = RCC->CR;
 8001cf0:	4b75      	ldr	r3, [pc, #468]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7ff f905 	bl	8000f04 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e10e      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
          }
        } while ((tmpreg1 & RCC_CR_PLL1RDY) != 0U);
 8001d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1ee      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x590>

        /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
        if (RCC_OscInitStruct->PLL1.PLLSource == RCC_PLLSOURCE_HSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d108      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5cc>
        {
          /* Clock source is HSE or HSE/2 */
          pllsrc = HSE_VALUE >> ((tmpreg1 & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos);
 8001d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d1c:	0d1b      	lsrs	r3, r3, #20
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	4a6a      	ldr	r2, [pc, #424]	@ (8001ecc <HAL_RCC_OscConfig+0x76c>)
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
 8001d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d2a:	e001      	b.n	8001d30 <HAL_RCC_OscConfig+0x5d0>
        }
        else
        {
          /* Clock source is HSI */
          pllsrc = HSI_VALUE;
 8001d2c:	4b68      	ldr	r3, [pc, #416]	@ (8001ed0 <HAL_RCC_OscConfig+0x770>)
 8001d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Compute VCO input frequency depending on M divider */
        pllsrc = (pllsrc / RCC_OscInitStruct->PLL1.PLLM);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllsrc));

        if (pllsrc > PLL_INPUTRANGE0_FREQMAX)
 8001d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d3e:	4a65      	ldr	r2, [pc, #404]	@ (8001ed4 <HAL_RCC_OscConfig+0x774>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d902      	bls.n	8001d4a <HAL_RCC_OscConfig+0x5ea>
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE1;
 8001d44:	230c      	movs	r3, #12
 8001d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d48:	e001      	b.n	8001d4e <HAL_RCC_OscConfig+0x5ee>
        }
        else
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Configure PLL1 source, PLLM divider, VCO input range and enable PLL1R output. Clear also FRACEN*/
        tmpreg2 = RCC->PLL1CFGR;
 8001d4e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d52:	617b      	str	r3, [r7, #20]
        tmpreg2 &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1RGE | RCC_PLL1CFGR_PLL1FRACEN | RCC_PLL1CFGR_PLL1M);
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f423 63e3 	bic.w	r3, r3, #1816	@ 0x718
 8001d5a:	f023 0307 	bic.w	r3, r3, #7
 8001d5e:	617b      	str	r3, [r7, #20]
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d66:	431a      	orrs	r2, r3
                    ((RCC_OscInitStruct->PLL1.PLLM - 1u) << RCC_PLL1CFGR_PLL1M_Pos) | RCC_PLL1CFGR_PLL1REN);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	021b      	lsls	r3, r3, #8
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8001d70:	431a      	orrs	r2, r3
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d7a:	617b      	str	r3, [r7, #20]
        RCC->PLL1CFGR = tmpreg2;
 8001d7c:	4a52      	ldr	r2, [pc, #328]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLLN multiplication factor and PLLP, PLLQ, PLLR dividers */
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d86:	1e5a      	subs	r2, r3, #1
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	025b      	lsls	r3, r3, #9
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8001d90:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLQ - 1u) << RCC_PLL1DIVR_PLL1Q_Pos) |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d96:	3b01      	subs	r3, #1
 8001d98:	041b      	lsls	r3, r3, #16
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 8001d9a:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLR - 1u) << RCC_PLL1DIVR_PLL1R_Pos));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da0:	3b01      	subs	r3, #1
 8001da2:	061b      	lsls	r3, r3, #24
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8001da4:	4313      	orrs	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
        RCC->PLL1DIVR = tmpreg2;
 8001da8:	4a47      	ldr	r2, [pc, #284]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	6353      	str	r3, [r2, #52]	@ 0x34

        if (RCC_OscInitStruct->PLL1.PLLFractional != 0x00u)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00a      	beq.n	8001dcc <HAL_RCC_OscConfig+0x66c>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dba:	4a43      	ldr	r2, [pc, #268]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	6393      	str	r3, [r2, #56]	@ 0x38

          /* Enable PLL1FRACEN */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 8001dc0:	4b41      	ldr	r3, [pc, #260]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc4:	4a40      	ldr	r2, [pc, #256]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001dc6:	f043 0310 	orr.w	r3, r3, #16
 8001dca:	6293      	str	r3, [r2, #40]	@ 0x28
        }

        /* Enable the main PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001dcc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001dd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7ff f894 	bl	8000f04 <HAL_GetTick>
 8001ddc:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x692>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de0:	f7ff f890 	bl	8000f04 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e099      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001df2:	4b35      	ldr	r3, [pc, #212]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x680>
 8001dfe:	e091      	b.n	8001f24 <HAL_RCC_OscConfig+0x7c4>
        }
      }
      else
      {
        /* Disable the main PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001e00:	4b31      	ldr	r3, [pc, #196]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a30      	ldr	r2, [pc, #192]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001e06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff f87a 	bl	8000f04 <HAL_GetTick>
 8001e10:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x6c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e14:	f7ff f876 	bl	8000f04 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x6c6>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e07f      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e26:	4b28      	ldr	r3, [pc, #160]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x6b4>
          }
        }

        /* CLear the PLL1 source and disable outputs to save power when PLL1 is off */
        CLEAR_BIT(RCC->PLL1CFGR, (RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | \
 8001e32:	4b25      	ldr	r3, [pc, #148]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e36:	4a24      	ldr	r2, [pc, #144]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001e38:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001e3c:	f023 0303 	bic.w	r3, r3, #3
 8001e40:	6293      	str	r3, [r2, #40]	@ 0x28
 8001e42:	e06f      	b.n	8001f24 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL1 used as System clock source */
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_OscConfig+0x6f0>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e06a      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        tmpreg1 = RCC->PLL1CFGR;
 8001e50:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e54:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg2 = RCC->PLL1DIVR;
 8001e56:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec8 <HAL_RCC_OscConfig+0x768>)
 8001e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5a:	617b      	str	r3, [r7, #20]

        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 8001e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e5e:	f003 0203 	and.w	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d12b      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x762>
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 8001e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f003 0207 	and.w	r2, r3, #7
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e76:	3b01      	subs	r3, #1
        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d122      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e86:	3b01      	subs	r3, #1
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d11a      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	0a5b      	lsrs	r3, r3, #9
 8001e90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e98:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d111      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	0c1b      	lsrs	r3, r3, #16
 8001ea2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eaa:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d108      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) != (RCC_OscInitStruct->PLL1.PLLR - 1u)))
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	0e1b      	lsrs	r3, r3, #24
 8001eb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ebc:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d00a      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x778>
        {
          return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e02f      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c6>
 8001ec6:	bf00      	nop
 8001ec8:	46020c00 	.word	0x46020c00
 8001ecc:	01e84800 	.word	0x01e84800
 8001ed0:	00f42400 	.word	0x00f42400
 8001ed4:	007a1200 	.word	0x007a1200
        }
        else
        {
          /* Check if only fractional part needs to be updated  */
          tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 8001ed8:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <HAL_RCC_OscConfig+0x7d0>)
 8001eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001edc:	08db      	lsrs	r3, r3, #3
 8001ede:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ee2:	62bb      	str	r3, [r7, #40]	@ 0x28

          if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ee8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d01a      	beq.n	8001f24 <HAL_RCC_OscConfig+0x7c4>
          {
            assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

            /* Disable PLL1FRACEN */
            __HAL_RCC_PLL1_FRACN_DISABLE();
 8001eee:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <HAL_RCC_OscConfig+0x7d0>)
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8001f30 <HAL_RCC_OscConfig+0x7d0>)
 8001ef4:	f023 0310 	bic.w	r3, r3, #16
 8001ef8:	6293      	str	r3, [r2, #40]	@ 0x28

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001efa:	f7ff f803 	bl	8000f04 <HAL_GetTick>
 8001efe:	61f8      	str	r0, [r7, #28]

            /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
            while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8001f00:	bf00      	nop
 8001f02:	f7fe ffff 	bl	8000f04 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d0f9      	beq.n	8001f02 <HAL_RCC_OscConfig+0x7a2>
            {
            }

            /* Configure PLL1 PLL1FRACN */
            __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f12:	4a07      	ldr	r2, [pc, #28]	@ (8001f30 <HAL_RCC_OscConfig+0x7d0>)
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	6393      	str	r3, [r2, #56]	@ 0x38

            /* Enable PLL1FRACEN to latch new value. */
            __HAL_RCC_PLL1_FRACN_ENABLE();
 8001f18:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <HAL_RCC_OscConfig+0x7d0>)
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1c:	4a04      	ldr	r2, [pc, #16]	@ (8001f30 <HAL_RCC_OscConfig+0x7d0>)
 8001f1e:	f043 0310 	orr.w	r3, r3, #16
 8001f22:	6293      	str	r3, [r2, #40]	@ 0x28
          }
        }
      }
    }
  }
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3730      	adds	r7, #48	@ 0x30
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	46020c00 	.word	0x46020c00

08001f34 <HAL_RCC_ClockConfig>:
  *         HCLK5 prescaler is switched automatically by hardware, but configuration shall
  *         always be performed before setting new PLL1 source as Sysclk source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e115      	b.n	8002174 <HAL_RCC_ClockConfig+0x240>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f48:	4b8c      	ldr	r3, [pc, #560]	@ (800217c <HAL_RCC_ClockConfig+0x248>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d910      	bls.n	8001f78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b89      	ldr	r3, [pc, #548]	@ (800217c <HAL_RCC_ClockConfig+0x248>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 020f 	bic.w	r2, r3, #15
 8001f5e:	4987      	ldr	r1, [pc, #540]	@ (800217c <HAL_RCC_ClockConfig+0x248>)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f66:	4b85      	ldr	r3, [pc, #532]	@ (800217c <HAL_RCC_ClockConfig+0x248>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d001      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0fd      	b.n	8002174 <HAL_RCC_ClockConfig+0x240>
  }

  /*-------------------------- HCLK5 Configuration --------------------------*/
  /* HCLK5 prescaler is switched automatically by hardware, but configuration shall
    always be performed before setting new PLL1 source as Sysclk source. */
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK5) == RCC_CLOCKTYPE_HCLK5)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00d      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x6c>
  {
    assert_param(IS_RCC_HCLK5_HSEHSI(RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
    assert_param(IS_RCC_HCLK5_PLL1(RCC_ClkInitStruct->AHB5_PLL1_CLKDivider));
    MODIFY_REG(RCC->CFGR4, (RCC_CFGR4_HDIV5 | RCC_CFGR4_HPRE5),
 8001f84:	4b7e      	ldr	r3, [pc, #504]	@ (8002180 <HAL_RCC_ClockConfig+0x24c>)
 8001f86:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f8a:	f023 0217 	bic.w	r2, r3, #23
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6999      	ldr	r1, [r3, #24]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	430b      	orrs	r3, r1
 8001f98:	4979      	ldr	r1, [pc, #484]	@ (8002180 <HAL_RCC_ClockConfig+0x24c>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
               (RCC_ClkInitStruct->AHB5_PLL1_CLKDivider | RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d06f      	beq.n	800208c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 8001fac:	4b74      	ldr	r3, [pc, #464]	@ (8002180 <HAL_RCC_ClockConfig+0x24c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	617b      	str	r3, [r7, #20]

    /* PLL1 is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d118      	bne.n	8001fec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the PLL1 ready flag */
      if ((tmpreg1 & RCC_CR_PLL1RDY) == 0U)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0d5      	b.n	8002174 <HAL_RCC_ClockConfig+0x240>
      }
      else
      {
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8001fc8:	4b6d      	ldr	r3, [pc, #436]	@ (8002180 <HAL_RCC_ClockConfig+0x24c>)
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	f003 020c 	and.w	r2, r3, #12
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d01a      	beq.n	8002010 <HAL_RCC_ClockConfig+0xdc>
        {
          /* Whatever is PLL frequency, use step prediv to reach maximum frequency. */
          /* Select pll1r to be prediv with 2-step divider when selected as Sysclk source */
          MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRESTEP, RCC_PLL1CFGR_PLL1RCLKPRE);
 8001fda:	4b69      	ldr	r3, [pc, #420]	@ (8002180 <HAL_RCC_ClockConfig+0x24c>)
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fde:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001fe2:	4a67      	ldr	r2, [pc, #412]	@ (8002180 <HAL_RCC_ClockConfig+0x24c>)
 8001fe4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fe8:	6293      	str	r3, [r2, #40]	@ 0x28
 8001fea:	e011      	b.n	8002010 <HAL_RCC_ClockConfig+0xdc>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d106      	bne.n	8002002 <HAL_RCC_ClockConfig+0xce>
      {
        /* Check the HSE ready flag */
        if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d108      	bne.n	8002010 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0b8      	b.n	8002174 <HAL_RCC_ClockConfig+0x240>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0b1      	b.n	8002174 <HAL_RCC_ClockConfig+0x240>
        }
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002010:	4b5b      	ldr	r3, [pc, #364]	@ (8002180 <HAL_RCC_ClockConfig+0x24c>)
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	f023 0203 	bic.w	r2, r3, #3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4958      	ldr	r1, [pc, #352]	@ (8002180 <HAL_RCC_ClockConfig+0x24c>)
 800201e:	4313      	orrs	r3, r2
 8002020:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002022:	f7fe ff6f 	bl	8000f04 <HAL_GetTick>
 8002026:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8002028:	e00a      	b.n	8002040 <HAL_RCC_ClockConfig+0x10c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202a:	f7fe ff6b 	bl	8000f04 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e099      	b.n	8002174 <HAL_RCC_ClockConfig+0x240>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8002040:	4b4f      	ldr	r3, [pc, #316]	@ (8002180 <HAL_RCC_ClockConfig+0x24c>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	f003 020c 	and.w	r2, r3, #12
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	429a      	cmp	r2, r3
 8002050:	d1eb      	bne.n	800202a <HAL_RCC_ClockConfig+0xf6>
      }
    }

    /* If PLL1rCLK is asked to be SYSCLK source, clear prediv. */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b03      	cmp	r3, #3
 8002058:	d118      	bne.n	800208c <HAL_RCC_ClockConfig+0x158>
    {
      /* Set PLL1R prediv to not divided */
      CLEAR_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRE);
 800205a:	4b49      	ldr	r3, [pc, #292]	@ (8002180 <HAL_RCC_ClockConfig+0x24c>)
 800205c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205e:	4a48      	ldr	r2, [pc, #288]	@ (8002180 <HAL_RCC_ClockConfig+0x24c>)
 8002060:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002064:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002066:	f7fe ff4d 	bl	8000f04 <HAL_GetTick>
 800206a:	60f8      	str	r0, [r7, #12]

      /* Wait until PLL1 not divided is ready */
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 800206c:	e008      	b.n	8002080 <HAL_RCC_ClockConfig+0x14c>
      {
        if ((HAL_GetTick() - tickstart) > PLL1_NDIV_TIMEOUT_VALUE)
 800206e:	f7fe ff49 	bl	8000f04 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b0a      	cmp	r3, #10
 800207a:	d901      	bls.n	8002080 <HAL_RCC_ClockConfig+0x14c>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e079      	b.n	8002174 <HAL_RCC_ClockConfig+0x240>
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8002080:	4b3f      	ldr	r3, [pc, #252]	@ (8002180 <HAL_RCC_ClockConfig+0x24c>)
 8002082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002084:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 800208c:	4b3c      	ldr	r3, [pc, #240]	@ (8002180 <HAL_RCC_ClockConfig+0x24c>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00a      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f023 0307 	bic.w	r3, r3, #7
 80020a8:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80020b4:	2301      	movs	r3, #1
 80020b6:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00a      	beq.n	80020da <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020ca:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80020d6:	2301      	movs	r3, #1
 80020d8:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00b      	beq.n	80020fe <HAL_RCC_ClockConfig+0x1ca>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80020ec:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80020fa:	2301      	movs	r3, #1
 80020fc:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <HAL_RCC_ClockConfig+0x1d6>
  {
    RCC->CFGR2 = tmpreg1;
 8002104:	4a1e      	ldr	r2, [pc, #120]	@ (8002180 <HAL_RCC_ClockConfig+0x24c>)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK7 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK7) == RCC_CLOCKTYPE_PCLK7)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB7CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB7CLKDivider);
 8002116:	4a1a      	ldr	r2, [pc, #104]	@ (8002180 <HAL_RCC_ClockConfig+0x24c>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b17      	ldr	r3, [pc, #92]	@ (800217c <HAL_RCC_ClockConfig+0x248>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d210      	bcs.n	800214e <HAL_RCC_ClockConfig+0x21a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b13      	ldr	r3, [pc, #76]	@ (800217c <HAL_RCC_ClockConfig+0x248>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4911      	ldr	r1, [pc, #68]	@ (800217c <HAL_RCC_ClockConfig+0x248>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213c:	4b0f      	ldr	r3, [pc, #60]	@ (800217c <HAL_RCC_ClockConfig+0x248>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d001      	beq.n	800214e <HAL_RCC_ClockConfig+0x21a>
    {
      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e012      	b.n	8002174 <HAL_RCC_ClockConfig+0x240>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800214e:	f000 f81f 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 8002152:	4602      	mov	r2, r0
 8002154:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <HAL_RCC_ClockConfig+0x24c>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	4909      	ldr	r1, [pc, #36]	@ (8002184 <HAL_RCC_ClockConfig+0x250>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	4a08      	ldr	r2, [pc, #32]	@ (8002188 <HAL_RCC_ClockConfig+0x254>)
 8002166:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002168:	4b08      	ldr	r3, [pc, #32]	@ (800218c <HAL_RCC_ClockConfig+0x258>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fe37 	bl	8000de0 <HAL_InitTick>
 8002172:	4603      	mov	r3, r0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40022000 	.word	0x40022000
 8002180:	46020c00 	.word	0x46020c00
 8002184:	08002e98 	.word	0x08002e98
 8002188:	20000000 	.word	0x20000000
 800218c:	20000034 	.word	0x20000034

08002190 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
  uint32_t sysclk;

  /* Get SYSCLK source */
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002196:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x48>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	607b      	str	r3, [r7, #4]

  if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 80021a6:	4b0d      	ldr	r3, [pc, #52]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x4c>)
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	e00f      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d109      	bne.n	80021c6 <HAL_RCC_GetSysClockFreq+0x36>
  {
    /* HSE used as system clock source. Check if HSE is divided by 2 */
    sysclk = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 80021b2:	4b09      	ldr	r3, [pc, #36]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x48>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	0d1b      	lsrs	r3, r3, #20
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	4a08      	ldr	r2, [pc, #32]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x50>)
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	e002      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else
  {
    /* PLL1 used as system clock source */
    sysclk = HAL_RCC_GetPLL1RFreq();
 80021c6:	f000 f863 	bl	8002290 <HAL_RCC_GetPLL1RFreq>
 80021ca:	6078      	str	r0, [r7, #4]
  }

  return sysclk;
 80021cc:	687b      	ldr	r3, [r7, #4]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	46020c00 	.word	0x46020c00
 80021dc:	00f42400 	.word	0x00f42400
 80021e0:	01e84800 	.word	0x01e84800

080021e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80021e8:	f7ff ffd2 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b07      	ldr	r3, [pc, #28]	@ (800220c <HAL_RCC_GetHCLKFreq+0x28>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	4906      	ldr	r1, [pc, #24]	@ (8002210 <HAL_RCC_GetHCLKFreq+0x2c>)
 80021f8:	5ccb      	ldrb	r3, [r1, r3]
 80021fa:	fa22 f303 	lsr.w	r3, r2, r3
 80021fe:	4a05      	ldr	r2, [pc, #20]	@ (8002214 <HAL_RCC_GetHCLKFreq+0x30>)
 8002200:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002202:	4b04      	ldr	r3, [pc, #16]	@ (8002214 <HAL_RCC_GetHCLKFreq+0x30>)
 8002204:	681b      	ldr	r3, [r3, #0]
}
 8002206:	4618      	mov	r0, r3
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	46020c00 	.word	0x46020c00
 8002210:	08002e98 	.word	0x08002e98
 8002214:	20000000 	.word	0x20000000

08002218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800221c:	f7ff ffe2 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002220:	4602      	mov	r2, r0
 8002222:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	4903      	ldr	r1, [pc, #12]	@ (800223c <HAL_RCC_GetPCLK1Freq+0x24>)
 800222e:	5ccb      	ldrb	r3, [r1, r3]
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002234:	4618      	mov	r0, r3
 8002236:	bd80      	pop	{r7, pc}
 8002238:	46020c00 	.word	0x46020c00
 800223c:	08002ea0 	.word	0x08002ea0

08002240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002244:	f7ff ffce 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002248:	4602      	mov	r2, r0
 800224a:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	4903      	ldr	r1, [pc, #12]	@ (8002264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002256:	5ccb      	ldrb	r3, [r1, r3]
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800225c:	4618      	mov	r0, r3
 800225e:	bd80      	pop	{r7, pc}
 8002260:	46020c00 	.word	0x46020c00
 8002264:	08002ea0 	.word	0x08002ea0

08002268 <HAL_RCC_GetPCLK7Freq>:
  * @note   Each time PCLK7 changes, this function must be called to update the
  *         right PCLK7 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK7 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK7Freq(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK7 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE7) >> RCC_CFGR3_PPRE7_Pos]);
 800226c:	f7ff ffba 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002270:	4602      	mov	r2, r0
 8002272:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <HAL_RCC_GetPCLK7Freq+0x20>)
 8002274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	4903      	ldr	r1, [pc, #12]	@ (800228c <HAL_RCC_GetPCLK7Freq+0x24>)
 800227e:	5ccb      	ldrb	r3, [r1, r3]
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}
 8002288:	46020c00 	.word	0x46020c00
 800228c:	08002ea0 	.word	0x08002ea0

08002290 <HAL_RCC_GetPLL1RFreq>:
/**
  * @brief  Return the PLL1R frequency.
  * @retval PLL1R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL1RFreq(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL1R divider */
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8002296:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <HAL_RCC_GetPLL1RFreq+0x34>)
 8002298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800229a:	0e1b      	lsrs	r3, r3, #24
 800229c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022a0:	3301      	adds	r3, #1
 80022a2:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL1R one */
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 80022a4:	f000 f810 	bl	80022c8 <RCC_PLL1_GetVCOOutputFreq>
 80022a8:	eef0 7a40 	vmov.f32	s15, s0
 80022ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022b0:	ee17 2a90 	vmov	r2, s15
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	46020c00 	.word	0x46020c00

080022c8 <RCC_PLL1_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL1 VCO output frequency
  * @retval Value of PLL1 VCO output frequency
  */
static float_t RCC_PLL1_GetVCOOutputFreq(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
  float_t pllm;
  float_t plln;
  float_t pllfracn;

  /* Get PLL1 DIVR register value */
  tmpreg1 = RCC->PLL1DIVR;
 80022ce:	4b36      	ldr	r3, [pc, #216]	@ (80023a8 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 80022d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 multiplication factor */
  tmp = (tmpreg1 & RCC_PLL1DIVR_PLL1N) + 1U;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022da:	3301      	adds	r3, #1
 80022dc:	617b      	str	r3, [r7, #20]
  plln = (float_t) tmp;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	ee07 3a90 	vmov	s15, r3
 80022e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e8:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Get PLL1 CFGR register value */
  tmpreg1 = RCC->PLL1CFGR;
 80022ec:	4b2e      	ldr	r3, [pc, #184]	@ (80023a8 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 80022ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 divider */
  tmp = ((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	3301      	adds	r3, #1
 80022fc:	617b      	str	r3, [r7, #20]
  pllm = (float_t) tmp;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	ee07 3a90 	vmov	s15, r3
 8002304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002308:	edc7 7a01 	vstr	s15, [r7, #4]

  /* Check if fractional part is enable */
  if ((tmpreg1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b00      	cmp	r3, #0
 8002314:	d006      	beq.n	8002324 <RCC_PLL1_GetVCOOutputFreq+0x5c>
  {
    tmp = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 8002316:	4b24      	ldr	r3, [pc, #144]	@ (80023a8 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8002318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800231a:	08db      	lsrs	r3, r3, #3
 800231c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	e001      	b.n	8002328 <RCC_PLL1_GetVCOOutputFreq+0x60>
  }
  else
  {
    tmp = 0u;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  }
  pllfracn = (float_t)tmp;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002332:	edc7 7a00 	vstr	s15, [r7]

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLL1CFGR_PLL1SRC)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d002      	beq.n	8002346 <RCC_PLL1_GetVCOOutputFreq+0x7e>
 8002340:	2b03      	cmp	r3, #3
 8002342:	d003      	beq.n	800234c <RCC_PLL1_GetVCOOutputFreq+0x84>
 8002344:	e013      	b.n	800236e <RCC_PLL1_GetVCOOutputFreq+0xa6>
  {
    /* HSI used as PLL1 clock source */
    case RCC_PLLSOURCE_HSI:
      pllsrc = (float_t)HSI_VALUE;
 8002346:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <RCC_PLL1_GetVCOOutputFreq+0xe4>)
 8002348:	613b      	str	r3, [r7, #16]
      break;
 800234a:	e014      	b.n	8002376 <RCC_PLL1_GetVCOOutputFreq+0xae>

    /* HSE used as PLL1 clock source */
    case RCC_PLLSOURCE_HSE:
      tmp = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 800234c:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0d1b      	lsrs	r3, r3, #20
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	4a16      	ldr	r2, [pc, #88]	@ (80023b0 <RCC_PLL1_GetVCOOutputFreq+0xe8>)
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
 800235c:	617b      	str	r3, [r7, #20]
      pllsrc = (float_t)tmp;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002368:	edc7 7a04 	vstr	s15, [r7, #16]
      break;
 800236c:	e003      	b.n	8002376 <RCC_PLL1_GetVCOOutputFreq+0xae>

    default:
      pllsrc = (float_t)0;
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	613b      	str	r3, [r7, #16]
      break;
 8002374:	bf00      	nop
  }

  /* Compute VCO output frequency */
  return ((pllsrc / pllm) * (plln + (pllfracn / (float_t)0x2000u)));
 8002376:	edd7 6a04 	vldr	s13, [r7, #16]
 800237a:	edd7 7a01 	vldr	s15, [r7, #4]
 800237e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002382:	edd7 7a00 	vldr	s15, [r7]
 8002386:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 80023b4 <RCC_PLL1_GetVCOOutputFreq+0xec>
 800238a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800238e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002396:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800239a:	eeb0 0a67 	vmov.f32	s0, s15
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	46020c00 	.word	0x46020c00
 80023ac:	4b742400 	.word	0x4b742400
 80023b0:	01e84800 	.word	0x01e84800
 80023b4:	46000000 	.word	0x46000000

080023b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e042      	b.n	8002450 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d106      	bne.n	80023e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f83b 	bl	8002458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2224      	movs	r2, #36	@ 0x24
 80023e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0201 	bic.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 fad0 	bl	80029a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f82f 	bl	800246c <UART_SetConfig>
 800240e:	4603      	mov	r3, r0
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e01b      	b.n	8002450 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002426:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002436:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 fb4f 	bl	8002aec <UART_CheckIdleState>
 800244e:	4603      	mov	r3, r0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800246c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002470:	b08c      	sub	sp, #48	@ 0x30
 8002472:	af00      	add	r7, sp, #0
 8002474:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	431a      	orrs	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	431a      	orrs	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	4313      	orrs	r3, r2
 8002492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4b98      	ldr	r3, [pc, #608]	@ (80026fc <UART_SetConfig+0x290>)
 800249c:	4013      	ands	r3, r2
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024a4:	430b      	orrs	r3, r1
 80024a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a8d      	ldr	r2, [pc, #564]	@ (8002700 <UART_SetConfig+0x294>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d004      	beq.n	80024d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024d4:	4313      	orrs	r3, r2
 80024d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80024e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024ec:	430b      	orrs	r3, r1
 80024ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f6:	f023 010f 	bic.w	r1, r3, #15
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a7e      	ldr	r2, [pc, #504]	@ (8002704 <UART_SetConfig+0x298>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d125      	bne.n	800255c <UART_SetConfig+0xf0>
 8002510:	4b7d      	ldr	r3, [pc, #500]	@ (8002708 <UART_SetConfig+0x29c>)
 8002512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b03      	cmp	r3, #3
 800251c:	d81a      	bhi.n	8002554 <UART_SetConfig+0xe8>
 800251e:	a201      	add	r2, pc, #4	@ (adr r2, 8002524 <UART_SetConfig+0xb8>)
 8002520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002524:	08002535 	.word	0x08002535
 8002528:	08002545 	.word	0x08002545
 800252c:	0800253d 	.word	0x0800253d
 8002530:	0800254d 	.word	0x0800254d
 8002534:	2301      	movs	r3, #1
 8002536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800253a:	e07c      	b.n	8002636 <UART_SetConfig+0x1ca>
 800253c:	2304      	movs	r3, #4
 800253e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002542:	e078      	b.n	8002636 <UART_SetConfig+0x1ca>
 8002544:	2308      	movs	r3, #8
 8002546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800254a:	e074      	b.n	8002636 <UART_SetConfig+0x1ca>
 800254c:	2310      	movs	r3, #16
 800254e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002552:	e070      	b.n	8002636 <UART_SetConfig+0x1ca>
 8002554:	2320      	movs	r3, #32
 8002556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800255a:	e06c      	b.n	8002636 <UART_SetConfig+0x1ca>
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a6a      	ldr	r2, [pc, #424]	@ (800270c <UART_SetConfig+0x2a0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d138      	bne.n	80025d8 <UART_SetConfig+0x16c>
 8002566:	4b68      	ldr	r3, [pc, #416]	@ (8002708 <UART_SetConfig+0x29c>)
 8002568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	2b0c      	cmp	r3, #12
 8002572:	d82d      	bhi.n	80025d0 <UART_SetConfig+0x164>
 8002574:	a201      	add	r2, pc, #4	@ (adr r2, 800257c <UART_SetConfig+0x110>)
 8002576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257a:	bf00      	nop
 800257c:	080025b1 	.word	0x080025b1
 8002580:	080025d1 	.word	0x080025d1
 8002584:	080025d1 	.word	0x080025d1
 8002588:	080025d1 	.word	0x080025d1
 800258c:	080025c1 	.word	0x080025c1
 8002590:	080025d1 	.word	0x080025d1
 8002594:	080025d1 	.word	0x080025d1
 8002598:	080025d1 	.word	0x080025d1
 800259c:	080025b9 	.word	0x080025b9
 80025a0:	080025d1 	.word	0x080025d1
 80025a4:	080025d1 	.word	0x080025d1
 80025a8:	080025d1 	.word	0x080025d1
 80025ac:	080025c9 	.word	0x080025c9
 80025b0:	2300      	movs	r3, #0
 80025b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025b6:	e03e      	b.n	8002636 <UART_SetConfig+0x1ca>
 80025b8:	2304      	movs	r3, #4
 80025ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025be:	e03a      	b.n	8002636 <UART_SetConfig+0x1ca>
 80025c0:	2308      	movs	r3, #8
 80025c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025c6:	e036      	b.n	8002636 <UART_SetConfig+0x1ca>
 80025c8:	2310      	movs	r3, #16
 80025ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025ce:	e032      	b.n	8002636 <UART_SetConfig+0x1ca>
 80025d0:	2320      	movs	r3, #32
 80025d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025d6:	e02e      	b.n	8002636 <UART_SetConfig+0x1ca>
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a48      	ldr	r2, [pc, #288]	@ (8002700 <UART_SetConfig+0x294>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d126      	bne.n	8002630 <UART_SetConfig+0x1c4>
 80025e2:	4b49      	ldr	r3, [pc, #292]	@ (8002708 <UART_SetConfig+0x29c>)
 80025e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d81b      	bhi.n	8002628 <UART_SetConfig+0x1bc>
 80025f0:	a201      	add	r2, pc, #4	@ (adr r2, 80025f8 <UART_SetConfig+0x18c>)
 80025f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f6:	bf00      	nop
 80025f8:	08002609 	.word	0x08002609
 80025fc:	08002619 	.word	0x08002619
 8002600:	08002611 	.word	0x08002611
 8002604:	08002621 	.word	0x08002621
 8002608:	2302      	movs	r3, #2
 800260a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800260e:	e012      	b.n	8002636 <UART_SetConfig+0x1ca>
 8002610:	2304      	movs	r3, #4
 8002612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002616:	e00e      	b.n	8002636 <UART_SetConfig+0x1ca>
 8002618:	2308      	movs	r3, #8
 800261a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800261e:	e00a      	b.n	8002636 <UART_SetConfig+0x1ca>
 8002620:	2310      	movs	r3, #16
 8002622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002626:	e006      	b.n	8002636 <UART_SetConfig+0x1ca>
 8002628:	2320      	movs	r3, #32
 800262a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800262e:	e002      	b.n	8002636 <UART_SetConfig+0x1ca>
 8002630:	2320      	movs	r3, #32
 8002632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a31      	ldr	r2, [pc, #196]	@ (8002700 <UART_SetConfig+0x294>)
 800263c:	4293      	cmp	r3, r2
 800263e:	f040 80b4 	bne.w	80027aa <UART_SetConfig+0x33e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002642:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002646:	3b02      	subs	r3, #2
 8002648:	2b0e      	cmp	r3, #14
 800264a:	d830      	bhi.n	80026ae <UART_SetConfig+0x242>
 800264c:	a201      	add	r2, pc, #4	@ (adr r2, 8002654 <UART_SetConfig+0x1e8>)
 800264e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002652:	bf00      	nop
 8002654:	08002691 	.word	0x08002691
 8002658:	080026af 	.word	0x080026af
 800265c:	08002699 	.word	0x08002699
 8002660:	080026af 	.word	0x080026af
 8002664:	080026af 	.word	0x080026af
 8002668:	080026af 	.word	0x080026af
 800266c:	0800269f 	.word	0x0800269f
 8002670:	080026af 	.word	0x080026af
 8002674:	080026af 	.word	0x080026af
 8002678:	080026af 	.word	0x080026af
 800267c:	080026af 	.word	0x080026af
 8002680:	080026af 	.word	0x080026af
 8002684:	080026af 	.word	0x080026af
 8002688:	080026af 	.word	0x080026af
 800268c:	080026a7 	.word	0x080026a7
    {
      case UART_CLOCKSOURCE_PCLK7:
        pclk = HAL_RCC_GetPCLK7Freq();
 8002690:	f7ff fdea 	bl	8002268 <HAL_RCC_GetPCLK7Freq>
 8002694:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002696:	e010      	b.n	80026ba <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002698:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <UART_SetConfig+0x2a4>)
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800269c:	e00d      	b.n	80026ba <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800269e:	f7ff fd77 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 80026a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80026a4:	e009      	b.n	80026ba <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80026ac:	e005      	b.n	80026ba <UART_SetConfig+0x24e>
      default:
        pclk = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80026b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 8159 	beq.w	8002974 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c6:	4a13      	ldr	r2, [pc, #76]	@ (8002714 <UART_SetConfig+0x2a8>)
 80026c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026cc:	461a      	mov	r2, r3
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d305      	bcc.n	80026f2 <UART_SetConfig+0x286>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d912      	bls.n	8002718 <UART_SetConfig+0x2ac>
      {
        ret = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80026f8:	e13c      	b.n	8002974 <UART_SetConfig+0x508>
 80026fa:	bf00      	nop
 80026fc:	cfff69f3 	.word	0xcfff69f3
 8002700:	46002400 	.word	0x46002400
 8002704:	40013800 	.word	0x40013800
 8002708:	46020c00 	.word	0x46020c00
 800270c:	40004400 	.word	0x40004400
 8002710:	00f42400 	.word	0x00f42400
 8002714:	08002ea8 	.word	0x08002ea8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	2200      	movs	r2, #0
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	60fa      	str	r2, [r7, #12]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002724:	4a9e      	ldr	r2, [pc, #632]	@ (80029a0 <UART_SetConfig+0x534>)
 8002726:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800272a:	b29b      	uxth	r3, r3
 800272c:	2200      	movs	r2, #0
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002736:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800273a:	f7fd fd2f 	bl	800019c <__aeabi_uldivmod>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	020b      	lsls	r3, r1, #8
 8002750:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002754:	0202      	lsls	r2, r0, #8
 8002756:	6979      	ldr	r1, [r7, #20]
 8002758:	6849      	ldr	r1, [r1, #4]
 800275a:	0849      	lsrs	r1, r1, #1
 800275c:	2000      	movs	r0, #0
 800275e:	460c      	mov	r4, r1
 8002760:	4605      	mov	r5, r0
 8002762:	eb12 0804 	adds.w	r8, r2, r4
 8002766:	eb43 0905 	adc.w	r9, r3, r5
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	469a      	mov	sl, r3
 8002772:	4693      	mov	fp, r2
 8002774:	4652      	mov	r2, sl
 8002776:	465b      	mov	r3, fp
 8002778:	4640      	mov	r0, r8
 800277a:	4649      	mov	r1, r9
 800277c:	f7fd fd0e 	bl	800019c <__aeabi_uldivmod>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4613      	mov	r3, r2
 8002786:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800278e:	d308      	bcc.n	80027a2 <UART_SetConfig+0x336>
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002796:	d204      	bcs.n	80027a2 <UART_SetConfig+0x336>
        {
          huart->Instance->BRR = usartdiv;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6a3a      	ldr	r2, [r7, #32]
 800279e:	60da      	str	r2, [r3, #12]
 80027a0:	e0e8      	b.n	8002974 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80027a8:	e0e4      	b.n	8002974 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027b2:	d177      	bne.n	80028a4 <UART_SetConfig+0x438>
  {
    switch (clocksource)
 80027b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80027b8:	2b10      	cmp	r3, #16
 80027ba:	d838      	bhi.n	800282e <UART_SetConfig+0x3c2>
 80027bc:	a201      	add	r2, pc, #4	@ (adr r2, 80027c4 <UART_SetConfig+0x358>)
 80027be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c2:	bf00      	nop
 80027c4:	08002809 	.word	0x08002809
 80027c8:	08002811 	.word	0x08002811
 80027cc:	0800282f 	.word	0x0800282f
 80027d0:	0800282f 	.word	0x0800282f
 80027d4:	08002819 	.word	0x08002819
 80027d8:	0800282f 	.word	0x0800282f
 80027dc:	0800282f 	.word	0x0800282f
 80027e0:	0800282f 	.word	0x0800282f
 80027e4:	0800281f 	.word	0x0800281f
 80027e8:	0800282f 	.word	0x0800282f
 80027ec:	0800282f 	.word	0x0800282f
 80027f0:	0800282f 	.word	0x0800282f
 80027f4:	0800282f 	.word	0x0800282f
 80027f8:	0800282f 	.word	0x0800282f
 80027fc:	0800282f 	.word	0x0800282f
 8002800:	0800282f 	.word	0x0800282f
 8002804:	08002827 	.word	0x08002827
    {
#if defined(USART2)
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002808:	f7ff fd06 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 800280c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800280e:	e014      	b.n	800283a <UART_SetConfig+0x3ce>
#endif /* USART2 */
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002810:	f7ff fd16 	bl	8002240 <HAL_RCC_GetPCLK2Freq>
 8002814:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002816:	e010      	b.n	800283a <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002818:	4b62      	ldr	r3, [pc, #392]	@ (80029a4 <UART_SetConfig+0x538>)
 800281a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800281c:	e00d      	b.n	800283a <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800281e:	f7ff fcb7 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 8002822:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002824:	e009      	b.n	800283a <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800282c:	e005      	b.n	800283a <UART_SetConfig+0x3ce>
      default:
        pclk = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002838:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8099 	beq.w	8002974 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002846:	4a56      	ldr	r2, [pc, #344]	@ (80029a0 <UART_SetConfig+0x534>)
 8002848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800284c:	461a      	mov	r2, r3
 800284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002850:	fbb3 f3f2 	udiv	r3, r3, r2
 8002854:	005a      	lsls	r2, r3, #1
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	085b      	lsrs	r3, r3, #1
 800285c:	441a      	add	r2, r3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	fbb2 f3f3 	udiv	r3, r2, r3
 8002866:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	2b0f      	cmp	r3, #15
 800286c:	d916      	bls.n	800289c <UART_SetConfig+0x430>
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002874:	d212      	bcs.n	800289c <UART_SetConfig+0x430>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	b29b      	uxth	r3, r3
 800287a:	f023 030f 	bic.w	r3, r3, #15
 800287e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	085b      	lsrs	r3, r3, #1
 8002884:	b29b      	uxth	r3, r3
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	b29a      	uxth	r2, r3
 800288c:	8bfb      	ldrh	r3, [r7, #30]
 800288e:	4313      	orrs	r3, r2
 8002890:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	8bfa      	ldrh	r2, [r7, #30]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	e06b      	b.n	8002974 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80028a2:	e067      	b.n	8002974 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80028a8:	2b10      	cmp	r3, #16
 80028aa:	d838      	bhi.n	800291e <UART_SetConfig+0x4b2>
 80028ac:	a201      	add	r2, pc, #4	@ (adr r2, 80028b4 <UART_SetConfig+0x448>)
 80028ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b2:	bf00      	nop
 80028b4:	080028f9 	.word	0x080028f9
 80028b8:	08002901 	.word	0x08002901
 80028bc:	0800291f 	.word	0x0800291f
 80028c0:	0800291f 	.word	0x0800291f
 80028c4:	08002909 	.word	0x08002909
 80028c8:	0800291f 	.word	0x0800291f
 80028cc:	0800291f 	.word	0x0800291f
 80028d0:	0800291f 	.word	0x0800291f
 80028d4:	0800290f 	.word	0x0800290f
 80028d8:	0800291f 	.word	0x0800291f
 80028dc:	0800291f 	.word	0x0800291f
 80028e0:	0800291f 	.word	0x0800291f
 80028e4:	0800291f 	.word	0x0800291f
 80028e8:	0800291f 	.word	0x0800291f
 80028ec:	0800291f 	.word	0x0800291f
 80028f0:	0800291f 	.word	0x0800291f
 80028f4:	08002917 	.word	0x08002917
    {
#if defined(USART2)
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028f8:	f7ff fc8e 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 80028fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80028fe:	e014      	b.n	800292a <UART_SetConfig+0x4be>
#endif /* USART2 */
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002900:	f7ff fc9e 	bl	8002240 <HAL_RCC_GetPCLK2Freq>
 8002904:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002906:	e010      	b.n	800292a <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002908:	4b26      	ldr	r3, [pc, #152]	@ (80029a4 <UART_SetConfig+0x538>)
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800290c:	e00d      	b.n	800292a <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800290e:	f7ff fc3f 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 8002912:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002914:	e009      	b.n	800292a <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002916:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800291c:	e005      	b.n	800292a <UART_SetConfig+0x4be>
      default:
        pclk = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002928:	bf00      	nop
    }

    if (pclk != 0U)
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	2b00      	cmp	r3, #0
 800292e:	d021      	beq.n	8002974 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	4a1a      	ldr	r2, [pc, #104]	@ (80029a0 <UART_SetConfig+0x534>)
 8002936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800293a:	461a      	mov	r2, r3
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	441a      	add	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	2b0f      	cmp	r3, #15
 8002958:	d909      	bls.n	800296e <UART_SetConfig+0x502>
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002960:	d205      	bcs.n	800296e <UART_SetConfig+0x502>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	b29a      	uxth	r2, r3
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60da      	str	r2, [r3, #12]
 800296c:	e002      	b.n	8002974 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2201      	movs	r2, #1
 8002978:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2201      	movs	r2, #1
 8002980:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2200      	movs	r2, #0
 8002988:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2200      	movs	r2, #0
 800298e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002990:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002994:	4618      	mov	r0, r3
 8002996:	3730      	adds	r7, #48	@ 0x30
 8002998:	46bd      	mov	sp, r7
 800299a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800299e:	bf00      	nop
 80029a0:	08002ea8 	.word	0x08002ea8
 80029a4:	00f42400 	.word	0x00f42400

080029a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01a      	beq.n	8002abe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002aa6:	d10a      	bne.n	8002abe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	605a      	str	r2, [r3, #4]
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b098      	sub	sp, #96	@ 0x60
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002afc:	f7fe fa02 	bl	8000f04 <HAL_GetTick>
 8002b00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d12f      	bne.n	8002b70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f88e 	bl	8002c40 <UART_WaitOnFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d022      	beq.n	8002b70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b32:	e853 3f00 	ldrex	r3, [r3]
 8002b36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b4a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b50:	e841 2300 	strex	r3, r2, [r1]
 8002b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1e6      	bne.n	8002b2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e063      	b.n	8002c38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d149      	bne.n	8002c12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b7e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b86:	2200      	movs	r2, #0
 8002b88:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f857 	bl	8002c40 <UART_WaitOnFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d03c      	beq.n	8002c12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	e853 3f00 	ldrex	r3, [r3]
 8002ba4:	623b      	str	r3, [r7, #32]
   return(result);
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bbe:	e841 2300 	strex	r3, r2, [r1]
 8002bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1e6      	bne.n	8002b98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3308      	adds	r3, #8
 8002bd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	e853 3f00 	ldrex	r3, [r3]
 8002bd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3308      	adds	r3, #8
 8002be8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002bea:	61fa      	str	r2, [r7, #28]
 8002bec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bee:	69b9      	ldr	r1, [r7, #24]
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	e841 2300 	strex	r3, r2, [r1]
 8002bf6:	617b      	str	r3, [r7, #20]
   return(result);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1e5      	bne.n	8002bca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e012      	b.n	8002c38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3758      	adds	r7, #88	@ 0x58
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c50:	e04f      	b.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c58:	d04b      	beq.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5a:	f7fe f953 	bl	8000f04 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d302      	bcc.n	8002c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e04e      	b.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d037      	beq.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b80      	cmp	r3, #128	@ 0x80
 8002c86:	d034      	beq.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b40      	cmp	r3, #64	@ 0x40
 8002c8c:	d031      	beq.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d110      	bne.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f838 	bl	8002d1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2208      	movs	r2, #8
 8002cae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e029      	b.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ccc:	d111      	bne.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002cd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f81e 	bl	8002d1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e00f      	b.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69da      	ldr	r2, [r3, #28]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	bf0c      	ite	eq
 8002d02:	2301      	moveq	r3, #1
 8002d04:	2300      	movne	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d0a0      	beq.n	8002c52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b095      	sub	sp, #84	@ 0x54
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d2a:	e853 3f00 	ldrex	r3, [r3]
 8002d2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d40:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d48:	e841 2300 	strex	r3, r2, [r1]
 8002d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1e6      	bne.n	8002d22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3308      	adds	r3, #8
 8002d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	e853 3f00 	ldrex	r3, [r3]
 8002d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3308      	adds	r3, #8
 8002d76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d80:	e841 2300 	strex	r3, r2, [r1]
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1e3      	bne.n	8002d54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d118      	bne.n	8002dc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	e853 3f00 	ldrex	r3, [r3]
 8002da0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f023 0310 	bic.w	r3, r3, #16
 8002da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db6:	6979      	ldr	r1, [r7, #20]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	e841 2300 	strex	r3, r2, [r1]
 8002dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1e6      	bne.n	8002d94 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002dda:	bf00      	nop
 8002ddc:	3754      	adds	r7, #84	@ 0x54
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <memset>:
 8002de6:	4402      	add	r2, r0
 8002de8:	4603      	mov	r3, r0
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d100      	bne.n	8002df0 <memset+0xa>
 8002dee:	4770      	bx	lr
 8002df0:	f803 1b01 	strb.w	r1, [r3], #1
 8002df4:	e7f9      	b.n	8002dea <memset+0x4>
	...

08002df8 <__libc_init_array>:
 8002df8:	b570      	push	{r4, r5, r6, lr}
 8002dfa:	4d0d      	ldr	r5, [pc, #52]	@ (8002e30 <__libc_init_array+0x38>)
 8002dfc:	2600      	movs	r6, #0
 8002dfe:	4c0d      	ldr	r4, [pc, #52]	@ (8002e34 <__libc_init_array+0x3c>)
 8002e00:	1b64      	subs	r4, r4, r5
 8002e02:	10a4      	asrs	r4, r4, #2
 8002e04:	42a6      	cmp	r6, r4
 8002e06:	d109      	bne.n	8002e1c <__libc_init_array+0x24>
 8002e08:	4d0b      	ldr	r5, [pc, #44]	@ (8002e38 <__libc_init_array+0x40>)
 8002e0a:	2600      	movs	r6, #0
 8002e0c:	4c0b      	ldr	r4, [pc, #44]	@ (8002e3c <__libc_init_array+0x44>)
 8002e0e:	f000 f817 	bl	8002e40 <_init>
 8002e12:	1b64      	subs	r4, r4, r5
 8002e14:	10a4      	asrs	r4, r4, #2
 8002e16:	42a6      	cmp	r6, r4
 8002e18:	d105      	bne.n	8002e26 <__libc_init_array+0x2e>
 8002e1a:	bd70      	pop	{r4, r5, r6, pc}
 8002e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e20:	3601      	adds	r6, #1
 8002e22:	4798      	blx	r3
 8002e24:	e7ee      	b.n	8002e04 <__libc_init_array+0xc>
 8002e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e2a:	3601      	adds	r6, #1
 8002e2c:	4798      	blx	r3
 8002e2e:	e7f2      	b.n	8002e16 <__libc_init_array+0x1e>
 8002e30:	08002ec8 	.word	0x08002ec8
 8002e34:	08002ec8 	.word	0x08002ec8
 8002e38:	08002ec8 	.word	0x08002ec8
 8002e3c:	08002ecc 	.word	0x08002ecc

08002e40 <_init>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	bf00      	nop
 8002e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e46:	bc08      	pop	{r3}
 8002e48:	469e      	mov	lr, r3
 8002e4a:	4770      	bx	lr

08002e4c <_fini>:
 8002e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4e:	bf00      	nop
 8002e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e52:	bc08      	pop	{r3}
 8002e54:	469e      	mov	lr, r3
 8002e56:	4770      	bx	lr
