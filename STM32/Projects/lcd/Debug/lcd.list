
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000015c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dc0  0800015c  0800015c  0000115c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003f1c  08003f1c  00004f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fa4  08003fa4  0000504c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fa4  08003fa4  00004fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fac  08003fac  0000504c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fac  08003fac  00004fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fb0  08003fb0  00004fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  08003fb4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000004c  08004000  0000504c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08004000  00005190  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001242b  00000000  00000000  00005082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026eb  00000000  00000000  000174ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00019b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3a  00000000  00000000  0001aa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000344b  00000000  00000000  0001b562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d00  00000000  00000000  0001e9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1159  00000000  00000000  000326ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103806  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd4  00000000  00000000  0010384c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  00107420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800015c <__do_global_dtors_aux>:
 800015c:	b510      	push	{r4, lr}
 800015e:	4c05      	ldr	r4, [pc, #20]	@ (8000174 <__do_global_dtors_aux+0x18>)
 8000160:	7823      	ldrb	r3, [r4, #0]
 8000162:	b933      	cbnz	r3, 8000172 <__do_global_dtors_aux+0x16>
 8000164:	4b04      	ldr	r3, [pc, #16]	@ (8000178 <__do_global_dtors_aux+0x1c>)
 8000166:	b113      	cbz	r3, 800016e <__do_global_dtors_aux+0x12>
 8000168:	4804      	ldr	r0, [pc, #16]	@ (800017c <__do_global_dtors_aux+0x20>)
 800016a:	f3af 8000 	nop.w
 800016e:	2301      	movs	r3, #1
 8000170:	7023      	strb	r3, [r4, #0]
 8000172:	bd10      	pop	{r4, pc}
 8000174:	2000004c 	.word	0x2000004c
 8000178:	00000000 	.word	0x00000000
 800017c:	08003f04 	.word	0x08003f04

08000180 <frame_dummy>:
 8000180:	b508      	push	{r3, lr}
 8000182:	4b03      	ldr	r3, [pc, #12]	@ (8000190 <frame_dummy+0x10>)
 8000184:	b11b      	cbz	r3, 800018e <frame_dummy+0xe>
 8000186:	4903      	ldr	r1, [pc, #12]	@ (8000194 <frame_dummy+0x14>)
 8000188:	4803      	ldr	r0, [pc, #12]	@ (8000198 <frame_dummy+0x18>)
 800018a:	f3af 8000 	nop.w
 800018e:	bd08      	pop	{r3, pc}
 8000190:	00000000 	.word	0x00000000
 8000194:	20000050 	.word	0x20000050
 8000198:	08003f04 	.word	0x08003f04

0800019c <__aeabi_uldivmod>:
 800019c:	b953      	cbnz	r3, 80001b4 <__aeabi_uldivmod+0x18>
 800019e:	b94a      	cbnz	r2, 80001b4 <__aeabi_uldivmod+0x18>
 80001a0:	2900      	cmp	r1, #0
 80001a2:	bf08      	it	eq
 80001a4:	2800      	cmpeq	r0, #0
 80001a6:	bf1c      	itt	ne
 80001a8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ac:	f04f 30ff 	movne.w	r0, #4294967295
 80001b0:	f000 b97e 	b.w	80004b0 <__aeabi_idiv0>
 80001b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001bc:	f000 f806 	bl	80001cc <__udivmoddi4>
 80001c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c8:	b004      	add	sp, #16
 80001ca:	4770      	bx	lr

080001cc <__udivmoddi4>:
 80001cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001d0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80001d2:	460c      	mov	r4, r1
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d14d      	bne.n	8000274 <__udivmoddi4+0xa8>
 80001d8:	428a      	cmp	r2, r1
 80001da:	460f      	mov	r7, r1
 80001dc:	4684      	mov	ip, r0
 80001de:	4696      	mov	lr, r2
 80001e0:	fab2 f382 	clz	r3, r2
 80001e4:	d960      	bls.n	80002a8 <__udivmoddi4+0xdc>
 80001e6:	b14b      	cbz	r3, 80001fc <__udivmoddi4+0x30>
 80001e8:	fa02 fe03 	lsl.w	lr, r2, r3
 80001ec:	f1c3 0220 	rsb	r2, r3, #32
 80001f0:	409f      	lsls	r7, r3
 80001f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80001f6:	fa20 f202 	lsr.w	r2, r0, r2
 80001fa:	4317      	orrs	r7, r2
 80001fc:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000200:	fa1f f48e 	uxth.w	r4, lr
 8000204:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000208:	fbb7 f1f6 	udiv	r1, r7, r6
 800020c:	fb06 7711 	mls	r7, r6, r1, r7
 8000210:	fb01 f004 	mul.w	r0, r1, r4
 8000214:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000218:	4290      	cmp	r0, r2
 800021a:	d908      	bls.n	800022e <__udivmoddi4+0x62>
 800021c:	eb1e 0202 	adds.w	r2, lr, r2
 8000220:	f101 37ff 	add.w	r7, r1, #4294967295
 8000224:	d202      	bcs.n	800022c <__udivmoddi4+0x60>
 8000226:	4290      	cmp	r0, r2
 8000228:	f200 812d 	bhi.w	8000486 <__udivmoddi4+0x2ba>
 800022c:	4639      	mov	r1, r7
 800022e:	1a12      	subs	r2, r2, r0
 8000230:	fa1f fc8c 	uxth.w	ip, ip
 8000234:	fbb2 f0f6 	udiv	r0, r2, r6
 8000238:	fb06 2210 	mls	r2, r6, r0, r2
 800023c:	fb00 f404 	mul.w	r4, r0, r4
 8000240:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000244:	4564      	cmp	r4, ip
 8000246:	d908      	bls.n	800025a <__udivmoddi4+0x8e>
 8000248:	eb1e 0c0c 	adds.w	ip, lr, ip
 800024c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000250:	d202      	bcs.n	8000258 <__udivmoddi4+0x8c>
 8000252:	4564      	cmp	r4, ip
 8000254:	f200 811a 	bhi.w	800048c <__udivmoddi4+0x2c0>
 8000258:	4610      	mov	r0, r2
 800025a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800025e:	ebac 0c04 	sub.w	ip, ip, r4
 8000262:	2100      	movs	r1, #0
 8000264:	b125      	cbz	r5, 8000270 <__udivmoddi4+0xa4>
 8000266:	fa2c f303 	lsr.w	r3, ip, r3
 800026a:	2200      	movs	r2, #0
 800026c:	e9c5 3200 	strd	r3, r2, [r5]
 8000270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000274:	428b      	cmp	r3, r1
 8000276:	d905      	bls.n	8000284 <__udivmoddi4+0xb8>
 8000278:	b10d      	cbz	r5, 800027e <__udivmoddi4+0xb2>
 800027a:	e9c5 0100 	strd	r0, r1, [r5]
 800027e:	2100      	movs	r1, #0
 8000280:	4608      	mov	r0, r1
 8000282:	e7f5      	b.n	8000270 <__udivmoddi4+0xa4>
 8000284:	fab3 f183 	clz	r1, r3
 8000288:	2900      	cmp	r1, #0
 800028a:	d14d      	bne.n	8000328 <__udivmoddi4+0x15c>
 800028c:	42a3      	cmp	r3, r4
 800028e:	f0c0 80f2 	bcc.w	8000476 <__udivmoddi4+0x2aa>
 8000292:	4290      	cmp	r0, r2
 8000294:	f080 80ef 	bcs.w	8000476 <__udivmoddi4+0x2aa>
 8000298:	4606      	mov	r6, r0
 800029a:	4623      	mov	r3, r4
 800029c:	4608      	mov	r0, r1
 800029e:	2d00      	cmp	r5, #0
 80002a0:	d0e6      	beq.n	8000270 <__udivmoddi4+0xa4>
 80002a2:	e9c5 6300 	strd	r6, r3, [r5]
 80002a6:	e7e3      	b.n	8000270 <__udivmoddi4+0xa4>
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	f040 80a2 	bne.w	80003f2 <__udivmoddi4+0x226>
 80002ae:	1a8a      	subs	r2, r1, r2
 80002b0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80002b4:	fa1f f68e 	uxth.w	r6, lr
 80002b8:	2101      	movs	r1, #1
 80002ba:	fbb2 f4f7 	udiv	r4, r2, r7
 80002be:	fb07 2014 	mls	r0, r7, r4, r2
 80002c2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002ca:	fb06 f004 	mul.w	r0, r6, r4
 80002ce:	4290      	cmp	r0, r2
 80002d0:	d90f      	bls.n	80002f2 <__udivmoddi4+0x126>
 80002d2:	eb1e 0202 	adds.w	r2, lr, r2
 80002d6:	f104 38ff 	add.w	r8, r4, #4294967295
 80002da:	bf2c      	ite	cs
 80002dc:	f04f 0901 	movcs.w	r9, #1
 80002e0:	f04f 0900 	movcc.w	r9, #0
 80002e4:	4290      	cmp	r0, r2
 80002e6:	d903      	bls.n	80002f0 <__udivmoddi4+0x124>
 80002e8:	f1b9 0f00 	cmp.w	r9, #0
 80002ec:	f000 80c8 	beq.w	8000480 <__udivmoddi4+0x2b4>
 80002f0:	4644      	mov	r4, r8
 80002f2:	1a12      	subs	r2, r2, r0
 80002f4:	fa1f fc8c 	uxth.w	ip, ip
 80002f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000300:	fb00 f606 	mul.w	r6, r0, r6
 8000304:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000308:	4566      	cmp	r6, ip
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x152>
 800030c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000310:	f100 32ff 	add.w	r2, r0, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x150>
 8000316:	4566      	cmp	r6, ip
 8000318:	f200 80bb 	bhi.w	8000492 <__udivmoddi4+0x2c6>
 800031c:	4610      	mov	r0, r2
 800031e:	ebac 0c06 	sub.w	ip, ip, r6
 8000322:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000326:	e79d      	b.n	8000264 <__udivmoddi4+0x98>
 8000328:	f1c1 0620 	rsb	r6, r1, #32
 800032c:	408b      	lsls	r3, r1
 800032e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000332:	fa22 f706 	lsr.w	r7, r2, r6
 8000336:	fa20 fc06 	lsr.w	ip, r0, r6
 800033a:	40f4      	lsrs	r4, r6
 800033c:	408a      	lsls	r2, r1
 800033e:	431f      	orrs	r7, r3
 8000340:	ea4e 030c 	orr.w	r3, lr, ip
 8000344:	fa00 fe01 	lsl.w	lr, r0, r1
 8000348:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000350:	fa1f fc87 	uxth.w	ip, r7
 8000354:	fbb4 f0f8 	udiv	r0, r4, r8
 8000358:	fb08 4410 	mls	r4, r8, r0, r4
 800035c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000360:	fb00 f90c 	mul.w	r9, r0, ip
 8000364:	45a1      	cmp	r9, r4
 8000366:	d90e      	bls.n	8000386 <__udivmoddi4+0x1ba>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 3aff 	add.w	sl, r0, #4294967295
 800036e:	bf2c      	ite	cs
 8000370:	f04f 0b01 	movcs.w	fp, #1
 8000374:	f04f 0b00 	movcc.w	fp, #0
 8000378:	45a1      	cmp	r9, r4
 800037a:	d903      	bls.n	8000384 <__udivmoddi4+0x1b8>
 800037c:	f1bb 0f00 	cmp.w	fp, #0
 8000380:	f000 8093 	beq.w	80004aa <__udivmoddi4+0x2de>
 8000384:	4650      	mov	r0, sl
 8000386:	eba4 0409 	sub.w	r4, r4, r9
 800038a:	fa1f f983 	uxth.w	r9, r3
 800038e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000392:	fb08 4413 	mls	r4, r8, r3, r4
 8000396:	fb03 fc0c 	mul.w	ip, r3, ip
 800039a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039e:	45a4      	cmp	ip, r4
 80003a0:	d906      	bls.n	80003b0 <__udivmoddi4+0x1e4>
 80003a2:	193c      	adds	r4, r7, r4
 80003a4:	f103 38ff 	add.w	r8, r3, #4294967295
 80003a8:	d201      	bcs.n	80003ae <__udivmoddi4+0x1e2>
 80003aa:	45a4      	cmp	ip, r4
 80003ac:	d87a      	bhi.n	80004a4 <__udivmoddi4+0x2d8>
 80003ae:	4643      	mov	r3, r8
 80003b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003b4:	eba4 040c 	sub.w	r4, r4, ip
 80003b8:	fba0 9802 	umull	r9, r8, r0, r2
 80003bc:	4544      	cmp	r4, r8
 80003be:	46cc      	mov	ip, r9
 80003c0:	4643      	mov	r3, r8
 80003c2:	d302      	bcc.n	80003ca <__udivmoddi4+0x1fe>
 80003c4:	d106      	bne.n	80003d4 <__udivmoddi4+0x208>
 80003c6:	45ce      	cmp	lr, r9
 80003c8:	d204      	bcs.n	80003d4 <__udivmoddi4+0x208>
 80003ca:	3801      	subs	r0, #1
 80003cc:	ebb9 0c02 	subs.w	ip, r9, r2
 80003d0:	eb68 0307 	sbc.w	r3, r8, r7
 80003d4:	b15d      	cbz	r5, 80003ee <__udivmoddi4+0x222>
 80003d6:	ebbe 020c 	subs.w	r2, lr, ip
 80003da:	eb64 0403 	sbc.w	r4, r4, r3
 80003de:	fa04 f606 	lsl.w	r6, r4, r6
 80003e2:	fa22 f301 	lsr.w	r3, r2, r1
 80003e6:	40cc      	lsrs	r4, r1
 80003e8:	431e      	orrs	r6, r3
 80003ea:	e9c5 6400 	strd	r6, r4, [r5]
 80003ee:	2100      	movs	r1, #0
 80003f0:	e73e      	b.n	8000270 <__udivmoddi4+0xa4>
 80003f2:	fa02 fe03 	lsl.w	lr, r2, r3
 80003f6:	f1c3 0120 	rsb	r1, r3, #32
 80003fa:	fa04 f203 	lsl.w	r2, r4, r3
 80003fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000408:	fa20 f101 	lsr.w	r1, r0, r1
 800040c:	fa1f f68e 	uxth.w	r6, lr
 8000410:	fbb4 f0f7 	udiv	r0, r4, r7
 8000414:	430a      	orrs	r2, r1
 8000416:	fb07 4410 	mls	r4, r7, r0, r4
 800041a:	0c11      	lsrs	r1, r2, #16
 800041c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000420:	fb00 f406 	mul.w	r4, r0, r6
 8000424:	428c      	cmp	r4, r1
 8000426:	d90e      	bls.n	8000446 <__udivmoddi4+0x27a>
 8000428:	eb1e 0101 	adds.w	r1, lr, r1
 800042c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000430:	bf2c      	ite	cs
 8000432:	f04f 0901 	movcs.w	r9, #1
 8000436:	f04f 0900 	movcc.w	r9, #0
 800043a:	428c      	cmp	r4, r1
 800043c:	d902      	bls.n	8000444 <__udivmoddi4+0x278>
 800043e:	f1b9 0f00 	cmp.w	r9, #0
 8000442:	d02c      	beq.n	800049e <__udivmoddi4+0x2d2>
 8000444:	4640      	mov	r0, r8
 8000446:	1b09      	subs	r1, r1, r4
 8000448:	b292      	uxth	r2, r2
 800044a:	fbb1 f4f7 	udiv	r4, r1, r7
 800044e:	fb07 1114 	mls	r1, r7, r4, r1
 8000452:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000456:	fb04 f106 	mul.w	r1, r4, r6
 800045a:	4291      	cmp	r1, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x2a2>
 800045e:	eb1e 0202 	adds.w	r2, lr, r2
 8000462:	f104 38ff 	add.w	r8, r4, #4294967295
 8000466:	d201      	bcs.n	800046c <__udivmoddi4+0x2a0>
 8000468:	4291      	cmp	r1, r2
 800046a:	d815      	bhi.n	8000498 <__udivmoddi4+0x2cc>
 800046c:	4644      	mov	r4, r8
 800046e:	1a52      	subs	r2, r2, r1
 8000470:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000474:	e721      	b.n	80002ba <__udivmoddi4+0xee>
 8000476:	1a86      	subs	r6, r0, r2
 8000478:	eb64 0303 	sbc.w	r3, r4, r3
 800047c:	2001      	movs	r0, #1
 800047e:	e70e      	b.n	800029e <__udivmoddi4+0xd2>
 8000480:	3c02      	subs	r4, #2
 8000482:	4472      	add	r2, lr
 8000484:	e735      	b.n	80002f2 <__udivmoddi4+0x126>
 8000486:	3902      	subs	r1, #2
 8000488:	4472      	add	r2, lr
 800048a:	e6d0      	b.n	800022e <__udivmoddi4+0x62>
 800048c:	44f4      	add	ip, lr
 800048e:	3802      	subs	r0, #2
 8000490:	e6e3      	b.n	800025a <__udivmoddi4+0x8e>
 8000492:	44f4      	add	ip, lr
 8000494:	3802      	subs	r0, #2
 8000496:	e742      	b.n	800031e <__udivmoddi4+0x152>
 8000498:	3c02      	subs	r4, #2
 800049a:	4472      	add	r2, lr
 800049c:	e7e7      	b.n	800046e <__udivmoddi4+0x2a2>
 800049e:	3802      	subs	r0, #2
 80004a0:	4471      	add	r1, lr
 80004a2:	e7d0      	b.n	8000446 <__udivmoddi4+0x27a>
 80004a4:	3b02      	subs	r3, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	e782      	b.n	80003b0 <__udivmoddi4+0x1e4>
 80004aa:	3802      	subs	r0, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	e76a      	b.n	8000386 <__udivmoddi4+0x1ba>

080004b0 <__aeabi_idiv0>:
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop

080004b4 <lcd_Init>:
        0b00110,
        0b00000
};

void lcd_Init(uint8_t rows)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80004be:	4a38      	ldr	r2, [pc, #224]	@ (80005a0 <lcd_Init+0xec>)
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80004c4:	4b37      	ldr	r3, [pc, #220]	@ (80005a4 <lcd_Init+0xf0>)
 80004c6:	2208      	movs	r2, #8
 80004c8:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80004ca:	4b37      	ldr	r3, [pc, #220]	@ (80005a8 <lcd_Init+0xf4>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80004d0:	4b33      	ldr	r3, [pc, #204]	@ (80005a0 <lcd_Init+0xec>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d907      	bls.n	80004e8 <lcd_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80004d8:	4b33      	ldr	r3, [pc, #204]	@ (80005a8 <lcd_Init+0xf4>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	f043 0308 	orr.w	r3, r3, #8
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	4b31      	ldr	r3, [pc, #196]	@ (80005a8 <lcd_Init+0xf4>)
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	e006      	b.n	80004f6 <lcd_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80004e8:	4b2f      	ldr	r3, [pc, #188]	@ (80005a8 <lcd_Init+0xf4>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	f043 0304 	orr.w	r3, r3, #4
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	4b2d      	ldr	r3, [pc, #180]	@ (80005a8 <lcd_Init+0xf4>)
 80004f4:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80004f6:	f000 f985 	bl	8000804 <DelayInit>
  HAL_Delay(50);
 80004fa:	2032      	movs	r0, #50	@ 0x32
 80004fc:	f000 ffae 	bl	800145c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000500:	4b28      	ldr	r3, [pc, #160]	@ (80005a4 <lcd_Init+0xf0>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	4618      	mov	r0, r3
 8000506:	f000 f943 	bl	8000790 <ExpanderWrite>
  HAL_Delay(1000);
 800050a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800050e:	f000 ffa5 	bl	800145c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000512:	2030      	movs	r0, #48	@ 0x30
 8000514:	f000 f92b 	bl	800076e <Write4Bits>
  DelayUS(4500);
 8000518:	f241 1094 	movw	r0, #4500	@ 0x1194
 800051c:	f000 f99c 	bl	8000858 <DelayUS>

  Write4Bits(0x03 << 4);
 8000520:	2030      	movs	r0, #48	@ 0x30
 8000522:	f000 f924 	bl	800076e <Write4Bits>
  DelayUS(4500);
 8000526:	f241 1094 	movw	r0, #4500	@ 0x1194
 800052a:	f000 f995 	bl	8000858 <DelayUS>

  Write4Bits(0x03 << 4);
 800052e:	2030      	movs	r0, #48	@ 0x30
 8000530:	f000 f91d 	bl	800076e <Write4Bits>
  DelayUS(4500);
 8000534:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000538:	f000 f98e 	bl	8000858 <DelayUS>

  Write4Bits(0x02 << 4);
 800053c:	2020      	movs	r0, #32
 800053e:	f000 f916 	bl	800076e <Write4Bits>
  DelayUS(100);
 8000542:	2064      	movs	r0, #100	@ 0x64
 8000544:	f000 f988 	bl	8000858 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000548:	4b17      	ldr	r3, [pc, #92]	@ (80005a8 <lcd_Init+0xf4>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	f043 0320 	orr.w	r3, r3, #32
 8000550:	b2db      	uxtb	r3, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f8ce 	bl	80006f4 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000558:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <lcd_Init+0xf8>)
 800055a:	2204      	movs	r2, #4
 800055c:	701a      	strb	r2, [r3, #0]
  lcd_Display();
 800055e:	f000 f875 	bl	800064c <lcd_Display>
  lcd_Clear();
 8000562:	f000 f82b 	bl	80005bc <lcd_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000566:	4b12      	ldr	r3, [pc, #72]	@ (80005b0 <lcd_Init+0xfc>)
 8000568:	2202      	movs	r2, #2
 800056a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800056c:	4b10      	ldr	r3, [pc, #64]	@ (80005b0 <lcd_Init+0xfc>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	b2db      	uxtb	r3, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f8bc 	bl	80006f4 <SendCommand>
  DelayUS(4500);
 800057c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000580:	f000 f96a 	bl	8000858 <DelayUS>

  lcd_CreateSpecialChar(0, special1);
 8000584:	490b      	ldr	r1, [pc, #44]	@ (80005b4 <lcd_Init+0x100>)
 8000586:	2000      	movs	r0, #0
 8000588:	f000 f876 	bl	8000678 <lcd_CreateSpecialChar>
  lcd_CreateSpecialChar(1, special2);
 800058c:	490a      	ldr	r1, [pc, #40]	@ (80005b8 <lcd_Init+0x104>)
 800058e:	2001      	movs	r0, #1
 8000590:	f000 f872 	bl	8000678 <lcd_CreateSpecialChar>

  lcd_Home();
 8000594:	f000 f81d 	bl	80005d2 <lcd_Home>
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000006b 	.word	0x2000006b
 80005a4:	2000006c 	.word	0x2000006c
 80005a8:	20000068 	.word	0x20000068
 80005ac:	20000069 	.word	0x20000069
 80005b0:	2000006a 	.word	0x2000006a
 80005b4:	20000000 	.word	0x20000000
 80005b8:	20000008 	.word	0x20000008

080005bc <lcd_Clear>:

void lcd_Clear()
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f000 f897 	bl	80006f4 <SendCommand>
  DelayUS(2000);
 80005c6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005ca:	f000 f945 	bl	8000858 <DelayUS>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <lcd_Home>:

void lcd_Home()
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80005d6:	2002      	movs	r0, #2
 80005d8:	f000 f88c 	bl	80006f4 <SendCommand>
  DelayUS(2000);
 80005dc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005e0:	f000 f93a 	bl	8000858 <DelayUS>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <lcd_SetCursor>:

void lcd_SetCursor(uint8_t col, uint8_t row)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b087      	sub	sp, #28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	4613      	mov	r3, r2
 80005f6:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80005f8:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <lcd_SetCursor+0x5c>)
 80005fa:	f107 0408 	add.w	r4, r7, #8
 80005fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000600:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000604:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <lcd_SetCursor+0x60>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	79ba      	ldrb	r2, [r7, #6]
 800060a:	429a      	cmp	r2, r3
 800060c:	d303      	bcc.n	8000616 <lcd_SetCursor+0x2e>
  {
    row = dpRows-1;
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <lcd_SetCursor+0x60>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	3b01      	subs	r3, #1
 8000614:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000616:	79bb      	ldrb	r3, [r7, #6]
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	3318      	adds	r3, #24
 800061c:	443b      	add	r3, r7
 800061e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000622:	b2da      	uxtb	r2, r3
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	4413      	add	r3, r2
 8000628:	b2db      	uxtb	r3, r3
 800062a:	b25b      	sxtb	r3, r3
 800062c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000630:	b25b      	sxtb	r3, r3
 8000632:	b2db      	uxtb	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	f000 f85d 	bl	80006f4 <SendCommand>
}
 800063a:	bf00      	nop
 800063c:	371c      	adds	r7, #28
 800063e:	46bd      	mov	sp, r7
 8000640:	bd90      	pop	{r4, r7, pc}
 8000642:	bf00      	nop
 8000644:	08003f1c 	.word	0x08003f1c
 8000648:	2000006b 	.word	0x2000006b

0800064c <lcd_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void lcd_Display()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000650:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <lcd_Display+0x28>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <lcd_Display+0x28>)
 800065c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800065e:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <lcd_Display+0x28>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	f043 0308 	orr.w	r3, r3, #8
 8000666:	b2db      	uxtb	r3, r3
 8000668:	4618      	mov	r0, r3
 800066a:	f000 f843 	bl	80006f4 <SendCommand>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000069 	.word	0x20000069

08000678 <lcd_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void lcd_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	b25b      	sxtb	r3, r3
 8000692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000696:	b25b      	sxtb	r3, r3
 8000698:	b2db      	uxtb	r3, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f000 f82a 	bl	80006f4 <SendCommand>
  for (int i=0; i<8; i++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	e009      	b.n	80006ba <lcd_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	683a      	ldr	r2, [r7, #0]
 80006aa:	4413      	add	r3, r2
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f82e 	bl	8000710 <SendChar>
  for (int i=0; i<8; i++)
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3301      	adds	r3, #1
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2b07      	cmp	r3, #7
 80006be:	ddf2      	ble.n	80006a6 <lcd_CreateSpecialChar+0x2e>
  }
}
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <lcd_PrintStr>:
{
  lcd_CreateSpecialChar(char_num, rows);
}

void lcd_PrintStr(const char c[])
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b082      	sub	sp, #8
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80006d2:	e006      	b.n	80006e2 <lcd_PrintStr+0x18>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	607a      	str	r2, [r7, #4]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 f817 	bl	8000710 <SendChar>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1f4      	bne.n	80006d4 <lcd_PrintStr+0xa>
}
 80006ea:	bf00      	nop
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f812 	bl	800072c <Send>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2101      	movs	r1, #1
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f804 	bl	800072c <Send>
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	460a      	mov	r2, r1
 8000736:	71fb      	strb	r3, [r7, #7]
 8000738:	4613      	mov	r3, r2
 800073a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f023 030f 	bic.w	r3, r3, #15
 8000742:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	011b      	lsls	r3, r3, #4
 8000748:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800074a:	7bfa      	ldrb	r2, [r7, #15]
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	4313      	orrs	r3, r2
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f80b 	bl	800076e <Write4Bits>
  Write4Bits((lownib)|mode);
 8000758:	7bba      	ldrb	r2, [r7, #14]
 800075a:	79bb      	ldrb	r3, [r7, #6]
 800075c:	4313      	orrs	r3, r2
 800075e:	b2db      	uxtb	r3, r3
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f804 	bl	800076e <Write4Bits>
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f808 	bl	8000790 <ExpanderWrite>
  PulseEnable(value);
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f820 	bl	80007c8 <PulseEnable>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af02      	add	r7, sp, #8
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <ExpanderWrite+0x30>)
 800079c:	781a      	ldrb	r2, [r3, #0]
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80007a6:	f107 020f 	add.w	r2, r7, #15
 80007aa:	230a      	movs	r3, #10
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2301      	movs	r3, #1
 80007b0:	214e      	movs	r1, #78	@ 0x4e
 80007b2:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <ExpanderWrite+0x34>)
 80007b4:	f001 fa50 	bl	8001c58 <HAL_I2C_Master_Transmit>
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	2000006c 	.word	0x2000006c
 80007c4:	20000080 	.word	0x20000080

080007c8 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ffd8 	bl	8000790 <ExpanderWrite>
  DelayUS(20);
 80007e0:	2014      	movs	r0, #20
 80007e2:	f000 f839 	bl	8000858 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	f023 0304 	bic.w	r3, r3, #4
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ffce 	bl	8000790 <ExpanderWrite>
  DelayUS(20);
 80007f4:	2014      	movs	r0, #20
 80007f6:	f000 f82f 	bl	8000858 <DelayUS>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <DelayInit>:

static void DelayInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000808:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <DelayInit+0x4c>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	4a10      	ldr	r2, [pc, #64]	@ (8000850 <DelayInit+0x4c>)
 800080e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000812:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000814:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <DelayInit+0x4c>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	4a0d      	ldr	r2, [pc, #52]	@ (8000850 <DelayInit+0x4c>)
 800081a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800081e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <DelayInit+0x50>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a0b      	ldr	r2, [pc, #44]	@ (8000854 <DelayInit+0x50>)
 8000826:	f023 0301 	bic.w	r3, r3, #1
 800082a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <DelayInit+0x50>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a08      	ldr	r2, [pc, #32]	@ (8000854 <DelayInit+0x50>)
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <DelayInit+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800083e:	bf00      	nop
  __ASM volatile ("NOP");
 8000840:	bf00      	nop
  __ASM volatile ("NOP");
 8000842:	bf00      	nop
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000edf0 	.word	0xe000edf0
 8000854:	e0001000 	.word	0xe0001000

08000858 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000858:	b480      	push	{r7}
 800085a:	b087      	sub	sp, #28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000860:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <DelayUS+0x44>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0e      	ldr	r2, [pc, #56]	@ (80008a0 <DelayUS+0x48>)
 8000866:	fba2 2303 	umull	r2, r3, r2, r3
 800086a:	0c9a      	lsrs	r2, r3, #18
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	fb02 f303 	mul.w	r3, r2, r3
 8000872:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000874:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <DelayUS+0x4c>)
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800087a:	4b0a      	ldr	r3, [pc, #40]	@ (80008a4 <DelayUS+0x4c>)
 800087c:	685a      	ldr	r2, [r3, #4]
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	429a      	cmp	r2, r3
 800088a:	d8f6      	bhi.n	800087a <DelayUS+0x22>
}
 800088c:	bf00      	nop
 800088e:	bf00      	nop
 8000890:	371c      	adds	r7, #28
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	20000010 	.word	0x20000010
 80008a0:	431bde83 	.word	0x431bde83
 80008a4:	e0001000 	.word	0xe0001000

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ac:	f000 fd18 	bl	80012e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b0:	f000 f854 	bl	800095c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b4:	f000 f8f0 	bl	8000a98 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80008b8:	f000 f8da 	bl	8000a70 <MX_ICACHE_Init>
  MX_I2C1_Init();
 80008bc:	f000 f898 	bl	80009f0 <MX_I2C1_Init>


  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 faeb 	bl	8000e9c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80008c6:	2001      	movs	r0, #1
 80008c8:	f000 fae8 	bl	8000e9c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80008cc:	2002      	movs	r0, #2
 80008ce:	f000 fae5 	bl	8000e9c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(B1, BUTTON_MODE_EXTI);
 80008d2:	2101      	movs	r1, #1
 80008d4:	2000      	movs	r0, #0
 80008d6:	f000 fb47 	bl	8000f68 <BSP_PB_Init>
  BSP_PB_Init(B2, BUTTON_MODE_EXTI);
 80008da:	2101      	movs	r1, #1
 80008dc:	2001      	movs	r0, #1
 80008de:	f000 fb43 	bl	8000f68 <BSP_PB_Init>
  BSP_PB_Init(B3, BUTTON_MODE_EXTI);
 80008e2:	2101      	movs	r1, #1
 80008e4:	2002      	movs	r0, #2
 80008e6:	f000 fb3f 	bl	8000f68 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80008ea:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <main+0xa8>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f0:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80008f2:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <main+0xa8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80008f8:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <main+0xa8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80008fe:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <main+0xa8>)
 8000900:	2200      	movs	r2, #0
 8000902:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <main+0xa8>)
 8000906:	2200      	movs	r2, #0
 8000908:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800090a:	4911      	ldr	r1, [pc, #68]	@ (8000950 <main+0xa8>)
 800090c:	2000      	movs	r0, #0
 800090e:	f000 fc09 	bl	8001124 <BSP_COM_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <main+0x74>
  {
    Error_Handler();
 8000918:	f000 f912 	bl	8000b40 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  lcd_Init(1);
 800091c:	2001      	movs	r0, #1
 800091e:	f7ff fdc9 	bl	80004b4 <lcd_Init>
	      lcd_Clear();
 8000922:	f7ff fe4b 	bl	80005bc <lcd_Clear>
	      lcd_SetCursor(0,0);
 8000926:	2100      	movs	r1, #0
 8000928:	2000      	movs	r0, #0
 800092a:	f7ff fe5d 	bl	80005e8 <lcd_SetCursor>
	      lcd_PrintStr("HELLOff");
 800092e:	4809      	ldr	r0, [pc, #36]	@ (8000954 <main+0xac>)
 8000930:	f7ff fecb 	bl	80006ca <lcd_PrintStr>
	      lcd_SetCursor(7,0);
 8000934:	2100      	movs	r1, #0
 8000936:	2007      	movs	r0, #7
 8000938:	f7ff fe56 	bl	80005e8 <lcd_SetCursor>
	      lcd_PrintStr("WORLD");
 800093c:	4806      	ldr	r0, [pc, #24]	@ (8000958 <main+0xb0>)
 800093e:	f7ff fec4 	bl	80006ca <lcd_PrintStr>
	      HAL_Delay(2000);
 8000942:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000946:	f000 fd89 	bl	800145c <HAL_Delay>
	  lcd_Init(1);
 800094a:	bf00      	nop
 800094c:	e7e6      	b.n	800091c <main+0x74>
 800094e:	bf00      	nop
 8000950:	20000070 	.word	0x20000070
 8000954:	08003f2c 	.word	0x08003f2c
 8000958:	08003f34 	.word	0x08003f34

0800095c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b098      	sub	sp, #96	@ 0x60
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 0320 	add.w	r3, r7, #32
 8000966:	2240      	movs	r2, #64	@ 0x40
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f003 fa9d 	bl	8003eaa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000970:	463b      	mov	r3, r7
 8000972:	2220      	movs	r2, #32
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f003 fa97 	bl	8003eaa <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800097c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000980:	f001 fd40 	bl	8002404 <HAL_PWREx_ControlVoltageScaling>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800098a:	f000 f8d9 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800098e:	2302      	movs	r3, #2
 8000990:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000992:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000996:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000998:	2310      	movs	r3, #16
 800099a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_NONE;
 800099c:	2300      	movs	r3, #0
 800099e:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a0:	f107 0320 	add.w	r3, r7, #32
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 fd8b 	bl	80024c0 <HAL_RCC_OscConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009b0:	f000 f8c6 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b4:	233f      	movs	r3, #63	@ 0x3f
 80009b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK7|RCC_CLOCKTYPE_HCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009b8:	2300      	movs	r3, #0
 80009ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB7CLKDivider = RCC_HCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHB5_PLL1_CLKDivider = RCC_SYSCLK_PLL1_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHB5_HSEHSI_CLKDivider = RCC_SYSCLK_HSEHSI_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f002 f95b 	bl	8002c94 <HAL_RCC_ClockConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80009e4:	f000 f8ac 	bl	8000b40 <Error_Handler>
  }
}
 80009e8:	bf00      	nop
 80009ea:	3760      	adds	r7, #96	@ 0x60
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a64 <MX_I2C1_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a68 <MX_I2C1_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <MX_I2C1_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a6c <MX_I2C1_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a2c:	f001 f878 	bl	8001b20 <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 f883 	bl	8000b40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a3e:	f001 fc19 	bl	8002274 <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 f87a 	bl	8000b40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a50:	f001 fc5b 	bl	800230a <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 f871 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000080 	.word	0x20000080
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	00303d5b 	.word	0x00303d5b

08000a70 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000a74:	2000      	movs	r0, #0
 8000a76:	f001 fc95 	bl	80023a4 <HAL_ICACHE_ConfigAssociativityMode>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000a80:	f000 f85e 	bl	8000b40 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000a84:	f001 fcae 	bl	80023e4 <HAL_ICACHE_Enable>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000a8e:	f000 f857 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b22      	ldr	r3, [pc, #136]	@ (8000b38 <MX_GPIO_Init+0xa0>)
 8000ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ab4:	4a20      	ldr	r2, [pc, #128]	@ (8000b38 <MX_GPIO_Init+0xa0>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000abe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <MX_GPIO_Init+0xa0>)
 8000ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000acc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <MX_GPIO_Init+0xa0>)
 8000ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ad2:	4a19      	ldr	r2, [pc, #100]	@ (8000b38 <MX_GPIO_Init+0xa0>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000adc:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <MX_GPIO_Init+0xa0>)
 8000ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ae2:	f003 0304 	and.w	r3, r3, #4
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <MX_GPIO_Init+0xa0>)
 8000aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000af0:	4a11      	ldr	r2, [pc, #68]	@ (8000b38 <MX_GPIO_Init+0xa0>)
 8000af2:	f043 0302 	orr.w	r3, r3, #2
 8000af6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000afa:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <MX_GPIO_Init+0xa0>)
 8000afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <MX_GPIO_Init+0xa4>)
 8000b0e:	f000 ffb3 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b12:	2302      	movs	r3, #2
 8000b14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	4619      	mov	r1, r3
 8000b28:	4804      	ldr	r0, [pc, #16]	@ (8000b3c <MX_GPIO_Init+0xa4>)
 8000b2a:	f000 fe59 	bl	80017e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2e:	bf00      	nop
 8000b30:	3720      	adds	r7, #32
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	46020c00 	.word	0x46020c00
 8000b3c:	42020000 	.word	0x42020000

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <Error_Handler+0x8>

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <HAL_MspInit+0x30>)
 8000b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b58:	4a08      	ldr	r2, [pc, #32]	@ (8000b7c <HAL_MspInit+0x30>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_MspInit+0x30>)
 8000b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	46020c00 	.word	0x46020c00

08000b80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b09a      	sub	sp, #104	@ 0x68
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2240      	movs	r2, #64	@ 0x40
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 f982 	bl	8003eaa <memset>
  if(hi2c->Instance==I2C1)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a21      	ldr	r2, [pc, #132]	@ (8000c30 <HAL_I2C_MspInit+0xb0>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d13b      	bne.n	8000c28 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f002 faab 	bl	8003118 <HAL_RCCEx_PeriphCLKConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000bc8:	f7ff ffba 	bl	8000b40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bcc:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <HAL_I2C_MspInit+0xb4>)
 8000bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bd2:	4a18      	ldr	r2, [pc, #96]	@ (8000c34 <HAL_I2C_MspInit+0xb4>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bdc:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <HAL_I2C_MspInit+0xb4>)
 8000bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB2     ------> I2C1_SCL
    PB1     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8000bea:	2306      	movs	r3, #6
 8000bec:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bee:	2312      	movs	r3, #18
 8000bf0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c02:	4619      	mov	r1, r3
 8000c04:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <HAL_I2C_MspInit+0xb8>)
 8000c06:	f000 fdeb 	bl	80017e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <HAL_I2C_MspInit+0xb4>)
 8000c0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c10:	4a08      	ldr	r2, [pc, #32]	@ (8000c34 <HAL_I2C_MspInit+0xb4>)
 8000c12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c16:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_I2C_MspInit+0xb4>)
 8000c1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c28:	bf00      	nop
 8000c2a:	3768      	adds	r7, #104	@ 0x68
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40005400 	.word	0x40005400
 8000c34:	46020c00 	.word	0x46020c00
 8000c38:	42020400 	.word	0x42020400

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <NMI_Handler+0x4>

08000c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <MemManage_Handler+0x4>

08000c54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c92:	f000 fbc3 	bl	800141c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_PIN);
 8000c9e:	2040      	movs	r0, #64	@ 0x40
 8000ca0:	f000 ff02 	bl	8001aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_PIN);
 8000cac:	2080      	movs	r0, #128	@ 0x80
 8000cae:	f000 fefb 	bl	8001aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_PIN);
 8000cba:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cbe:	f000 fef3 	bl	8001aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  __IO uint32_t tmpreg;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <SystemInit+0x20>)
 8000cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cd2:	4a05      	ldr	r2, [pc, #20]	@ (8000ce8 <SystemInit+0x20>)
 8000cd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  CLEAR_BIT(ADC4->CR, ADC_CR_ADVREGEN);

  /* Disable ADC kernel clock */
  CLEAR_BIT(RCC->AHB4ENR, RCC_AHB4ENR_ADC4EN);
#endif
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	@ 0x24
 8000cf0:	af00      	add	r7, sp, #0
  uint32_t plln;
  float_t fracn;
  float_t pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 8000cf2:	4b4f      	ldr	r3, [pc, #316]	@ (8000e30 <SystemCoreClockUpdate+0x144>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
 8000cfa:	2b08      	cmp	r3, #8
 8000cfc:	d002      	beq.n	8000d04 <SystemCoreClockUpdate+0x18>
 8000cfe:	2b0c      	cmp	r3, #12
 8000d00:	d00b      	beq.n	8000d1a <SystemCoreClockUpdate+0x2e>
 8000d02:	e07d      	b.n	8000e00 <SystemCoreClockUpdate+0x114>
  {
    case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
      SystemCoreClock = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8000d04:	4b4a      	ldr	r3, [pc, #296]	@ (8000e30 <SystemCoreClockUpdate+0x144>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	0d1b      	lsrs	r3, r3, #20
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	4a49      	ldr	r2, [pc, #292]	@ (8000e34 <SystemCoreClockUpdate+0x148>)
 8000d10:	fa22 f303 	lsr.w	r3, r2, r3
 8000d14:	4a48      	ldr	r2, [pc, #288]	@ (8000e38 <SystemCoreClockUpdate+0x14c>)
 8000d16:	6013      	str	r3, [r2, #0]
      break;
 8000d18:	e076      	b.n	8000e08 <SystemCoreClockUpdate+0x11c>

    case (RCC_CFGR1_SWS_0 | RCC_CFGR1_SWS_1):  /* PLL1 used as system clock source */
      /* PLL_VCO = (PLLsource / PLLM) * PLLN * FractionnalPart
          SYSCLK = PLL_VCO / PLLR */
      /* Get PLL1 CFGR and DIVR register values */
      tmp1 = RCC->PLL1CFGR;
 8000d1a:	4b45      	ldr	r3, [pc, #276]	@ (8000e30 <SystemCoreClockUpdate+0x144>)
 8000d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d1e:	61fb      	str	r3, [r7, #28]
      tmp2 = RCC->PLL1DIVR;
 8000d20:	4b43      	ldr	r3, [pc, #268]	@ (8000e30 <SystemCoreClockUpdate+0x144>)
 8000d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d24:	617b      	str	r3, [r7, #20]

      /* Retrieve PLL1 multiplication factor and divider */
      pllm = ((tmp1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	3301      	adds	r3, #1
 8000d30:	613b      	str	r3, [r7, #16]
      plln = (tmp2 & RCC_PLL1DIVR_PLL1N) + 1U;
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d38:	3301      	adds	r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
      pllr = ((tmp2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	0e1b      	lsrs	r3, r3, #24
 8000d40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d44:	3301      	adds	r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]

      /* Check if fractional part is enable */
      if ((tmp1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f003 0310 	and.w	r3, r3, #16
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d00b      	beq.n	8000d6a <SystemCoreClockUpdate+0x7e>
      {
        fracn = (float_t)((uint32_t)((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8000d52:	4b37      	ldr	r3, [pc, #220]	@ (8000e30 <SystemCoreClockUpdate+0x144>)
 8000d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000d5c:	ee07 3a90 	vmov	s15, r3
 8000d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d64:	edc7 7a06 	vstr	s15, [r7, #24]
 8000d68:	e002      	b.n	8000d70 <SystemCoreClockUpdate+0x84>
      }
      else
      {
        fracn = (float_t)0U;
 8000d6a:	f04f 0300 	mov.w	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
      }

      /* determine PLL source */
      pllsource = (tmp1 & RCC_PLL1CFGR_PLL1SRC);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d003      	beq.n	8000d86 <SystemCoreClockUpdate+0x9a>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	d003      	beq.n	8000d8c <SystemCoreClockUpdate+0xa0>
 8000d84:	e00c      	b.n	8000da0 <SystemCoreClockUpdate+0xb4>
      switch (pllsource)
      {
        /* HSI used as PLL1 clock source */
        case RCC_PLL1CFGR_PLL1SRC_1:
          tmp1 = HSI_VALUE;
 8000d86:	4b2d      	ldr	r3, [pc, #180]	@ (8000e3c <SystemCoreClockUpdate+0x150>)
 8000d88:	61fb      	str	r3, [r7, #28]
          break;
 8000d8a:	e00c      	b.n	8000da6 <SystemCoreClockUpdate+0xba>

        /* HSE used as PLL1 clock source */
        case (RCC_PLL1CFGR_PLL1SRC_0 | RCC_PLL1CFGR_PLL1SRC_1):
          tmp1 = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8000d8c:	4b28      	ldr	r3, [pc, #160]	@ (8000e30 <SystemCoreClockUpdate+0x144>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	0d1b      	lsrs	r3, r3, #20
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	4a27      	ldr	r2, [pc, #156]	@ (8000e34 <SystemCoreClockUpdate+0x148>)
 8000d98:	fa22 f303 	lsr.w	r3, r2, r3
 8000d9c:	61fb      	str	r3, [r7, #28]
          break;
 8000d9e:	e002      	b.n	8000da6 <SystemCoreClockUpdate+0xba>

        default:
          tmp1 = 0U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
          break;
 8000da4:	bf00      	nop
      }

      /* Compute VCO output frequency */
      pllvco = ((float_t) tmp1 / (float_t)pllm) * (((float_t)plln + (float_t)(fracn / (float_t)0x2000U)));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	ee07 3a90 	vmov	s15, r3
 8000dac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	ee07 3a90 	vmov	s15, r3
 8000db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	ee07 3a90 	vmov	s15, r3
 8000dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000dc8:	ed97 6a06 	vldr	s12, [r7, #24]
 8000dcc:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8000e40 <SystemCoreClockUpdate+0x154>
 8000dd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000dd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ddc:	edc7 7a00 	vstr	s15, [r7]
      SystemCoreClock = (uint32_t)((float_t)(pllvco / (float_t)pllr));
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	ee07 3a90 	vmov	s15, r3
 8000de6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dea:	edd7 6a00 	vldr	s13, [r7]
 8000dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000df6:	ee17 2a90 	vmov	r2, s15
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <SystemCoreClockUpdate+0x14c>)
 8000dfc:	601a      	str	r2, [r3, #0]
      break;
 8000dfe:	e003      	b.n	8000e08 <SystemCoreClockUpdate+0x11c>

    case 0x00u:  /* HSI used as system clock source */
    default:
      SystemCoreClock = HSI_VALUE;
 8000e00:	4b0d      	ldr	r3, [pc, #52]	@ (8000e38 <SystemCoreClockUpdate+0x14c>)
 8000e02:	4a0e      	ldr	r2, [pc, #56]	@ (8000e3c <SystemCoreClockUpdate+0x150>)
 8000e04:	601a      	str	r2, [r3, #0]
      break;
 8000e06:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp1 = AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)];
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <SystemCoreClockUpdate+0x144>)
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	4a0c      	ldr	r2, [pc, #48]	@ (8000e44 <SystemCoreClockUpdate+0x158>)
 8000e12:	5cd3      	ldrb	r3, [r2, r3]
 8000e14:	61fb      	str	r3, [r7, #28]

  /* HCLK clock frequency */
  SystemCoreClock >>= tmp1;
 8000e16:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <SystemCoreClockUpdate+0x14c>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e20:	4a05      	ldr	r2, [pc, #20]	@ (8000e38 <SystemCoreClockUpdate+0x14c>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	3724      	adds	r7, #36	@ 0x24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	46020c00 	.word	0x46020c00
 8000e34:	01e84800 	.word	0x01e84800
 8000e38:	20000010 	.word	0x20000010
 8000e3c:	00f42400 	.word	0x00f42400
 8000e40:	46000000 	.word	0x46000000
 8000e44:	08003f7c 	.word	0x08003f7c

08000e48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e4c:	f7ff ff3c 	bl	8000cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e52:	e003      	b.n	8000e5c <LoopCopyDataInit>

08000e54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e54:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e5a:	3104      	adds	r1, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e5c:	480a      	ldr	r0, [pc, #40]	@ (8000e88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e64:	d3f6      	bcc.n	8000e54 <CopyDataInit>
	ldr	r2, =_sbss
 8000e66:	4a0a      	ldr	r2, [pc, #40]	@ (8000e90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e68:	e002      	b.n	8000e70 <LoopFillZerobss>

08000e6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e6c:	f842 3b04 	str.w	r3, [r2], #4

08000e70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e70:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <LoopForever+0x16>)
	cmp	r2, r3
 8000e72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e74:	d3f9      	bcc.n	8000e6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e76:	f003 f821 	bl	8003ebc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e7a:	f7ff fd15 	bl	80008a8 <main>

08000e7e <LoopForever>:

LoopForever:
    b LoopForever
 8000e7e:	e7fe      	b.n	8000e7e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000e80:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 8000e84:	08003fb4 	.word	0x08003fb4
	ldr	r0, =_sdata
 8000e88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e8c:	2000004c 	.word	0x2000004c
	ldr	r2, =_sbss
 8000e90:	2000004c 	.word	0x2000004c
	ldr	r3, = _ebss
 8000e94:	20000190 	.word	0x20000190

08000e98 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC4_IRQHandler>
	...

08000e9c <BSP_LED_Init>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	@ 0x28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LD1)
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10f      	bne.n	8000ecc <BSP_LED_Init+0x30>
  {
    LD1_GPIO_CLK_ENABLE();
 8000eac:	4b2b      	ldr	r3, [pc, #172]	@ (8000f5c <BSP_LED_Init+0xc0>)
 8000eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eb2:	4a2a      	ldr	r2, [pc, #168]	@ (8000f5c <BSP_LED_Init+0xc0>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ebc:	4b27      	ldr	r3, [pc, #156]	@ (8000f5c <BSP_LED_Init+0xc0>)
 8000ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	e021      	b.n	8000f10 <BSP_LED_Init+0x74>
  }
  else if (Led == LD2)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d10f      	bne.n	8000ef2 <BSP_LED_Init+0x56>
  {
    LD2_GPIO_CLK_ENABLE();
 8000ed2:	4b22      	ldr	r3, [pc, #136]	@ (8000f5c <BSP_LED_Init+0xc0>)
 8000ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ed8:	4a20      	ldr	r2, [pc, #128]	@ (8000f5c <BSP_LED_Init+0xc0>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f5c <BSP_LED_Init+0xc0>)
 8000ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	e00e      	b.n	8000f10 <BSP_LED_Init+0x74>
  }
  else /* Led = LD3 */
  {
    LD3_GPIO_CLK_ENABLE();
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <BSP_LED_Init+0xc0>)
 8000ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ef8:	4a18      	ldr	r2, [pc, #96]	@ (8000f5c <BSP_LED_Init+0xc0>)
 8000efa:	f043 0302 	orr.w	r3, r3, #2
 8000efe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f02:	4b16      	ldr	r3, [pc, #88]	@ (8000f5c <BSP_LED_Init+0xc0>)
 8000f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4a13      	ldr	r2, [pc, #76]	@ (8000f60 <BSP_LED_Init+0xc4>)
 8000f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f18:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f22:	2302      	movs	r3, #2
 8000f24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	4a0e      	ldr	r2, [pc, #56]	@ (8000f64 <BSP_LED_Init+0xc8>)
 8000f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2e:	f107 0214 	add.w	r2, r7, #20
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 fc53 	bl	80017e0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	4a09      	ldr	r2, [pc, #36]	@ (8000f64 <BSP_LED_Init+0xc8>)
 8000f3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	4a06      	ldr	r2, [pc, #24]	@ (8000f60 <BSP_LED_Init+0xc4>)
 8000f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f000 fd93 	bl	8001a78 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3728      	adds	r7, #40	@ 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	46020c00 	.word	0x46020c00
 8000f60:	20000014 	.word	0x20000014
 8000f64:	2000001c 	.word	0x2000001c

08000f68 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code.
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b094      	sub	sp, #80	@ 0x50
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	460a      	mov	r2, r1
 8000f72:	71fb      	strb	r3, [r7, #7]
 8000f74:	4613      	mov	r3, r2
 8000f76:	71bb      	strb	r3, [r7, #6]
  int32_t               status = BSP_ERROR_NONE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_B1_IT_PRIORITY,
 8000f7c:	4a5b      	ldr	r2, [pc, #364]	@ (80010ec <BSP_PB_Init+0x184>)
 8000f7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f82:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                                       BSP_B2_IT_PRIORITY,
                                                       BSP_B3_IT_PRIORITY};
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {B1_EXTI_LINE, B2_EXTI_LINE, B3_EXTI_LINE};
 8000f88:	4a59      	ldr	r2, [pc, #356]	@ (80010f0 <BSP_PB_Init+0x188>)
 8000f8a:	f107 0320 	add.w	r3, r7, #32
 8000f8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  BSP_EXTI_LineCallback ButtonCallback[BUTTONn]     = {B1_EXTI_Callback,
 8000f94:	4a57      	ldr	r2, [pc, #348]	@ (80010f4 <BSP_PB_Init+0x18c>)
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                                       B2_EXTI_Callback,
                                                       B3_EXTI_Callback};

  /* Enable the BUTTON clock */
  if (Button == B1)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10f      	bne.n	8000fc6 <BSP_PB_Init+0x5e>
  {
    B1_GPIO_CLK_ENABLE();
 8000fa6:	4b54      	ldr	r3, [pc, #336]	@ (80010f8 <BSP_PB_Init+0x190>)
 8000fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fac:	4a52      	ldr	r2, [pc, #328]	@ (80010f8 <BSP_PB_Init+0x190>)
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fb6:	4b50      	ldr	r3, [pc, #320]	@ (80010f8 <BSP_PB_Init+0x190>)
 8000fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	e021      	b.n	800100a <BSP_PB_Init+0xa2>
  }
  else if (Button == B2)
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d10f      	bne.n	8000fec <BSP_PB_Init+0x84>
  {
    B2_GPIO_CLK_ENABLE();
 8000fcc:	4b4a      	ldr	r3, [pc, #296]	@ (80010f8 <BSP_PB_Init+0x190>)
 8000fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fd2:	4a49      	ldr	r2, [pc, #292]	@ (80010f8 <BSP_PB_Init+0x190>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fdc:	4b46      	ldr	r3, [pc, #280]	@ (80010f8 <BSP_PB_Init+0x190>)
 8000fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	e00e      	b.n	800100a <BSP_PB_Init+0xa2>
  }
  else /* B3 */
  {
    B3_GPIO_CLK_ENABLE();
 8000fec:	4b42      	ldr	r3, [pc, #264]	@ (80010f8 <BSP_PB_Init+0x190>)
 8000fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ff2:	4a41      	ldr	r2, [pc, #260]	@ (80010f8 <BSP_PB_Init+0x190>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ffc:	4b3e      	ldr	r3, [pc, #248]	@ (80010f8 <BSP_PB_Init+0x190>)
 8000ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  }

  GPIO_Init.Pin   = BUTTON_PIN[Button];
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	4a3b      	ldr	r2, [pc, #236]	@ (80010fc <BSP_PB_Init+0x194>)
 800100e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001012:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_Init.Pull  = GPIO_PULLUP;
 8001014:	2301      	movs	r3, #1
 8001016:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8001018:	2302      	movs	r3, #2
 800101a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (ButtonMode == BUTTON_MODE_GPIO)
 800101c:	79bb      	ldrb	r3, [r7, #6]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10b      	bne.n	800103a <BSP_PB_Init+0xd2>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8001022:	2300      	movs	r3, #0
 8001024:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	4a35      	ldr	r2, [pc, #212]	@ (8001100 <BSP_PB_Init+0x198>)
 800102a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f000 fbd3 	bl	80017e0 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d14f      	bne.n	80010e0 <BSP_PB_Init+0x178>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
 8001040:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001044:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	4a2d      	ldr	r2, [pc, #180]	@ (8001100 <BSP_PB_Init+0x198>)
 800104a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f000 fbc3 	bl	80017e0 <HAL_GPIO_Init>

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 800105a:	79fa      	ldrb	r2, [r7, #7]
 800105c:	4613      	mov	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4a27      	ldr	r2, [pc, #156]	@ (8001104 <BSP_PB_Init+0x19c>)
 8001066:	441a      	add	r2, r3
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	3350      	adds	r3, #80	@ 0x50
 800106e:	443b      	add	r3, r7
 8001070:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001074:	4619      	mov	r1, r3
 8001076:	4610      	mov	r0, r2
 8001078:	f000 fb9e 	bl	80017b8 <HAL_EXTI_GetHandle>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d12b      	bne.n	80010da <BSP_PB_Init+0x172>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_FALLING_CB_ID, ButtonCallback[Button]) == HAL_OK)
 8001082:	79fa      	ldrb	r2, [r7, #7]
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4a1d      	ldr	r2, [pc, #116]	@ (8001104 <BSP_PB_Init+0x19c>)
 800108e:	1898      	adds	r0, r3, r2
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	3350      	adds	r3, #80	@ 0x50
 8001096:	443b      	add	r3, r7
 8001098:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800109c:	461a      	mov	r2, r3
 800109e:	2102      	movs	r1, #2
 80010a0:	f000 fb5e 	bl	8001760 <HAL_EXTI_RegisterCallback>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d113      	bne.n	80010d2 <BSP_PB_Init+0x16a>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], BSP_BUTTON_IT_PRIO[Button], 0x00);
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	4a16      	ldr	r2, [pc, #88]	@ (8001108 <BSP_PB_Init+0x1a0>)
 80010ae:	56d0      	ldrsb	r0, [r2, r3]
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	3350      	adds	r3, #80	@ 0x50
 80010b6:	443b      	add	r3, r7
 80010b8:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80010bc:	2200      	movs	r2, #0
 80010be:	4619      	mov	r1, r3
 80010c0:	f000 faa8 	bl	8001614 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4a10      	ldr	r2, [pc, #64]	@ (8001108 <BSP_PB_Init+0x1a0>)
 80010c8:	56d3      	ldrsb	r3, [r2, r3]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fabf 	bl	800164e <HAL_NVIC_EnableIRQ>
 80010d0:	e006      	b.n	80010e0 <BSP_PB_Init+0x178>
      }
      else
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 80010d2:	f06f 0303 	mvn.w	r3, #3
 80010d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80010d8:	e002      	b.n	80010e0 <BSP_PB_Init+0x178>
      }
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 80010da:	f06f 0303 	mvn.w	r3, #3
 80010de:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return status;
 80010e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3750      	adds	r7, #80	@ 0x50
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	08003f58 	.word	0x08003f58
 80010f0:	08003f64 	.word	0x08003f64
 80010f4:	08003f70 	.word	0x08003f70
 80010f8:	46020c00 	.word	0x46020c00
 80010fc:	20000028 	.word	0x20000028
 8001100:	20000030 	.word	0x20000030
 8001104:	20000168 	.word	0x20000168
 8001108:	2000003c 	.word	0x2000003c

0800110c <BSP_PB_Callback>:
  *     @arg B2
  *     @arg B3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code.
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d103      	bne.n	8001142 <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 800113a:	f06f 0301 	mvn.w	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	e026      	b.n	8001190 <BSP_COM_Init+0x6c>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
 8001142:	79fa      	ldrb	r2, [r7, #7]
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4915      	ldr	r1, [pc, #84]	@ (800119c <BSP_COM_Init+0x78>)
 8001148:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800114c:	4914      	ldr	r1, [pc, #80]	@ (80011a0 <BSP_COM_Init+0x7c>)
 800114e:	2094      	movs	r0, #148	@ 0x94
 8001150:	fb00 f303 	mul.w	r3, r0, r3
 8001154:	440b      	add	r3, r1
 8001156:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	2294      	movs	r2, #148	@ 0x94
 800115c:	fb02 f303 	mul.w	r3, r2, r3
 8001160:	4a0f      	ldr	r2, [pc, #60]	@ (80011a0 <BSP_COM_Init+0x7c>)
 8001162:	4413      	add	r3, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f000 f863 	bl	8001230 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10f      	bne.n	8001190 <BSP_COM_Init+0x6c>
    {
      if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2294      	movs	r2, #148	@ 0x94
 8001174:	fb02 f303 	mul.w	r3, r2, r3
 8001178:	4a09      	ldr	r2, [pc, #36]	@ (80011a0 <BSP_COM_Init+0x7c>)
 800117a:	4413      	add	r3, r2
 800117c:	6839      	ldr	r1, [r7, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f000 f810 	bl	80011a4 <MX_USART1_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <BSP_COM_Init+0x6c>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 800118a:	f06f 0303 	mvn.w	r3, #3
 800118e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return status;
 8001190:	68fb      	ldr	r3, [r7, #12]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000040 	.word	0x20000040
 80011a0:	200000d4 	.word	0x200000d4

080011a4 <MX_USART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	891b      	ldrh	r3, [r3, #8]
 80011c2:	461a      	mov	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	895b      	ldrh	r3, [r3, #10]
 80011cc:	461a      	mov	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	220c      	movs	r2, #12
 80011d6:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	899b      	ldrh	r3, [r3, #12]
 80011dc:	461a      	mov	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011e8:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f002 f940 	bl	800347c <HAL_UART_Init>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <B1_EXTI_Callback>:
/**
  * @brief  B1 EXTI line detection callbacks.
  * @retval None.
  */
static void B1_EXTI_Callback(void)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	af00      	add	r7, sp, #0
  BSP_PB_Callback(B1);
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff ff7e 	bl	800110c <BSP_PB_Callback>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <B2_EXTI_Callback>:
/**
  * @brief  B2 EXTI line detection callbacks.
  * @retval None.
  */
static void B2_EXTI_Callback(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  BSP_PB_Callback(B2);
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff ff77 	bl	800110c <BSP_PB_Callback>
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}

08001222 <B3_EXTI_Callback>:
/**
  * @brief  B3 EXTI line detection callbacks.
  * @retval None.
  */
static void B3_EXTI_Callback(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
  BSP_PB_Callback(B3);
 8001226:	2002      	movs	r0, #2
 8001228:	f7ff ff70 	bl	800110c <BSP_PB_Callback>
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}

08001230 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	@ 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable COM and GPIO clocks */
  COM1_TX_GPIO_CLK_ENABLE();
 8001238:	4b26      	ldr	r3, [pc, #152]	@ (80012d4 <UART_MspInit+0xa4>)
 800123a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800123e:	4a25      	ldr	r2, [pc, #148]	@ (80012d4 <UART_MspInit+0xa4>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001248:	4b22      	ldr	r3, [pc, #136]	@ (80012d4 <UART_MspInit+0xa4>)
 800124a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001256:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <UART_MspInit+0xa4>)
 8001258:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800125c:	4a1d      	ldr	r2, [pc, #116]	@ (80012d4 <UART_MspInit+0xa4>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001266:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <UART_MspInit+0xa4>)
 8001268:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
  COM1_CLK_ENABLE();
 8001274:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <UART_MspInit+0xa4>)
 8001276:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800127a:	4a16      	ldr	r2, [pc, #88]	@ (80012d4 <UART_MspInit+0xa4>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001280:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001284:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <UART_MspInit+0xa4>)
 8001286:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800128a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM1_TX_PIN;
 8001292:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 800129c:	2302      	movs	r3, #2
 800129e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Alternate = COM1_TX_AF;
 80012a4:	2307      	movs	r3, #7
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &GPIO_Init);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	480a      	ldr	r0, [pc, #40]	@ (80012d8 <UART_MspInit+0xa8>)
 80012b0:	f000 fa96 	bl	80017e0 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM1_RX_PIN;
 80012b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_Init.Alternate = COM1_RX_AF;
 80012ba:	2307      	movs	r3, #7
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &GPIO_Init);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	@ (80012dc <UART_MspInit+0xac>)
 80012c6:	f000 fa8b 	bl	80017e0 <HAL_GPIO_Init>
}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	@ 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	46020c00 	.word	0x46020c00
 80012d8:	42020400 	.word	0x42020400
 80012dc:	42020000 	.word	0x42020000

080012e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e4:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <HAL_Init+0x3c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0c      	ldr	r2, [pc, #48]	@ (800131c <HAL_Init+0x3c>)
 80012ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 f984 	bl	80015fe <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 80012f6:	f7ff fcf9 	bl	8000cec <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80012fa:	2004      	movs	r0, #4
 80012fc:	f000 f9d8 	bl	80016b0 <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001300:	200f      	movs	r0, #15
 8001302:	f000 f80d 	bl	8001320 <HAL_InitTick>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_Init+0x30>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e002      	b.n	8001316 <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001310:	f7ff fc1c 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40022000 	.word	0x40022000

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800132c:	4b36      	ldr	r3, [pc, #216]	@ (8001408 <HAL_InitTick+0xe8>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e062      	b.n	80013fe <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001338:	4b34      	ldr	r3, [pc, #208]	@ (800140c <HAL_InitTick+0xec>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b04      	cmp	r3, #4
 8001342:	d10c      	bne.n	800135e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001344:	4b32      	ldr	r3, [pc, #200]	@ (8001410 <HAL_InitTick+0xf0>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b2f      	ldr	r3, [pc, #188]	@ (8001408 <HAL_InitTick+0xe8>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001352:	fbb3 f3f1 	udiv	r3, r3, r1
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	e03d      	b.n	80013da <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 800135e:	4b2d      	ldr	r3, [pc, #180]	@ (8001414 <HAL_InitTick+0xf4>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001364:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001368:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001370:	d025      	beq.n	80013be <HAL_InitTick+0x9e>
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001378:	d82e      	bhi.n	80013d8 <HAL_InitTick+0xb8>
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d004      	beq.n	800138a <HAL_InitTick+0x6a>
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001386:	d00d      	beq.n	80013a4 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8001388:	e026      	b.n	80013d8 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800138a:	4b21      	ldr	r3, [pc, #132]	@ (8001410 <HAL_InitTick+0xf0>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b1e      	ldr	r3, [pc, #120]	@ (8001408 <HAL_InitTick+0xe8>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	4619      	mov	r1, r3
 8001394:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001398:	fbb3 f3f1 	udiv	r3, r3, r1
 800139c:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a0:	60fb      	str	r3, [r7, #12]
        break;
 80013a2:	e01a      	b.n	80013da <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80013a4:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <HAL_InitTick+0xe8>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80013b2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80013b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ba:	60fb      	str	r3, [r7, #12]
        break;
 80013bc:	e00d      	b.n	80013da <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80013be:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <HAL_InitTick+0xe8>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80013cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d4:	60fb      	str	r3, [r7, #12]
        break;
 80013d6:	e000      	b.n	80013da <HAL_InitTick+0xba>
        break;
 80013d8:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 f946 	bl	800166c <HAL_SYSTICK_Config>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e009      	b.n	80013fe <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ea:	2200      	movs	r2, #0
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	f04f 30ff 	mov.w	r0, #4294967295
 80013f2:	f000 f90f 	bl	8001614 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80013f6:	4a08      	ldr	r2, [pc, #32]	@ (8001418 <HAL_InitTick+0xf8>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000048 	.word	0x20000048
 800140c:	e000e010 	.word	0xe000e010
 8001410:	20000010 	.word	0x20000010
 8001414:	46020c00 	.word	0x46020c00
 8001418:	20000044 	.word	0x20000044

0800141c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <HAL_IncTick+0x20>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_IncTick+0x24>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4413      	add	r3, r2
 800142c:	4a04      	ldr	r2, [pc, #16]	@ (8001440 <HAL_IncTick+0x24>)
 800142e:	6013      	str	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000048 	.word	0x20000048
 8001440:	2000018c 	.word	0x2000018c

08001444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return uwTick;
 8001448:	4b03      	ldr	r3, [pc, #12]	@ (8001458 <HAL_GetTick+0x14>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	2000018c 	.word	0x2000018c

0800145c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff ffee 	bl	8001444 <HAL_GetTick>
 8001468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001474:	d005      	beq.n	8001482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <HAL_Delay+0x44>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4413      	add	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001482:	bf00      	nop
 8001484:	f7ff ffde 	bl	8001444 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	429a      	cmp	r2, r3
 8001492:	d8f7      	bhi.n	8001484 <HAL_Delay+0x28>
  {
  }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000048 	.word	0x20000048

080014a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <__NVIC_GetPriorityGrouping+0x18>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	f003 0307 	and.w	r3, r3, #7
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0b      	blt.n	8001532 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	4907      	ldr	r1, [pc, #28]	@ (8001540 <__NVIC_EnableIRQ+0x38>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	2001      	movs	r0, #1
 800152a:	fa00 f202 	lsl.w	r2, r0, r2
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	@ (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	@ (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	@ 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	@ 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ff4c 	bl	80014a4 <__NVIC_SetPriorityGrouping>
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
 8001622:	f7ff ff63 	bl	80014ec <__NVIC_GetPriorityGrouping>
 8001626:	4603      	mov	r3, r0
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f7ff ffb0 	bl	8001598 <NVIC_EncodePriority>
 8001638:	4602      	mov	r2, r0
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff7f 	bl	8001544 <__NVIC_SetPriority>
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbaxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff53 	bl	8001508 <__NVIC_EnableIRQ>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800167c:	d301      	bcc.n	8001682 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800167e:	2301      	movs	r3, #1
 8001680:	e00d      	b.n	800169e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001682:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <HAL_SYSTICK_Config+0x40>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800168a:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <HAL_SYSTICK_Config+0x40>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <HAL_SYSTICK_Config+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a05      	ldr	r2, [pc, #20]	@ (80016ac <HAL_SYSTICK_Config+0x40>)
 8001696:	f043 0303 	orr.w	r3, r3, #3
 800169a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000e010 	.word	0xe000e010

080016b0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d844      	bhi.n	8001748 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80016be:	a201      	add	r2, pc, #4	@ (adr r2, 80016c4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80016c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c4:	080016e7 	.word	0x080016e7
 80016c8:	08001705 	.word	0x08001705
 80016cc:	08001727 	.word	0x08001727
 80016d0:	08001749 	.word	0x08001749
 80016d4:	080016d9 	.word	0x080016d9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80016d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001758 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001758 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	6013      	str	r3, [r2, #0]
      break;
 80016e4:	e031      	b.n	800174a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80016e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001758 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001758 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016ec:	f023 0304 	bic.w	r3, r3, #4
 80016f0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80016f2:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f8:	4a18      	ldr	r2, [pc, #96]	@ (800175c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016fa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80016fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001702:	e022      	b.n	800174a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001704:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a13      	ldr	r2, [pc, #76]	@ (8001758 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800170a:	f023 0304 	bic.w	r3, r3, #4
 800170e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001710:	4b12      	ldr	r3, [pc, #72]	@ (800175c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001716:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800171a:	4a10      	ldr	r2, [pc, #64]	@ (800175c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800171c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001720:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001724:	e011      	b.n	800174a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001726:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a0b      	ldr	r2, [pc, #44]	@ (8001758 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800172c:	f023 0304 	bic.w	r3, r3, #4
 8001730:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001732:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001738:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800173c:	4a07      	ldr	r2, [pc, #28]	@ (800175c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800173e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001742:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001746:	e000      	b.n	800174a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001748:	bf00      	nop
  }
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000e010 	.word	0xe000e010
 800175c:	46020c00 	.word	0x46020c00

08001760 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	460b      	mov	r3, r1
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001772:	7afb      	ldrb	r3, [r7, #11]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d011      	beq.n	800179c <HAL_EXTI_RegisterCallback+0x3c>
 8001778:	2b02      	cmp	r3, #2
 800177a:	dc13      	bgt.n	80017a4 <HAL_EXTI_RegisterCallback+0x44>
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <HAL_EXTI_RegisterCallback+0x26>
 8001780:	2b01      	cmp	r3, #1
 8001782:	d007      	beq.n	8001794 <HAL_EXTI_RegisterCallback+0x34>
 8001784:	e00e      	b.n	80017a4 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	609a      	str	r2, [r3, #8]
      break;
 8001792:	e00a      	b.n	80017aa <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	605a      	str	r2, [r3, #4]
      break;
 800179a:	e006      	b.n	80017aa <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	609a      	str	r2, [r3, #8]
      break;
 80017a2:	e002      	b.n	80017aa <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	75fb      	strb	r3, [r7, #23]
      break;
 80017a8:	bf00      	nop
  }

  return status;
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	371c      	adds	r7, #28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e003      	b.n	80017d4 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80017d2:	2300      	movs	r3, #0
  }
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b087      	sub	sp, #28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017ee:	e130      	b.n	8001a52 <HAL_GPIO_Init+0x272>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	2101      	movs	r1, #1
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	4013      	ands	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 8122 	beq.w	8001a4c <HAL_GPIO_Init+0x26c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b01      	cmp	r3, #1
 8001812:	d005      	beq.n	8001820 <HAL_GPIO_Init+0x40>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d130      	bne.n	8001882 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001856:	2201      	movs	r2, #1
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	f003 0201 	and.w	r2, r3, #1
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	2b03      	cmp	r3, #3
 800188c:	d017      	beq.n	80018be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	2203      	movs	r2, #3
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d123      	bne.n	8001912 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	08da      	lsrs	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3208      	adds	r2, #8
 80018d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	220f      	movs	r2, #15
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	691a      	ldr	r2, [r3, #16]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	08da      	lsrs	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3208      	adds	r2, #8
 800190c:	6939      	ldr	r1, [r7, #16]
 800190e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	2203      	movs	r2, #3
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 0203 	and.w	r2, r3, #3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d07c      	beq.n	8001a4c <HAL_GPIO_Init+0x26c>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001952:	4a47      	ldr	r2, [pc, #284]	@ (8001a70 <HAL_GPIO_Init+0x290>)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3318      	adds	r3, #24
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	0a9a      	lsrs	r2, r3, #10
 800197a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a74 <HAL_GPIO_Init+0x294>)
 800197c:	4013      	ands	r3, r2
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	f002 0203 	and.w	r2, r2, #3
 8001984:	00d2      	lsls	r2, r2, #3
 8001986:	4093      	lsls	r3, r2
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800198e:	4938      	ldr	r1, [pc, #224]	@ (8001a70 <HAL_GPIO_Init+0x290>)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	3318      	adds	r3, #24
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800199c:	4b34      	ldr	r3, [pc, #208]	@ (8001a70 <HAL_GPIO_Init+0x290>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x1e0>
        {
          temp |= iocurrent;
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019c0:	4a2b      	ldr	r2, [pc, #172]	@ (8001a70 <HAL_GPIO_Init+0x290>)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80019c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a70 <HAL_GPIO_Init+0x290>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x20a>
        {
          temp |= iocurrent;
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019ea:	4a21      	ldr	r2, [pc, #132]	@ (8001a70 <HAL_GPIO_Init+0x290>)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a70 <HAL_GPIO_Init+0x290>)
 80019f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a16:	4a16      	ldr	r2, [pc, #88]	@ (8001a70 <HAL_GPIO_Init+0x290>)
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8001a1e:	4b14      	ldr	r3, [pc, #80]	@ (8001a70 <HAL_GPIO_Init+0x290>)
 8001a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a44:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <HAL_GPIO_Init+0x290>)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f47f aec7 	bne.w	80017f0 <HAL_GPIO_Init+0x10>
  }
}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	371c      	adds	r7, #28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	46022000 	.word	0x46022000
 8001a74:	002f7f7f 	.word	0x002f7f7f

08001a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
 8001a84:	4613      	mov	r3, r2
 8001a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a88:	787b      	ldrb	r3, [r7, #1]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a8e:	887a      	ldrh	r2, [r7, #2]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00U)
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d006      	beq.n	8001acc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001abe:	4a0c      	ldr	r2, [pc, #48]	@ (8001af0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f814 	bl	8001af4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00U)
 8001acc:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001ad8:	4a05      	ldr	r2, [pc, #20]	@ (8001af0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 f812 	bl	8001b0a <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	46022000 	.word	0x46022000

08001af4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e08d      	b.n	8001c4e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff f81a 	bl	8000b80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2224      	movs	r2, #36	@ 0x24
 8001b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d107      	bne.n	8001b9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	e006      	b.n	8001ba8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001ba6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d108      	bne.n	8001bc2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	e007      	b.n	8001bd2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001be0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001be4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bf4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691a      	ldr	r2, [r3, #16]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69d9      	ldr	r1, [r3, #28]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1a      	ldr	r2, [r3, #32]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af02      	add	r7, sp, #8
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	461a      	mov	r2, r3
 8001c64:	460b      	mov	r3, r1
 8001c66:	817b      	strh	r3, [r7, #10]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	f040 80da 	bne.w	8001e2e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_I2C_Master_Transmit+0x30>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e0d3      	b.n	8001e30 <HAL_I2C_Master_Transmit+0x1d8>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c90:	f7ff fbd8 	bl	8001444 <HAL_GetTick>
 8001c94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	2319      	movs	r3, #25
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 f8f0 	bl	8001e88 <I2C_WaitOnFlagUntilTimeout>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e0be      	b.n	8001e30 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2221      	movs	r2, #33	@ 0x21
 8001cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	893a      	ldrh	r2, [r7, #8]
 8001cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	2bff      	cmp	r3, #255	@ 0xff
 8001ce2:	d90e      	bls.n	8001d02 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	22ff      	movs	r2, #255	@ 0xff
 8001ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	8979      	ldrh	r1, [r7, #10]
 8001cf2:	4b51      	ldr	r3, [pc, #324]	@ (8001e38 <HAL_I2C_Master_Transmit+0x1e0>)
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 fa88 	bl	8002210 <I2C_TransferConfig>
 8001d00:	e06c      	b.n	8001ddc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	8979      	ldrh	r1, [r7, #10]
 8001d14:	4b48      	ldr	r3, [pc, #288]	@ (8001e38 <HAL_I2C_Master_Transmit+0x1e0>)
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f000 fa77 	bl	8002210 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001d22:	e05b      	b.n	8001ddc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	6a39      	ldr	r1, [r7, #32]
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 f906 	bl	8001f3a <I2C_WaitOnTXISFlagUntilTimeout>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e07b      	b.n	8001e30 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3c:	781a      	ldrb	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d48:	1c5a      	adds	r2, r3, #1
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	3b01      	subs	r3, #1
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d034      	beq.n	8001ddc <HAL_I2C_Master_Transmit+0x184>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d130      	bne.n	8001ddc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	2200      	movs	r2, #0
 8001d82:	2180      	movs	r1, #128	@ 0x80
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 f87f 	bl	8001e88 <I2C_WaitOnFlagUntilTimeout>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e04d      	b.n	8001e30 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2bff      	cmp	r3, #255	@ 0xff
 8001d9c:	d90e      	bls.n	8001dbc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	22ff      	movs	r2, #255	@ 0xff
 8001da2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	8979      	ldrh	r1, [r7, #10]
 8001dac:	2300      	movs	r3, #0
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 fa2b 	bl	8002210 <I2C_TransferConfig>
 8001dba:	e00f      	b.n	8001ddc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	8979      	ldrh	r1, [r7, #10]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 fa1a 	bl	8002210 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d19e      	bne.n	8001d24 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	6a39      	ldr	r1, [r7, #32]
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f8ec 	bl	8001fc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e01a      	b.n	8001e30 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6859      	ldr	r1, [r3, #4]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <HAL_I2C_Master_Transmit+0x1e4>)
 8001e0e:	400b      	ands	r3, r1
 8001e10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2220      	movs	r2, #32
 8001e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e000      	b.n	8001e30 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001e2e:	2302      	movs	r3, #2
  }
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	80002000 	.word	0x80002000
 8001e3c:	fe00e800 	.word	0xfe00e800

08001e40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d103      	bne.n	8001e5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d007      	beq.n	8001e7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	699a      	ldr	r2, [r3, #24]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	619a      	str	r2, [r3, #24]
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	4613      	mov	r3, r2
 8001e96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e98:	e03b      	b.n	8001f12 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	6839      	ldr	r1, [r7, #0]
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 f8d6 	bl	8002050 <I2C_IsErrorOccurred>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e041      	b.n	8001f32 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb4:	d02d      	beq.n	8001f12 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb6:	f7ff fac5 	bl	8001444 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d302      	bcc.n	8001ecc <I2C_WaitOnFlagUntilTimeout+0x44>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d122      	bne.n	8001f12 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	bf0c      	ite	eq
 8001edc:	2301      	moveq	r3, #1
 8001ede:	2300      	movne	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d113      	bne.n	8001f12 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	f043 0220 	orr.w	r2, r3, #32
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00f      	b.n	8001f32 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699a      	ldr	r2, [r3, #24]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	bf0c      	ite	eq
 8001f22:	2301      	moveq	r3, #1
 8001f24:	2300      	movne	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d0b4      	beq.n	8001e9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f46:	e033      	b.n	8001fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	68b9      	ldr	r1, [r7, #8]
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 f87f 	bl	8002050 <I2C_IsErrorOccurred>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e031      	b.n	8001fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f62:	d025      	beq.n	8001fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f64:	f7ff fa6e 	bl	8001444 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d302      	bcc.n	8001f7a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d11a      	bne.n	8001fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d013      	beq.n	8001fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8c:	f043 0220 	orr.w	r2, r3, #32
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2220      	movs	r2, #32
 8001f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e007      	b.n	8001fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d1c4      	bne.n	8001f48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fd4:	e02f      	b.n	8002036 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f838 	bl	8002050 <I2C_IsErrorOccurred>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e02d      	b.n	8002046 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fea:	f7ff fa2b 	bl	8001444 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d302      	bcc.n	8002000 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d11a      	bne.n	8002036 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f003 0320 	and.w	r3, r3, #32
 800200a:	2b20      	cmp	r3, #32
 800200c:	d013      	beq.n	8002036 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002012:	f043 0220 	orr.w	r2, r3, #32
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e007      	b.n	8002046 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b20      	cmp	r3, #32
 8002042:	d1c8      	bne.n	8001fd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	@ 0x28
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b00      	cmp	r3, #0
 800207a:	d068      	beq.n	800214e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2210      	movs	r2, #16
 8002082:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002084:	e049      	b.n	800211a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d045      	beq.n	800211a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800208e:	f7ff f9d9 	bl	8001444 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	429a      	cmp	r2, r3
 800209c:	d302      	bcc.n	80020a4 <I2C_IsErrorOccurred+0x54>
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d13a      	bne.n	800211a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80020b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020c6:	d121      	bne.n	800210c <I2C_IsErrorOccurred+0xbc>
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020ce:	d01d      	beq.n	800210c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	2b20      	cmp	r3, #32
 80020d4:	d01a      	beq.n	800210c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80020e6:	f7ff f9ad 	bl	8001444 <HAL_GetTick>
 80020ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ec:	e00e      	b.n	800210c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80020ee:	f7ff f9a9 	bl	8001444 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b19      	cmp	r3, #25
 80020fa:	d907      	bls.n	800210c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	f043 0320 	orr.w	r3, r3, #32
 8002102:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800210a:	e006      	b.n	800211a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b20      	cmp	r3, #32
 8002118:	d1e9      	bne.n	80020ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b20      	cmp	r3, #32
 8002126:	d003      	beq.n	8002130 <I2C_IsErrorOccurred+0xe0>
 8002128:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0aa      	beq.n	8002086 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002130:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002134:	2b00      	cmp	r3, #0
 8002136:	d103      	bne.n	8002140 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2220      	movs	r2, #32
 800213e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	f043 0304 	orr.w	r3, r3, #4
 8002146:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00b      	beq.n	8002178 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002170:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00b      	beq.n	800219a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	f043 0308 	orr.w	r3, r3, #8
 8002188:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002192:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00b      	beq.n	80021bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	f043 0302 	orr.w	r3, r3, #2
 80021aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80021bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01c      	beq.n	80021fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f7ff fe3b 	bl	8001e40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6859      	ldr	r1, [r3, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b0d      	ldr	r3, [pc, #52]	@ (800220c <I2C_IsErrorOccurred+0x1bc>)
 80021d6:	400b      	ands	r3, r1
 80021d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80021fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002202:	4618      	mov	r0, r3
 8002204:	3728      	adds	r7, #40	@ 0x28
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	fe00e800 	.word	0xfe00e800

08002210 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	817b      	strh	r3, [r7, #10]
 800221e:	4613      	mov	r3, r2
 8002220:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002222:	897b      	ldrh	r3, [r7, #10]
 8002224:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002228:	7a7b      	ldrb	r3, [r7, #9]
 800222a:	041b      	lsls	r3, r3, #16
 800222c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002230:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	4313      	orrs	r3, r2
 800223a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800223e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	0d5b      	lsrs	r3, r3, #21
 800224a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800224e:	4b08      	ldr	r3, [pc, #32]	@ (8002270 <I2C_TransferConfig+0x60>)
 8002250:	430b      	orrs	r3, r1
 8002252:	43db      	mvns	r3, r3
 8002254:	ea02 0103 	and.w	r1, r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	430a      	orrs	r2, r1
 8002260:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002262:	bf00      	nop
 8002264:	371c      	adds	r7, #28
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	03ff63ff 	.word	0x03ff63ff

08002274 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b20      	cmp	r3, #32
 8002288:	d138      	bne.n	80022fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002294:	2302      	movs	r3, #2
 8002296:	e032      	b.n	80022fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2224      	movs	r2, #36	@ 0x24
 80022a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0201 	bic.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80022c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6819      	ldr	r1, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	e000      	b.n	80022fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022fc:	2302      	movs	r3, #2
  }
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800230a:	b480      	push	{r7}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b20      	cmp	r3, #32
 800231e:	d139      	bne.n	8002394 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800232a:	2302      	movs	r3, #2
 800232c:	e033      	b.n	8002396 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2224      	movs	r2, #36	@ 0x24
 800233a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0201 	bic.w	r2, r2, #1
 800234c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800235c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4313      	orrs	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	e000      	b.n	8002396 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002394:	2302      	movs	r3, #2
  }
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80023b0:	4b0b      	ldr	r3, [pc, #44]	@ (80023e0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
 80023c0:	e007      	b.n	80023d2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80023c2:	4b07      	ldr	r3, [pc, #28]	@ (80023e0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 0204 	bic.w	r2, r3, #4
 80023ca:	4905      	ldr	r1, [pc, #20]	@ (80023e0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	40030400 	.word	0x40030400

080023e4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <HAL_ICACHE_Enable+0x1c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a04      	ldr	r2, [pc, #16]	@ (8002400 <HAL_ICACHE_Enable+0x1c>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	40030400 	.word	0x40030400

08002404 <HAL_PWREx_ControlVoltageScaling>:
  *        only take effect after the 2.4 GHz RADIO has entered Sleep or Deepsleep mode.
  * @note  In range 2, the 2.4 GHz RADIO shall not transmit nor receive.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  uint32_t vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800240c:	4b29      	ldr	r3, [pc, #164]	@ (80024b4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800240e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002410:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002414:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	429a      	cmp	r2, r3
 800241c:	d101      	bne.n	8002422 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	e042      	b.n	80024a8 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Set voltage scaling level */
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 8002422:	4b24      	ldr	r3, [pc, #144]	@ (80024b4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800242a:	4922      	ldr	r1, [pc, #136]	@ (80024b4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4313      	orrs	r3, r2
 8002430:	60cb      	str	r3, [r1, #12]


  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8002432:	4b21      	ldr	r3, [pc, #132]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2232      	movs	r2, #50	@ 0x32
 8002438:	fb02 f303 	mul.w	r3, r2, r3
 800243c:	4a1f      	ldr	r2, [pc, #124]	@ (80024bc <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	0c9b      	lsrs	r3, r3, #18
 8002444:	3301      	adds	r3, #1
 8002446:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002448:	e002      	b.n	8002450 <HAL_PWREx_ControlVoltageScaling+0x4c>
  {
    timeout--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3b01      	subs	r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002450:	4b18      	ldr	r3, [pc, #96]	@ (80024b4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d102      	bne.n	8002462 <HAL_PWREx_ControlVoltageScaling+0x5e>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f3      	bne.n	800244a <HAL_PWREx_ControlVoltageScaling+0x46>
  }

  /* Check time out  */
  if (timeout == 0U)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_PWREx_ControlVoltageScaling+0x68>
  {
    return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e01d      	b.n	80024a8 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Wait until ACTVOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 800246c:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2232      	movs	r2, #50	@ 0x32
 8002472:	fb02 f303 	mul.w	r3, r2, r3
 8002476:	4a11      	ldr	r2, [pc, #68]	@ (80024bc <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002478:	fba2 2303 	umull	r2, r3, r2, r3
 800247c:	0c9b      	lsrs	r3, r3, #18
 800247e:	3301      	adds	r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002482:	e002      	b.n	800248a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	3b01      	subs	r3, #1
 8002488:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800248a:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800248c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d102      	bne.n	800249c <HAL_PWREx_ControlVoltageScaling+0x98>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1f3      	bne.n	8002484 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out  */
  if (timeout == 0U)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_PWREx_ControlVoltageScaling+0xa2>
  {
    return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e000      	b.n	80024a8 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	46020800 	.word	0x46020800
 80024b8:	20000010 	.word	0x20000010
 80024bc:	431bde83 	.word	0x431bde83

080024c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08c      	sub	sp, #48	@ 0x30
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t mask;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e3d9      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d2:	4b90      	ldr	r3, [pc, #576]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	623b      	str	r3, [r7, #32]
  pllsrc = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80024dc:	4b8d      	ldr	r3, [pc, #564]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 80024de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d072      	beq.n	80025d8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL1 in these cases it is not allowed to be disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_OscConfig+0x44>
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	2b0c      	cmp	r3, #12
 80024fc:	d12a      	bne.n	8002554 <HAL_RCC_OscConfig+0x94>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSE)))
 80024fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002500:	2b03      	cmp	r3, #3
 8002502:	d127      	bne.n	8002554 <HAL_RCC_OscConfig+0x94>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_OscConfig+0x50>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e3ba      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Otherwise, applying divider is allowed */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	2b08      	cmp	r3, #8
 8002514:	d15f      	bne.n	80025d6 <HAL_RCC_OscConfig+0x116>
        {
          assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

          /* Adjust the HSE division factor */
          __HAL_RCC_HSE_CONFIG(RCC_HSE_ON | RCC_OscInitStruct->HSEDiv);
 8002516:	4b7f      	ldr	r3, [pc, #508]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	4313      	orrs	r3, r2
 8002524:	4a7b      	ldr	r2, [pc, #492]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 8002526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800252a:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSE value */
          SystemCoreClock = (HSE_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSEPRE)) >> RCC_CR_HSEPRE_Pos)));
 800252c:	4b79      	ldr	r3, [pc, #484]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	0d1b      	lsrs	r3, r3, #20
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	4a78      	ldr	r2, [pc, #480]	@ (8002718 <HAL_RCC_OscConfig+0x258>)
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	4a77      	ldr	r2, [pc, #476]	@ (800271c <HAL_RCC_OscConfig+0x25c>)
 800253e:	6013      	str	r3, [r2, #0]

          /* Adapt Systick interrupt period */
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002540:	4b77      	ldr	r3, [pc, #476]	@ (8002720 <HAL_RCC_OscConfig+0x260>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe feeb 	bl	8001320 <HAL_InitTick>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d042      	beq.n	80025d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e398      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d01f      	beq.n	800259c <HAL_RCC_OscConfig+0xdc>
      {
        assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG((RCC_OscInitStruct->HSEState | RCC_OscInitStruct->HSEDiv));
 800255c:	4b6d      	ldr	r3, [pc, #436]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	430b      	orrs	r3, r1
 800256e:	4969      	ldr	r1, [pc, #420]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 8002570:	4313      	orrs	r3, r2
 8002572:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe ff66 	bl	8001444 <HAL_GetTick>
 8002578:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0xce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800257c:	f7fe ff62 	bl	8001444 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	@ 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e37b      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800258e:	4b61      	ldr	r3, [pc, #388]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0xbc>
 800259a:	e01d      	b.n	80025d8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259c:	4b5d      	ldr	r3, [pc, #372]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	495a      	ldr	r1, [pc, #360]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7fe ff49 	bl	8001444 <HAL_GetTick>
 80025b2:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b6:	f7fe ff45 	bl	8001444 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b64      	cmp	r3, #100	@ 0x64
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e35e      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025c8:	4b52      	ldr	r3, [pc, #328]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f0      	bne.n	80025b6 <HAL_RCC_OscConfig+0xf6>
 80025d4:	e000      	b.n	80025d8 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80025d6:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d05a      	beq.n	800269a <HAL_RCC_OscConfig+0x1da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_RCC_OscConfig+0x136>
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	2b0c      	cmp	r3, #12
 80025ee:	d113      	bne.n	8002618 <HAL_RCC_OscConfig+0x158>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSI)))
 80025f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d110      	bne.n	8002618 <HAL_RCC_OscConfig+0x158>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_OscConfig+0x142>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e341      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	4b44      	ldr	r3, [pc, #272]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	041b      	lsls	r3, r3, #16
 8002610:	4940      	ldr	r1, [pc, #256]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 8002612:	4313      	orrs	r3, r2
 8002614:	610b      	str	r3, [r1, #16]
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002616:	e040      	b.n	800269a <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d023      	beq.n	8002668 <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002620:	4b3c      	ldr	r3, [pc, #240]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a3b      	ldr	r2, [pc, #236]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 8002626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800262a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe ff0a 	bl	8001444 <HAL_GetTick>
 8002630:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002634:	f7fe ff06 	bl	8001444 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e31f      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002646:	4b33      	ldr	r3, [pc, #204]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x174>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	4b30      	ldr	r3, [pc, #192]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	041b      	lsls	r3, r3, #16
 8002660:	492c      	ldr	r1, [pc, #176]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 8002662:	4313      	orrs	r3, r2
 8002664:	610b      	str	r3, [r1, #16]
 8002666:	e018      	b.n	800269a <HAL_RCC_OscConfig+0x1da>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002668:	4b2a      	ldr	r3, [pc, #168]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a29      	ldr	r2, [pc, #164]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 800266e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7fe fee6 	bl	8001444 <HAL_GetTick>
 8002678:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x1ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267c:	f7fe fee2 	bl	8001444 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e2fb      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800268e:	4b21      	ldr	r3, [pc, #132]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x1bc>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80d2 	beq.w	800284c <HAL_RCC_OscConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Update LSI1 configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 80026ae:	4b19      	ldr	r3, [pc, #100]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 80026b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d111      	bne.n	80026e0 <HAL_RCC_OscConfig+0x220>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026bc:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 80026be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026c2:	4a14      	ldr	r2, [pc, #80]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80026cc:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <HAL_RCC_OscConfig+0x254>)
 80026ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80026da:	2301      	movs	r3, #1
 80026dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80026e0:	4b10      	ldr	r3, [pc, #64]	@ (8002724 <HAL_RCC_OscConfig+0x264>)
 80026e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d123      	bne.n	8002734 <HAL_RCC_OscConfig+0x274>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80026ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002724 <HAL_RCC_OscConfig+0x264>)
 80026ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002724 <HAL_RCC_OscConfig+0x264>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f8:	f7fe fea4 	bl	8001444 <HAL_GetTick>
 80026fc:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80026fe:	e013      	b.n	8002728 <HAL_RCC_OscConfig+0x268>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002700:	f7fe fea0 	bl	8001444 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d90c      	bls.n	8002728 <HAL_RCC_OscConfig+0x268>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e2b9      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
 8002712:	bf00      	nop
 8002714:	46020c00 	.word	0x46020c00
 8002718:	01e84800 	.word	0x01e84800
 800271c:	20000010 	.word	0x20000010
 8002720:	20000044 	.word	0x20000044
 8002724:	46020800 	.word	0x46020800
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002728:	4ba4      	ldr	r3, [pc, #656]	@ (80029bc <HAL_RCC_OscConfig+0x4fc>)
 800272a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0e5      	beq.n	8002700 <HAL_RCC_OscConfig+0x240>
        }
      }
    }

    /* Get BDCR1 register value */
    tmpreg1 = RCC->BDCR1;
 8002734:	4ba2      	ldr	r3, [pc, #648]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 8002736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800273a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Define mask depending on LSI presence */
    mask = RCC_BDCR1_LSI1ON;
 800273c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002740:	61bb      	str	r3, [r7, #24]
#if defined(RCC_LSI2_SUPPORT)
    mask |= RCC_BDCR1_LSI2ON;
#endif /* RCC_LSI2_SUPPORT */

    /* Check the LSI1 State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d056      	beq.n	80027f8 <HAL_RCC_OscConfig+0x338>
    {
      if ((RCC_OscInitStruct->LSIState & RCC_LSI1_ON) != 0x00u)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d030      	beq.n	80027b8 <HAL_RCC_OscConfig+0x2f8>
      {
        /* Check LSI1 division factor */
        assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

        /* Check is LSIDiv is requested to be changed and LSI is already ON */
        if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_BDCR1_LSI1PREDIV)) && ((tmpreg1 & RCC_BDCR1_LSI1RDY) != 0x00u))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69da      	ldr	r2, [r3, #28]
 800275a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002760:	429a      	cmp	r2, r3
 8002762:	d020      	beq.n	80027a6 <HAL_RCC_OscConfig+0x2e6>
 8002764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002766:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d01b      	beq.n	80027a6 <HAL_RCC_OscConfig+0x2e6>
        {
          /* Disable LSI1 */
          tmpreg1 &= ~RCC_BDCR1_LSI1ON;
 800276e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002770:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002774:	62bb      	str	r3, [r7, #40]	@ 0x28
          RCC->BDCR1 = tmpreg1;
 8002776:	4a92      	ldr	r2, [pc, #584]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 8002778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800277e:	f7fe fe61 	bl	8001444 <HAL_GetTick>
 8002782:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is disabled */
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x2d8>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002786:	f7fe fe5d 	bl	8001444 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b14      	cmp	r3, #20
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x2d8>
            {
              /* LSI1 may be forced ON by IWDG */
              return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e276      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8002798:	4b89      	ldr	r3, [pc, #548]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 800279a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800279e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1ef      	bne.n	8002786 <HAL_RCC_OscConfig+0x2c6>
          HAL_Delay(1);
#endif
        }

        /* Set LSI1 division factor */
        tmpreg1 &= ~RCC_BDCR1_LSI1PREDIV;
 80027a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ac:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027b4:	4313      	orrs	r3, r2
 80027b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Enable Concerned LSI */
      tmpreg1 |= RCC_OscInitStruct->LSIState;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027be:	4313      	orrs	r3, r2
 80027c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 80027c2:	4a7f      	ldr	r2, [pc, #508]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 80027c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ca:	f7fe fe3b 	bl	8001444 <HAL_GetTick>
 80027ce:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready : LSIRDY bit is position ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x324>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d2:	f7fe fe37 	bl	8001444 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b14      	cmp	r3, #20
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x324>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e250      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 80027e4:	4b76      	ldr	r3, [pc, #472]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 80027e6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0ed      	beq.n	80027d2 <HAL_RCC_OscConfig+0x312>
 80027f6:	e01d      	b.n	8002834 <HAL_RCC_OscConfig+0x374>
#endif
    }
    else
    {
      /* Disable the Internal Low Speed oscillator LSI1 and LSI2 is available */
      tmpreg1 &= ~mask;
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027fe:	4013      	ands	r3, r2
 8002800:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8002802:	4a6f      	ldr	r2, [pc, #444]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 8002804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002806:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280a:	f7fe fe1b 	bl	8001444 <HAL_GetTick>
 800280e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is disabled : LSIRDY bit position is ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x364>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002812:	f7fe fe17 	bl	8001444 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b14      	cmp	r3, #20
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x364>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e230      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8002824:	4b66      	ldr	r3, [pc, #408]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 8002826:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ee      	bne.n	8002812 <HAL_RCC_OscConfig+0x352>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002838:	2b01      	cmp	r3, #1
 800283a:	d107      	bne.n	800284c <HAL_RCC_OscConfig+0x38c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283c:	4b60      	ldr	r3, [pc, #384]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 800283e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002842:	4a5f      	ldr	r2, [pc, #380]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 8002844:	f023 0304 	bic.w	r3, r3, #4
 8002848:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80e2 	beq.w	8002a1e <HAL_RCC_OscConfig+0x55e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285a:	2300      	movs	r3, #0
 800285c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8002860:	4b57      	ldr	r3, [pc, #348]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 8002862:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d111      	bne.n	8002892 <HAL_RCC_OscConfig+0x3d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	4b54      	ldr	r3, [pc, #336]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 8002870:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002874:	4a52      	ldr	r2, [pc, #328]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 8002876:	f043 0304 	orr.w	r3, r3, #4
 800287a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800287e:	4b50      	ldr	r3, [pc, #320]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 8002880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800288c:	2301      	movs	r3, #1
 800288e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002892:	4b4a      	ldr	r3, [pc, #296]	@ (80029bc <HAL_RCC_OscConfig+0x4fc>)
 8002894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d118      	bne.n	80028d0 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800289e:	4b47      	ldr	r3, [pc, #284]	@ (80029bc <HAL_RCC_OscConfig+0x4fc>)
 80028a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a2:	4a46      	ldr	r2, [pc, #280]	@ (80029bc <HAL_RCC_OscConfig+0x4fc>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028aa:	f7fe fdcb 	bl	8001444 <HAL_GetTick>
 80028ae:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b2:	f7fe fdc7 	bl	8001444 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e1e0      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80028c4:	4b3d      	ldr	r3, [pc, #244]	@ (80029bc <HAL_RCC_OscConfig+0x4fc>)
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x3f2>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d051      	beq.n	800297c <HAL_RCC_OscConfig+0x4bc>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_LSESYSEN);
 80028d8:	4b39      	ldr	r3, [pc, #228]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 80028da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028ea:	4313      	orrs	r3, r2
 80028ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 80028ee:	4a34      	ldr	r2, [pc, #208]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 80028f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f6:	f7fe fda5 	bl	8001444 <HAL_GetTick>
 80028fa:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x454>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7fe fda1 	bl	8001444 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f241 3288 	movw	r2, #5000	@ 0x1388
 800290c:	4293      	cmp	r3, r2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x454>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e1b8      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 8002914:	4b2a      	ldr	r3, [pc, #168]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 8002916:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0ed      	beq.n	80028fe <HAL_RCC_OscConfig+0x43e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR1_LSESYSEN) != 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800292a:	2b00      	cmp	r3, #0
 800292c:	d01e      	beq.n	800296c <HAL_RCC_OscConfig+0x4ac>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 800292e:	e00a      	b.n	8002946 <HAL_RCC_OscConfig+0x486>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002930:	f7fe fd88 	bl	8001444 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x486>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e19f      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 8002946:	4b1e      	ldr	r3, [pc, #120]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 8002948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800294c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0ed      	beq.n	8002930 <HAL_RCC_OscConfig+0x470>
 8002954:	e057      	b.n	8002a06 <HAL_RCC_OscConfig+0x546>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002956:	f7fe fd75 	bl	8001444 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002964:	4293      	cmp	r3, r2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e18c      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 800296c:	4b14      	ldr	r3, [pc, #80]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 800296e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1ed      	bne.n	8002956 <HAL_RCC_OscConfig+0x496>
 800297a:	e044      	b.n	8002a06 <HAL_RCC_OscConfig+0x546>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR1, (RCC_BDCR1_LSEON | RCC_BDCR1_LSESYSEN));
 800297c:	4b10      	ldr	r3, [pc, #64]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 800297e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002982:	4a0f      	ldr	r2, [pc, #60]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 8002984:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8002988:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR1, RCC_BDCR1_LSEBYP);
 800298c:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 800298e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002992:	4a0b      	ldr	r2, [pc, #44]	@ (80029c0 <HAL_RCC_OscConfig+0x500>)
 8002994:	f023 0304 	bic.w	r3, r3, #4
 8002998:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299c:	f7fe fd52 	bl	8001444 <HAL_GetTick>
 80029a0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 80029a2:	e00f      	b.n	80029c4 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a4:	f7fe fd4e 	bl	8001444 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d906      	bls.n	80029c4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e165      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
 80029ba:	bf00      	nop
 80029bc:	46020800 	.word	0x46020800
 80029c0:	46020c00 	.word	0x46020c00
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 80029c4:	4b98      	ldr	r3, [pc, #608]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 80029c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1e8      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4e4>
        }
      }

      if (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSEN) != 0U)
 80029d2:	4b95      	ldr	r3, [pc, #596]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 80029d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d012      	beq.n	8002a06 <HAL_RCC_OscConfig+0x546>
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e2:	f7fe fd2f 	bl	8001444 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e146      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 80029f8:	4b8b      	ldr	r3, [pc, #556]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 80029fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1ed      	bne.n	80029e2 <HAL_RCC_OscConfig+0x522>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0e:	4b86      	ldr	r3, [pc, #536]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a14:	4a84      	ldr	r2, [pc, #528]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002a16:	f023 0304 	bic.w	r3, r3, #4
 8002a1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if ((RCC_OscInitStruct->PLL1.PLLState) != RCC_PLL_NONE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 812e 	beq.w	8002c84 <HAL_RCC_OscConfig+0x7c4>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	2b0c      	cmp	r3, #12
 8002a2c:	f000 80ba 	beq.w	8002ba4 <HAL_RCC_OscConfig+0x6e4>
    {
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_ON)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	f040 8093 	bne.w	8002b60 <HAL_RCC_OscConfig+0x6a0>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL1.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL1.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL1.PLLR));

        /* Disable the main PLL1. */
        tmpreg1 = (RCC->CR & ~RCC_CR_PLL1ON);
 8002a3a:	4b7b      	ldr	r3, [pc, #492]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a42:	62bb      	str	r3, [r7, #40]	@ 0x28
        RCC->CR = tmpreg1;
 8002a44:	4a78      	ldr	r2, [pc, #480]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7fe fcfb 	bl	8001444 <HAL_GetTick>
 8002a4e:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        do
        {
          tmpreg1 = RCC->CR;
 8002a50:	4b75      	ldr	r3, [pc, #468]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	62bb      	str	r3, [r7, #40]	@ 0x28
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a56:	f7fe fcf5 	bl	8001444 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e10e      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
          }
        } while ((tmpreg1 & RCC_CR_PLL1RDY) != 0U);
 8002a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1ee      	bne.n	8002a50 <HAL_RCC_OscConfig+0x590>

        /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
        if (RCC_OscInitStruct->PLL1.PLLSource == RCC_PLLSOURCE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d108      	bne.n	8002a8c <HAL_RCC_OscConfig+0x5cc>
        {
          /* Clock source is HSE or HSE/2 */
          pllsrc = HSE_VALUE >> ((tmpreg1 & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos);
 8002a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7c:	0d1b      	lsrs	r3, r3, #20
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	4a6a      	ldr	r2, [pc, #424]	@ (8002c2c <HAL_RCC_OscConfig+0x76c>)
 8002a84:	fa22 f303 	lsr.w	r3, r2, r3
 8002a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a8a:	e001      	b.n	8002a90 <HAL_RCC_OscConfig+0x5d0>
        }
        else
        {
          /* Clock source is HSI */
          pllsrc = HSI_VALUE;
 8002a8c:	4b68      	ldr	r3, [pc, #416]	@ (8002c30 <HAL_RCC_OscConfig+0x770>)
 8002a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Compute VCO input frequency depending on M divider */
        pllsrc = (pllsrc / RCC_OscInitStruct->PLL1.PLLM);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllsrc));

        if (pllsrc > PLL_INPUTRANGE0_FREQMAX)
 8002a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a9e:	4a65      	ldr	r2, [pc, #404]	@ (8002c34 <HAL_RCC_OscConfig+0x774>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d902      	bls.n	8002aaa <HAL_RCC_OscConfig+0x5ea>
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE1;
 8002aa4:	230c      	movs	r3, #12
 8002aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aa8:	e001      	b.n	8002aae <HAL_RCC_OscConfig+0x5ee>
        }
        else
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Configure PLL1 source, PLLM divider, VCO input range and enable PLL1R output. Clear also FRACEN*/
        tmpreg2 = RCC->PLL1CFGR;
 8002aae:	4b5e      	ldr	r3, [pc, #376]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab2:	617b      	str	r3, [r7, #20]
        tmpreg2 &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1RGE | RCC_PLL1CFGR_PLL1FRACEN | RCC_PLL1CFGR_PLL1M);
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f423 63e3 	bic.w	r3, r3, #1816	@ 0x718
 8002aba:	f023 0307 	bic.w	r3, r3, #7
 8002abe:	617b      	str	r3, [r7, #20]
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac6:	431a      	orrs	r2, r3
                    ((RCC_OscInitStruct->PLL1.PLLM - 1u) << RCC_PLL1CFGR_PLL1M_Pos) | RCC_PLL1CFGR_PLL1REN);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002acc:	3b01      	subs	r3, #1
 8002ace:	021b      	lsls	r3, r3, #8
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ada:	617b      	str	r3, [r7, #20]
        RCC->PLL1CFGR = tmpreg2;
 8002adc:	4a52      	ldr	r2, [pc, #328]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLLN multiplication factor and PLLP, PLLQ, PLLR dividers */
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae6:	1e5a      	subs	r2, r3, #1
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aec:	3b01      	subs	r3, #1
 8002aee:	025b      	lsls	r3, r3, #9
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8002af0:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLQ - 1u) << RCC_PLL1DIVR_PLL1Q_Pos) |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af6:	3b01      	subs	r3, #1
 8002af8:	041b      	lsls	r3, r3, #16
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 8002afa:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLR - 1u) << RCC_PLL1DIVR_PLL1R_Pos));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b00:	3b01      	subs	r3, #1
 8002b02:	061b      	lsls	r3, r3, #24
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
        RCC->PLL1DIVR = tmpreg2;
 8002b08:	4a47      	ldr	r2, [pc, #284]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	6353      	str	r3, [r2, #52]	@ 0x34

        if (RCC_OscInitStruct->PLL1.PLLFractional != 0x00u)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCC_OscConfig+0x66c>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1a:	4a43      	ldr	r2, [pc, #268]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	6393      	str	r3, [r2, #56]	@ 0x38

          /* Enable PLL1FRACEN */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 8002b20:	4b41      	ldr	r3, [pc, #260]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b24:	4a40      	ldr	r2, [pc, #256]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002b26:	f043 0310 	orr.w	r3, r3, #16
 8002b2a:	6293      	str	r3, [r2, #40]	@ 0x28
        }

        /* Enable the main PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002b2c:	4b3e      	ldr	r3, [pc, #248]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a3d      	ldr	r2, [pc, #244]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002b32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7fe fc84 	bl	8001444 <HAL_GetTick>
 8002b3c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x692>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b40:	f7fe fc80 	bl	8001444 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e099      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002b52:	4b35      	ldr	r3, [pc, #212]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x680>
 8002b5e:	e091      	b.n	8002c84 <HAL_RCC_OscConfig+0x7c4>
        }
      }
      else
      {
        /* Disable the main PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002b60:	4b31      	ldr	r3, [pc, #196]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a30      	ldr	r2, [pc, #192]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002b66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fc6a 	bl	8001444 <HAL_GetTick>
 8002b70:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x6c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b74:	f7fe fc66 	bl	8001444 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x6c6>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e07f      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b86:	4b28      	ldr	r3, [pc, #160]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x6b4>
          }
        }

        /* CLear the PLL1 source and disable outputs to save power when PLL1 is off */
        CLEAR_BIT(RCC->PLL1CFGR, (RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | \
 8002b92:	4b25      	ldr	r3, [pc, #148]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b96:	4a24      	ldr	r2, [pc, #144]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002b98:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002b9c:	f023 0303 	bic.w	r3, r3, #3
 8002ba0:	6293      	str	r3, [r2, #40]	@ 0x28
 8002ba2:	e06f      	b.n	8002c84 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL1 used as System clock source */
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x6f0>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e06a      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        tmpreg1 = RCC->PLL1CFGR;
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg2 = RCC->PLL1DIVR;
 8002bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c28 <HAL_RCC_OscConfig+0x768>)
 8002bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bba:	617b      	str	r3, [r7, #20]

        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 8002bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bbe:	f003 0203 	and.w	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d12b      	bne.n	8002c22 <HAL_RCC_OscConfig+0x762>
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 8002bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	f003 0207 	and.w	r2, r3, #7
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd6:	3b01      	subs	r3, #1
        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d122      	bne.n	8002c22 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be6:	3b01      	subs	r3, #1
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d11a      	bne.n	8002c22 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	0a5b      	lsrs	r3, r3, #9
 8002bf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf8:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d111      	bne.n	8002c22 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	0c1b      	lsrs	r3, r3, #16
 8002c02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c0a:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d108      	bne.n	8002c22 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) != (RCC_OscInitStruct->PLL1.PLLR - 1u)))
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	0e1b      	lsrs	r3, r3, #24
 8002c14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1c:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d00a      	beq.n	8002c38 <HAL_RCC_OscConfig+0x778>
        {
          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e02f      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c6>
 8002c26:	bf00      	nop
 8002c28:	46020c00 	.word	0x46020c00
 8002c2c:	01e84800 	.word	0x01e84800
 8002c30:	00f42400 	.word	0x00f42400
 8002c34:	007a1200 	.word	0x007a1200
        }
        else
        {
          /* Check if only fractional part needs to be updated  */
          tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 8002c38:	4b15      	ldr	r3, [pc, #84]	@ (8002c90 <HAL_RCC_OscConfig+0x7d0>)
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3c:	08db      	lsrs	r3, r3, #3
 8002c3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c42:	62bb      	str	r3, [r7, #40]	@ 0x28

          if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d01a      	beq.n	8002c84 <HAL_RCC_OscConfig+0x7c4>
          {
            assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

            /* Disable PLL1FRACEN */
            __HAL_RCC_PLL1_FRACN_DISABLE();
 8002c4e:	4b10      	ldr	r3, [pc, #64]	@ (8002c90 <HAL_RCC_OscConfig+0x7d0>)
 8002c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c52:	4a0f      	ldr	r2, [pc, #60]	@ (8002c90 <HAL_RCC_OscConfig+0x7d0>)
 8002c54:	f023 0310 	bic.w	r3, r3, #16
 8002c58:	6293      	str	r3, [r2, #40]	@ 0x28

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c5a:	f7fe fbf3 	bl	8001444 <HAL_GetTick>
 8002c5e:	61f8      	str	r0, [r7, #28]

            /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
            while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002c60:	bf00      	nop
 8002c62:	f7fe fbef 	bl	8001444 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d0f9      	beq.n	8002c62 <HAL_RCC_OscConfig+0x7a2>
            {
            }

            /* Configure PLL1 PLL1FRACN */
            __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c72:	4a07      	ldr	r2, [pc, #28]	@ (8002c90 <HAL_RCC_OscConfig+0x7d0>)
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	6393      	str	r3, [r2, #56]	@ 0x38

            /* Enable PLL1FRACEN to latch new value. */
            __HAL_RCC_PLL1_FRACN_ENABLE();
 8002c78:	4b05      	ldr	r3, [pc, #20]	@ (8002c90 <HAL_RCC_OscConfig+0x7d0>)
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7c:	4a04      	ldr	r2, [pc, #16]	@ (8002c90 <HAL_RCC_OscConfig+0x7d0>)
 8002c7e:	f043 0310 	orr.w	r3, r3, #16
 8002c82:	6293      	str	r3, [r2, #40]	@ 0x28
          }
        }
      }
    }
  }
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3730      	adds	r7, #48	@ 0x30
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	46020c00 	.word	0x46020c00

08002c94 <HAL_RCC_ClockConfig>:
  *         HCLK5 prescaler is switched automatically by hardware, but configuration shall
  *         always be performed before setting new PLL1 source as Sysclk source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e115      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x240>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca8:	4b8c      	ldr	r3, [pc, #560]	@ (8002edc <HAL_RCC_ClockConfig+0x248>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d910      	bls.n	8002cd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	4b89      	ldr	r3, [pc, #548]	@ (8002edc <HAL_RCC_ClockConfig+0x248>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 020f 	bic.w	r2, r3, #15
 8002cbe:	4987      	ldr	r1, [pc, #540]	@ (8002edc <HAL_RCC_ClockConfig+0x248>)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc6:	4b85      	ldr	r3, [pc, #532]	@ (8002edc <HAL_RCC_ClockConfig+0x248>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0fd      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x240>
  }

  /*-------------------------- HCLK5 Configuration --------------------------*/
  /* HCLK5 prescaler is switched automatically by hardware, but configuration shall
    always be performed before setting new PLL1 source as Sysclk source. */
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK5) == RCC_CLOCKTYPE_HCLK5)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00d      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x6c>
  {
    assert_param(IS_RCC_HCLK5_HSEHSI(RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
    assert_param(IS_RCC_HCLK5_PLL1(RCC_ClkInitStruct->AHB5_PLL1_CLKDivider));
    MODIFY_REG(RCC->CFGR4, (RCC_CFGR4_HDIV5 | RCC_CFGR4_HPRE5),
 8002ce4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ee0 <HAL_RCC_ClockConfig+0x24c>)
 8002ce6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002cea:	f023 0217 	bic.w	r2, r3, #23
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6999      	ldr	r1, [r3, #24]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	4979      	ldr	r1, [pc, #484]	@ (8002ee0 <HAL_RCC_ClockConfig+0x24c>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
               (RCC_ClkInitStruct->AHB5_PLL1_CLKDivider | RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d06f      	beq.n	8002dec <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 8002d0c:	4b74      	ldr	r3, [pc, #464]	@ (8002ee0 <HAL_RCC_ClockConfig+0x24c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	617b      	str	r3, [r7, #20]

    /* PLL1 is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d118      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the PLL1 ready flag */
      if ((tmpreg1 & RCC_CR_PLL1RDY) == 0U)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0d5      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x240>
      }
      else
      {
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8002d28:	4b6d      	ldr	r3, [pc, #436]	@ (8002ee0 <HAL_RCC_ClockConfig+0x24c>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	f003 020c 	and.w	r2, r3, #12
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d01a      	beq.n	8002d70 <HAL_RCC_ClockConfig+0xdc>
        {
          /* Whatever is PLL frequency, use step prediv to reach maximum frequency. */
          /* Select pll1r to be prediv with 2-step divider when selected as Sysclk source */
          MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRESTEP, RCC_PLL1CFGR_PLL1RCLKPRE);
 8002d3a:	4b69      	ldr	r3, [pc, #420]	@ (8002ee0 <HAL_RCC_ClockConfig+0x24c>)
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002d42:	4a67      	ldr	r2, [pc, #412]	@ (8002ee0 <HAL_RCC_ClockConfig+0x24c>)
 8002d44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d48:	6293      	str	r3, [r2, #40]	@ 0x28
 8002d4a:	e011      	b.n	8002d70 <HAL_RCC_ClockConfig+0xdc>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d106      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xce>
      {
        /* Check the HSE ready flag */
        if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d108      	bne.n	8002d70 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e0b8      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x240>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0b1      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x240>
        }
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d70:	4b5b      	ldr	r3, [pc, #364]	@ (8002ee0 <HAL_RCC_ClockConfig+0x24c>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	f023 0203 	bic.w	r2, r3, #3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4958      	ldr	r1, [pc, #352]	@ (8002ee0 <HAL_RCC_ClockConfig+0x24c>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d82:	f7fe fb5f 	bl	8001444 <HAL_GetTick>
 8002d86:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_ClockConfig+0x10c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8a:	f7fe fb5b 	bl	8001444 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e099      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x240>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8002da0:	4b4f      	ldr	r3, [pc, #316]	@ (8002ee0 <HAL_RCC_ClockConfig+0x24c>)
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	f003 020c 	and.w	r2, r3, #12
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d1eb      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xf6>
      }
    }

    /* If PLL1rCLK is asked to be SYSCLK source, clear prediv. */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d118      	bne.n	8002dec <HAL_RCC_ClockConfig+0x158>
    {
      /* Set PLL1R prediv to not divided */
      CLEAR_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRE);
 8002dba:	4b49      	ldr	r3, [pc, #292]	@ (8002ee0 <HAL_RCC_ClockConfig+0x24c>)
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbe:	4a48      	ldr	r2, [pc, #288]	@ (8002ee0 <HAL_RCC_ClockConfig+0x24c>)
 8002dc0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002dc4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fb3d 	bl	8001444 <HAL_GetTick>
 8002dca:	60f8      	str	r0, [r7, #12]

      /* Wait until PLL1 not divided is ready */
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_ClockConfig+0x14c>
      {
        if ((HAL_GetTick() - tickstart) > PLL1_NDIV_TIMEOUT_VALUE)
 8002dce:	f7fe fb39 	bl	8001444 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b0a      	cmp	r3, #10
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_ClockConfig+0x14c>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e079      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x240>
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8002de0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ee0 <HAL_RCC_ClockConfig+0x24c>)
 8002de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 8002dec:	4b3c      	ldr	r3, [pc, #240]	@ (8002ee0 <HAL_RCC_ClockConfig+0x24c>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f023 0307 	bic.w	r3, r3, #7
 8002e08:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8002e14:	2301      	movs	r3, #1
 8002e16:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e2a:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8002e36:	2301      	movs	r3, #1
 8002e38:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00b      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x1ca>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e4c:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x1d6>
  {
    RCC->CFGR2 = tmpreg1;
 8002e64:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee0 <HAL_RCC_ClockConfig+0x24c>)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK7 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK7) == RCC_CLOCKTYPE_PCLK7)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB7CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB7CLKDivider);
 8002e76:	4a1a      	ldr	r2, [pc, #104]	@ (8002ee0 <HAL_RCC_ClockConfig+0x24c>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e7e:	4b17      	ldr	r3, [pc, #92]	@ (8002edc <HAL_RCC_ClockConfig+0x248>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d210      	bcs.n	8002eae <HAL_RCC_ClockConfig+0x21a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8c:	4b13      	ldr	r3, [pc, #76]	@ (8002edc <HAL_RCC_ClockConfig+0x248>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 020f 	bic.w	r2, r3, #15
 8002e94:	4911      	ldr	r1, [pc, #68]	@ (8002edc <HAL_RCC_ClockConfig+0x248>)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002edc <HAL_RCC_ClockConfig+0x248>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d001      	beq.n	8002eae <HAL_RCC_ClockConfig+0x21a>
    {
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e012      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x240>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002eae:	f000 f81f 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee0 <HAL_RCC_ClockConfig+0x24c>)
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	4909      	ldr	r1, [pc, #36]	@ (8002ee4 <HAL_RCC_ClockConfig+0x250>)
 8002ebe:	5ccb      	ldrb	r3, [r1, r3]
 8002ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec4:	4a08      	ldr	r2, [pc, #32]	@ (8002ee8 <HAL_RCC_ClockConfig+0x254>)
 8002ec6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ec8:	4b08      	ldr	r3, [pc, #32]	@ (8002eec <HAL_RCC_ClockConfig+0x258>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe fa27 	bl	8001320 <HAL_InitTick>
 8002ed2:	4603      	mov	r3, r0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40022000 	.word	0x40022000
 8002ee0:	46020c00 	.word	0x46020c00
 8002ee4:	08003f7c 	.word	0x08003f7c
 8002ee8:	20000010 	.word	0x20000010
 8002eec:	20000044 	.word	0x20000044

08002ef0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
  uint32_t sysclk;

  /* Get SYSCLK source */
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ef6:	4b10      	ldr	r3, [pc, #64]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x48>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	607b      	str	r3, [r7, #4]

  if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d102      	bne.n	8002f0c <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 8002f06:	4b0d      	ldr	r3, [pc, #52]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x4c>)
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	e00f      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d109      	bne.n	8002f26 <HAL_RCC_GetSysClockFreq+0x36>
  {
    /* HSE used as system clock source. Check if HSE is divided by 2 */
    sysclk = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8002f12:	4b09      	ldr	r3, [pc, #36]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x48>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	0d1b      	lsrs	r3, r3, #20
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	4a08      	ldr	r2, [pc, #32]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x50>)
 8002f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f22:	607b      	str	r3, [r7, #4]
 8002f24:	e002      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else
  {
    /* PLL1 used as system clock source */
    sysclk = HAL_RCC_GetPLL1RFreq();
 8002f26:	f000 f863 	bl	8002ff0 <HAL_RCC_GetPLL1RFreq>
 8002f2a:	6078      	str	r0, [r7, #4]
  }

  return sysclk;
 8002f2c:	687b      	ldr	r3, [r7, #4]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	46020c00 	.word	0x46020c00
 8002f3c:	00f42400 	.word	0x00f42400
 8002f40:	01e84800 	.word	0x01e84800

08002f44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002f48:	f7ff ffd2 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b07      	ldr	r3, [pc, #28]	@ (8002f6c <HAL_RCC_GetHCLKFreq+0x28>)
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	4906      	ldr	r1, [pc, #24]	@ (8002f70 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002f58:	5ccb      	ldrb	r3, [r1, r3]
 8002f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5e:	4a05      	ldr	r2, [pc, #20]	@ (8002f74 <HAL_RCC_GetHCLKFreq+0x30>)
 8002f60:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002f62:	4b04      	ldr	r3, [pc, #16]	@ (8002f74 <HAL_RCC_GetHCLKFreq+0x30>)
 8002f64:	681b      	ldr	r3, [r3, #0]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	46020c00 	.word	0x46020c00
 8002f70:	08003f7c 	.word	0x08003f7c
 8002f74:	20000010 	.word	0x20000010

08002f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002f7c:	f7ff ffe2 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b05      	ldr	r3, [pc, #20]	@ (8002f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	091b      	lsrs	r3, r3, #4
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	4903      	ldr	r1, [pc, #12]	@ (8002f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f8e:	5ccb      	ldrb	r3, [r1, r3]
 8002f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	46020c00 	.word	0x46020c00
 8002f9c:	08003f84 	.word	0x08003f84

08002fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002fa4:	f7ff ffce 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	4903      	ldr	r1, [pc, #12]	@ (8002fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fb6:	5ccb      	ldrb	r3, [r1, r3]
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	46020c00 	.word	0x46020c00
 8002fc4:	08003f84 	.word	0x08003f84

08002fc8 <HAL_RCC_GetPCLK7Freq>:
  * @note   Each time PCLK7 changes, this function must be called to update the
  *         right PCLK7 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK7 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK7Freq(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK7 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE7) >> RCC_CFGR3_PPRE7_Pos]);
 8002fcc:	f7ff ffba 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	4b05      	ldr	r3, [pc, #20]	@ (8002fe8 <HAL_RCC_GetPCLK7Freq+0x20>)
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	4903      	ldr	r1, [pc, #12]	@ (8002fec <HAL_RCC_GetPCLK7Freq+0x24>)
 8002fde:	5ccb      	ldrb	r3, [r1, r3]
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	46020c00 	.word	0x46020c00
 8002fec:	08003f84 	.word	0x08003f84

08002ff0 <HAL_RCC_GetPLL1RFreq>:
/**
  * @brief  Return the PLL1R frequency.
  * @retval PLL1R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL1RFreq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL1R divider */
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8003024 <HAL_RCC_GetPLL1RFreq+0x34>)
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ffa:	0e1b      	lsrs	r3, r3, #24
 8002ffc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003000:	3301      	adds	r3, #1
 8003002:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL1R one */
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 8003004:	f000 f810 	bl	8003028 <RCC_PLL1_GetVCOOutputFreq>
 8003008:	eef0 7a40 	vmov.f32	s15, s0
 800300c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003010:	ee17 2a90 	vmov	r2, s15
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	46020c00 	.word	0x46020c00

08003028 <RCC_PLL1_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL1 VCO output frequency
  * @retval Value of PLL1 VCO output frequency
  */
static float_t RCC_PLL1_GetVCOOutputFreq(void)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
  float_t pllm;
  float_t plln;
  float_t pllfracn;

  /* Get PLL1 DIVR register value */
  tmpreg1 = RCC->PLL1DIVR;
 800302e:	4b36      	ldr	r3, [pc, #216]	@ (8003108 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8003030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003032:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 multiplication factor */
  tmp = (tmpreg1 & RCC_PLL1DIVR_PLL1N) + 1U;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800303a:	3301      	adds	r3, #1
 800303c:	617b      	str	r3, [r7, #20]
  plln = (float_t) tmp;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	ee07 3a90 	vmov	s15, r3
 8003044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003048:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Get PLL1 CFGR register value */
  tmpreg1 = RCC->PLL1CFGR;
 800304c:	4b2e      	ldr	r3, [pc, #184]	@ (8003108 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 800304e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003050:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 divider */
  tmp = ((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	0a1b      	lsrs	r3, r3, #8
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	3301      	adds	r3, #1
 800305c:	617b      	str	r3, [r7, #20]
  pllm = (float_t) tmp;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	ee07 3a90 	vmov	s15, r3
 8003064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003068:	edc7 7a01 	vstr	s15, [r7, #4]

  /* Check if fractional part is enable */
  if ((tmpreg1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b00      	cmp	r3, #0
 8003074:	d006      	beq.n	8003084 <RCC_PLL1_GetVCOOutputFreq+0x5c>
  {
    tmp = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 8003076:	4b24      	ldr	r3, [pc, #144]	@ (8003108 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8003078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307a:	08db      	lsrs	r3, r3, #3
 800307c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	e001      	b.n	8003088 <RCC_PLL1_GetVCOOutputFreq+0x60>
  }
  else
  {
    tmp = 0u;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  }
  pllfracn = (float_t)tmp;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003092:	edc7 7a00 	vstr	s15, [r7]

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLL1CFGR_PLL1SRC)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d002      	beq.n	80030a6 <RCC_PLL1_GetVCOOutputFreq+0x7e>
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d003      	beq.n	80030ac <RCC_PLL1_GetVCOOutputFreq+0x84>
 80030a4:	e013      	b.n	80030ce <RCC_PLL1_GetVCOOutputFreq+0xa6>
  {
    /* HSI used as PLL1 clock source */
    case RCC_PLLSOURCE_HSI:
      pllsrc = (float_t)HSI_VALUE;
 80030a6:	4b19      	ldr	r3, [pc, #100]	@ (800310c <RCC_PLL1_GetVCOOutputFreq+0xe4>)
 80030a8:	613b      	str	r3, [r7, #16]
      break;
 80030aa:	e014      	b.n	80030d6 <RCC_PLL1_GetVCOOutputFreq+0xae>

    /* HSE used as PLL1 clock source */
    case RCC_PLLSOURCE_HSE:
      tmp = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 80030ac:	4b16      	ldr	r3, [pc, #88]	@ (8003108 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	0d1b      	lsrs	r3, r3, #20
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	4a16      	ldr	r2, [pc, #88]	@ (8003110 <RCC_PLL1_GetVCOOutputFreq+0xe8>)
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
 80030bc:	617b      	str	r3, [r7, #20]
      pllsrc = (float_t)tmp;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	ee07 3a90 	vmov	s15, r3
 80030c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c8:	edc7 7a04 	vstr	s15, [r7, #16]
      break;
 80030cc:	e003      	b.n	80030d6 <RCC_PLL1_GetVCOOutputFreq+0xae>

    default:
      pllsrc = (float_t)0;
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	613b      	str	r3, [r7, #16]
      break;
 80030d4:	bf00      	nop
  }

  /* Compute VCO output frequency */
  return ((pllsrc / pllm) * (plln + (pllfracn / (float_t)0x2000u)));
 80030d6:	edd7 6a04 	vldr	s13, [r7, #16]
 80030da:	edd7 7a01 	vldr	s15, [r7, #4]
 80030de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030e2:	edd7 7a00 	vldr	s15, [r7]
 80030e6:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8003114 <RCC_PLL1_GetVCOOutputFreq+0xec>
 80030ea:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80030ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80030f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030f6:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80030fa:	eeb0 0a67 	vmov.f32	s0, s15
 80030fe:	371c      	adds	r7, #28
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	46020c00 	.word	0x46020c00
 800310c:	4b742400 	.word	0x4b742400
 8003110:	01e84800 	.word	0x01e84800
 8003114:	46000000 	.word	0x46000000

08003118 <HAL_RCCEx_PeriphCLKConfig>:
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800312c:	4b95      	ldr	r3, [pc, #596]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800312e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003132:	f023 0203 	bic.w	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	4992      	ldr	r1, [pc, #584]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

#if defined (USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800314e:	4b8d      	ldr	r3, [pc, #564]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003154:	f023 020c 	bic.w	r2, r3, #12
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4989      	ldr	r1, [pc, #548]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
#endif


#if defined (I2C1)
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003170:	4b84      	ldr	r3, [pc, #528]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003176:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	4981      	ldr	r1, [pc, #516]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0



#if defined (LPTIM2)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003192:	4b7c      	ldr	r3, [pc, #496]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003198:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	4978      	ldr	r1, [pc, #480]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }
#endif

#if defined (SPI1)
  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00a      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 80031b4:	4b73      	ldr	r3, [pc, #460]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	4970      	ldr	r1, [pc, #448]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }
#endif

  /*-------------------------- SYSTICK clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SYSTICK) == RCC_PERIPHCLK_SYSTICK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SYSTICKCLKSOURCE(PeriphClkInit->SystickClockSelection));

    /* Configure the SYSTICK clock source */
    __HAL_RCC_SYSTICK_CONFIG(PeriphClkInit->SystickClockSelection);
 80031d6:	4b6b      	ldr	r3, [pc, #428]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	4967      	ldr	r1, [pc, #412]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- TIMIC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMIC) == RCC_PERIPHCLK_TIMIC)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMICCLKSOURCE(PeriphClkInit->TimIcClockSelection));

    /* Configure the TIMIC clock source */
    __HAL_RCC_TIMIC_CONFIG(PeriphClkInit->TimIcClockSelection);
 80031f8:	4b62      	ldr	r3, [pc, #392]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	495f      	ldr	r1, [pc, #380]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
    }
  }
#endif

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003216:	2b00      	cmp	r3, #0
 8003218:	d015      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Set the source of RNG clock*/
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800321a:	4b5a      	ldr	r3, [pc, #360]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800321c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003220:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	4956      	ldr	r1, [pc, #344]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL1Q)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003238:	d105      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x12e>
    {
      /* Enable PLL1 QCLK output */
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_QCLK);
 800323a:	4b52      	ldr	r3, [pc, #328]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800323c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323e:	4a51      	ldr	r2, [pc, #324]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003244:	6293      	str	r3, [r2, #40]	@ 0x28
    }
  }
#endif

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003252:	4b4c      	ldr	r3, [pc, #304]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003254:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003258:	f023 0203 	bic.w	r2, r3, #3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	4948      	ldr	r1, [pc, #288]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
 8003274:	4b43      	ldr	r3, [pc, #268]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003276:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800327a:	f023 0218 	bic.w	r2, r3, #24
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003282:	4940      	ldr	r1, [pc, #256]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }


  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003296:	4b3b      	ldr	r3, [pc, #236]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800329c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a4:	4937      	ldr	r1, [pc, #220]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032b8:	4b32      	ldr	r3, [pc, #200]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	492f      	ldr	r1, [pc, #188]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d015      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC4 interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032da:	4b2a      	ldr	r3, [pc, #168]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032e0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e8:	4926      	ldr	r1, [pc, #152]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

    if (PeriphClkInit->AdcClockSelection == RCC_PERIPHCLK_ADC)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032f8:	d105      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      /* Enable PLL1 PCLK output */
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_PCLK);
 80032fa:	4b22      	ldr	r3, [pc, #136]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fe:	4a21      	ldr	r2, [pc, #132]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003304:	6293      	str	r3, [r2, #40]	@ 0x28
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 808d 	beq.w	800342e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003314:	2300      	movs	r3, #0
 8003316:	77fb      	strb	r3, [r7, #31]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
    tmpreg2 = __HAL_RCC_GET_RTC_SOURCE();
 8003318:	4b1a      	ldr	r3, [pc, #104]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800331a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800331e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003322:	61bb      	str	r3, [r7, #24]

    /* Check if RTC clock source needs to be changed */
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	429a      	cmp	r2, r3
 800332c:	d07f      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      /* Enable Power Clock */
      if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01u)
 800332e:	4b15      	ldr	r3, [pc, #84]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003330:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d110      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x246>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800333c:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800333e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003342:	4a10      	ldr	r2, [pc, #64]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003344:	f043 0304 	orr.w	r3, r3, #4
 8003348:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800334c:	4b0d      	ldr	r3, [pc, #52]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800334e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800335a:	2301      	movs	r3, #1
 800335c:	77fb      	strb	r3, [r7, #31]
      }

      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800335e:	4b0a      	ldr	r3, [pc, #40]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003362:	4a09      	ldr	r2, [pc, #36]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800336a:	f7fe f86b 	bl	8001444 <HAL_GetTick>
 800336e:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003370:	e00c      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x274>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003372:	f7fe f867 	bl	8001444 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d905      	bls.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x274>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e071      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003384:	46020c00 	.word	0x46020c00
 8003388:	46020800 	.word	0x46020800
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800338c:	4b38      	ldr	r3, [pc, #224]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800338e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0ec      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }

      /* Save BDCR1 content */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_RTCSEL);
 8003398:	4b36      	ldr	r3, [pc, #216]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800339a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800339e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a2:	613b      	str	r3, [r7, #16]

      /* Check if a backup domain reset is required */
      if (tmpreg2 != RCC_RTCCLKSOURCE_DISABLE)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00f      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2b2>
#if defined(RCC_LSI2_SUPPORT)
        /* Save BDCR2 content */
        tmpreg2 = RCC->BDCR2;
#endif /* RCC_LSI2_SUPPORT */
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033aa:	4b32      	ldr	r3, [pc, #200]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033b0:	4a30      	ldr	r2, [pc, #192]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033ba:	4b2e      	ldr	r3, [pc, #184]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        RCC->BDCR2 = tmpreg2;
#endif /* RCC_LSI2_SUPPORT */
      }

      /* Apply new RTC clock source selection */
      RCC->BDCR1 = (tmpreg1 | PeriphClkInit->RTCClockSelection);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ce:	4929      	ldr	r1, [pc, #164]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0

      /* mask all ON bits */
      tmpreg2 = (RCC_BDCR1_LSEON | RCC_BDCR1_LSI1ON);
 80033d8:	4b27      	ldr	r3, [pc, #156]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80033da:	61bb      	str	r3, [r7, #24]
#if defined(RCC_LSI2_SUPPORT)
      tmpreg2 |= RCC_BDCR1_LSI2ON;
#endif

      /* Check which oscillators were enable */
      tmpreg2 &= tmpreg1;
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]

      if (tmpreg2 != 0x00u)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d016      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fe f82b 	bl	8001444 <HAL_GetTick>
 80033ee:	6178      	str	r0, [r7, #20]

        /* Wait till all oscillators are enabled : RDY bit position is ON shifted by 1 */
        while (READ_BIT(RCC->BDCR1, (tmpreg2 << 1)) == 0x00u)
 80033f0:	e00a      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7fe f827 	bl	8001444 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e02f      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x350>
        while (READ_BIT(RCC->BDCR1, (tmpreg2 << 1)) == 0x00u)
 8003408:	4b1a      	ldr	r3, [pc, #104]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800340a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0ec      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
          }
        }
      }
      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003418:	7ffb      	ldrb	r3, [r7, #31]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d107      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800341e:	4b15      	ldr	r3, [pc, #84]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003420:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003424:	4a13      	ldr	r2, [pc, #76]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003426:	f023 0304 	bic.w	r3, r3, #4
 800342a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }
    }
  }

  /*-------------------------- RADIO Sleep Timer clock source configuration --*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RADIOST) == RCC_PERIPHCLK_RADIOST)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d015      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RADIOSLEEPTIMERSOURCE(PeriphClkInit->RadioSlpTimClockSelection));

    /* Configure the RADIO Sleep Timer clock source */
    __HAL_RCC_RADIOSLPTIM_CONFIG(PeriphClkInit->RadioSlpTimClockSelection);
 800343a:	4b0e      	ldr	r3, [pc, #56]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800343c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003440:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003448:	490a      	ldr	r1, [pc, #40]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0

    /* Check configuration validity as under Backup domain access control */
    if (__HAL_RCC_GET_RADIOSLPTIM_SOURCE() != PeriphClkInit->RadioSlpTimClockSelection)
 8003450:	4b08      	ldr	r3, [pc, #32]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003456:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345e:	429a      	cmp	r2, r3
 8003460:	d001      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x350>
    }
  }

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3720      	adds	r7, #32
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	46020800 	.word	0x46020800
 8003474:	46020c00 	.word	0x46020c00
 8003478:	04000001 	.word	0x04000001

0800347c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e042      	b.n	8003514 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003494:	2b00      	cmp	r3, #0
 8003496:	d106      	bne.n	80034a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f83b 	bl	800351c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2224      	movs	r2, #36	@ 0x24
 80034aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0201 	bic.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fad0 	bl	8003a6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f82f 	bl	8003530 <UART_SetConfig>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e01b      	b.n	8003514 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fb4f 	bl	8003bb0 <UART_CheckIdleState>
 8003512:	4603      	mov	r3, r0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003534:	b08c      	sub	sp, #48	@ 0x30
 8003536:	af00      	add	r7, sp, #0
 8003538:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	431a      	orrs	r2, r3
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	431a      	orrs	r2, r3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	4313      	orrs	r3, r2
 8003556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	4b98      	ldr	r3, [pc, #608]	@ (80037c0 <UART_SetConfig+0x290>)
 8003560:	4013      	ands	r3, r2
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	6812      	ldr	r2, [r2, #0]
 8003566:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003568:	430b      	orrs	r3, r1
 800356a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a8d      	ldr	r2, [pc, #564]	@ (80037c4 <UART_SetConfig+0x294>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d004      	beq.n	800359c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003598:	4313      	orrs	r3, r2
 800359a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80035a6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	6812      	ldr	r2, [r2, #0]
 80035ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035b0:	430b      	orrs	r3, r1
 80035b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ba:	f023 010f 	bic.w	r1, r3, #15
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a7e      	ldr	r2, [pc, #504]	@ (80037c8 <UART_SetConfig+0x298>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d125      	bne.n	8003620 <UART_SetConfig+0xf0>
 80035d4:	4b7d      	ldr	r3, [pc, #500]	@ (80037cc <UART_SetConfig+0x29c>)
 80035d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d81a      	bhi.n	8003618 <UART_SetConfig+0xe8>
 80035e2:	a201      	add	r2, pc, #4	@ (adr r2, 80035e8 <UART_SetConfig+0xb8>)
 80035e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e8:	080035f9 	.word	0x080035f9
 80035ec:	08003609 	.word	0x08003609
 80035f0:	08003601 	.word	0x08003601
 80035f4:	08003611 	.word	0x08003611
 80035f8:	2301      	movs	r3, #1
 80035fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035fe:	e07c      	b.n	80036fa <UART_SetConfig+0x1ca>
 8003600:	2304      	movs	r3, #4
 8003602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003606:	e078      	b.n	80036fa <UART_SetConfig+0x1ca>
 8003608:	2308      	movs	r3, #8
 800360a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800360e:	e074      	b.n	80036fa <UART_SetConfig+0x1ca>
 8003610:	2310      	movs	r3, #16
 8003612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003616:	e070      	b.n	80036fa <UART_SetConfig+0x1ca>
 8003618:	2320      	movs	r3, #32
 800361a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800361e:	e06c      	b.n	80036fa <UART_SetConfig+0x1ca>
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a6a      	ldr	r2, [pc, #424]	@ (80037d0 <UART_SetConfig+0x2a0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d138      	bne.n	800369c <UART_SetConfig+0x16c>
 800362a:	4b68      	ldr	r3, [pc, #416]	@ (80037cc <UART_SetConfig+0x29c>)
 800362c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b0c      	cmp	r3, #12
 8003636:	d82d      	bhi.n	8003694 <UART_SetConfig+0x164>
 8003638:	a201      	add	r2, pc, #4	@ (adr r2, 8003640 <UART_SetConfig+0x110>)
 800363a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363e:	bf00      	nop
 8003640:	08003675 	.word	0x08003675
 8003644:	08003695 	.word	0x08003695
 8003648:	08003695 	.word	0x08003695
 800364c:	08003695 	.word	0x08003695
 8003650:	08003685 	.word	0x08003685
 8003654:	08003695 	.word	0x08003695
 8003658:	08003695 	.word	0x08003695
 800365c:	08003695 	.word	0x08003695
 8003660:	0800367d 	.word	0x0800367d
 8003664:	08003695 	.word	0x08003695
 8003668:	08003695 	.word	0x08003695
 800366c:	08003695 	.word	0x08003695
 8003670:	0800368d 	.word	0x0800368d
 8003674:	2300      	movs	r3, #0
 8003676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800367a:	e03e      	b.n	80036fa <UART_SetConfig+0x1ca>
 800367c:	2304      	movs	r3, #4
 800367e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003682:	e03a      	b.n	80036fa <UART_SetConfig+0x1ca>
 8003684:	2308      	movs	r3, #8
 8003686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800368a:	e036      	b.n	80036fa <UART_SetConfig+0x1ca>
 800368c:	2310      	movs	r3, #16
 800368e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003692:	e032      	b.n	80036fa <UART_SetConfig+0x1ca>
 8003694:	2320      	movs	r3, #32
 8003696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800369a:	e02e      	b.n	80036fa <UART_SetConfig+0x1ca>
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a48      	ldr	r2, [pc, #288]	@ (80037c4 <UART_SetConfig+0x294>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d126      	bne.n	80036f4 <UART_SetConfig+0x1c4>
 80036a6:	4b49      	ldr	r3, [pc, #292]	@ (80037cc <UART_SetConfig+0x29c>)
 80036a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d81b      	bhi.n	80036ec <UART_SetConfig+0x1bc>
 80036b4:	a201      	add	r2, pc, #4	@ (adr r2, 80036bc <UART_SetConfig+0x18c>)
 80036b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ba:	bf00      	nop
 80036bc:	080036cd 	.word	0x080036cd
 80036c0:	080036dd 	.word	0x080036dd
 80036c4:	080036d5 	.word	0x080036d5
 80036c8:	080036e5 	.word	0x080036e5
 80036cc:	2302      	movs	r3, #2
 80036ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036d2:	e012      	b.n	80036fa <UART_SetConfig+0x1ca>
 80036d4:	2304      	movs	r3, #4
 80036d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036da:	e00e      	b.n	80036fa <UART_SetConfig+0x1ca>
 80036dc:	2308      	movs	r3, #8
 80036de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036e2:	e00a      	b.n	80036fa <UART_SetConfig+0x1ca>
 80036e4:	2310      	movs	r3, #16
 80036e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ea:	e006      	b.n	80036fa <UART_SetConfig+0x1ca>
 80036ec:	2320      	movs	r3, #32
 80036ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036f2:	e002      	b.n	80036fa <UART_SetConfig+0x1ca>
 80036f4:	2320      	movs	r3, #32
 80036f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a31      	ldr	r2, [pc, #196]	@ (80037c4 <UART_SetConfig+0x294>)
 8003700:	4293      	cmp	r3, r2
 8003702:	f040 80b4 	bne.w	800386e <UART_SetConfig+0x33e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003706:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800370a:	3b02      	subs	r3, #2
 800370c:	2b0e      	cmp	r3, #14
 800370e:	d830      	bhi.n	8003772 <UART_SetConfig+0x242>
 8003710:	a201      	add	r2, pc, #4	@ (adr r2, 8003718 <UART_SetConfig+0x1e8>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	08003755 	.word	0x08003755
 800371c:	08003773 	.word	0x08003773
 8003720:	0800375d 	.word	0x0800375d
 8003724:	08003773 	.word	0x08003773
 8003728:	08003773 	.word	0x08003773
 800372c:	08003773 	.word	0x08003773
 8003730:	08003763 	.word	0x08003763
 8003734:	08003773 	.word	0x08003773
 8003738:	08003773 	.word	0x08003773
 800373c:	08003773 	.word	0x08003773
 8003740:	08003773 	.word	0x08003773
 8003744:	08003773 	.word	0x08003773
 8003748:	08003773 	.word	0x08003773
 800374c:	08003773 	.word	0x08003773
 8003750:	0800376b 	.word	0x0800376b
    {
      case UART_CLOCKSOURCE_PCLK7:
        pclk = HAL_RCC_GetPCLK7Freq();
 8003754:	f7ff fc38 	bl	8002fc8 <HAL_RCC_GetPCLK7Freq>
 8003758:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800375a:	e010      	b.n	800377e <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800375c:	4b1d      	ldr	r3, [pc, #116]	@ (80037d4 <UART_SetConfig+0x2a4>)
 800375e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003760:	e00d      	b.n	800377e <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003762:	f7ff fbc5 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8003766:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003768:	e009      	b.n	800377e <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800376a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800376e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003770:	e005      	b.n	800377e <UART_SetConfig+0x24e>
      default:
        pclk = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800377c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8159 	beq.w	8003a38 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	4a13      	ldr	r2, [pc, #76]	@ (80037d8 <UART_SetConfig+0x2a8>)
 800378c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003790:	461a      	mov	r2, r3
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	fbb3 f3f2 	udiv	r3, r3, r2
 8003798:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	4413      	add	r3, r2
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d305      	bcc.n	80037b6 <UART_SetConfig+0x286>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d912      	bls.n	80037dc <UART_SetConfig+0x2ac>
      {
        ret = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80037bc:	e13c      	b.n	8003a38 <UART_SetConfig+0x508>
 80037be:	bf00      	nop
 80037c0:	cfff69f3 	.word	0xcfff69f3
 80037c4:	46002400 	.word	0x46002400
 80037c8:	40013800 	.word	0x40013800
 80037cc:	46020c00 	.word	0x46020c00
 80037d0:	40004400 	.word	0x40004400
 80037d4:	00f42400 	.word	0x00f42400
 80037d8:	08003f8c 	.word	0x08003f8c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037de:	2200      	movs	r2, #0
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	60fa      	str	r2, [r7, #12]
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e8:	4a9e      	ldr	r2, [pc, #632]	@ (8003a64 <UART_SetConfig+0x534>)
 80037ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2200      	movs	r2, #0
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037fe:	f7fc fccd 	bl	800019c <__aeabi_uldivmod>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4610      	mov	r0, r2
 8003808:	4619      	mov	r1, r3
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	020b      	lsls	r3, r1, #8
 8003814:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003818:	0202      	lsls	r2, r0, #8
 800381a:	6979      	ldr	r1, [r7, #20]
 800381c:	6849      	ldr	r1, [r1, #4]
 800381e:	0849      	lsrs	r1, r1, #1
 8003820:	2000      	movs	r0, #0
 8003822:	460c      	mov	r4, r1
 8003824:	4605      	mov	r5, r0
 8003826:	eb12 0804 	adds.w	r8, r2, r4
 800382a:	eb43 0905 	adc.w	r9, r3, r5
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	469a      	mov	sl, r3
 8003836:	4693      	mov	fp, r2
 8003838:	4652      	mov	r2, sl
 800383a:	465b      	mov	r3, fp
 800383c:	4640      	mov	r0, r8
 800383e:	4649      	mov	r1, r9
 8003840:	f7fc fcac 	bl	800019c <__aeabi_uldivmod>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4613      	mov	r3, r2
 800384a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003852:	d308      	bcc.n	8003866 <UART_SetConfig+0x336>
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800385a:	d204      	bcs.n	8003866 <UART_SetConfig+0x336>
        {
          huart->Instance->BRR = usartdiv;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6a3a      	ldr	r2, [r7, #32]
 8003862:	60da      	str	r2, [r3, #12]
 8003864:	e0e8      	b.n	8003a38 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800386c:	e0e4      	b.n	8003a38 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003876:	d177      	bne.n	8003968 <UART_SetConfig+0x438>
  {
    switch (clocksource)
 8003878:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800387c:	2b10      	cmp	r3, #16
 800387e:	d838      	bhi.n	80038f2 <UART_SetConfig+0x3c2>
 8003880:	a201      	add	r2, pc, #4	@ (adr r2, 8003888 <UART_SetConfig+0x358>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	080038cd 	.word	0x080038cd
 800388c:	080038d5 	.word	0x080038d5
 8003890:	080038f3 	.word	0x080038f3
 8003894:	080038f3 	.word	0x080038f3
 8003898:	080038dd 	.word	0x080038dd
 800389c:	080038f3 	.word	0x080038f3
 80038a0:	080038f3 	.word	0x080038f3
 80038a4:	080038f3 	.word	0x080038f3
 80038a8:	080038e3 	.word	0x080038e3
 80038ac:	080038f3 	.word	0x080038f3
 80038b0:	080038f3 	.word	0x080038f3
 80038b4:	080038f3 	.word	0x080038f3
 80038b8:	080038f3 	.word	0x080038f3
 80038bc:	080038f3 	.word	0x080038f3
 80038c0:	080038f3 	.word	0x080038f3
 80038c4:	080038f3 	.word	0x080038f3
 80038c8:	080038eb 	.word	0x080038eb
    {
#if defined(USART2)
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038cc:	f7ff fb54 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 80038d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038d2:	e014      	b.n	80038fe <UART_SetConfig+0x3ce>
#endif /* USART2 */
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038d4:	f7ff fb64 	bl	8002fa0 <HAL_RCC_GetPCLK2Freq>
 80038d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038da:	e010      	b.n	80038fe <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038dc:	4b62      	ldr	r3, [pc, #392]	@ (8003a68 <UART_SetConfig+0x538>)
 80038de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80038e0:	e00d      	b.n	80038fe <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038e2:	f7ff fb05 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 80038e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038e8:	e009      	b.n	80038fe <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80038f0:	e005      	b.n	80038fe <UART_SetConfig+0x3ce>
      default:
        pclk = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80038fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 8099 	beq.w	8003a38 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390a:	4a56      	ldr	r2, [pc, #344]	@ (8003a64 <UART_SetConfig+0x534>)
 800390c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003910:	461a      	mov	r2, r3
 8003912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003914:	fbb3 f3f2 	udiv	r3, r3, r2
 8003918:	005a      	lsls	r2, r3, #1
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	085b      	lsrs	r3, r3, #1
 8003920:	441a      	add	r2, r3
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	fbb2 f3f3 	udiv	r3, r2, r3
 800392a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	2b0f      	cmp	r3, #15
 8003930:	d916      	bls.n	8003960 <UART_SetConfig+0x430>
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003938:	d212      	bcs.n	8003960 <UART_SetConfig+0x430>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	b29b      	uxth	r3, r3
 800393e:	f023 030f 	bic.w	r3, r3, #15
 8003942:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	085b      	lsrs	r3, r3, #1
 8003948:	b29b      	uxth	r3, r3
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	b29a      	uxth	r2, r3
 8003950:	8bfb      	ldrh	r3, [r7, #30]
 8003952:	4313      	orrs	r3, r2
 8003954:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	8bfa      	ldrh	r2, [r7, #30]
 800395c:	60da      	str	r2, [r3, #12]
 800395e:	e06b      	b.n	8003a38 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003966:	e067      	b.n	8003a38 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003968:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800396c:	2b10      	cmp	r3, #16
 800396e:	d838      	bhi.n	80039e2 <UART_SetConfig+0x4b2>
 8003970:	a201      	add	r2, pc, #4	@ (adr r2, 8003978 <UART_SetConfig+0x448>)
 8003972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003976:	bf00      	nop
 8003978:	080039bd 	.word	0x080039bd
 800397c:	080039c5 	.word	0x080039c5
 8003980:	080039e3 	.word	0x080039e3
 8003984:	080039e3 	.word	0x080039e3
 8003988:	080039cd 	.word	0x080039cd
 800398c:	080039e3 	.word	0x080039e3
 8003990:	080039e3 	.word	0x080039e3
 8003994:	080039e3 	.word	0x080039e3
 8003998:	080039d3 	.word	0x080039d3
 800399c:	080039e3 	.word	0x080039e3
 80039a0:	080039e3 	.word	0x080039e3
 80039a4:	080039e3 	.word	0x080039e3
 80039a8:	080039e3 	.word	0x080039e3
 80039ac:	080039e3 	.word	0x080039e3
 80039b0:	080039e3 	.word	0x080039e3
 80039b4:	080039e3 	.word	0x080039e3
 80039b8:	080039db 	.word	0x080039db
    {
#if defined(USART2)
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039bc:	f7ff fadc 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 80039c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039c2:	e014      	b.n	80039ee <UART_SetConfig+0x4be>
#endif /* USART2 */
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039c4:	f7ff faec 	bl	8002fa0 <HAL_RCC_GetPCLK2Freq>
 80039c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039ca:	e010      	b.n	80039ee <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039cc:	4b26      	ldr	r3, [pc, #152]	@ (8003a68 <UART_SetConfig+0x538>)
 80039ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039d0:	e00d      	b.n	80039ee <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039d2:	f7ff fa8d 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 80039d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039d8:	e009      	b.n	80039ee <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039e0:	e005      	b.n	80039ee <UART_SetConfig+0x4be>
      default:
        pclk = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80039ec:	bf00      	nop
    }

    if (pclk != 0U)
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d021      	beq.n	8003a38 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003a64 <UART_SetConfig+0x534>)
 80039fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039fe:	461a      	mov	r2, r3
 8003a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a02:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	441a      	add	r2, r3
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	2b0f      	cmp	r3, #15
 8003a1c:	d909      	bls.n	8003a32 <UART_SetConfig+0x502>
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a24:	d205      	bcs.n	8003a32 <UART_SetConfig+0x502>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60da      	str	r2, [r3, #12]
 8003a30:	e002      	b.n	8003a38 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2200      	movs	r2, #0
 8003a52:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003a54:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3730      	adds	r7, #48	@ 0x30
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a62:	bf00      	nop
 8003a64:	08003f8c 	.word	0x08003f8c
 8003a68:	00f42400 	.word	0x00f42400

08003a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01a      	beq.n	8003b82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b6a:	d10a      	bne.n	8003b82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	605a      	str	r2, [r3, #4]
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b098      	sub	sp, #96	@ 0x60
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bc0:	f7fd fc40 	bl	8001444 <HAL_GetTick>
 8003bc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d12f      	bne.n	8003c34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f88e 	bl	8003d04 <UART_WaitOnFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d022      	beq.n	8003c34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c02:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e6      	bne.n	8003bee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e063      	b.n	8003cfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d149      	bne.n	8003cd6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f857 	bl	8003d04 <UART_WaitOnFlagUntilTimeout>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d03c      	beq.n	8003cd6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	623b      	str	r3, [r7, #32]
   return(result);
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e6      	bne.n	8003c5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3308      	adds	r3, #8
 8003c94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	e853 3f00 	ldrex	r3, [r3]
 8003c9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3308      	adds	r3, #8
 8003cac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cae:	61fa      	str	r2, [r7, #28]
 8003cb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb2:	69b9      	ldr	r1, [r7, #24]
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	617b      	str	r3, [r7, #20]
   return(result);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1e5      	bne.n	8003c8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e012      	b.n	8003cfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3758      	adds	r7, #88	@ 0x58
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d14:	e04f      	b.n	8003db6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1c:	d04b      	beq.n	8003db6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1e:	f7fd fb91 	bl	8001444 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d302      	bcc.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e04e      	b.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d037      	beq.n	8003db6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b80      	cmp	r3, #128	@ 0x80
 8003d4a:	d034      	beq.n	8003db6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b40      	cmp	r3, #64	@ 0x40
 8003d50:	d031      	beq.n	8003db6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d110      	bne.n	8003d82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2208      	movs	r2, #8
 8003d66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f838 	bl	8003dde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2208      	movs	r2, #8
 8003d72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e029      	b.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d90:	d111      	bne.n	8003db6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f81e 	bl	8003dde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e00f      	b.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69da      	ldr	r2, [r3, #28]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	bf0c      	ite	eq
 8003dc6:	2301      	moveq	r3, #1
 8003dc8:	2300      	movne	r3, #0
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d0a0      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b095      	sub	sp, #84	@ 0x54
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dee:	e853 3f00 	ldrex	r3, [r3]
 8003df2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e04:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e06:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e0c:	e841 2300 	strex	r3, r2, [r1]
 8003e10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e6      	bne.n	8003de6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e2e:	f023 0301 	bic.w	r3, r3, #1
 8003e32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3308      	adds	r3, #8
 8003e3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e44:	e841 2300 	strex	r3, r2, [r1]
 8003e48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e3      	bne.n	8003e18 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d118      	bne.n	8003e8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	e853 3f00 	ldrex	r3, [r3]
 8003e64:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f023 0310 	bic.w	r3, r3, #16
 8003e6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e76:	61bb      	str	r3, [r7, #24]
 8003e78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	6979      	ldr	r1, [r7, #20]
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	613b      	str	r3, [r7, #16]
   return(result);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e6      	bne.n	8003e58 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003e9e:	bf00      	nop
 8003ea0:	3754      	adds	r7, #84	@ 0x54
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <memset>:
 8003eaa:	4402      	add	r2, r0
 8003eac:	4603      	mov	r3, r0
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d100      	bne.n	8003eb4 <memset+0xa>
 8003eb2:	4770      	bx	lr
 8003eb4:	f803 1b01 	strb.w	r1, [r3], #1
 8003eb8:	e7f9      	b.n	8003eae <memset+0x4>
	...

08003ebc <__libc_init_array>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	4d0d      	ldr	r5, [pc, #52]	@ (8003ef4 <__libc_init_array+0x38>)
 8003ec0:	2600      	movs	r6, #0
 8003ec2:	4c0d      	ldr	r4, [pc, #52]	@ (8003ef8 <__libc_init_array+0x3c>)
 8003ec4:	1b64      	subs	r4, r4, r5
 8003ec6:	10a4      	asrs	r4, r4, #2
 8003ec8:	42a6      	cmp	r6, r4
 8003eca:	d109      	bne.n	8003ee0 <__libc_init_array+0x24>
 8003ecc:	4d0b      	ldr	r5, [pc, #44]	@ (8003efc <__libc_init_array+0x40>)
 8003ece:	2600      	movs	r6, #0
 8003ed0:	4c0b      	ldr	r4, [pc, #44]	@ (8003f00 <__libc_init_array+0x44>)
 8003ed2:	f000 f817 	bl	8003f04 <_init>
 8003ed6:	1b64      	subs	r4, r4, r5
 8003ed8:	10a4      	asrs	r4, r4, #2
 8003eda:	42a6      	cmp	r6, r4
 8003edc:	d105      	bne.n	8003eea <__libc_init_array+0x2e>
 8003ede:	bd70      	pop	{r4, r5, r6, pc}
 8003ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee4:	3601      	adds	r6, #1
 8003ee6:	4798      	blx	r3
 8003ee8:	e7ee      	b.n	8003ec8 <__libc_init_array+0xc>
 8003eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eee:	3601      	adds	r6, #1
 8003ef0:	4798      	blx	r3
 8003ef2:	e7f2      	b.n	8003eda <__libc_init_array+0x1e>
 8003ef4:	08003fac 	.word	0x08003fac
 8003ef8:	08003fac 	.word	0x08003fac
 8003efc:	08003fac 	.word	0x08003fac
 8003f00:	08003fb0 	.word	0x08003fb0

08003f04 <_init>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	bf00      	nop
 8003f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0a:	bc08      	pop	{r3}
 8003f0c:	469e      	mov	lr, r3
 8003f0e:	4770      	bx	lr

08003f10 <_fini>:
 8003f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f12:	bf00      	nop
 8003f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f16:	bc08      	pop	{r3}
 8003f18:	469e      	mov	lr, r3
 8003f1a:	4770      	bx	lr
