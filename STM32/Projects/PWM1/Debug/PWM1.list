
PWM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000015c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b60  0800015c  0800015c  0000115c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08002cbc  08002cbc  00003cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cc4  08002cc4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cc4  08002cc4  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cc4  08002cc4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cc4  08002cc4  00003cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002cc8  08002cc8  00003cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002ccc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002cd8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002cd8  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c04d  00000000  00000000  00004042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b26  00000000  00000000  0001008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00011bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000994  00000000  00000000  00012830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212d7  00000000  00000000  000131c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df06  00000000  00000000  0003449b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8a35  00000000  00000000  000423a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011add6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000349c  00000000  00000000  0011ae1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0011e2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800015c <__do_global_dtors_aux>:
 800015c:	b510      	push	{r4, lr}
 800015e:	4c05      	ldr	r4, [pc, #20]	@ (8000174 <__do_global_dtors_aux+0x18>)
 8000160:	7823      	ldrb	r3, [r4, #0]
 8000162:	b933      	cbnz	r3, 8000172 <__do_global_dtors_aux+0x16>
 8000164:	4b04      	ldr	r3, [pc, #16]	@ (8000178 <__do_global_dtors_aux+0x1c>)
 8000166:	b113      	cbz	r3, 800016e <__do_global_dtors_aux+0x12>
 8000168:	4804      	ldr	r0, [pc, #16]	@ (800017c <__do_global_dtors_aux+0x20>)
 800016a:	f3af 8000 	nop.w
 800016e:	2301      	movs	r3, #1
 8000170:	7023      	strb	r3, [r4, #0]
 8000172:	bd10      	pop	{r4, pc}
 8000174:	2000000c 	.word	0x2000000c
 8000178:	00000000 	.word	0x00000000
 800017c:	08002ca4 	.word	0x08002ca4

08000180 <frame_dummy>:
 8000180:	b508      	push	{r3, lr}
 8000182:	4b03      	ldr	r3, [pc, #12]	@ (8000190 <frame_dummy+0x10>)
 8000184:	b11b      	cbz	r3, 800018e <frame_dummy+0xe>
 8000186:	4903      	ldr	r1, [pc, #12]	@ (8000194 <frame_dummy+0x14>)
 8000188:	4803      	ldr	r0, [pc, #12]	@ (8000198 <frame_dummy+0x18>)
 800018a:	f3af 8000 	nop.w
 800018e:	bd08      	pop	{r3, pc}
 8000190:	00000000 	.word	0x00000000
 8000194:	20000010 	.word	0x20000010
 8000198:	08002ca4 	.word	0x08002ca4

0800019c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a2:	f000 fb45 	bl	8000830 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001a6:	f000 f82d 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001aa:	f000 f947 	bl	800043c <MX_GPIO_Init>
  MX_ICACHE_Init();
 80001ae:	f000 f882 	bl	80002b6 <MX_ICACHE_Init>
  MX_TIM1_Init();
 80001b2:	f000 f893 	bl	80002dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80001b6:	2108      	movs	r1, #8
 80001b8:	4811      	ldr	r0, [pc, #68]	@ (8000200 <main+0x64>)
 80001ba:	f001 fdb5 	bl	8001d28 <HAL_TIM_PWM_Start>

    /* USER CODE END WHILE */

	  while (1) {
	      // Increase brightness
	      for (uint8_t i = 0; i < 255; i++) {
 80001be:	2300      	movs	r3, #0
 80001c0:	71fb      	strb	r3, [r7, #7]
 80001c2:	e009      	b.n	80001d8 <main+0x3c>
	          __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, i);
 80001c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000200 <main+0x64>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	79fa      	ldrb	r2, [r7, #7]
 80001ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	          HAL_Delay(1); // Delay for smooth transition
 80001cc:	2001      	movs	r0, #1
 80001ce:	f000 fbed 	bl	80009ac <HAL_Delay>
	      for (uint8_t i = 0; i < 255; i++) {
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	3301      	adds	r3, #1
 80001d6:	71fb      	strb	r3, [r7, #7]
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	2bff      	cmp	r3, #255	@ 0xff
 80001dc:	d1f2      	bne.n	80001c4 <main+0x28>
	      }
	      // Decrease brightness
	      for (uint8_t i = 255; i > 0; i--) {
 80001de:	23ff      	movs	r3, #255	@ 0xff
 80001e0:	71bb      	strb	r3, [r7, #6]
 80001e2:	e009      	b.n	80001f8 <main+0x5c>
	          __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, i);
 80001e4:	4b06      	ldr	r3, [pc, #24]	@ (8000200 <main+0x64>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	79ba      	ldrb	r2, [r7, #6]
 80001ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	          HAL_Delay(1); // Delay for smooth transition
 80001ec:	2001      	movs	r0, #1
 80001ee:	f000 fbdd 	bl	80009ac <HAL_Delay>
	      for (uint8_t i = 255; i > 0; i--) {
 80001f2:	79bb      	ldrb	r3, [r7, #6]
 80001f4:	3b01      	subs	r3, #1
 80001f6:	71bb      	strb	r3, [r7, #6]
 80001f8:	79bb      	ldrb	r3, [r7, #6]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d1f2      	bne.n	80001e4 <main+0x48>
	      for (uint8_t i = 0; i < 255; i++) {
 80001fe:	e7de      	b.n	80001be <main+0x22>
 8000200:	20000028 	.word	0x20000028

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b098      	sub	sp, #96	@ 0x60
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0320 	add.w	r3, r7, #32
 800020e:	2240      	movs	r2, #64	@ 0x40
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f002 fd1a 	bl	8002c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	463b      	mov	r3, r7
 800021a:	2220      	movs	r2, #32
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f002 fd14 	bl	8002c4c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000224:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000228:	f000 fe92 	bl	8000f50 <HAL_PWREx_ControlVoltageScaling>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000232:	f000 f967 	bl	8000504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000236:	2301      	movs	r3, #1
 8000238:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800023e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
 8000244:	2302      	movs	r3, #2
 8000246:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSE;
 8000248:	2303      	movs	r3, #3
 800024a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL1.PLLM = 2;
 800024c:	2302      	movs	r3, #2
 800024e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL1.PLLN = 12;
 8000250:	230c      	movs	r3, #12
 8000252:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL1.PLLP = 2;
 8000254:	2302      	movs	r3, #2
 8000256:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL1.PLLQ = 2;
 8000258:	2302      	movs	r3, #2
 800025a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLR = 2;
 800025c:	2302      	movs	r3, #2
 800025e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL1.PLLFractional = 4096;
 8000260:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000264:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000266:	f107 0320 	add.w	r3, r7, #32
 800026a:	4618      	mov	r0, r3
 800026c:	f000 fece 	bl	800100c <HAL_RCC_OscConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000276:	f000 f945 	bl	8000504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027a:	233f      	movs	r3, #63	@ 0x3f
 800027c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK7|RCC_CLOCKTYPE_HCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027e:	2303      	movs	r3, #3
 8000280:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB7CLKDivider = RCC_HCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHB5_PLL1_CLKDivider = RCC_SYSCLK_PLL1_DIV4;
 8000292:	2306      	movs	r3, #6
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHB5_HSEHSI_CLKDivider = RCC_SYSCLK_HSEHSI_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800029a:	463b      	mov	r3, r7
 800029c:	2103      	movs	r1, #3
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 fa9e 	bl	80017e0 <HAL_RCC_ClockConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80002aa:	f000 f92b 	bl	8000504 <Error_Handler>
  }
}
 80002ae:	bf00      	nop
 80002b0:	3760      	adds	r7, #96	@ 0x60
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}

080002b6 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80002b6:	b580      	push	{r7, lr}
 80002b8:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80002ba:	2000      	movs	r0, #0
 80002bc:	f000 fe18 	bl	8000ef0 <HAL_ICACHE_ConfigAssociativityMode>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80002c6:	f000 f91d 	bl	8000504 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80002ca:	f000 fe31 	bl	8000f30 <HAL_ICACHE_Enable>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80002d4:	f000 f916 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}

080002dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b09c      	sub	sp, #112	@ 0x70
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
 8000308:	60da      	str	r2, [r3, #12]
 800030a:	611a      	str	r2, [r3, #16]
 800030c:	615a      	str	r2, [r3, #20]
 800030e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2234      	movs	r2, #52	@ 0x34
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f002 fc98 	bl	8002c4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800031c:	4b45      	ldr	r3, [pc, #276]	@ (8000434 <MX_TIM1_Init+0x158>)
 800031e:	4a46      	ldr	r2, [pc, #280]	@ (8000438 <MX_TIM1_Init+0x15c>)
 8000320:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8000322:	4b44      	ldr	r3, [pc, #272]	@ (8000434 <MX_TIM1_Init+0x158>)
 8000324:	2263      	movs	r2, #99	@ 0x63
 8000326:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000328:	4b42      	ldr	r3, [pc, #264]	@ (8000434 <MX_TIM1_Init+0x158>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800032e:	4b41      	ldr	r3, [pc, #260]	@ (8000434 <MX_TIM1_Init+0x158>)
 8000330:	22ff      	movs	r2, #255	@ 0xff
 8000332:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000334:	4b3f      	ldr	r3, [pc, #252]	@ (8000434 <MX_TIM1_Init+0x158>)
 8000336:	2200      	movs	r2, #0
 8000338:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800033a:	4b3e      	ldr	r3, [pc, #248]	@ (8000434 <MX_TIM1_Init+0x158>)
 800033c:	2200      	movs	r2, #0
 800033e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000340:	4b3c      	ldr	r3, [pc, #240]	@ (8000434 <MX_TIM1_Init+0x158>)
 8000342:	2200      	movs	r2, #0
 8000344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000346:	483b      	ldr	r0, [pc, #236]	@ (8000434 <MX_TIM1_Init+0x158>)
 8000348:	f001 fc36 	bl	8001bb8 <HAL_TIM_Base_Init>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000352:	f000 f8d7 	bl	8000504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000356:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800035a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800035c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000360:	4619      	mov	r1, r3
 8000362:	4834      	ldr	r0, [pc, #208]	@ (8000434 <MX_TIM1_Init+0x158>)
 8000364:	f001 fed4 	bl	8002110 <HAL_TIM_ConfigClockSource>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800036e:	f000 f8c9 	bl	8000504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000372:	4830      	ldr	r0, [pc, #192]	@ (8000434 <MX_TIM1_Init+0x158>)
 8000374:	f001 fc77 	bl	8001c66 <HAL_TIM_PWM_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800037e:	f000 f8c1 	bl	8000504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000382:	2300      	movs	r3, #0
 8000384:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000386:	2300      	movs	r3, #0
 8000388:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800038a:	2300      	movs	r3, #0
 800038c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800038e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000392:	4619      	mov	r1, r3
 8000394:	4827      	ldr	r0, [pc, #156]	@ (8000434 <MX_TIM1_Init+0x158>)
 8000396:	f002 fb6b 	bl	8002a70 <HAL_TIMEx_MasterConfigSynchronization>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80003a0:	f000 f8b0 	bl	8000504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003a4:	2360      	movs	r3, #96	@ 0x60
 80003a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003ac:	2300      	movs	r3, #0
 80003ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003b0:	2300      	movs	r3, #0
 80003b2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003b8:	2300      	movs	r3, #0
 80003ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003bc:	2300      	movs	r3, #0
 80003be:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80003c4:	2208      	movs	r2, #8
 80003c6:	4619      	mov	r1, r3
 80003c8:	481a      	ldr	r0, [pc, #104]	@ (8000434 <MX_TIM1_Init+0x158>)
 80003ca:	f001 fd8d 	bl	8001ee8 <HAL_TIM_PWM_ConfigChannel>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80003d4:	f000 f896 	bl	8000504 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003d8:	2300      	movs	r3, #0
 80003da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003dc:	2300      	movs	r3, #0
 80003de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003e4:	2300      	movs	r3, #0
 80003e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80003f6:	2300      	movs	r3, #0
 80003f8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80003fa:	2300      	movs	r3, #0
 80003fc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80003fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000402:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000404:	2300      	movs	r3, #0
 8000406:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000408:	2300      	movs	r3, #0
 800040a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800040c:	2300      	movs	r3, #0
 800040e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	4619      	mov	r1, r3
 8000414:	4807      	ldr	r0, [pc, #28]	@ (8000434 <MX_TIM1_Init+0x158>)
 8000416:	f002 fb93 	bl	8002b40 <HAL_TIMEx_ConfigBreakDeadTime>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000420:	f000 f870 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000424:	4803      	ldr	r0, [pc, #12]	@ (8000434 <MX_TIM1_Init+0x158>)
 8000426:	f000 f8af 	bl	8000588 <HAL_TIM_MspPostInit>

}
 800042a:	bf00      	nop
 800042c:	3770      	adds	r7, #112	@ 0x70
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000028 	.word	0x20000028
 8000438:	40012c00 	.word	0x40012c00

0800043c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000442:	f107 030c 	add.w	r3, r7, #12
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
 8000450:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000452:	4b29      	ldr	r3, [pc, #164]	@ (80004f8 <MX_GPIO_Init+0xbc>)
 8000454:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000458:	4a27      	ldr	r2, [pc, #156]	@ (80004f8 <MX_GPIO_Init+0xbc>)
 800045a:	f043 0302 	orr.w	r3, r3, #2
 800045e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000462:	4b25      	ldr	r3, [pc, #148]	@ (80004f8 <MX_GPIO_Init+0xbc>)
 8000464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000468:	f003 0302 	and.w	r3, r3, #2
 800046c:	60bb      	str	r3, [r7, #8]
 800046e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000470:	4b21      	ldr	r3, [pc, #132]	@ (80004f8 <MX_GPIO_Init+0xbc>)
 8000472:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000476:	4a20      	ldr	r2, [pc, #128]	@ (80004f8 <MX_GPIO_Init+0xbc>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000480:	4b1d      	ldr	r3, [pc, #116]	@ (80004f8 <MX_GPIO_Init+0xbc>)
 8000482:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048e:	4b1a      	ldr	r3, [pc, #104]	@ (80004f8 <MX_GPIO_Init+0xbc>)
 8000490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000494:	4a18      	ldr	r2, [pc, #96]	@ (80004f8 <MX_GPIO_Init+0xbc>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800049e:	4b16      	ldr	r3, [pc, #88]	@ (80004f8 <MX_GPIO_Init+0xbc>)
 80004a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004a4:	f003 0304 	and.w	r3, r3, #4
 80004a8:	603b      	str	r3, [r7, #0]
 80004aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : USART1_TX_Pin */
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 80004ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b2:	2302      	movs	r3, #2
 80004b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80004be:	2307      	movs	r3, #7
 80004c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80004c2:	f107 030c 	add.w	r3, r7, #12
 80004c6:	4619      	mov	r1, r3
 80004c8:	480c      	ldr	r0, [pc, #48]	@ (80004fc <MX_GPIO_Init+0xc0>)
 80004ca:	f000 fbc5 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART1_RX_Pin */
  GPIO_InitStruct.Pin = USART1_RX_Pin;
 80004ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d4:	2302      	movs	r3, #2
 80004d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004dc:	2300      	movs	r3, #0
 80004de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80004e0:	2307      	movs	r3, #7
 80004e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART1_RX_GPIO_Port, &GPIO_InitStruct);
 80004e4:	f107 030c 	add.w	r3, r7, #12
 80004e8:	4619      	mov	r1, r3
 80004ea:	4805      	ldr	r0, [pc, #20]	@ (8000500 <MX_GPIO_Init+0xc4>)
 80004ec:	f000 fbb4 	bl	8000c58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004f0:	bf00      	nop
 80004f2:	3720      	adds	r7, #32
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	46020c00 	.word	0x46020c00
 80004fc:	42020400 	.word	0x42020400
 8000500:	42020000 	.word	0x42020000

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <Error_Handler+0x8>

08000510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	4b0a      	ldr	r3, [pc, #40]	@ (8000540 <HAL_MspInit+0x30>)
 8000518:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800051c:	4a08      	ldr	r2, [pc, #32]	@ (8000540 <HAL_MspInit+0x30>)
 800051e:	f043 0304 	orr.w	r3, r3, #4
 8000522:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000526:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <HAL_MspInit+0x30>)
 8000528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800052c:	f003 0304 	and.w	r3, r3, #4
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	46020c00 	.word	0x46020c00

08000544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a0b      	ldr	r2, [pc, #44]	@ (8000580 <HAL_TIM_Base_MspInit+0x3c>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d10e      	bne.n	8000574 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000556:	4b0b      	ldr	r3, [pc, #44]	@ (8000584 <HAL_TIM_Base_MspInit+0x40>)
 8000558:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800055c:	4a09      	ldr	r2, [pc, #36]	@ (8000584 <HAL_TIM_Base_MspInit+0x40>)
 800055e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000562:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000566:	4b07      	ldr	r3, [pc, #28]	@ (8000584 <HAL_TIM_Base_MspInit+0x40>)
 8000568:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800056c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40012c00 	.word	0x40012c00
 8000584:	46020c00 	.word	0x46020c00

08000588 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a12      	ldr	r2, [pc, #72]	@ (80005f0 <HAL_TIM_MspPostInit+0x68>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d11e      	bne.n	80005e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005aa:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <HAL_TIM_MspPostInit+0x6c>)
 80005ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005b0:	4a10      	ldr	r2, [pc, #64]	@ (80005f4 <HAL_TIM_MspPostInit+0x6c>)
 80005b2:	f043 0302 	orr.w	r3, r3, #2
 80005b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <HAL_TIM_MspPostInit+0x6c>)
 80005bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005c0:	f003 0302 	and.w	r3, r3, #2
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB4 (NJTRST)     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005c8:	2310      	movs	r3, #16
 80005ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005cc:	2302      	movs	r3, #2
 80005ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80005d8:	2301      	movs	r3, #1
 80005da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	4619      	mov	r1, r3
 80005e2:	4805      	ldr	r0, [pc, #20]	@ (80005f8 <HAL_TIM_MspPostInit+0x70>)
 80005e4:	f000 fb38 	bl	8000c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80005e8:	bf00      	nop
 80005ea:	3720      	adds	r7, #32
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40012c00 	.word	0x40012c00
 80005f4:	46020c00 	.word	0x46020c00
 80005f8:	42020400 	.word	0x42020400

080005fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <NMI_Handler+0x4>

08000604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <HardFault_Handler+0x4>

0800060c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <MemManage_Handler+0x4>

08000614 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <BusFault_Handler+0x4>

0800061c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <UsageFault_Handler+0x4>

08000624 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000652:	f000 f98b 	bl	800096c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  __IO uint32_t tmpreg;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000660:	4b06      	ldr	r3, [pc, #24]	@ (800067c <SystemInit+0x20>)
 8000662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000666:	4a05      	ldr	r2, [pc, #20]	@ (800067c <SystemInit+0x20>)
 8000668:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800066c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  CLEAR_BIT(ADC4->CR, ADC_CR_ADVREGEN);

  /* Disable ADC kernel clock */
  CLEAR_BIT(RCC->AHB4ENR, RCC_AHB4ENR_ADC4EN);
#endif
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b089      	sub	sp, #36	@ 0x24
 8000684:	af00      	add	r7, sp, #0
  uint32_t plln;
  float_t fracn;
  float_t pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 8000686:	4b4f      	ldr	r3, [pc, #316]	@ (80007c4 <SystemCoreClockUpdate+0x144>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	f003 030c 	and.w	r3, r3, #12
 800068e:	2b08      	cmp	r3, #8
 8000690:	d002      	beq.n	8000698 <SystemCoreClockUpdate+0x18>
 8000692:	2b0c      	cmp	r3, #12
 8000694:	d00b      	beq.n	80006ae <SystemCoreClockUpdate+0x2e>
 8000696:	e07d      	b.n	8000794 <SystemCoreClockUpdate+0x114>
  {
    case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
      SystemCoreClock = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8000698:	4b4a      	ldr	r3, [pc, #296]	@ (80007c4 <SystemCoreClockUpdate+0x144>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	0d1b      	lsrs	r3, r3, #20
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	4a49      	ldr	r2, [pc, #292]	@ (80007c8 <SystemCoreClockUpdate+0x148>)
 80006a4:	fa22 f303 	lsr.w	r3, r2, r3
 80006a8:	4a48      	ldr	r2, [pc, #288]	@ (80007cc <SystemCoreClockUpdate+0x14c>)
 80006aa:	6013      	str	r3, [r2, #0]
      break;
 80006ac:	e076      	b.n	800079c <SystemCoreClockUpdate+0x11c>

    case (RCC_CFGR1_SWS_0 | RCC_CFGR1_SWS_1):  /* PLL1 used as system clock source */
      /* PLL_VCO = (PLLsource / PLLM) * PLLN * FractionnalPart
          SYSCLK = PLL_VCO / PLLR */
      /* Get PLL1 CFGR and DIVR register values */
      tmp1 = RCC->PLL1CFGR;
 80006ae:	4b45      	ldr	r3, [pc, #276]	@ (80007c4 <SystemCoreClockUpdate+0x144>)
 80006b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006b2:	61fb      	str	r3, [r7, #28]
      tmp2 = RCC->PLL1DIVR;
 80006b4:	4b43      	ldr	r3, [pc, #268]	@ (80007c4 <SystemCoreClockUpdate+0x144>)
 80006b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006b8:	617b      	str	r3, [r7, #20]

      /* Retrieve PLL1 multiplication factor and divider */
      pllm = ((tmp1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	3301      	adds	r3, #1
 80006c4:	613b      	str	r3, [r7, #16]
      plln = (tmp2 & RCC_PLL1DIVR_PLL1N) + 1U;
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006cc:	3301      	adds	r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
      pllr = ((tmp2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	0e1b      	lsrs	r3, r3, #24
 80006d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006d8:	3301      	adds	r3, #1
 80006da:	60bb      	str	r3, [r7, #8]

      /* Check if fractional part is enable */
      if ((tmp1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d00b      	beq.n	80006fe <SystemCoreClockUpdate+0x7e>
      {
        fracn = (float_t)((uint32_t)((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80006e6:	4b37      	ldr	r3, [pc, #220]	@ (80007c4 <SystemCoreClockUpdate+0x144>)
 80006e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006ea:	08db      	lsrs	r3, r3, #3
 80006ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80006f0:	ee07 3a90 	vmov	s15, r3
 80006f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006f8:	edc7 7a06 	vstr	s15, [r7, #24]
 80006fc:	e002      	b.n	8000704 <SystemCoreClockUpdate+0x84>
      }
      else
      {
        fracn = (float_t)0U;
 80006fe:	f04f 0300 	mov.w	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
      }

      /* determine PLL source */
      pllsource = (tmp1 & RCC_PLL1CFGR_PLL1SRC);
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	f003 0303 	and.w	r3, r3, #3
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b02      	cmp	r3, #2
 8000710:	d003      	beq.n	800071a <SystemCoreClockUpdate+0x9a>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b03      	cmp	r3, #3
 8000716:	d003      	beq.n	8000720 <SystemCoreClockUpdate+0xa0>
 8000718:	e00c      	b.n	8000734 <SystemCoreClockUpdate+0xb4>
      switch (pllsource)
      {
        /* HSI used as PLL1 clock source */
        case RCC_PLL1CFGR_PLL1SRC_1:
          tmp1 = HSI_VALUE;
 800071a:	4b2d      	ldr	r3, [pc, #180]	@ (80007d0 <SystemCoreClockUpdate+0x150>)
 800071c:	61fb      	str	r3, [r7, #28]
          break;
 800071e:	e00c      	b.n	800073a <SystemCoreClockUpdate+0xba>

        /* HSE used as PLL1 clock source */
        case (RCC_PLL1CFGR_PLL1SRC_0 | RCC_PLL1CFGR_PLL1SRC_1):
          tmp1 = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8000720:	4b28      	ldr	r3, [pc, #160]	@ (80007c4 <SystemCoreClockUpdate+0x144>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	0d1b      	lsrs	r3, r3, #20
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	4a27      	ldr	r2, [pc, #156]	@ (80007c8 <SystemCoreClockUpdate+0x148>)
 800072c:	fa22 f303 	lsr.w	r3, r2, r3
 8000730:	61fb      	str	r3, [r7, #28]
          break;
 8000732:	e002      	b.n	800073a <SystemCoreClockUpdate+0xba>

        default:
          tmp1 = 0U;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
          break;
 8000738:	bf00      	nop
      }

      /* Compute VCO output frequency */
      pllvco = ((float_t) tmp1 / (float_t)pllm) * (((float_t)plln + (float_t)(fracn / (float_t)0x2000U)));
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	ee07 3a90 	vmov	s15, r3
 8000740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	ee07 3a90 	vmov	s15, r3
 800074a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800074e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	ee07 3a90 	vmov	s15, r3
 8000758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800075c:	ed97 6a06 	vldr	s12, [r7, #24]
 8000760:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80007d4 <SystemCoreClockUpdate+0x154>
 8000764:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000768:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800076c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000770:	edc7 7a00 	vstr	s15, [r7]
      SystemCoreClock = (uint32_t)((float_t)(pllvco / (float_t)pllr));
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	ee07 3a90 	vmov	s15, r3
 800077a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800077e:	edd7 6a00 	vldr	s13, [r7]
 8000782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800078a:	ee17 2a90 	vmov	r2, s15
 800078e:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <SystemCoreClockUpdate+0x14c>)
 8000790:	601a      	str	r2, [r3, #0]
      break;
 8000792:	e003      	b.n	800079c <SystemCoreClockUpdate+0x11c>

    case 0x00u:  /* HSI used as system clock source */
    default:
      SystemCoreClock = HSI_VALUE;
 8000794:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <SystemCoreClockUpdate+0x14c>)
 8000796:	4a0e      	ldr	r2, [pc, #56]	@ (80007d0 <SystemCoreClockUpdate+0x150>)
 8000798:	601a      	str	r2, [r3, #0]
      break;
 800079a:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp1 = AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)];
 800079c:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <SystemCoreClockUpdate+0x144>)
 800079e:	6a1b      	ldr	r3, [r3, #32]
 80007a0:	f003 0307 	and.w	r3, r3, #7
 80007a4:	4a0c      	ldr	r2, [pc, #48]	@ (80007d8 <SystemCoreClockUpdate+0x158>)
 80007a6:	5cd3      	ldrb	r3, [r2, r3]
 80007a8:	61fb      	str	r3, [r7, #28]

  /* HCLK clock frequency */
  SystemCoreClock >>= tmp1;
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <SystemCoreClockUpdate+0x14c>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	fa22 f303 	lsr.w	r3, r2, r3
 80007b4:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <SystemCoreClockUpdate+0x14c>)
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	3724      	adds	r7, #36	@ 0x24
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	46020c00 	.word	0x46020c00
 80007c8:	01e84800 	.word	0x01e84800
 80007cc:	20000000 	.word	0x20000000
 80007d0:	00f42400 	.word	0x00f42400
 80007d4:	46000000 	.word	0x46000000
 80007d8:	08002cbc 	.word	0x08002cbc

080007dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80007dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000814 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007e0:	f7ff ff3c 	bl	800065c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007e6:	e003      	b.n	80007f0 <LoopCopyDataInit>

080007e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007ee:	3104      	adds	r1, #4

080007f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007f0:	480a      	ldr	r0, [pc, #40]	@ (800081c <LoopForever+0xa>)
	ldr	r3, =_edata
 80007f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <LoopForever+0xe>)
	adds	r2, r0, r1
 80007f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007f8:	d3f6      	bcc.n	80007e8 <CopyDataInit>
	ldr	r2, =_sbss
 80007fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000824 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007fc:	e002      	b.n	8000804 <LoopFillZerobss>

080007fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000800:	f842 3b04 	str.w	r3, [r2], #4

08000804 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000804:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <LoopForever+0x16>)
	cmp	r2, r3
 8000806:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000808:	d3f9      	bcc.n	80007fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800080a:	f002 fa27 	bl	8002c5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800080e:	f7ff fcc5 	bl	800019c <main>

08000812 <LoopForever>:

LoopForever:
    b LoopForever
 8000812:	e7fe      	b.n	8000812 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000814:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 8000818:	08002ccc 	.word	0x08002ccc
	ldr	r0, =_sdata
 800081c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000820:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000824:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000828:	20000078 	.word	0x20000078

0800082c <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC4_IRQHandler>
	...

08000830 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000834:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <HAL_Init+0x3c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a0c      	ldr	r2, [pc, #48]	@ (800086c <HAL_Init+0x3c>)
 800083a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800083e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000840:	2003      	movs	r0, #3
 8000842:	f000 f966 	bl	8000b12 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 8000846:	f7ff ff1b 	bl	8000680 <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800084a:	2004      	movs	r0, #4
 800084c:	f000 f9ac 	bl	8000ba8 <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000850:	200f      	movs	r0, #15
 8000852:	f000 f80d 	bl	8000870 <HAL_InitTick>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <HAL_Init+0x30>
  {
    return HAL_ERROR;
 800085c:	2301      	movs	r3, #1
 800085e:	e002      	b.n	8000866 <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000860:	f7ff fe56 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40022000 	.word	0x40022000

08000870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800087c:	4b36      	ldr	r3, [pc, #216]	@ (8000958 <HAL_InitTick+0xe8>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d101      	bne.n	8000888 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000884:	2301      	movs	r3, #1
 8000886:	e062      	b.n	800094e <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000888:	4b34      	ldr	r3, [pc, #208]	@ (800095c <HAL_InitTick+0xec>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f003 0304 	and.w	r3, r3, #4
 8000890:	2b04      	cmp	r3, #4
 8000892:	d10c      	bne.n	80008ae <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000894:	4b32      	ldr	r3, [pc, #200]	@ (8000960 <HAL_InitTick+0xf0>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b2f      	ldr	r3, [pc, #188]	@ (8000958 <HAL_InitTick+0xe8>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	e03d      	b.n	800092a <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 80008ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000964 <HAL_InitTick+0xf4>)
 80008b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80008b8:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80008c0:	d025      	beq.n	800090e <HAL_InitTick+0x9e>
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80008c8:	d82e      	bhi.n	8000928 <HAL_InitTick+0xb8>
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d004      	beq.n	80008da <HAL_InitTick+0x6a>
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80008d6:	d00d      	beq.n	80008f4 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 80008d8:	e026      	b.n	8000928 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80008da:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <HAL_InitTick+0xf0>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <HAL_InitTick+0xe8>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	4619      	mov	r1, r3
 80008e4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80008e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f0:	60fb      	str	r3, [r7, #12]
        break;
 80008f2:	e01a      	b.n	800092a <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80008f4:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <HAL_InitTick+0xe8>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8000902:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000906:	fbb2 f3f3 	udiv	r3, r2, r3
 800090a:	60fb      	str	r3, [r7, #12]
        break;
 800090c:	e00d      	b.n	800092a <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800090e:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <HAL_InitTick+0xe8>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000918:	fbb3 f3f2 	udiv	r3, r3, r2
 800091c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000920:	fbb2 f3f3 	udiv	r3, r2, r3
 8000924:	60fb      	str	r3, [r7, #12]
        break;
 8000926:	e000      	b.n	800092a <HAL_InitTick+0xba>
        break;
 8000928:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f000 f91a 	bl	8000b64 <HAL_SYSTICK_Config>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e009      	b.n	800094e <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093a:	2200      	movs	r2, #0
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	f04f 30ff 	mov.w	r0, #4294967295
 8000942:	f000 f8f1 	bl	8000b28 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000946:	4a08      	ldr	r2, [pc, #32]	@ (8000968 <HAL_InitTick+0xf8>)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000008 	.word	0x20000008
 800095c:	e000e010 	.word	0xe000e010
 8000960:	20000000 	.word	0x20000000
 8000964:	46020c00 	.word	0x46020c00
 8000968:	20000004 	.word	0x20000004

0800096c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_IncTick+0x20>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_IncTick+0x24>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <HAL_IncTick+0x24>)
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000008 	.word	0x20000008
 8000990:	20000074 	.word	0x20000074

08000994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <HAL_GetTick+0x14>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000074 	.word	0x20000074

080009ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b4:	f7ff ffee 	bl	8000994 <HAL_GetTick>
 80009b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c4:	d005      	beq.n	80009d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <HAL_Delay+0x44>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009d2:	bf00      	nop
 80009d4:	f7ff ffde 	bl	8000994 <HAL_GetTick>
 80009d8:	4602      	mov	r2, r0
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d8f7      	bhi.n	80009d4 <HAL_Delay+0x28>
  {
  }
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	@ (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db0a      	blt.n	8000a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	490c      	ldr	r1, [pc, #48]	@ (8000aa4 <__NVIC_SetPriority+0x4c>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a80:	e00a      	b.n	8000a98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4908      	ldr	r1, [pc, #32]	@ (8000aa8 <__NVIC_SetPriority+0x50>)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	0112      	lsls	r2, r2, #4
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	440b      	add	r3, r1
 8000a96:	761a      	strb	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	@ 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f1c3 0307 	rsb	r3, r3, #7
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2304      	movcs	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d902      	bls.n	8000adc <NVIC_EncodePriority+0x30>
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3b03      	subs	r3, #3
 8000ada:	e000      	b.n	8000ade <NVIC_EncodePriority+0x32>
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43d9      	mvns	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	4313      	orrs	r3, r2
         );
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3724      	adds	r7, #36	@ 0x24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ff6a 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
 8000b34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
 8000b36:	f7ff ff81 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f003 0307 	and.w	r3, r3, #7
 8000b40:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	6978      	ldr	r0, [r7, #20]
 8000b48:	f7ff ffb0 	bl	8000aac <NVIC_EncodePriority>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff7f 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b74:	d301      	bcc.n	8000b7a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00d      	b.n	8000b96 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba4 <HAL_SYSTICK_Config+0x40>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000b82:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <HAL_SYSTICK_Config+0x40>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <HAL_SYSTICK_Config+0x40>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a05      	ldr	r2, [pc, #20]	@ (8000ba4 <HAL_SYSTICK_Config+0x40>)
 8000b8e:	f043 0303 	orr.w	r3, r3, #3
 8000b92:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000e010 	.word	0xe000e010

08000ba8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d844      	bhi.n	8000c40 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8000bbc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbc:	08000bdf 	.word	0x08000bdf
 8000bc0:	08000bfd 	.word	0x08000bfd
 8000bc4:	08000c1f 	.word	0x08000c1f
 8000bc8:	08000c41 	.word	0x08000c41
 8000bcc:	08000bd1 	.word	0x08000bd1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a1e      	ldr	r2, [pc, #120]	@ (8000c50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	6013      	str	r3, [r2, #0]
      break;
 8000bdc:	e031      	b.n	8000c42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000bde:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a1b      	ldr	r2, [pc, #108]	@ (8000c50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000be4:	f023 0304 	bic.w	r3, r3, #4
 8000be8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000bea:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf0:	4a18      	ldr	r2, [pc, #96]	@ (8000c54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000bf2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000bfa:	e022      	b.n	8000c42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000bfc:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a13      	ldr	r2, [pc, #76]	@ (8000c50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c02:	f023 0304 	bic.w	r3, r3, #4
 8000c06:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c0e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000c12:	4a10      	ldr	r2, [pc, #64]	@ (8000c54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000c1c:	e011      	b.n	8000c42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a0b      	ldr	r2, [pc, #44]	@ (8000c50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c24:	f023 0304 	bic.w	r3, r3, #4
 8000c28:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c30:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000c34:	4a07      	ldr	r2, [pc, #28]	@ (8000c54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000c3e:	e000      	b.n	8000c42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000c40:	bf00      	nop
  }
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000e010 	.word	0xe000e010
 8000c54:	46020c00 	.word	0x46020c00

08000c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b087      	sub	sp, #28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c66:	e130      	b.n	8000eca <HAL_GPIO_Init+0x272>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	fa01 f303 	lsl.w	r3, r1, r3
 8000c74:	4013      	ands	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f000 8122 	beq.w	8000ec4 <HAL_GPIO_Init+0x26c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d005      	beq.n	8000c98 <HAL_GPIO_Init+0x40>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d130      	bne.n	8000cfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	68da      	ldr	r2, [r3, #12]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cce:	2201      	movs	r2, #1
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	091b      	lsrs	r3, r3, #4
 8000ce4:	f003 0201 	and.w	r2, r3, #1
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d017      	beq.n	8000d36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	2203      	movs	r2, #3
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d123      	bne.n	8000d8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	08da      	lsrs	r2, r3, #3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3208      	adds	r2, #8
 8000d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	220f      	movs	r2, #15
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	691a      	ldr	r2, [r3, #16]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	08da      	lsrs	r2, r3, #3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3208      	adds	r2, #8
 8000d84:	6939      	ldr	r1, [r7, #16]
 8000d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	2203      	movs	r2, #3
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 0203 	and.w	r2, r3, #3
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d07c      	beq.n	8000ec4 <HAL_GPIO_Init+0x26c>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000dca:	4a47      	ldr	r2, [pc, #284]	@ (8000ee8 <HAL_GPIO_Init+0x290>)
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3318      	adds	r3, #24
 8000dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	220f      	movs	r2, #15
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	0a9a      	lsrs	r2, r3, #10
 8000df2:	4b3e      	ldr	r3, [pc, #248]	@ (8000eec <HAL_GPIO_Init+0x294>)
 8000df4:	4013      	ands	r3, r2
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	f002 0203 	and.w	r2, r2, #3
 8000dfc:	00d2      	lsls	r2, r2, #3
 8000dfe:	4093      	lsls	r3, r2
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000e06:	4938      	ldr	r1, [pc, #224]	@ (8000ee8 <HAL_GPIO_Init+0x290>)
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	3318      	adds	r3, #24
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e14:	4b34      	ldr	r3, [pc, #208]	@ (8000ee8 <HAL_GPIO_Init+0x290>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x1e0>
        {
          temp |= iocurrent;
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e38:	4a2b      	ldr	r2, [pc, #172]	@ (8000ee8 <HAL_GPIO_Init+0x290>)
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee8 <HAL_GPIO_Init+0x290>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x20a>
        {
          temp |= iocurrent;
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e62:	4a21      	ldr	r2, [pc, #132]	@ (8000ee8 <HAL_GPIO_Init+0x290>)
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee8 <HAL_GPIO_Init+0x290>)
 8000e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e8e:	4a16      	ldr	r2, [pc, #88]	@ (8000ee8 <HAL_GPIO_Init+0x290>)
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8000e96:	4b14      	ldr	r3, [pc, #80]	@ (8000ee8 <HAL_GPIO_Init+0x290>)
 8000e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <HAL_GPIO_Init+0x290>)
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f47f aec7 	bne.w	8000c68 <HAL_GPIO_Init+0x10>
  }
}
 8000eda:	bf00      	nop
 8000edc:	bf00      	nop
 8000ede:	371c      	adds	r7, #28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	46022000 	.word	0x46022000
 8000eec:	002f7f7f 	.word	0x002f7f7f

08000ef0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000efc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d002      	beq.n	8000f0e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e007      	b.n	8000f1e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000f0e:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f023 0204 	bic.w	r2, r3, #4
 8000f16:	4905      	ldr	r1, [pc, #20]	@ (8000f2c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	40030400 	.word	0x40030400

08000f30 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <HAL_ICACHE_Enable+0x1c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a04      	ldr	r2, [pc, #16]	@ (8000f4c <HAL_ICACHE_Enable+0x1c>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	40030400 	.word	0x40030400

08000f50 <HAL_PWREx_ControlVoltageScaling>:
  *        only take effect after the 2.4 GHz RADIO has entered Sleep or Deepsleep mode.
  * @note  In range 2, the 2.4 GHz RADIO shall not transmit nor receive.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  uint32_t vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8000f58:	4b29      	ldr	r3, [pc, #164]	@ (8001000 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f60:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d101      	bne.n	8000f6e <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e042      	b.n	8000ff4 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Set voltage scaling level */
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 8000f6e:	4b24      	ldr	r3, [pc, #144]	@ (8001000 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8000f76:	4922      	ldr	r1, [pc, #136]	@ (8001000 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	60cb      	str	r3, [r1, #12]


  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8000f7e:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2232      	movs	r2, #50	@ 0x32
 8000f84:	fb02 f303 	mul.w	r3, r2, r3
 8000f88:	4a1f      	ldr	r2, [pc, #124]	@ (8001008 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8000f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8e:	0c9b      	lsrs	r3, r3, #18
 8000f90:	3301      	adds	r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000f94:	e002      	b.n	8000f9c <HAL_PWREx_ControlVoltageScaling+0x4c>
  {
    timeout--;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000f9c:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <HAL_PWREx_ControlVoltageScaling+0x5e>
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1f3      	bne.n	8000f96 <HAL_PWREx_ControlVoltageScaling+0x46>
  }

  /* Check time out  */
  if (timeout == 0U)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <HAL_PWREx_ControlVoltageScaling+0x68>
  {
    return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e01d      	b.n	8000ff4 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Wait until ACTVOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2232      	movs	r2, #50	@ 0x32
 8000fbe:	fb02 f303 	mul.w	r3, r2, r3
 8000fc2:	4a11      	ldr	r2, [pc, #68]	@ (8001008 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8000fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc8:	0c9b      	lsrs	r3, r3, #18
 8000fca:	3301      	adds	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000fce:	e002      	b.n	8000fd6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d102      	bne.n	8000fe8 <HAL_PWREx_ControlVoltageScaling+0x98>
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1f3      	bne.n	8000fd0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out  */
  if (timeout == 0U)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_PWREx_ControlVoltageScaling+0xa2>
  {
    return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e000      	b.n	8000ff4 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	46020800 	.word	0x46020800
 8001004:	20000000 	.word	0x20000000
 8001008:	431bde83 	.word	0x431bde83

0800100c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	@ 0x30
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t mask;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e3d9      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800101e:	4b90      	ldr	r3, [pc, #576]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	623b      	str	r3, [r7, #32]
  pllsrc = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001028:	4b8d      	ldr	r3, [pc, #564]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 800102a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d072      	beq.n	8001124 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL1 in these cases it is not allowed to be disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800103e:	6a3b      	ldr	r3, [r7, #32]
 8001040:	2b08      	cmp	r3, #8
 8001042:	d005      	beq.n	8001050 <HAL_RCC_OscConfig+0x44>
 8001044:	6a3b      	ldr	r3, [r7, #32]
 8001046:	2b0c      	cmp	r3, #12
 8001048:	d12a      	bne.n	80010a0 <HAL_RCC_OscConfig+0x94>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSE)))
 800104a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800104c:	2b03      	cmp	r3, #3
 800104e:	d127      	bne.n	80010a0 <HAL_RCC_OscConfig+0x94>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <HAL_RCC_OscConfig+0x50>
      {
        return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e3ba      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Otherwise, applying divider is allowed */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	2b08      	cmp	r3, #8
 8001060:	d15f      	bne.n	8001122 <HAL_RCC_OscConfig+0x116>
        {
          assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

          /* Adjust the HSE division factor */
          __HAL_RCC_HSE_CONFIG(RCC_HSE_ON | RCC_OscInitStruct->HSEDiv);
 8001062:	4b7f      	ldr	r3, [pc, #508]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	4313      	orrs	r3, r2
 8001070:	4a7b      	ldr	r2, [pc, #492]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 8001072:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001076:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSE value */
          SystemCoreClock = (HSE_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSEPRE)) >> RCC_CR_HSEPRE_Pos)));
 8001078:	4b79      	ldr	r3, [pc, #484]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	0d1b      	lsrs	r3, r3, #20
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	4a78      	ldr	r2, [pc, #480]	@ (8001264 <HAL_RCC_OscConfig+0x258>)
 8001084:	fa22 f303 	lsr.w	r3, r2, r3
 8001088:	4a77      	ldr	r2, [pc, #476]	@ (8001268 <HAL_RCC_OscConfig+0x25c>)
 800108a:	6013      	str	r3, [r2, #0]

          /* Adapt Systick interrupt period */
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800108c:	4b77      	ldr	r3, [pc, #476]	@ (800126c <HAL_RCC_OscConfig+0x260>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fbed 	bl	8000870 <HAL_InitTick>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d042      	beq.n	8001122 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e398      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d01f      	beq.n	80010e8 <HAL_RCC_OscConfig+0xdc>
      {
        assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG((RCC_OscInitStruct->HSEState | RCC_OscInitStruct->HSEDiv));
 80010a8:	4b6d      	ldr	r3, [pc, #436]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6859      	ldr	r1, [r3, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	430b      	orrs	r3, r1
 80010ba:	4969      	ldr	r1, [pc, #420]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c0:	f7ff fc68 	bl	8000994 <HAL_GetTick>
 80010c4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0xce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c8:	f7ff fc64 	bl	8000994 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b64      	cmp	r3, #100	@ 0x64
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e37b      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010da:	4b61      	ldr	r3, [pc, #388]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f0      	beq.n	80010c8 <HAL_RCC_OscConfig+0xbc>
 80010e6:	e01d      	b.n	8001124 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e8:	4b5d      	ldr	r3, [pc, #372]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	495a      	ldr	r1, [pc, #360]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fa:	f7ff fc4b 	bl	8000994 <HAL_GetTick>
 80010fe:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001102:	f7ff fc47 	bl	8000994 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b64      	cmp	r3, #100	@ 0x64
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e35e      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001114:	4b52      	ldr	r3, [pc, #328]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f0      	bne.n	8001102 <HAL_RCC_OscConfig+0xf6>
 8001120:	e000      	b.n	8001124 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001122:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d05a      	beq.n	80011e6 <HAL_RCC_OscConfig+0x1da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001130:	6a3b      	ldr	r3, [r7, #32]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <HAL_RCC_OscConfig+0x136>
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	2b0c      	cmp	r3, #12
 800113a:	d113      	bne.n	8001164 <HAL_RCC_OscConfig+0x158>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSI)))
 800113c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800113e:	2b02      	cmp	r3, #2
 8001140:	d110      	bne.n	8001164 <HAL_RCC_OscConfig+0x158>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_RCC_OscConfig+0x142>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e341      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114e:	4b44      	ldr	r3, [pc, #272]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	041b      	lsls	r3, r3, #16
 800115c:	4940      	ldr	r1, [pc, #256]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 800115e:	4313      	orrs	r3, r2
 8001160:	610b      	str	r3, [r1, #16]
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001162:	e040      	b.n	80011e6 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d023      	beq.n	80011b4 <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800116c:	4b3c      	ldr	r3, [pc, #240]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a3b      	ldr	r2, [pc, #236]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 8001172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001178:	f7ff fc0c 	bl	8000994 <HAL_GetTick>
 800117c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001180:	f7ff fc08 	bl	8000994 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e31f      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001192:	4b33      	ldr	r3, [pc, #204]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f0      	beq.n	8001180 <HAL_RCC_OscConfig+0x174>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119e:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	041b      	lsls	r3, r3, #16
 80011ac:	492c      	ldr	r1, [pc, #176]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	610b      	str	r3, [r1, #16]
 80011b2:	e018      	b.n	80011e6 <HAL_RCC_OscConfig+0x1da>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a29      	ldr	r2, [pc, #164]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 80011ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c0:	f7ff fbe8 	bl	8000994 <HAL_GetTick>
 80011c4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x1ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c8:	f7ff fbe4 	bl	8000994 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e2fb      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011da:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x1bc>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 80d2 	beq.w	8001398 <HAL_RCC_OscConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Update LSI1 configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 80011fa:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 80011fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	d111      	bne.n	800122c <HAL_RCC_OscConfig+0x220>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001208:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 800120a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800120e:	4a14      	ldr	r2, [pc, #80]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <HAL_RCC_OscConfig+0x254>)
 800121a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001226:	2301      	movs	r3, #1
 8001228:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800122c:	4b10      	ldr	r3, [pc, #64]	@ (8001270 <HAL_RCC_OscConfig+0x264>)
 800122e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d123      	bne.n	8001280 <HAL_RCC_OscConfig+0x274>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001238:	4b0d      	ldr	r3, [pc, #52]	@ (8001270 <HAL_RCC_OscConfig+0x264>)
 800123a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800123c:	4a0c      	ldr	r2, [pc, #48]	@ (8001270 <HAL_RCC_OscConfig+0x264>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001244:	f7ff fba6 	bl	8000994 <HAL_GetTick>
 8001248:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800124a:	e013      	b.n	8001274 <HAL_RCC_OscConfig+0x268>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124c:	f7ff fba2 	bl	8000994 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d90c      	bls.n	8001274 <HAL_RCC_OscConfig+0x268>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e2b9      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
 800125e:	bf00      	nop
 8001260:	46020c00 	.word	0x46020c00
 8001264:	01e84800 	.word	0x01e84800
 8001268:	20000000 	.word	0x20000000
 800126c:	20000004 	.word	0x20000004
 8001270:	46020800 	.word	0x46020800
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001274:	4ba4      	ldr	r3, [pc, #656]	@ (8001508 <HAL_RCC_OscConfig+0x4fc>)
 8001276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0e5      	beq.n	800124c <HAL_RCC_OscConfig+0x240>
        }
      }
    }

    /* Get BDCR1 register value */
    tmpreg1 = RCC->BDCR1;
 8001280:	4ba2      	ldr	r3, [pc, #648]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 8001282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001286:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Define mask depending on LSI presence */
    mask = RCC_BDCR1_LSI1ON;
 8001288:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800128c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_LSI2_SUPPORT)
    mask |= RCC_BDCR1_LSI2ON;
#endif /* RCC_LSI2_SUPPORT */

    /* Check the LSI1 State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d056      	beq.n	8001344 <HAL_RCC_OscConfig+0x338>
    {
      if ((RCC_OscInitStruct->LSIState & RCC_LSI1_ON) != 0x00u)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d030      	beq.n	8001304 <HAL_RCC_OscConfig+0x2f8>
      {
        /* Check LSI1 division factor */
        assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

        /* Check is LSIDiv is requested to be changed and LSI is already ON */
        if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_BDCR1_LSI1PREDIV)) && ((tmpreg1 & RCC_BDCR1_LSI1RDY) != 0x00u))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69da      	ldr	r2, [r3, #28]
 80012a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d020      	beq.n	80012f2 <HAL_RCC_OscConfig+0x2e6>
 80012b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d01b      	beq.n	80012f2 <HAL_RCC_OscConfig+0x2e6>
        {
          /* Disable LSI1 */
          tmpreg1 &= ~RCC_BDCR1_LSI1ON;
 80012ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80012c0:	62bb      	str	r3, [r7, #40]	@ 0x28
          RCC->BDCR1 = tmpreg1;
 80012c2:	4a92      	ldr	r2, [pc, #584]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 80012c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80012ca:	f7ff fb63 	bl	8000994 <HAL_GetTick>
 80012ce:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is disabled */
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x2d8>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d2:	f7ff fb5f 	bl	8000994 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b14      	cmp	r3, #20
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x2d8>
            {
              /* LSI1 may be forced ON by IWDG */
              return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e276      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 80012e4:	4b89      	ldr	r3, [pc, #548]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 80012e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1ef      	bne.n	80012d2 <HAL_RCC_OscConfig+0x2c6>
          HAL_Delay(1);
#endif
        }

        /* Set LSI1 division factor */
        tmpreg1 &= ~RCC_BDCR1_LSI1PREDIV;
 80012f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012f8:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001300:	4313      	orrs	r3, r2
 8001302:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Enable Concerned LSI */
      tmpreg1 |= RCC_OscInitStruct->LSIState;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800130a:	4313      	orrs	r3, r2
 800130c:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 800130e:	4a7f      	ldr	r2, [pc, #508]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 8001310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001312:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001316:	f7ff fb3d 	bl	8000994 <HAL_GetTick>
 800131a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready : LSIRDY bit is position ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x324>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800131e:	f7ff fb39 	bl	8000994 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b14      	cmp	r3, #20
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x324>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e250      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8001330:	4b76      	ldr	r3, [pc, #472]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 8001332:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	4013      	ands	r3, r2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0ed      	beq.n	800131e <HAL_RCC_OscConfig+0x312>
 8001342:	e01d      	b.n	8001380 <HAL_RCC_OscConfig+0x374>
#endif
    }
    else
    {
      /* Disable the Internal Low Speed oscillator LSI1 and LSI2 is available */
      tmpreg1 &= ~mask;
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	43db      	mvns	r3, r3
 8001348:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800134a:	4013      	ands	r3, r2
 800134c:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 800134e:	4a6f      	ldr	r2, [pc, #444]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 8001350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001352:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001356:	f7ff fb1d 	bl	8000994 <HAL_GetTick>
 800135a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is disabled : LSIRDY bit position is ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x364>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800135e:	f7ff fb19 	bl	8000994 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b14      	cmp	r3, #20
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x364>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e230      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8001370:	4b66      	ldr	r3, [pc, #408]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 8001372:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4013      	ands	r3, r2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1ee      	bne.n	800135e <HAL_RCC_OscConfig+0x352>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001380:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001384:	2b01      	cmp	r3, #1
 8001386:	d107      	bne.n	8001398 <HAL_RCC_OscConfig+0x38c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001388:	4b60      	ldr	r3, [pc, #384]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 800138a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800138e:	4a5f      	ldr	r2, [pc, #380]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 8001390:	f023 0304 	bic.w	r3, r3, #4
 8001394:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 80e2 	beq.w	800156a <HAL_RCC_OscConfig+0x55e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 80013ac:	4b57      	ldr	r3, [pc, #348]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 80013ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d111      	bne.n	80013de <HAL_RCC_OscConfig+0x3d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	4b54      	ldr	r3, [pc, #336]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 80013bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013c0:	4a52      	ldr	r2, [pc, #328]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80013ca:	4b50      	ldr	r3, [pc, #320]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 80013cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013d8:	2301      	movs	r3, #1
 80013da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80013de:	4b4a      	ldr	r3, [pc, #296]	@ (8001508 <HAL_RCC_OscConfig+0x4fc>)
 80013e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d118      	bne.n	800141c <HAL_RCC_OscConfig+0x410>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80013ea:	4b47      	ldr	r3, [pc, #284]	@ (8001508 <HAL_RCC_OscConfig+0x4fc>)
 80013ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ee:	4a46      	ldr	r2, [pc, #280]	@ (8001508 <HAL_RCC_OscConfig+0x4fc>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013f6:	f7ff facd 	bl	8000994 <HAL_GetTick>
 80013fa:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fe:	f7ff fac9 	bl	8000994 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e1e0      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001410:	4b3d      	ldr	r3, [pc, #244]	@ (8001508 <HAL_RCC_OscConfig+0x4fc>)
 8001412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x3f2>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d051      	beq.n	80014c8 <HAL_RCC_OscConfig+0x4bc>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_LSESYSEN);
 8001424:	4b39      	ldr	r3, [pc, #228]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 8001426:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800142a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800142e:	62bb      	str	r3, [r7, #40]	@ 0x28
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001436:	4313      	orrs	r3, r2
 8001438:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 800143a:	4a34      	ldr	r2, [pc, #208]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 800143c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800143e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001442:	f7ff faa7 	bl	8000994 <HAL_GetTick>
 8001446:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 8001448:	e00a      	b.n	8001460 <HAL_RCC_OscConfig+0x454>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144a:	f7ff faa3 	bl	8000994 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001458:	4293      	cmp	r3, r2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x454>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e1b8      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 8001460:	4b2a      	ldr	r3, [pc, #168]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 8001462:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0ed      	beq.n	800144a <HAL_RCC_OscConfig+0x43e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR1_LSESYSEN) != 0U)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001476:	2b00      	cmp	r3, #0
 8001478:	d01e      	beq.n	80014b8 <HAL_RCC_OscConfig+0x4ac>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 800147a:	e00a      	b.n	8001492 <HAL_RCC_OscConfig+0x486>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147c:	f7ff fa8a 	bl	8000994 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800148a:	4293      	cmp	r3, r2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x486>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e19f      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 8001492:	4b1e      	ldr	r3, [pc, #120]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 8001494:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001498:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0ed      	beq.n	800147c <HAL_RCC_OscConfig+0x470>
 80014a0:	e057      	b.n	8001552 <HAL_RCC_OscConfig+0x546>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a2:	f7ff fa77 	bl	8000994 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e18c      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 80014b8:	4b14      	ldr	r3, [pc, #80]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 80014ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1ed      	bne.n	80014a2 <HAL_RCC_OscConfig+0x496>
 80014c6:	e044      	b.n	8001552 <HAL_RCC_OscConfig+0x546>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR1, (RCC_BDCR1_LSEON | RCC_BDCR1_LSESYSEN));
 80014c8:	4b10      	ldr	r3, [pc, #64]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 80014ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014ce:	4a0f      	ldr	r2, [pc, #60]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 80014d0:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 80014d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR1, RCC_BDCR1_LSEBYP);
 80014d8:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 80014da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014de:	4a0b      	ldr	r2, [pc, #44]	@ (800150c <HAL_RCC_OscConfig+0x500>)
 80014e0:	f023 0304 	bic.w	r3, r3, #4
 80014e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e8:	f7ff fa54 	bl	8000994 <HAL_GetTick>
 80014ec:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 80014ee:	e00f      	b.n	8001510 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f0:	f7ff fa50 	bl	8000994 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d906      	bls.n	8001510 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e165      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
 8001506:	bf00      	nop
 8001508:	46020800 	.word	0x46020800
 800150c:	46020c00 	.word	0x46020c00
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8001510:	4b98      	ldr	r3, [pc, #608]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 8001512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1e8      	bne.n	80014f0 <HAL_RCC_OscConfig+0x4e4>
        }
      }

      if (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSEN) != 0U)
 800151e:	4b95      	ldr	r3, [pc, #596]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 8001520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001528:	2b00      	cmp	r3, #0
 800152a:	d012      	beq.n	8001552 <HAL_RCC_OscConfig+0x546>
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 800152c:	e00a      	b.n	8001544 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152e:	f7ff fa31 	bl	8000994 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153c:	4293      	cmp	r3, r2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e146      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8001544:	4b8b      	ldr	r3, [pc, #556]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 8001546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800154a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1ed      	bne.n	800152e <HAL_RCC_OscConfig+0x522>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001552:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001556:	2b01      	cmp	r3, #1
 8001558:	d107      	bne.n	800156a <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800155a:	4b86      	ldr	r3, [pc, #536]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 800155c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001560:	4a84      	ldr	r2, [pc, #528]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 8001562:	f023 0304 	bic.w	r3, r3, #4
 8001566:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if ((RCC_OscInitStruct->PLL1.PLLState) != RCC_PLL_NONE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 812e 	beq.w	80017d0 <HAL_RCC_OscConfig+0x7c4>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	2b0c      	cmp	r3, #12
 8001578:	f000 80ba 	beq.w	80016f0 <HAL_RCC_OscConfig+0x6e4>
    {
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_ON)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	2b02      	cmp	r3, #2
 8001582:	f040 8093 	bne.w	80016ac <HAL_RCC_OscConfig+0x6a0>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL1.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL1.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL1.PLLR));

        /* Disable the main PLL1. */
        tmpreg1 = (RCC->CR & ~RCC_CR_PLL1ON);
 8001586:	4b7b      	ldr	r3, [pc, #492]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800158e:	62bb      	str	r3, [r7, #40]	@ 0x28
        RCC->CR = tmpreg1;
 8001590:	4a78      	ldr	r2, [pc, #480]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 8001592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff f9fd 	bl	8000994 <HAL_GetTick>
 800159a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        do
        {
          tmpreg1 = RCC->CR;
 800159c:	4b75      	ldr	r3, [pc, #468]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a2:	f7ff f9f7 	bl	8000994 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e10e      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
          }
        } while ((tmpreg1 & RCC_CR_PLL1RDY) != 0U);
 80015b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1ee      	bne.n	800159c <HAL_RCC_OscConfig+0x590>

        /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
        if (RCC_OscInitStruct->PLL1.PLLSource == RCC_PLLSOURCE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d108      	bne.n	80015d8 <HAL_RCC_OscConfig+0x5cc>
        {
          /* Clock source is HSE or HSE/2 */
          pllsrc = HSE_VALUE >> ((tmpreg1 & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos);
 80015c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c8:	0d1b      	lsrs	r3, r3, #20
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	4a6a      	ldr	r2, [pc, #424]	@ (8001778 <HAL_RCC_OscConfig+0x76c>)
 80015d0:	fa22 f303 	lsr.w	r3, r2, r3
 80015d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015d6:	e001      	b.n	80015dc <HAL_RCC_OscConfig+0x5d0>
        }
        else
        {
          /* Clock source is HSI */
          pllsrc = HSI_VALUE;
 80015d8:	4b68      	ldr	r3, [pc, #416]	@ (800177c <HAL_RCC_OscConfig+0x770>)
 80015da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Compute VCO input frequency depending on M divider */
        pllsrc = (pllsrc / RCC_OscInitStruct->PLL1.PLLM);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllsrc));

        if (pllsrc > PLL_INPUTRANGE0_FREQMAX)
 80015e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ea:	4a65      	ldr	r2, [pc, #404]	@ (8001780 <HAL_RCC_OscConfig+0x774>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d902      	bls.n	80015f6 <HAL_RCC_OscConfig+0x5ea>
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE1;
 80015f0:	230c      	movs	r3, #12
 80015f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015f4:	e001      	b.n	80015fa <HAL_RCC_OscConfig+0x5ee>
        }
        else
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Configure PLL1 source, PLLM divider, VCO input range and enable PLL1R output. Clear also FRACEN*/
        tmpreg2 = RCC->PLL1CFGR;
 80015fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 80015fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fe:	617b      	str	r3, [r7, #20]
        tmpreg2 &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1RGE | RCC_PLL1CFGR_PLL1FRACEN | RCC_PLL1CFGR_PLL1M);
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f423 63e3 	bic.w	r3, r3, #1816	@ 0x718
 8001606:	f023 0307 	bic.w	r3, r3, #7
 800160a:	617b      	str	r3, [r7, #20]
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001612:	431a      	orrs	r2, r3
                    ((RCC_OscInitStruct->PLL1.PLLM - 1u) << RCC_PLL1CFGR_PLL1M_Pos) | RCC_PLL1CFGR_PLL1REN);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001618:	3b01      	subs	r3, #1
 800161a:	021b      	lsls	r3, r3, #8
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 800161c:	431a      	orrs	r2, r3
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	4313      	orrs	r3, r2
 8001622:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001626:	617b      	str	r3, [r7, #20]
        RCC->PLL1CFGR = tmpreg2;
 8001628:	4a52      	ldr	r2, [pc, #328]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLLN multiplication factor and PLLP, PLLQ, PLLR dividers */
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001632:	1e5a      	subs	r2, r3, #1
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001638:	3b01      	subs	r3, #1
 800163a:	025b      	lsls	r3, r3, #9
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 800163c:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLQ - 1u) << RCC_PLL1DIVR_PLL1Q_Pos) |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001642:	3b01      	subs	r3, #1
 8001644:	041b      	lsls	r3, r3, #16
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 8001646:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLR - 1u) << RCC_PLL1DIVR_PLL1R_Pos));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800164c:	3b01      	subs	r3, #1
 800164e:	061b      	lsls	r3, r3, #24
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8001650:	4313      	orrs	r3, r2
 8001652:	617b      	str	r3, [r7, #20]
        RCC->PLL1DIVR = tmpreg2;
 8001654:	4a47      	ldr	r2, [pc, #284]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	6353      	str	r3, [r2, #52]	@ 0x34

        if (RCC_OscInitStruct->PLL1.PLLFractional != 0x00u)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00a      	beq.n	8001678 <HAL_RCC_OscConfig+0x66c>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001666:	4a43      	ldr	r2, [pc, #268]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	6393      	str	r3, [r2, #56]	@ 0x38

          /* Enable PLL1FRACEN */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 800166c:	4b41      	ldr	r3, [pc, #260]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 800166e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001670:	4a40      	ldr	r2, [pc, #256]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 8001672:	f043 0310 	orr.w	r3, r3, #16
 8001676:	6293      	str	r3, [r2, #40]	@ 0x28
        }

        /* Enable the main PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001678:	4b3e      	ldr	r3, [pc, #248]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a3d      	ldr	r2, [pc, #244]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 800167e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff f986 	bl	8000994 <HAL_GetTick>
 8001688:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x692>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168c:	f7ff f982 	bl	8000994 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e099      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800169e:	4b35      	ldr	r3, [pc, #212]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0x680>
 80016aa:	e091      	b.n	80017d0 <HAL_RCC_OscConfig+0x7c4>
        }
      }
      else
      {
        /* Disable the main PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80016ac:	4b31      	ldr	r3, [pc, #196]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a30      	ldr	r2, [pc, #192]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 80016b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff f96c 	bl	8000994 <HAL_GetTick>
 80016bc:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x6c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff f968 	bl	8000994 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x6c6>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e07f      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80016d2:	4b28      	ldr	r3, [pc, #160]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x6b4>
          }
        }

        /* CLear the PLL1 source and disable outputs to save power when PLL1 is off */
        CLEAR_BIT(RCC->PLL1CFGR, (RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | \
 80016de:	4b25      	ldr	r3, [pc, #148]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 80016e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e2:	4a24      	ldr	r2, [pc, #144]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 80016e4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80016e8:	f023 0303 	bic.w	r3, r3, #3
 80016ec:	6293      	str	r3, [r2, #40]	@ 0x28
 80016ee:	e06f      	b.n	80017d0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL1 used as System clock source */
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_OscConfig+0x6f0>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e06a      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        tmpreg1 = RCC->PLL1CFGR;
 80016fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 80016fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001700:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg2 = RCC->PLL1DIVR;
 8001702:	4b1c      	ldr	r3, [pc, #112]	@ (8001774 <HAL_RCC_OscConfig+0x768>)
 8001704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001706:	617b      	str	r3, [r7, #20]

        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 8001708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800170a:	f003 0203 	and.w	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001712:	429a      	cmp	r2, r3
 8001714:	d12b      	bne.n	800176e <HAL_RCC_OscConfig+0x762>
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 8001716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0207 	and.w	r2, r3, #7
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001722:	3b01      	subs	r3, #1
        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d122      	bne.n	800176e <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001732:	3b01      	subs	r3, #1
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 8001734:	429a      	cmp	r2, r3
 8001736:	d11a      	bne.n	800176e <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	0a5b      	lsrs	r3, r3, #9
 800173c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001744:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d111      	bne.n	800176e <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	0c1b      	lsrs	r3, r3, #16
 800174e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001756:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d108      	bne.n	800176e <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) != (RCC_OscInitStruct->PLL1.PLLR - 1u)))
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	0e1b      	lsrs	r3, r3, #24
 8001760:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001768:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d00a      	beq.n	8001784 <HAL_RCC_OscConfig+0x778>
        {
          return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e02f      	b.n	80017d2 <HAL_RCC_OscConfig+0x7c6>
 8001772:	bf00      	nop
 8001774:	46020c00 	.word	0x46020c00
 8001778:	01e84800 	.word	0x01e84800
 800177c:	00f42400 	.word	0x00f42400
 8001780:	007a1200 	.word	0x007a1200
        }
        else
        {
          /* Check if only fractional part needs to be updated  */
          tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <HAL_RCC_OscConfig+0x7d0>)
 8001786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001788:	08db      	lsrs	r3, r3, #3
 800178a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800178e:	62bb      	str	r3, [r7, #40]	@ 0x28

          if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001794:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001796:	429a      	cmp	r2, r3
 8001798:	d01a      	beq.n	80017d0 <HAL_RCC_OscConfig+0x7c4>
          {
            assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

            /* Disable PLL1FRACEN */
            __HAL_RCC_PLL1_FRACN_DISABLE();
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <HAL_RCC_OscConfig+0x7d0>)
 800179c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179e:	4a0f      	ldr	r2, [pc, #60]	@ (80017dc <HAL_RCC_OscConfig+0x7d0>)
 80017a0:	f023 0310 	bic.w	r3, r3, #16
 80017a4:	6293      	str	r3, [r2, #40]	@ 0x28

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017a6:	f7ff f8f5 	bl	8000994 <HAL_GetTick>
 80017aa:	61f8      	str	r0, [r7, #28]

            /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
            while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80017ac:	bf00      	nop
 80017ae:	f7ff f8f1 	bl	8000994 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d0f9      	beq.n	80017ae <HAL_RCC_OscConfig+0x7a2>
            {
            }

            /* Configure PLL1 PLL1FRACN */
            __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017be:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <HAL_RCC_OscConfig+0x7d0>)
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	6393      	str	r3, [r2, #56]	@ 0x38

            /* Enable PLL1FRACEN to latch new value. */
            __HAL_RCC_PLL1_FRACN_ENABLE();
 80017c4:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <HAL_RCC_OscConfig+0x7d0>)
 80017c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c8:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <HAL_RCC_OscConfig+0x7d0>)
 80017ca:	f043 0310 	orr.w	r3, r3, #16
 80017ce:	6293      	str	r3, [r2, #40]	@ 0x28
          }
        }
      }
    }
  }
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3730      	adds	r7, #48	@ 0x30
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	46020c00 	.word	0x46020c00

080017e0 <HAL_RCC_ClockConfig>:
  *         HCLK5 prescaler is switched automatically by hardware, but configuration shall
  *         always be performed before setting new PLL1 source as Sysclk source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e115      	b.n	8001a20 <HAL_RCC_ClockConfig+0x240>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001a28 <HAL_RCC_ClockConfig+0x248>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 030f 	and.w	r3, r3, #15
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d910      	bls.n	8001824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b89      	ldr	r3, [pc, #548]	@ (8001a28 <HAL_RCC_ClockConfig+0x248>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 020f 	bic.w	r2, r3, #15
 800180a:	4987      	ldr	r1, [pc, #540]	@ (8001a28 <HAL_RCC_ClockConfig+0x248>)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b85      	ldr	r3, [pc, #532]	@ (8001a28 <HAL_RCC_ClockConfig+0x248>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0fd      	b.n	8001a20 <HAL_RCC_ClockConfig+0x240>
  }

  /*-------------------------- HCLK5 Configuration --------------------------*/
  /* HCLK5 prescaler is switched automatically by hardware, but configuration shall
    always be performed before setting new PLL1 source as Sysclk source. */
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK5) == RCC_CLOCKTYPE_HCLK5)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0320 	and.w	r3, r3, #32
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00d      	beq.n	800184c <HAL_RCC_ClockConfig+0x6c>
  {
    assert_param(IS_RCC_HCLK5_HSEHSI(RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
    assert_param(IS_RCC_HCLK5_PLL1(RCC_ClkInitStruct->AHB5_PLL1_CLKDivider));
    MODIFY_REG(RCC->CFGR4, (RCC_CFGR4_HDIV5 | RCC_CFGR4_HPRE5),
 8001830:	4b7e      	ldr	r3, [pc, #504]	@ (8001a2c <HAL_RCC_ClockConfig+0x24c>)
 8001832:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001836:	f023 0217 	bic.w	r2, r3, #23
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6999      	ldr	r1, [r3, #24]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	430b      	orrs	r3, r1
 8001844:	4979      	ldr	r1, [pc, #484]	@ (8001a2c <HAL_RCC_ClockConfig+0x24c>)
 8001846:	4313      	orrs	r3, r2
 8001848:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
               (RCC_ClkInitStruct->AHB5_PLL1_CLKDivider | RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d06f      	beq.n	8001938 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 8001858:	4b74      	ldr	r3, [pc, #464]	@ (8001a2c <HAL_RCC_ClockConfig+0x24c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	617b      	str	r3, [r7, #20]

    /* PLL1 is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d118      	bne.n	8001898 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the PLL1 ready flag */
      if ((tmpreg1 & RCC_CR_PLL1RDY) == 0U)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0d5      	b.n	8001a20 <HAL_RCC_ClockConfig+0x240>
      }
      else
      {
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8001874:	4b6d      	ldr	r3, [pc, #436]	@ (8001a2c <HAL_RCC_ClockConfig+0x24c>)
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	f003 020c 	and.w	r2, r3, #12
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	429a      	cmp	r2, r3
 8001884:	d01a      	beq.n	80018bc <HAL_RCC_ClockConfig+0xdc>
        {
          /* Whatever is PLL frequency, use step prediv to reach maximum frequency. */
          /* Select pll1r to be prediv with 2-step divider when selected as Sysclk source */
          MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRESTEP, RCC_PLL1CFGR_PLL1RCLKPRE);
 8001886:	4b69      	ldr	r3, [pc, #420]	@ (8001a2c <HAL_RCC_ClockConfig+0x24c>)
 8001888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800188e:	4a67      	ldr	r2, [pc, #412]	@ (8001a2c <HAL_RCC_ClockConfig+0x24c>)
 8001890:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001894:	6293      	str	r3, [r2, #40]	@ 0x28
 8001896:	e011      	b.n	80018bc <HAL_RCC_ClockConfig+0xdc>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d106      	bne.n	80018ae <HAL_RCC_ClockConfig+0xce>
      {
        /* Check the HSE ready flag */
        if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d108      	bne.n	80018bc <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0b8      	b.n	8001a20 <HAL_RCC_ClockConfig+0x240>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0b1      	b.n	8001a20 <HAL_RCC_ClockConfig+0x240>
        }
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018bc:	4b5b      	ldr	r3, [pc, #364]	@ (8001a2c <HAL_RCC_ClockConfig+0x24c>)
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	f023 0203 	bic.w	r2, r3, #3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	4958      	ldr	r1, [pc, #352]	@ (8001a2c <HAL_RCC_ClockConfig+0x24c>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018ce:	f7ff f861 	bl	8000994 <HAL_GetTick>
 80018d2:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_ClockConfig+0x10c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d6:	f7ff f85d 	bl	8000994 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e099      	b.n	8001a20 <HAL_RCC_ClockConfig+0x240>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 80018ec:	4b4f      	ldr	r3, [pc, #316]	@ (8001a2c <HAL_RCC_ClockConfig+0x24c>)
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	f003 020c 	and.w	r2, r3, #12
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d1eb      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xf6>
      }
    }

    /* If PLL1rCLK is asked to be SYSCLK source, clear prediv. */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b03      	cmp	r3, #3
 8001904:	d118      	bne.n	8001938 <HAL_RCC_ClockConfig+0x158>
    {
      /* Set PLL1R prediv to not divided */
      CLEAR_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRE);
 8001906:	4b49      	ldr	r3, [pc, #292]	@ (8001a2c <HAL_RCC_ClockConfig+0x24c>)
 8001908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190a:	4a48      	ldr	r2, [pc, #288]	@ (8001a2c <HAL_RCC_ClockConfig+0x24c>)
 800190c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001910:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001912:	f7ff f83f 	bl	8000994 <HAL_GetTick>
 8001916:	60f8      	str	r0, [r7, #12]

      /* Wait until PLL1 not divided is ready */
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8001918:	e008      	b.n	800192c <HAL_RCC_ClockConfig+0x14c>
      {
        if ((HAL_GetTick() - tickstart) > PLL1_NDIV_TIMEOUT_VALUE)
 800191a:	f7ff f83b 	bl	8000994 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b0a      	cmp	r3, #10
 8001926:	d901      	bls.n	800192c <HAL_RCC_ClockConfig+0x14c>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e079      	b.n	8001a20 <HAL_RCC_ClockConfig+0x240>
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 800192c:	4b3f      	ldr	r3, [pc, #252]	@ (8001a2c <HAL_RCC_ClockConfig+0x24c>)
 800192e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001930:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 8001938:	4b3c      	ldr	r3, [pc, #240]	@ (8001a2c <HAL_RCC_ClockConfig+0x24c>)
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00a      	beq.n	8001964 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f023 0307 	bic.w	r3, r3, #7
 8001954:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4313      	orrs	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8001960:	2301      	movs	r3, #1
 8001962:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00a      	beq.n	8001986 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001976:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	4313      	orrs	r3, r2
 8001980:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8001982:	2301      	movs	r3, #1
 8001984:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00b      	beq.n	80019aa <HAL_RCC_ClockConfig+0x1ca>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001998:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80019a6:	2301      	movs	r3, #1
 80019a8:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x1d6>
  {
    RCC->CFGR2 = tmpreg1;
 80019b0:	4a1e      	ldr	r2, [pc, #120]	@ (8001a2c <HAL_RCC_ClockConfig+0x24c>)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK7 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK7) == RCC_CLOCKTYPE_PCLK7)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0310 	and.w	r3, r3, #16
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB7CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB7CLKDivider);
 80019c2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a2c <HAL_RCC_ClockConfig+0x24c>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019ca:	4b17      	ldr	r3, [pc, #92]	@ (8001a28 <HAL_RCC_ClockConfig+0x248>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d210      	bcs.n	80019fa <HAL_RCC_ClockConfig+0x21a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d8:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <HAL_RCC_ClockConfig+0x248>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f023 020f 	bic.w	r2, r3, #15
 80019e0:	4911      	ldr	r1, [pc, #68]	@ (8001a28 <HAL_RCC_ClockConfig+0x248>)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <HAL_RCC_ClockConfig+0x248>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_ClockConfig+0x21a>
    {
      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e012      	b.n	8001a20 <HAL_RCC_ClockConfig+0x240>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80019fa:	f000 f81f 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80019fe:	4602      	mov	r2, r0
 8001a00:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <HAL_RCC_ClockConfig+0x24c>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	4909      	ldr	r1, [pc, #36]	@ (8001a30 <HAL_RCC_ClockConfig+0x250>)
 8001a0a:	5ccb      	ldrb	r3, [r1, r3]
 8001a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a10:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <HAL_RCC_ClockConfig+0x254>)
 8001a12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a14:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <HAL_RCC_ClockConfig+0x258>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe ff29 	bl	8000870 <HAL_InitTick>
 8001a1e:	4603      	mov	r3, r0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40022000 	.word	0x40022000
 8001a2c:	46020c00 	.word	0x46020c00
 8001a30:	08002cbc 	.word	0x08002cbc
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000004 	.word	0x20000004

08001a3c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
  uint32_t sysclk;

  /* Get SYSCLK source */
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a42:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x48>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	607b      	str	r3, [r7, #4]

  if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d102      	bne.n	8001a58 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 8001a52:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x4c>)
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	e00f      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d109      	bne.n	8001a72 <HAL_RCC_GetSysClockFreq+0x36>
  {
    /* HSE used as system clock source. Check if HSE is divided by 2 */
    sysclk = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x48>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	0d1b      	lsrs	r3, r3, #20
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	4a08      	ldr	r2, [pc, #32]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x50>)
 8001a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	e002      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else
  {
    /* PLL1 used as system clock source */
    sysclk = HAL_RCC_GetPLL1RFreq();
 8001a72:	f000 f80d 	bl	8001a90 <HAL_RCC_GetPLL1RFreq>
 8001a76:	6078      	str	r0, [r7, #4]
  }

  return sysclk;
 8001a78:	687b      	ldr	r3, [r7, #4]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	46020c00 	.word	0x46020c00
 8001a88:	00f42400 	.word	0x00f42400
 8001a8c:	01e84800 	.word	0x01e84800

08001a90 <HAL_RCC_GetPLL1RFreq>:
/**
  * @brief  Return the PLL1R frequency.
  * @retval PLL1R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL1RFreq(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL1R divider */
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <HAL_RCC_GetPLL1RFreq+0x34>)
 8001a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a9a:	0e1b      	lsrs	r3, r3, #24
 8001a9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL1R one */
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 8001aa4:	f000 f810 	bl	8001ac8 <RCC_PLL1_GetVCOOutputFreq>
 8001aa8:	eef0 7a40 	vmov.f32	s15, s0
 8001aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ab0:	ee17 2a90 	vmov	r2, s15
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	46020c00 	.word	0x46020c00

08001ac8 <RCC_PLL1_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL1 VCO output frequency
  * @retval Value of PLL1 VCO output frequency
  */
static float_t RCC_PLL1_GetVCOOutputFreq(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
  float_t pllm;
  float_t plln;
  float_t pllfracn;

  /* Get PLL1 DIVR register value */
  tmpreg1 = RCC->PLL1DIVR;
 8001ace:	4b36      	ldr	r3, [pc, #216]	@ (8001ba8 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8001ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ad2:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 multiplication factor */
  tmp = (tmpreg1 & RCC_PLL1DIVR_PLL1N) + 1U;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ada:	3301      	adds	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
  plln = (float_t) tmp;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae8:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Get PLL1 CFGR register value */
  tmpreg1 = RCC->PLL1CFGR;
 8001aec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba8 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8001aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 divider */
  tmp = ((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	3301      	adds	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
  pllm = (float_t) tmp;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b08:	edc7 7a01 	vstr	s15, [r7, #4]

  /* Check if fractional part is enable */
  if ((tmpreg1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d006      	beq.n	8001b24 <RCC_PLL1_GetVCOOutputFreq+0x5c>
  {
    tmp = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 8001b16:	4b24      	ldr	r3, [pc, #144]	@ (8001ba8 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8001b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b1a:	08db      	lsrs	r3, r3, #3
 8001b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e001      	b.n	8001b28 <RCC_PLL1_GetVCOOutputFreq+0x60>
  }
  else
  {
    tmp = 0u;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  }
  pllfracn = (float_t)tmp;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b32:	edc7 7a00 	vstr	s15, [r7]

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLL1CFGR_PLL1SRC)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d002      	beq.n	8001b46 <RCC_PLL1_GetVCOOutputFreq+0x7e>
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d003      	beq.n	8001b4c <RCC_PLL1_GetVCOOutputFreq+0x84>
 8001b44:	e013      	b.n	8001b6e <RCC_PLL1_GetVCOOutputFreq+0xa6>
  {
    /* HSI used as PLL1 clock source */
    case RCC_PLLSOURCE_HSI:
      pllsrc = (float_t)HSI_VALUE;
 8001b46:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <RCC_PLL1_GetVCOOutputFreq+0xe4>)
 8001b48:	613b      	str	r3, [r7, #16]
      break;
 8001b4a:	e014      	b.n	8001b76 <RCC_PLL1_GetVCOOutputFreq+0xae>

    /* HSE used as PLL1 clock source */
    case RCC_PLLSOURCE_HSE:
      tmp = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8001b4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ba8 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	0d1b      	lsrs	r3, r3, #20
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	4a16      	ldr	r2, [pc, #88]	@ (8001bb0 <RCC_PLL1_GetVCOOutputFreq+0xe8>)
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5c:	617b      	str	r3, [r7, #20]
      pllsrc = (float_t)tmp;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b68:	edc7 7a04 	vstr	s15, [r7, #16]
      break;
 8001b6c:	e003      	b.n	8001b76 <RCC_PLL1_GetVCOOutputFreq+0xae>

    default:
      pllsrc = (float_t)0;
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
      break;
 8001b74:	bf00      	nop
  }

  /* Compute VCO output frequency */
  return ((pllsrc / pllm) * (plln + (pllfracn / (float_t)0x2000u)));
 8001b76:	edd7 6a04 	vldr	s13, [r7, #16]
 8001b7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b82:	edd7 7a00 	vldr	s15, [r7]
 8001b86:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8001bb4 <RCC_PLL1_GetVCOOutputFreq+0xec>
 8001b8a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001b8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b96:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9e:	371c      	adds	r7, #28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	46020c00 	.word	0x46020c00
 8001bac:	4b742400 	.word	0x4b742400
 8001bb0:	01e84800 	.word	0x01e84800
 8001bb4:	46000000 	.word	0x46000000

08001bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e049      	b.n	8001c5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7fe fcb0 	bl	8000544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	f000 fb64 	bl	80022c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e049      	b.n	8001d0c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d106      	bne.n	8001c92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f841 	bl	8001d14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2202      	movs	r2, #2
 8001c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	f000 fb0d 	bl	80022c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d109      	bne.n	8001d4c <HAL_TIM_PWM_Start+0x24>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	bf14      	ite	ne
 8001d44:	2301      	movne	r3, #1
 8001d46:	2300      	moveq	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	e03c      	b.n	8001dc6 <HAL_TIM_PWM_Start+0x9e>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d109      	bne.n	8001d66 <HAL_TIM_PWM_Start+0x3e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	bf14      	ite	ne
 8001d5e:	2301      	movne	r3, #1
 8001d60:	2300      	moveq	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	e02f      	b.n	8001dc6 <HAL_TIM_PWM_Start+0x9e>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d109      	bne.n	8001d80 <HAL_TIM_PWM_Start+0x58>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	bf14      	ite	ne
 8001d78:	2301      	movne	r3, #1
 8001d7a:	2300      	moveq	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	e022      	b.n	8001dc6 <HAL_TIM_PWM_Start+0x9e>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d109      	bne.n	8001d9a <HAL_TIM_PWM_Start+0x72>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	bf14      	ite	ne
 8001d92:	2301      	movne	r3, #1
 8001d94:	2300      	moveq	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	e015      	b.n	8001dc6 <HAL_TIM_PWM_Start+0x9e>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2b10      	cmp	r3, #16
 8001d9e:	d109      	bne.n	8001db4 <HAL_TIM_PWM_Start+0x8c>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	bf14      	ite	ne
 8001dac:	2301      	movne	r3, #1
 8001dae:	2300      	moveq	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	e008      	b.n	8001dc6 <HAL_TIM_PWM_Start+0x9e>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	bf14      	ite	ne
 8001dc0:	2301      	movne	r3, #1
 8001dc2:	2300      	moveq	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e07e      	b.n	8001ecc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d104      	bne.n	8001dde <HAL_TIM_PWM_Start+0xb6>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ddc:	e023      	b.n	8001e26 <HAL_TIM_PWM_Start+0xfe>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d104      	bne.n	8001dee <HAL_TIM_PWM_Start+0xc6>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2202      	movs	r2, #2
 8001de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dec:	e01b      	b.n	8001e26 <HAL_TIM_PWM_Start+0xfe>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d104      	bne.n	8001dfe <HAL_TIM_PWM_Start+0xd6>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dfc:	e013      	b.n	8001e26 <HAL_TIM_PWM_Start+0xfe>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b0c      	cmp	r3, #12
 8001e02:	d104      	bne.n	8001e0e <HAL_TIM_PWM_Start+0xe6>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001e0c:	e00b      	b.n	8001e26 <HAL_TIM_PWM_Start+0xfe>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b10      	cmp	r3, #16
 8001e12:	d104      	bne.n	8001e1e <HAL_TIM_PWM_Start+0xf6>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e1c:	e003      	b.n	8001e26 <HAL_TIM_PWM_Start+0xfe>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2202      	movs	r2, #2
 8001e22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	6839      	ldr	r1, [r7, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fdf8 	bl	8002a24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a26      	ldr	r2, [pc, #152]	@ (8001ed4 <HAL_TIM_PWM_Start+0x1ac>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d009      	beq.n	8001e52 <HAL_TIM_PWM_Start+0x12a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a25      	ldr	r2, [pc, #148]	@ (8001ed8 <HAL_TIM_PWM_Start+0x1b0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d004      	beq.n	8001e52 <HAL_TIM_PWM_Start+0x12a>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a23      	ldr	r2, [pc, #140]	@ (8001edc <HAL_TIM_PWM_Start+0x1b4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d101      	bne.n	8001e56 <HAL_TIM_PWM_Start+0x12e>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_TIM_PWM_Start+0x130>
 8001e56:	2300      	movs	r3, #0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e6a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a18      	ldr	r2, [pc, #96]	@ (8001ed4 <HAL_TIM_PWM_Start+0x1ac>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d009      	beq.n	8001e8a <HAL_TIM_PWM_Start+0x162>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e7e:	d004      	beq.n	8001e8a <HAL_TIM_PWM_Start+0x162>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a16      	ldr	r2, [pc, #88]	@ (8001ee0 <HAL_TIM_PWM_Start+0x1b8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d115      	bne.n	8001eb6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <HAL_TIM_PWM_Start+0x1bc>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b06      	cmp	r3, #6
 8001e9a:	d015      	beq.n	8001ec8 <HAL_TIM_PWM_Start+0x1a0>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea2:	d011      	beq.n	8001ec8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb4:	e008      	b.n	8001ec8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0201 	orr.w	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e000      	b.n	8001eca <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40012c00 	.word	0x40012c00
 8001ed8:	40014400 	.word	0x40014400
 8001edc:	40014800 	.word	0x40014800
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	00010007 	.word	0x00010007

08001ee8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e0ff      	b.n	8002106 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b14      	cmp	r3, #20
 8001f12:	f200 80f0 	bhi.w	80020f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001f16:	a201      	add	r2, pc, #4	@ (adr r2, 8001f1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1c:	08001f71 	.word	0x08001f71
 8001f20:	080020f7 	.word	0x080020f7
 8001f24:	080020f7 	.word	0x080020f7
 8001f28:	080020f7 	.word	0x080020f7
 8001f2c:	08001fb1 	.word	0x08001fb1
 8001f30:	080020f7 	.word	0x080020f7
 8001f34:	080020f7 	.word	0x080020f7
 8001f38:	080020f7 	.word	0x080020f7
 8001f3c:	08001ff3 	.word	0x08001ff3
 8001f40:	080020f7 	.word	0x080020f7
 8001f44:	080020f7 	.word	0x080020f7
 8001f48:	080020f7 	.word	0x080020f7
 8001f4c:	08002033 	.word	0x08002033
 8001f50:	080020f7 	.word	0x080020f7
 8001f54:	080020f7 	.word	0x080020f7
 8001f58:	080020f7 	.word	0x080020f7
 8001f5c:	08002075 	.word	0x08002075
 8001f60:	080020f7 	.word	0x080020f7
 8001f64:	080020f7 	.word	0x080020f7
 8001f68:	080020f7 	.word	0x080020f7
 8001f6c:	080020b5 	.word	0x080020b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fa1e 	bl	80023b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699a      	ldr	r2, [r3, #24]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0208 	orr.w	r2, r2, #8
 8001f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699a      	ldr	r2, [r3, #24]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0204 	bic.w	r2, r2, #4
 8001f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6999      	ldr	r1, [r3, #24]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	619a      	str	r2, [r3, #24]
      break;
 8001fae:	e0a5      	b.n	80020fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 fa7a 	bl	80024b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6999      	ldr	r1, [r3, #24]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	021a      	lsls	r2, r3, #8
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	619a      	str	r2, [r3, #24]
      break;
 8001ff0:	e084      	b.n	80020fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68b9      	ldr	r1, [r7, #8]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fad3 	bl	80025a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	69da      	ldr	r2, [r3, #28]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 0208 	orr.w	r2, r2, #8
 800200c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	69da      	ldr	r2, [r3, #28]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0204 	bic.w	r2, r2, #4
 800201c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	69d9      	ldr	r1, [r3, #28]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	61da      	str	r2, [r3, #28]
      break;
 8002030:	e064      	b.n	80020fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68b9      	ldr	r1, [r7, #8]
 8002038:	4618      	mov	r0, r3
 800203a:	f000 fb2b 	bl	8002694 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	69da      	ldr	r2, [r3, #28]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800204c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	69da      	ldr	r2, [r3, #28]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800205c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	69d9      	ldr	r1, [r3, #28]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	021a      	lsls	r2, r3, #8
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	61da      	str	r2, [r3, #28]
      break;
 8002072:	e043      	b.n	80020fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fb84 	bl	8002788 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0208 	orr.w	r2, r2, #8
 800208e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0204 	bic.w	r2, r2, #4
 800209e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80020b2:	e023      	b.n	80020fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 fbbc 	bl	8002838 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020de:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	021a      	lsls	r2, r3, #8
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80020f4:	e002      	b.n	80020fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	75fb      	strb	r3, [r7, #23]
      break;
 80020fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002104:	7dfb      	ldrb	r3, [r7, #23]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop

08002110 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_TIM_ConfigClockSource+0x1c>
 8002128:	2302      	movs	r3, #2
 800212a:	e0c2      	b.n	80022b2 <HAL_TIM_ConfigClockSource+0x1a2>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800214a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800214e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002156:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a55      	ldr	r2, [pc, #340]	@ (80022bc <HAL_TIM_ConfigClockSource+0x1ac>)
 8002166:	4293      	cmp	r3, r2
 8002168:	f000 808d 	beq.w	8002286 <HAL_TIM_ConfigClockSource+0x176>
 800216c:	4a53      	ldr	r2, [pc, #332]	@ (80022bc <HAL_TIM_ConfigClockSource+0x1ac>)
 800216e:	4293      	cmp	r3, r2
 8002170:	f200 8092 	bhi.w	8002298 <HAL_TIM_ConfigClockSource+0x188>
 8002174:	4a52      	ldr	r2, [pc, #328]	@ (80022c0 <HAL_TIM_ConfigClockSource+0x1b0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	f000 8085 	beq.w	8002286 <HAL_TIM_ConfigClockSource+0x176>
 800217c:	4a50      	ldr	r2, [pc, #320]	@ (80022c0 <HAL_TIM_ConfigClockSource+0x1b0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	f200 808a 	bhi.w	8002298 <HAL_TIM_ConfigClockSource+0x188>
 8002184:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002188:	d03a      	beq.n	8002200 <HAL_TIM_ConfigClockSource+0xf0>
 800218a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800218e:	f200 8083 	bhi.w	8002298 <HAL_TIM_ConfigClockSource+0x188>
 8002192:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002196:	f000 8082 	beq.w	800229e <HAL_TIM_ConfigClockSource+0x18e>
 800219a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800219e:	d87b      	bhi.n	8002298 <HAL_TIM_ConfigClockSource+0x188>
 80021a0:	2b70      	cmp	r3, #112	@ 0x70
 80021a2:	d016      	beq.n	80021d2 <HAL_TIM_ConfigClockSource+0xc2>
 80021a4:	2b70      	cmp	r3, #112	@ 0x70
 80021a6:	d877      	bhi.n	8002298 <HAL_TIM_ConfigClockSource+0x188>
 80021a8:	2b60      	cmp	r3, #96	@ 0x60
 80021aa:	d04c      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0x136>
 80021ac:	2b60      	cmp	r3, #96	@ 0x60
 80021ae:	d873      	bhi.n	8002298 <HAL_TIM_ConfigClockSource+0x188>
 80021b0:	2b50      	cmp	r3, #80	@ 0x50
 80021b2:	d038      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0x116>
 80021b4:	2b50      	cmp	r3, #80	@ 0x50
 80021b6:	d86f      	bhi.n	8002298 <HAL_TIM_ConfigClockSource+0x188>
 80021b8:	2b40      	cmp	r3, #64	@ 0x40
 80021ba:	d054      	beq.n	8002266 <HAL_TIM_ConfigClockSource+0x156>
 80021bc:	2b40      	cmp	r3, #64	@ 0x40
 80021be:	d86b      	bhi.n	8002298 <HAL_TIM_ConfigClockSource+0x188>
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	d060      	beq.n	8002286 <HAL_TIM_ConfigClockSource+0x176>
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	d867      	bhi.n	8002298 <HAL_TIM_ConfigClockSource+0x188>
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d05c      	beq.n	8002286 <HAL_TIM_ConfigClockSource+0x176>
 80021cc:	2b10      	cmp	r3, #16
 80021ce:	d05a      	beq.n	8002286 <HAL_TIM_ConfigClockSource+0x176>
 80021d0:	e062      	b.n	8002298 <HAL_TIM_ConfigClockSource+0x188>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021e2:	f000 fbff 	bl	80029e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80021f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	609a      	str	r2, [r3, #8]
      break;
 80021fe:	e04f      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x190>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002210:	f000 fbe8 	bl	80029e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002222:	609a      	str	r2, [r3, #8]
      break;
 8002224:	e03c      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x190>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002232:	461a      	mov	r2, r3
 8002234:	f000 fb5a 	bl	80028ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2150      	movs	r1, #80	@ 0x50
 800223e:	4618      	mov	r0, r3
 8002240:	f000 fbb3 	bl	80029aa <TIM_ITRx_SetConfig>
      break;
 8002244:	e02c      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x190>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002252:	461a      	mov	r2, r3
 8002254:	f000 fb79 	bl	800294a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2160      	movs	r1, #96	@ 0x60
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fba3 	bl	80029aa <TIM_ITRx_SetConfig>
      break;
 8002264:	e01c      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x190>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002272:	461a      	mov	r2, r3
 8002274:	f000 fb3a 	bl	80028ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2140      	movs	r1, #64	@ 0x40
 800227e:	4618      	mov	r0, r3
 8002280:	f000 fb93 	bl	80029aa <TIM_ITRx_SetConfig>
      break;
 8002284:	e00c      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x190>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4619      	mov	r1, r3
 8002290:	4610      	mov	r0, r2
 8002292:	f000 fb8a 	bl	80029aa <TIM_ITRx_SetConfig>
      break;
 8002296:	e003      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x190>
    }

    default:
      status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
      break;
 800229c:	e000      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x190>
      break;
 800229e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	00100040 	.word	0x00100040
 80022c0:	00100030 	.word	0x00100030

080022c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a34      	ldr	r2, [pc, #208]	@ (80023a8 <TIM_Base_SetConfig+0xe4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d007      	beq.n	80022ec <TIM_Base_SetConfig+0x28>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e2:	d003      	beq.n	80022ec <TIM_Base_SetConfig+0x28>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a31      	ldr	r2, [pc, #196]	@ (80023ac <TIM_Base_SetConfig+0xe8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d108      	bne.n	80022fe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a29      	ldr	r2, [pc, #164]	@ (80023a8 <TIM_Base_SetConfig+0xe4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00f      	beq.n	8002326 <TIM_Base_SetConfig+0x62>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800230c:	d00b      	beq.n	8002326 <TIM_Base_SetConfig+0x62>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a26      	ldr	r2, [pc, #152]	@ (80023ac <TIM_Base_SetConfig+0xe8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d007      	beq.n	8002326 <TIM_Base_SetConfig+0x62>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a25      	ldr	r2, [pc, #148]	@ (80023b0 <TIM_Base_SetConfig+0xec>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d003      	beq.n	8002326 <TIM_Base_SetConfig+0x62>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a24      	ldr	r2, [pc, #144]	@ (80023b4 <TIM_Base_SetConfig+0xf0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d108      	bne.n	8002338 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800232c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4313      	orrs	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a12      	ldr	r2, [pc, #72]	@ (80023a8 <TIM_Base_SetConfig+0xe4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d007      	beq.n	8002374 <TIM_Base_SetConfig+0xb0>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a12      	ldr	r2, [pc, #72]	@ (80023b0 <TIM_Base_SetConfig+0xec>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d003      	beq.n	8002374 <TIM_Base_SetConfig+0xb0>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a11      	ldr	r2, [pc, #68]	@ (80023b4 <TIM_Base_SetConfig+0xf0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d103      	bne.n	800237c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b01      	cmp	r3, #1
 800238c:	d105      	bne.n	800239a <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f023 0201 	bic.w	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	611a      	str	r2, [r3, #16]
  }
}
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40012c00 	.word	0x40012c00
 80023ac:	40000400 	.word	0x40000400
 80023b0:	40014400 	.word	0x40014400
 80023b4:	40014800 	.word	0x40014800

080023b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f023 0201 	bic.w	r2, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f023 0302 	bic.w	r3, r3, #2
 8002404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a24      	ldr	r2, [pc, #144]	@ (80024a4 <TIM_OC1_SetConfig+0xec>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d007      	beq.n	8002428 <TIM_OC1_SetConfig+0x70>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a23      	ldr	r2, [pc, #140]	@ (80024a8 <TIM_OC1_SetConfig+0xf0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d003      	beq.n	8002428 <TIM_OC1_SetConfig+0x70>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a22      	ldr	r2, [pc, #136]	@ (80024ac <TIM_OC1_SetConfig+0xf4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d10c      	bne.n	8002442 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f023 0308 	bic.w	r3, r3, #8
 800242e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	4313      	orrs	r3, r2
 8002438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f023 0304 	bic.w	r3, r3, #4
 8002440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a17      	ldr	r2, [pc, #92]	@ (80024a4 <TIM_OC1_SetConfig+0xec>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d007      	beq.n	800245a <TIM_OC1_SetConfig+0xa2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a16      	ldr	r2, [pc, #88]	@ (80024a8 <TIM_OC1_SetConfig+0xf0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d003      	beq.n	800245a <TIM_OC1_SetConfig+0xa2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a15      	ldr	r2, [pc, #84]	@ (80024ac <TIM_OC1_SetConfig+0xf4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d111      	bne.n	800247e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	621a      	str	r2, [r3, #32]
}
 8002498:	bf00      	nop
 800249a:	371c      	adds	r7, #28
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40014400 	.word	0x40014400
 80024ac:	40014800 	.word	0x40014800

080024b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f023 0210 	bic.w	r2, r3, #16
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f023 0320 	bic.w	r3, r3, #32
 80024fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4313      	orrs	r3, r2
 800250a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a22      	ldr	r2, [pc, #136]	@ (8002598 <TIM_OC2_SetConfig+0xe8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d10d      	bne.n	8002530 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800251a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800252e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a19      	ldr	r2, [pc, #100]	@ (8002598 <TIM_OC2_SetConfig+0xe8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d007      	beq.n	8002548 <TIM_OC2_SetConfig+0x98>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a18      	ldr	r2, [pc, #96]	@ (800259c <TIM_OC2_SetConfig+0xec>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d003      	beq.n	8002548 <TIM_OC2_SetConfig+0x98>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a17      	ldr	r2, [pc, #92]	@ (80025a0 <TIM_OC2_SetConfig+0xf0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d113      	bne.n	8002570 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800254e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002556:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	621a      	str	r2, [r3, #32]
}
 800258a:	bf00      	nop
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40012c00 	.word	0x40012c00
 800259c:	40014400 	.word	0x40014400
 80025a0:	40014800 	.word	0x40014800

080025a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0303 	bic.w	r3, r3, #3
 80025de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80025f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a21      	ldr	r2, [pc, #132]	@ (8002688 <TIM_OC3_SetConfig+0xe4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d10d      	bne.n	8002622 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800260c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a18      	ldr	r2, [pc, #96]	@ (8002688 <TIM_OC3_SetConfig+0xe4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d007      	beq.n	800263a <TIM_OC3_SetConfig+0x96>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a17      	ldr	r2, [pc, #92]	@ (800268c <TIM_OC3_SetConfig+0xe8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d003      	beq.n	800263a <TIM_OC3_SetConfig+0x96>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a16      	ldr	r2, [pc, #88]	@ (8002690 <TIM_OC3_SetConfig+0xec>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d113      	bne.n	8002662 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	621a      	str	r2, [r3, #32]
}
 800267c:	bf00      	nop
 800267e:	371c      	adds	r7, #28
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	40012c00 	.word	0x40012c00
 800268c:	40014400 	.word	0x40014400
 8002690:	40014800 	.word	0x40014800

08002694 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	021b      	lsls	r3, r3, #8
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80026e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	031b      	lsls	r3, r3, #12
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a22      	ldr	r2, [pc, #136]	@ (800277c <TIM_OC4_SetConfig+0xe8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d10d      	bne.n	8002714 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80026fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	031b      	lsls	r3, r3, #12
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002712:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a19      	ldr	r2, [pc, #100]	@ (800277c <TIM_OC4_SetConfig+0xe8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d007      	beq.n	800272c <TIM_OC4_SetConfig+0x98>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a18      	ldr	r2, [pc, #96]	@ (8002780 <TIM_OC4_SetConfig+0xec>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d003      	beq.n	800272c <TIM_OC4_SetConfig+0x98>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a17      	ldr	r2, [pc, #92]	@ (8002784 <TIM_OC4_SetConfig+0xf0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d113      	bne.n	8002754 <TIM_OC4_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002732:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800273a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	019b      	lsls	r3, r3, #6
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	019b      	lsls	r3, r3, #6
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	621a      	str	r2, [r3, #32]
}
 800276e:	bf00      	nop
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40012c00 	.word	0x40012c00
 8002780:	40014400 	.word	0x40014400
 8002784:	40014800 	.word	0x40014800

08002788 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80027cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	041b      	lsls	r3, r3, #16
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a13      	ldr	r2, [pc, #76]	@ (800282c <TIM_OC5_SetConfig+0xa4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d007      	beq.n	80027f2 <TIM_OC5_SetConfig+0x6a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a12      	ldr	r2, [pc, #72]	@ (8002830 <TIM_OC5_SetConfig+0xa8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d003      	beq.n	80027f2 <TIM_OC5_SetConfig+0x6a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a11      	ldr	r2, [pc, #68]	@ (8002834 <TIM_OC5_SetConfig+0xac>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d109      	bne.n	8002806 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	4313      	orrs	r3, r2
 8002804:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	621a      	str	r2, [r3, #32]
}
 8002820:	bf00      	nop
 8002822:	371c      	adds	r7, #28
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	40012c00 	.word	0x40012c00
 8002830:	40014400 	.word	0x40014400
 8002834:	40014800 	.word	0x40014800

08002838 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800285e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002866:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800286a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800287e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	051b      	lsls	r3, r3, #20
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a14      	ldr	r2, [pc, #80]	@ (80028e0 <TIM_OC6_SetConfig+0xa8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d007      	beq.n	80028a4 <TIM_OC6_SetConfig+0x6c>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a13      	ldr	r2, [pc, #76]	@ (80028e4 <TIM_OC6_SetConfig+0xac>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d003      	beq.n	80028a4 <TIM_OC6_SetConfig+0x6c>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a12      	ldr	r2, [pc, #72]	@ (80028e8 <TIM_OC6_SetConfig+0xb0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d109      	bne.n	80028b8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	029b      	lsls	r3, r3, #10
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	621a      	str	r2, [r3, #32]
}
 80028d2:	bf00      	nop
 80028d4:	371c      	adds	r7, #28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40014400 	.word	0x40014400
 80028e8:	40014800 	.word	0x40014800

080028ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	f023 0201 	bic.w	r2, r3, #1
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f023 030a 	bic.w	r3, r3, #10
 8002928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4313      	orrs	r3, r2
 8002930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	621a      	str	r2, [r3, #32]
}
 800293e:	bf00      	nop
 8002940:	371c      	adds	r7, #28
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800294a:	b480      	push	{r7}
 800294c:	b087      	sub	sp, #28
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	f023 0210 	bic.w	r2, r3, #16
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002974:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	031b      	lsls	r3, r3, #12
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002986:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	4313      	orrs	r3, r2
 8002990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	621a      	str	r2, [r3, #32]
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b085      	sub	sp, #20
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80029c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f043 0307 	orr.w	r3, r3, #7
 80029d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	609a      	str	r2, [r3, #8]
}
 80029d8:	bf00      	nop
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	021a      	lsls	r2, r3, #8
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	609a      	str	r2, [r3, #8]
}
 8002a18:	bf00      	nop
 8002a1a:	371c      	adds	r7, #28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	2201      	movs	r2, #1
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a1a      	ldr	r2, [r3, #32]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	401a      	ands	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a1a      	ldr	r2, [r3, #32]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	621a      	str	r2, [r3, #32]
}
 8002a62:	bf00      	nop
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e051      	b.n	8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a22      	ldr	r2, [pc, #136]	@ (8002b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d108      	bne.n	8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002ab8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a14      	ldr	r2, [pc, #80]	@ (8002b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d009      	beq.n	8002b00 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af4:	d004      	beq.n	8002b00 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a10      	ldr	r2, [pc, #64]	@ (8002b3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d10c      	bne.n	8002b1a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	40012c00 	.word	0x40012c00
 8002b3c:	40000400 	.word	0x40000400

08002b40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e06e      	b.n	8002c3a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	041b      	lsls	r3, r3, #16
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a17      	ldr	r2, [pc, #92]	@ (8002c48 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d11c      	bne.n	8002c28 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf8:	051b      	lsls	r3, r3, #20
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40012c00 	.word	0x40012c00

08002c4c <memset>:
 8002c4c:	4402      	add	r2, r0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d100      	bne.n	8002c56 <memset+0xa>
 8002c54:	4770      	bx	lr
 8002c56:	f803 1b01 	strb.w	r1, [r3], #1
 8002c5a:	e7f9      	b.n	8002c50 <memset+0x4>

08002c5c <__libc_init_array>:
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	4d0d      	ldr	r5, [pc, #52]	@ (8002c94 <__libc_init_array+0x38>)
 8002c60:	2600      	movs	r6, #0
 8002c62:	4c0d      	ldr	r4, [pc, #52]	@ (8002c98 <__libc_init_array+0x3c>)
 8002c64:	1b64      	subs	r4, r4, r5
 8002c66:	10a4      	asrs	r4, r4, #2
 8002c68:	42a6      	cmp	r6, r4
 8002c6a:	d109      	bne.n	8002c80 <__libc_init_array+0x24>
 8002c6c:	4d0b      	ldr	r5, [pc, #44]	@ (8002c9c <__libc_init_array+0x40>)
 8002c6e:	2600      	movs	r6, #0
 8002c70:	4c0b      	ldr	r4, [pc, #44]	@ (8002ca0 <__libc_init_array+0x44>)
 8002c72:	f000 f817 	bl	8002ca4 <_init>
 8002c76:	1b64      	subs	r4, r4, r5
 8002c78:	10a4      	asrs	r4, r4, #2
 8002c7a:	42a6      	cmp	r6, r4
 8002c7c:	d105      	bne.n	8002c8a <__libc_init_array+0x2e>
 8002c7e:	bd70      	pop	{r4, r5, r6, pc}
 8002c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c84:	3601      	adds	r6, #1
 8002c86:	4798      	blx	r3
 8002c88:	e7ee      	b.n	8002c68 <__libc_init_array+0xc>
 8002c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c8e:	3601      	adds	r6, #1
 8002c90:	4798      	blx	r3
 8002c92:	e7f2      	b.n	8002c7a <__libc_init_array+0x1e>
 8002c94:	08002cc4 	.word	0x08002cc4
 8002c98:	08002cc4 	.word	0x08002cc4
 8002c9c:	08002cc4 	.word	0x08002cc4
 8002ca0:	08002cc8 	.word	0x08002cc8

08002ca4 <_init>:
 8002ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca6:	bf00      	nop
 8002ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002caa:	bc08      	pop	{r3}
 8002cac:	469e      	mov	lr, r3
 8002cae:	4770      	bx	lr

08002cb0 <_fini>:
 8002cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb2:	bf00      	nop
 8002cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb6:	bc08      	pop	{r3}
 8002cb8:	469e      	mov	lr, r3
 8002cba:	4770      	bx	lr
