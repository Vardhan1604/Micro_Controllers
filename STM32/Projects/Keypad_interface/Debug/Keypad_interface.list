
Keypad_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000015c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c98  0800015c  0800015c  0000115c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002df4  08002df4  00003df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e24  08002e24  00004010  2**0
                  CONTENTS
  4 .ARM          00000008  08002e24  08002e24  00003e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e2c  08002e2c  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e2c  08002e2c  00003e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e30  08002e30  00003e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002e34  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000010  08002e44  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002e44  000040a4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2c2  00000000  00000000  00004046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e11  00000000  00000000  0000f308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  00011120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007bc  00000000  00000000  00011b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002065d  00000000  00000000  0001231c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e02a  00000000  00000000  00032979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9fc9  00000000  00000000  000409a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a96c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f8  00000000  00000000  0010a9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800015c <__do_global_dtors_aux>:
 800015c:	b510      	push	{r4, lr}
 800015e:	4c05      	ldr	r4, [pc, #20]	@ (8000174 <__do_global_dtors_aux+0x18>)
 8000160:	7823      	ldrb	r3, [r4, #0]
 8000162:	b933      	cbnz	r3, 8000172 <__do_global_dtors_aux+0x16>
 8000164:	4b04      	ldr	r3, [pc, #16]	@ (8000178 <__do_global_dtors_aux+0x1c>)
 8000166:	b113      	cbz	r3, 800016e <__do_global_dtors_aux+0x12>
 8000168:	4804      	ldr	r0, [pc, #16]	@ (800017c <__do_global_dtors_aux+0x20>)
 800016a:	f3af 8000 	nop.w
 800016e:	2301      	movs	r3, #1
 8000170:	7023      	strb	r3, [r4, #0]
 8000172:	bd10      	pop	{r4, pc}
 8000174:	20000010 	.word	0x20000010
 8000178:	00000000 	.word	0x00000000
 800017c:	08002ddc 	.word	0x08002ddc

08000180 <frame_dummy>:
 8000180:	b508      	push	{r3, lr}
 8000182:	4b03      	ldr	r3, [pc, #12]	@ (8000190 <frame_dummy+0x10>)
 8000184:	b11b      	cbz	r3, 800018e <frame_dummy+0xe>
 8000186:	4903      	ldr	r1, [pc, #12]	@ (8000194 <frame_dummy+0x14>)
 8000188:	4803      	ldr	r0, [pc, #12]	@ (8000198 <frame_dummy+0x18>)
 800018a:	f3af 8000 	nop.w
 800018e:	bd08      	pop	{r3, pc}
 8000190:	00000000 	.word	0x00000000
 8000194:	20000014 	.word	0x20000014
 8000198:	08002ddc 	.word	0x08002ddc

0800019c <strcmp>:
 800019c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001a4:	2a01      	cmp	r2, #1
 80001a6:	bf28      	it	cs
 80001a8:	429a      	cmpcs	r2, r3
 80001aa:	d0f7      	beq.n	800019c <strcmp>
 80001ac:	1ad0      	subs	r0, r2, r3
 80001ae:	4770      	bx	lr

080001b0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to your setup

void lcd_send_cmd (char cmd)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b086      	sub	sp, #24
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	f023 030f 	bic.w	r3, r3, #15
 80001c0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	011b      	lsls	r3, r3, #4
 80001c6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80001c8:	7bfb      	ldrb	r3, [r7, #15]
 80001ca:	f043 030c 	orr.w	r3, r3, #12
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80001d2:	7bfb      	ldrb	r3, [r7, #15]
 80001d4:	f043 0308 	orr.w	r3, r3, #8
 80001d8:	b2db      	uxtb	r3, r3
 80001da:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80001dc:	7bbb      	ldrb	r3, [r7, #14]
 80001de:	f043 030c 	orr.w	r3, r3, #12
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80001e6:	7bbb      	ldrb	r3, [r7, #14]
 80001e8:	f043 0308 	orr.w	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001f0:	f107 0208 	add.w	r2, r7, #8
 80001f4:	2364      	movs	r3, #100	@ 0x64
 80001f6:	9300      	str	r3, [sp, #0]
 80001f8:	2304      	movs	r3, #4
 80001fa:	214e      	movs	r1, #78	@ 0x4e
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <lcd_send_cmd+0x5c>)
 80001fe:	f001 fa05 	bl	800160c <HAL_I2C_Master_Transmit>
}
 8000202:	bf00      	nop
 8000204:	3710      	adds	r7, #16
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	2000002c 	.word	0x2000002c

08000210 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af02      	add	r7, sp, #8
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f023 030f 	bic.w	r3, r3, #15
 8000220:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	011b      	lsls	r3, r3, #4
 8000226:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000228:	7bfb      	ldrb	r3, [r7, #15]
 800022a:	f043 030d 	orr.w	r3, r3, #13
 800022e:	b2db      	uxtb	r3, r3
 8000230:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000232:	7bfb      	ldrb	r3, [r7, #15]
 8000234:	f043 0309 	orr.w	r3, r3, #9
 8000238:	b2db      	uxtb	r3, r3
 800023a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800023c:	7bbb      	ldrb	r3, [r7, #14]
 800023e:	f043 030d 	orr.w	r3, r3, #13
 8000242:	b2db      	uxtb	r3, r3
 8000244:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000246:	7bbb      	ldrb	r3, [r7, #14]
 8000248:	f043 0309 	orr.w	r3, r3, #9
 800024c:	b2db      	uxtb	r3, r3
 800024e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000250:	f107 0208 	add.w	r2, r7, #8
 8000254:	2364      	movs	r3, #100	@ 0x64
 8000256:	9300      	str	r3, [sp, #0]
 8000258:	2304      	movs	r3, #4
 800025a:	214e      	movs	r1, #78	@ 0x4e
 800025c:	4803      	ldr	r0, [pc, #12]	@ (800026c <lcd_send_data+0x5c>)
 800025e:	f001 f9d5 	bl	800160c <HAL_I2C_Master_Transmit>
}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	2000002c 	.word	0x2000002c

08000270 <lcd_clear>:

void lcd_clear (void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000274:	2001      	movs	r0, #1
 8000276:	f7ff ff9b 	bl	80001b0 <lcd_send_cmd>
	HAL_Delay(10);
 800027a:	200a      	movs	r0, #10
 800027c:	f000 fdf0 	bl	8000e60 <HAL_Delay>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}

08000284 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	6039      	str	r1, [r7, #0]
    switch (row)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d003      	beq.n	800029c <lcd_put_cur+0x18>
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b01      	cmp	r3, #1
 8000298:	d005      	beq.n	80002a6 <lcd_put_cur+0x22>
 800029a:	e009      	b.n	80002b0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002a2:	603b      	str	r3, [r7, #0]
            break;
 80002a4:	e004      	b.n	80002b0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80002ac:	603b      	str	r3, [r7, #0]
            break;
 80002ae:	bf00      	nop
    }

    lcd_send_cmd (col);
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	4618      	mov	r0, r3
 80002b6:	f7ff ff7b 	bl	80001b0 <lcd_send_cmd>
}
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <lcd_init>:


void lcd_init (void)
{
 80002c2:	b580      	push	{r7, lr}
 80002c4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80002c6:	2032      	movs	r0, #50	@ 0x32
 80002c8:	f000 fdca 	bl	8000e60 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002cc:	2030      	movs	r0, #48	@ 0x30
 80002ce:	f7ff ff6f 	bl	80001b0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80002d2:	2005      	movs	r0, #5
 80002d4:	f000 fdc4 	bl	8000e60 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002d8:	2030      	movs	r0, #48	@ 0x30
 80002da:	f7ff ff69 	bl	80001b0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80002de:	2001      	movs	r0, #1
 80002e0:	f000 fdbe 	bl	8000e60 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002e4:	2030      	movs	r0, #48	@ 0x30
 80002e6:	f7ff ff63 	bl	80001b0 <lcd_send_cmd>
	HAL_Delay(10);
 80002ea:	200a      	movs	r0, #10
 80002ec:	f000 fdb8 	bl	8000e60 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80002f0:	2020      	movs	r0, #32
 80002f2:	f7ff ff5d 	bl	80001b0 <lcd_send_cmd>
	HAL_Delay(10);
 80002f6:	200a      	movs	r0, #10
 80002f8:	f000 fdb2 	bl	8000e60 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80002fc:	2028      	movs	r0, #40	@ 0x28
 80002fe:	f7ff ff57 	bl	80001b0 <lcd_send_cmd>
	HAL_Delay(1);
 8000302:	2001      	movs	r0, #1
 8000304:	f000 fdac 	bl	8000e60 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000308:	2008      	movs	r0, #8
 800030a:	f7ff ff51 	bl	80001b0 <lcd_send_cmd>
	HAL_Delay(1);
 800030e:	2001      	movs	r0, #1
 8000310:	f000 fda6 	bl	8000e60 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000314:	2001      	movs	r0, #1
 8000316:	f7ff ff4b 	bl	80001b0 <lcd_send_cmd>
	HAL_Delay(1);
 800031a:	2001      	movs	r0, #1
 800031c:	f000 fda0 	bl	8000e60 <HAL_Delay>
	HAL_Delay(1);
 8000320:	2001      	movs	r0, #1
 8000322:	f000 fd9d 	bl	8000e60 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000326:	2006      	movs	r0, #6
 8000328:	f7ff ff42 	bl	80001b0 <lcd_send_cmd>
	HAL_Delay(1);
 800032c:	2001      	movs	r0, #1
 800032e:	f000 fd97 	bl	8000e60 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000332:	200c      	movs	r0, #12
 8000334:	f7ff ff3c 	bl	80001b0 <lcd_send_cmd>
}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}

0800033c <lcd_send_string>:

void lcd_send_string (unsigned char *str)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000344:	e006      	b.n	8000354 <lcd_send_string+0x18>
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	1c5a      	adds	r2, r3, #1
 800034a:	607a      	str	r2, [r7, #4]
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	4618      	mov	r0, r3
 8000350:	f7ff ff5e 	bl	8000210 <lcd_send_data>
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d1f4      	bne.n	8000346 <lcd_send_string+0xa>
}
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <keypad_press>:
const char* pass = "1234"; // Example password

unsigned char num;

char keypad_press()
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB,R1_Pin|R4_Pin|R2_Pin|R3_Pin, GPIO_PIN_SET);
 800036c:	2201      	movs	r2, #1
 800036e:	f246 0141 	movw	r1, #24641	@ 0x6041
 8000372:	488c      	ldr	r0, [pc, #560]	@ (80005a4 <keypad_press+0x23c>)
 8000374:	f001 f85a 	bl	800142c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,R1_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	@ 0x40
 800037c:	4889      	ldr	r0, [pc, #548]	@ (80005a4 <keypad_press+0x23c>)
 800037e:	f001 f855 	bl	800142c <HAL_GPIO_WritePin>
	if((HAL_GPIO_ReadPin(GPIOB, C1_Pin)== 0)){HAL_Delay(250); num = 'D';}
 8000382:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000386:	4887      	ldr	r0, [pc, #540]	@ (80005a4 <keypad_press+0x23c>)
 8000388:	f001 f838 	bl	80013fc <HAL_GPIO_ReadPin>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d105      	bne.n	800039e <keypad_press+0x36>
 8000392:	20fa      	movs	r0, #250	@ 0xfa
 8000394:	f000 fd64 	bl	8000e60 <HAL_Delay>
 8000398:	4b83      	ldr	r3, [pc, #524]	@ (80005a8 <keypad_press+0x240>)
 800039a:	2244      	movs	r2, #68	@ 0x44
 800039c:	701a      	strb	r2, [r3, #0]
	if((HAL_GPIO_ReadPin(GPIOB, C2_Pin)== 0)){HAL_Delay(250); num = 'c';}
 800039e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003a2:	4880      	ldr	r0, [pc, #512]	@ (80005a4 <keypad_press+0x23c>)
 80003a4:	f001 f82a 	bl	80013fc <HAL_GPIO_ReadPin>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d105      	bne.n	80003ba <keypad_press+0x52>
 80003ae:	20fa      	movs	r0, #250	@ 0xfa
 80003b0:	f000 fd56 	bl	8000e60 <HAL_Delay>
 80003b4:	4b7c      	ldr	r3, [pc, #496]	@ (80005a8 <keypad_press+0x240>)
 80003b6:	2263      	movs	r2, #99	@ 0x63
 80003b8:	701a      	strb	r2, [r3, #0]
	if((HAL_GPIO_ReadPin(GPIOA, C3_Pin)== 0)){HAL_Delay(250); num = 'B';}
 80003ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003be:	487b      	ldr	r0, [pc, #492]	@ (80005ac <keypad_press+0x244>)
 80003c0:	f001 f81c 	bl	80013fc <HAL_GPIO_ReadPin>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d105      	bne.n	80003d6 <keypad_press+0x6e>
 80003ca:	20fa      	movs	r0, #250	@ 0xfa
 80003cc:	f000 fd48 	bl	8000e60 <HAL_Delay>
 80003d0:	4b75      	ldr	r3, [pc, #468]	@ (80005a8 <keypad_press+0x240>)
 80003d2:	2242      	movs	r2, #66	@ 0x42
 80003d4:	701a      	strb	r2, [r3, #0]
	if((HAL_GPIO_ReadPin(GPIOA, C4_Pin)== 0)){HAL_Delay(250); num = 'A';}
 80003d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003da:	4874      	ldr	r0, [pc, #464]	@ (80005ac <keypad_press+0x244>)
 80003dc:	f001 f80e 	bl	80013fc <HAL_GPIO_ReadPin>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d105      	bne.n	80003f2 <keypad_press+0x8a>
 80003e6:	20fa      	movs	r0, #250	@ 0xfa
 80003e8:	f000 fd3a 	bl	8000e60 <HAL_Delay>
 80003ec:	4b6e      	ldr	r3, [pc, #440]	@ (80005a8 <keypad_press+0x240>)
 80003ee:	2241      	movs	r2, #65	@ 0x41
 80003f0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB,R1_Pin, GPIO_PIN_SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2140      	movs	r1, #64	@ 0x40
 80003f6:	486b      	ldr	r0, [pc, #428]	@ (80005a4 <keypad_press+0x23c>)
 80003f8:	f001 f818 	bl	800142c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,R2_Pin, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000402:	4868      	ldr	r0, [pc, #416]	@ (80005a4 <keypad_press+0x23c>)
 8000404:	f001 f812 	bl	800142c <HAL_GPIO_WritePin>
	if((HAL_GPIO_ReadPin(GPIOB, C1_Pin)== 0)){HAL_Delay(250);  num = '0';}
 8000408:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800040c:	4865      	ldr	r0, [pc, #404]	@ (80005a4 <keypad_press+0x23c>)
 800040e:	f000 fff5 	bl	80013fc <HAL_GPIO_ReadPin>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d105      	bne.n	8000424 <keypad_press+0xbc>
 8000418:	20fa      	movs	r0, #250	@ 0xfa
 800041a:	f000 fd21 	bl	8000e60 <HAL_Delay>
 800041e:	4b62      	ldr	r3, [pc, #392]	@ (80005a8 <keypad_press+0x240>)
 8000420:	2230      	movs	r2, #48	@ 0x30
 8000422:	701a      	strb	r2, [r3, #0]
	if((HAL_GPIO_ReadPin(GPIOB, C2_Pin)== 0)){HAL_Delay(250);  num = '8';}
 8000424:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000428:	485e      	ldr	r0, [pc, #376]	@ (80005a4 <keypad_press+0x23c>)
 800042a:	f000 ffe7 	bl	80013fc <HAL_GPIO_ReadPin>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d105      	bne.n	8000440 <keypad_press+0xd8>
 8000434:	20fa      	movs	r0, #250	@ 0xfa
 8000436:	f000 fd13 	bl	8000e60 <HAL_Delay>
 800043a:	4b5b      	ldr	r3, [pc, #364]	@ (80005a8 <keypad_press+0x240>)
 800043c:	2238      	movs	r2, #56	@ 0x38
 800043e:	701a      	strb	r2, [r3, #0]
	if((HAL_GPIO_ReadPin(GPIOA, C3_Pin)== 0)){HAL_Delay(250);  num = '5';}
 8000440:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000444:	4859      	ldr	r0, [pc, #356]	@ (80005ac <keypad_press+0x244>)
 8000446:	f000 ffd9 	bl	80013fc <HAL_GPIO_ReadPin>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d105      	bne.n	800045c <keypad_press+0xf4>
 8000450:	20fa      	movs	r0, #250	@ 0xfa
 8000452:	f000 fd05 	bl	8000e60 <HAL_Delay>
 8000456:	4b54      	ldr	r3, [pc, #336]	@ (80005a8 <keypad_press+0x240>)
 8000458:	2235      	movs	r2, #53	@ 0x35
 800045a:	701a      	strb	r2, [r3, #0]
	if((HAL_GPIO_ReadPin(GPIOA, C4_Pin)== 0)){HAL_Delay(250);  num = '2';}
 800045c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000460:	4852      	ldr	r0, [pc, #328]	@ (80005ac <keypad_press+0x244>)
 8000462:	f000 ffcb 	bl	80013fc <HAL_GPIO_ReadPin>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d105      	bne.n	8000478 <keypad_press+0x110>
 800046c:	20fa      	movs	r0, #250	@ 0xfa
 800046e:	f000 fcf7 	bl	8000e60 <HAL_Delay>
 8000472:	4b4d      	ldr	r3, [pc, #308]	@ (80005a8 <keypad_press+0x240>)
 8000474:	2232      	movs	r2, #50	@ 0x32
 8000476:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB,R2_Pin, GPIO_PIN_SET);
 8000478:	2201      	movs	r2, #1
 800047a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800047e:	4849      	ldr	r0, [pc, #292]	@ (80005a4 <keypad_press+0x23c>)
 8000480:	f000 ffd4 	bl	800142c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,R3_Pin, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800048a:	4846      	ldr	r0, [pc, #280]	@ (80005a4 <keypad_press+0x23c>)
 800048c:	f000 ffce 	bl	800142c <HAL_GPIO_WritePin>
	if((HAL_GPIO_ReadPin(GPIOB, C1_Pin)== 0)){HAL_Delay(250);  num = '#';}
 8000490:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000494:	4843      	ldr	r0, [pc, #268]	@ (80005a4 <keypad_press+0x23c>)
 8000496:	f000 ffb1 	bl	80013fc <HAL_GPIO_ReadPin>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d105      	bne.n	80004ac <keypad_press+0x144>
 80004a0:	20fa      	movs	r0, #250	@ 0xfa
 80004a2:	f000 fcdd 	bl	8000e60 <HAL_Delay>
 80004a6:	4b40      	ldr	r3, [pc, #256]	@ (80005a8 <keypad_press+0x240>)
 80004a8:	2223      	movs	r2, #35	@ 0x23
 80004aa:	701a      	strb	r2, [r3, #0]
	if((HAL_GPIO_ReadPin(GPIOB, C2_Pin)== 0)){HAL_Delay(250);  num = '9';}
 80004ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004b0:	483c      	ldr	r0, [pc, #240]	@ (80005a4 <keypad_press+0x23c>)
 80004b2:	f000 ffa3 	bl	80013fc <HAL_GPIO_ReadPin>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d105      	bne.n	80004c8 <keypad_press+0x160>
 80004bc:	20fa      	movs	r0, #250	@ 0xfa
 80004be:	f000 fccf 	bl	8000e60 <HAL_Delay>
 80004c2:	4b39      	ldr	r3, [pc, #228]	@ (80005a8 <keypad_press+0x240>)
 80004c4:	2239      	movs	r2, #57	@ 0x39
 80004c6:	701a      	strb	r2, [r3, #0]
	if((HAL_GPIO_ReadPin(GPIOA, C3_Pin)== 0)){HAL_Delay(250);  num = '6';}
 80004c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004cc:	4837      	ldr	r0, [pc, #220]	@ (80005ac <keypad_press+0x244>)
 80004ce:	f000 ff95 	bl	80013fc <HAL_GPIO_ReadPin>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d105      	bne.n	80004e4 <keypad_press+0x17c>
 80004d8:	20fa      	movs	r0, #250	@ 0xfa
 80004da:	f000 fcc1 	bl	8000e60 <HAL_Delay>
 80004de:	4b32      	ldr	r3, [pc, #200]	@ (80005a8 <keypad_press+0x240>)
 80004e0:	2236      	movs	r2, #54	@ 0x36
 80004e2:	701a      	strb	r2, [r3, #0]
	if((HAL_GPIO_ReadPin(GPIOA, C4_Pin)== 0)){HAL_Delay(250);  num = '3';}
 80004e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004e8:	4830      	ldr	r0, [pc, #192]	@ (80005ac <keypad_press+0x244>)
 80004ea:	f000 ff87 	bl	80013fc <HAL_GPIO_ReadPin>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d105      	bne.n	8000500 <keypad_press+0x198>
 80004f4:	20fa      	movs	r0, #250	@ 0xfa
 80004f6:	f000 fcb3 	bl	8000e60 <HAL_Delay>
 80004fa:	4b2b      	ldr	r3, [pc, #172]	@ (80005a8 <keypad_press+0x240>)
 80004fc:	2233      	movs	r2, #51	@ 0x33
 80004fe:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB,R3_Pin, GPIO_PIN_SET);
 8000500:	2201      	movs	r2, #1
 8000502:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000506:	4827      	ldr	r0, [pc, #156]	@ (80005a4 <keypad_press+0x23c>)
 8000508:	f000 ff90 	bl	800142c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,R4_Pin, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2101      	movs	r1, #1
 8000510:	4824      	ldr	r0, [pc, #144]	@ (80005a4 <keypad_press+0x23c>)
 8000512:	f000 ff8b 	bl	800142c <HAL_GPIO_WritePin>
	if((HAL_GPIO_ReadPin(GPIOB, C1_Pin)== 0)){HAL_Delay(250);  num = '*';}
 8000516:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800051a:	4822      	ldr	r0, [pc, #136]	@ (80005a4 <keypad_press+0x23c>)
 800051c:	f000 ff6e 	bl	80013fc <HAL_GPIO_ReadPin>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d105      	bne.n	8000532 <keypad_press+0x1ca>
 8000526:	20fa      	movs	r0, #250	@ 0xfa
 8000528:	f000 fc9a 	bl	8000e60 <HAL_Delay>
 800052c:	4b1e      	ldr	r3, [pc, #120]	@ (80005a8 <keypad_press+0x240>)
 800052e:	222a      	movs	r2, #42	@ 0x2a
 8000530:	701a      	strb	r2, [r3, #0]
	if((HAL_GPIO_ReadPin(GPIOB, C2_Pin)== 0)){HAL_Delay(250);  num = '7';}
 8000532:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000536:	481b      	ldr	r0, [pc, #108]	@ (80005a4 <keypad_press+0x23c>)
 8000538:	f000 ff60 	bl	80013fc <HAL_GPIO_ReadPin>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d105      	bne.n	800054e <keypad_press+0x1e6>
 8000542:	20fa      	movs	r0, #250	@ 0xfa
 8000544:	f000 fc8c 	bl	8000e60 <HAL_Delay>
 8000548:	4b17      	ldr	r3, [pc, #92]	@ (80005a8 <keypad_press+0x240>)
 800054a:	2237      	movs	r2, #55	@ 0x37
 800054c:	701a      	strb	r2, [r3, #0]
	if((HAL_GPIO_ReadPin(GPIOA, C3_Pin)== 0)){HAL_Delay(250);  num = '4';}
 800054e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000552:	4816      	ldr	r0, [pc, #88]	@ (80005ac <keypad_press+0x244>)
 8000554:	f000 ff52 	bl	80013fc <HAL_GPIO_ReadPin>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d105      	bne.n	800056a <keypad_press+0x202>
 800055e:	20fa      	movs	r0, #250	@ 0xfa
 8000560:	f000 fc7e 	bl	8000e60 <HAL_Delay>
 8000564:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <keypad_press+0x240>)
 8000566:	2234      	movs	r2, #52	@ 0x34
 8000568:	701a      	strb	r2, [r3, #0]
	if((HAL_GPIO_ReadPin(GPIOA, C4_Pin)== 0)){HAL_Delay(250);  num = '1';}
 800056a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800056e:	480f      	ldr	r0, [pc, #60]	@ (80005ac <keypad_press+0x244>)
 8000570:	f000 ff44 	bl	80013fc <HAL_GPIO_ReadPin>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d105      	bne.n	8000586 <keypad_press+0x21e>
 800057a:	20fa      	movs	r0, #250	@ 0xfa
 800057c:	f000 fc70 	bl	8000e60 <HAL_Delay>
 8000580:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <keypad_press+0x240>)
 8000582:	2231      	movs	r2, #49	@ 0x31
 8000584:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB,R4_Pin, GPIO_PIN_SET);
 8000586:	2201      	movs	r2, #1
 8000588:	2101      	movs	r1, #1
 800058a:	4806      	ldr	r0, [pc, #24]	@ (80005a4 <keypad_press+0x23c>)
 800058c:	f000 ff4e 	bl	800142c <HAL_GPIO_WritePin>

    if(num != '\0')
 8000590:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <keypad_press+0x240>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d002      	beq.n	800059e <keypad_press+0x236>
    {
    	return num;
 8000598:	4b03      	ldr	r3, [pc, #12]	@ (80005a8 <keypad_press+0x240>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	e000      	b.n	80005a0 <keypad_press+0x238>
    }
    else
    {
    	return 0;
 800059e:	2300      	movs	r3, #0
    }
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	42020400 	.word	0x42020400
 80005a8:	2000009c 	.word	0x2000009c
 80005ac:	42020000 	.word	0x42020000

080005b0 <Enter_Password>:


unsigned char Enter_Password() {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
    char key = keypad_press(); // Read the key from the keypad
 80005b6:	f7ff fed7 	bl	8000368 <keypad_press>
 80005ba:	4603      	mov	r3, r0
 80005bc:	70fb      	strb	r3, [r7, #3]
    int result = 0; // Initialize result for comparison
 80005be:	2300      	movs	r3, #0
 80005c0:	607b      	str	r3, [r7, #4]

    if (key != 0 && key != last_key) {
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d031      	beq.n	800062c <Enter_Password+0x7c>
 80005c8:	78fa      	ldrb	r2, [r7, #3]
 80005ca:	4b3a      	ldr	r3, [pc, #232]	@ (80006b4 <Enter_Password+0x104>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d02c      	beq.n	800062c <Enter_Password+0x7c>
        if (i < INPUT_SIZE - 1) { // Ensure there's space for the null terminator
 80005d2:	4b39      	ldr	r3, [pc, #228]	@ (80006b8 <Enter_Password+0x108>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b03      	cmp	r3, #3
 80005d8:	dc24      	bgt.n	8000624 <Enter_Password+0x74>
            input[i++] = key; // Store the actual key
 80005da:	4b37      	ldr	r3, [pc, #220]	@ (80006b8 <Enter_Password+0x108>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	1c5a      	adds	r2, r3, #1
 80005e0:	4935      	ldr	r1, [pc, #212]	@ (80006b8 <Enter_Password+0x108>)
 80005e2:	600a      	str	r2, [r1, #0]
 80005e4:	4935      	ldr	r1, [pc, #212]	@ (80006bc <Enter_Password+0x10c>)
 80005e6:	78fa      	ldrb	r2, [r7, #3]
 80005e8:	54ca      	strb	r2, [r1, r3]
            input[i] = '\0'; // Null-terminate the string
 80005ea:	4b33      	ldr	r3, [pc, #204]	@ (80006b8 <Enter_Password+0x108>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a33      	ldr	r2, [pc, #204]	@ (80006bc <Enter_Password+0x10c>)
 80005f0:	2100      	movs	r1, #0
 80005f2:	54d1      	strb	r1, [r2, r3]

            if (j < MUSK_SIZE - 1) { // Ensure space for the masked input
 80005f4:	4b32      	ldr	r3, [pc, #200]	@ (80006c0 <Enter_Password+0x110>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	dc0c      	bgt.n	8000616 <Enter_Password+0x66>
                MUSK[j++] = '*'; // Store a mask character
 80005fc:	4b30      	ldr	r3, [pc, #192]	@ (80006c0 <Enter_Password+0x110>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	1c5a      	adds	r2, r3, #1
 8000602:	492f      	ldr	r1, [pc, #188]	@ (80006c0 <Enter_Password+0x110>)
 8000604:	600a      	str	r2, [r1, #0]
 8000606:	4a2f      	ldr	r2, [pc, #188]	@ (80006c4 <Enter_Password+0x114>)
 8000608:	212a      	movs	r1, #42	@ 0x2a
 800060a:	54d1      	strb	r1, [r2, r3]
                MUSK[j] = '\0'; // Null-terminate the masked string
 800060c:	4b2c      	ldr	r3, [pc, #176]	@ (80006c0 <Enter_Password+0x110>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a2c      	ldr	r2, [pc, #176]	@ (80006c4 <Enter_Password+0x114>)
 8000612:	2100      	movs	r1, #0
 8000614:	54d1      	strb	r1, [r2, r3]
            }

            lcd_put_cur(1, 0);
 8000616:	2100      	movs	r1, #0
 8000618:	2001      	movs	r0, #1
 800061a:	f7ff fe33 	bl	8000284 <lcd_put_cur>
            lcd_send_string(MUSK); // Display the masked input
 800061e:	4829      	ldr	r0, [pc, #164]	@ (80006c4 <Enter_Password+0x114>)
 8000620:	f7ff fe8c 	bl	800033c <lcd_send_string>
        }

        last_key = key; // Update last_key to the currently pressed key
 8000624:	78fb      	ldrb	r3, [r7, #3]
 8000626:	4a23      	ldr	r2, [pc, #140]	@ (80006b4 <Enter_Password+0x104>)
 8000628:	6013      	str	r3, [r2, #0]
 800062a:	e005      	b.n	8000638 <Enter_Password+0x88>
    } else if (key == 0) {
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d102      	bne.n	8000638 <Enter_Password+0x88>
        last_key = 0; // Reset last_key when no key is pressed
 8000632:	4b20      	ldr	r3, [pc, #128]	@ (80006b4 <Enter_Password+0x104>)
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
    }

    if (i == 4) { // Check if the password is of expected length
 8000638:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <Enter_Password+0x108>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b04      	cmp	r3, #4
 800063e:	d12a      	bne.n	8000696 <Enter_Password+0xe6>
        result = strcmp(pass, input);
 8000640:	4b21      	ldr	r3, [pc, #132]	@ (80006c8 <Enter_Password+0x118>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	491d      	ldr	r1, [pc, #116]	@ (80006bc <Enter_Password+0x10c>)
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fda8 	bl	800019c <strcmp>
 800064c:	6078      	str	r0, [r7, #4]

        lcd_put_cur(1, 0);
 800064e:	2100      	movs	r1, #0
 8000650:	2001      	movs	r0, #1
 8000652:	f7ff fe17 	bl	8000284 <lcd_put_cur>
        if (result == 0) {
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d103      	bne.n	8000664 <Enter_Password+0xb4>
            lcd_send_string("match  "); // Display "match"
 800065c:	481b      	ldr	r0, [pc, #108]	@ (80006cc <Enter_Password+0x11c>)
 800065e:	f7ff fe6d 	bl	800033c <lcd_send_string>
 8000662:	e008      	b.n	8000676 <Enter_Password+0xc6>
        } else {
            lcd_send_string("not match");
 8000664:	481a      	ldr	r0, [pc, #104]	@ (80006d0 <Enter_Password+0x120>)
 8000666:	f7ff fe69 	bl	800033c <lcd_send_string>
            HAL_Delay(1000);
 800066a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800066e:	f000 fbf7 	bl	8000e60 <HAL_Delay>
            lcd_clear();
 8000672:	f7ff fdfd 	bl	8000270 <lcd_clear>
        }

        // Reset input for the next attempt
        memset(input, 0, INPUT_SIZE); // Clear the input buffer
 8000676:	2205      	movs	r2, #5
 8000678:	2100      	movs	r1, #0
 800067a:	4810      	ldr	r0, [pc, #64]	@ (80006bc <Enter_Password+0x10c>)
 800067c:	f002 fb82 	bl	8002d84 <memset>
        memset(MUSK, 0, MUSK_SIZE); // Clear the masked input
 8000680:	2205      	movs	r2, #5
 8000682:	2100      	movs	r1, #0
 8000684:	480f      	ldr	r0, [pc, #60]	@ (80006c4 <Enter_Password+0x114>)
 8000686:	f002 fb7d 	bl	8002d84 <memset>
        i = 0; // Reset index for next input
 800068a:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <Enter_Password+0x108>)
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
        j = 0; // Reset masked input index
 8000690:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <Enter_Password+0x110>)
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
    }

    return (i == 4 && result == 0) ? 1 : 0; // Return 1 if password matches, else return 0
 8000696:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <Enter_Password+0x108>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b04      	cmp	r3, #4
 800069c:	d104      	bne.n	80006a8 <Enter_Password+0xf8>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d101      	bne.n	80006a8 <Enter_Password+0xf8>
 80006a4:	2301      	movs	r3, #1
 80006a6:	e000      	b.n	80006aa <Enter_Password+0xfa>
 80006a8:	2300      	movs	r3, #0
 80006aa:	b2db      	uxtb	r3, r3
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000098 	.word	0x20000098
 80006b8:	20000090 	.word	0x20000090
 80006bc:	20000080 	.word	0x20000080
 80006c0:	20000094 	.word	0x20000094
 80006c4:	20000088 	.word	0x20000088
 80006c8:	20000000 	.word	0x20000000
 80006cc:	08002dfc 	.word	0x08002dfc
 80006d0:	08002e04 	.word	0x08002e04

080006d4 <main>:
  *
  *
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f000 fb04 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f81a 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f000 f8b6 	bl	8000850 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80006e4:	f000 f8a0 	bl	8000828 <MX_ICACHE_Init>
  MX_I2C1_Init();
 80006e8:	f000 f85e 	bl	80007a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80006ec:	f7ff fde9 	bl	80002c2 <lcd_init>
  lcd_put_cur(0,0);
 80006f0:	2100      	movs	r1, #0
 80006f2:	2000      	movs	r0, #0
 80006f4:	f7ff fdc6 	bl	8000284 <lcd_put_cur>
  lcd_send_string("lcd start");
 80006f8:	4805      	ldr	r0, [pc, #20]	@ (8000710 <main+0x3c>)
 80006fa:	f7ff fe1f 	bl	800033c <lcd_send_string>
  HAL_Delay(1000);
 80006fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000702:	f000 fbad 	bl	8000e60 <HAL_Delay>
  lcd_clear();
 8000706:	f7ff fdb3 	bl	8000270 <lcd_clear>

  /* USER CODE END 2 */

while (1) {

	Enter_Password();
 800070a:	f7ff ff51 	bl	80005b0 <Enter_Password>
 800070e:	e7fc      	b.n	800070a <main+0x36>
 8000710:	08002e10 	.word	0x08002e10

08000714 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b098      	sub	sp, #96	@ 0x60
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2240      	movs	r2, #64	@ 0x40
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f002 fb2e 	bl	8002d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2220      	movs	r2, #32
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fb28 	bl	8002d84 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000734:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000738:	f001 fb3e 	bl	8001db8 <HAL_PWREx_ControlVoltageScaling>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000742:	f000 f929 	bl	8000998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000746:	2302      	movs	r3, #2
 8000748:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800074e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	2310      	movs	r3, #16
 8000752:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_NONE;
 8000754:	2300      	movs	r3, #0
 8000756:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f001 fb89 	bl	8001e74 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000768:	f000 f916 	bl	8000998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	233f      	movs	r3, #63	@ 0x3f
 800076e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK7|RCC_CLOCKTYPE_HCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB7CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHB5_PLL1_CLKDivider = RCC_SYSCLK_PLL1_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHB5_HSEHSI_CLKDivider = RCC_SYSCLK_HSEHSI_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078c:	463b      	mov	r3, r7
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f001 ff59 	bl	8002648 <HAL_RCC_ClockConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800079c:	f000 f8fc 	bl	8000998 <Error_Handler>
  }
}
 80007a0:	bf00      	nop
 80007a2:	3760      	adds	r7, #96	@ 0x60
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <MX_I2C1_Init+0x74>)
 80007ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000820 <MX_I2C1_Init+0x78>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <MX_I2C1_Init+0x74>)
 80007b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000824 <MX_I2C1_Init+0x7c>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007b8:	4b18      	ldr	r3, [pc, #96]	@ (800081c <MX_I2C1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007be:	4b17      	ldr	r3, [pc, #92]	@ (800081c <MX_I2C1_Init+0x74>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c4:	4b15      	ldr	r3, [pc, #84]	@ (800081c <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_I2C1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d0:	4b12      	ldr	r3, [pc, #72]	@ (800081c <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d6:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_I2C1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e2:	480e      	ldr	r0, [pc, #56]	@ (800081c <MX_I2C1_Init+0x74>)
 80007e4:	f000 fe76 	bl	80014d4 <HAL_I2C_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ee:	f000 f8d3 	bl	8000998 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4809      	ldr	r0, [pc, #36]	@ (800081c <MX_I2C1_Init+0x74>)
 80007f6:	f001 fa17 	bl	8001c28 <HAL_I2CEx_ConfigAnalogFilter>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000800:	f000 f8ca 	bl	8000998 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000804:	2100      	movs	r1, #0
 8000806:	4805      	ldr	r0, [pc, #20]	@ (800081c <MX_I2C1_Init+0x74>)
 8000808:	f001 fa59 	bl	8001cbe <HAL_I2CEx_ConfigDigitalFilter>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000812:	f000 f8c1 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000002c 	.word	0x2000002c
 8000820:	40005400 	.word	0x40005400
 8000824:	00303d5b 	.word	0x00303d5b

08000828 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800082c:	2000      	movs	r0, #0
 800082e:	f001 fa93 	bl	8001d58 <HAL_ICACHE_ConfigAssociativityMode>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000838:	f000 f8ae 	bl	8000998 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800083c:	f001 faac 	bl	8001d98 <HAL_ICACHE_Enable>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000846:	f000 f8a7 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b49      	ldr	r3, [pc, #292]	@ (800098c <MX_GPIO_Init+0x13c>)
 8000868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800086c:	4a47      	ldr	r2, [pc, #284]	@ (800098c <MX_GPIO_Init+0x13c>)
 800086e:	f043 0302 	orr.w	r3, r3, #2
 8000872:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000876:	4b45      	ldr	r3, [pc, #276]	@ (800098c <MX_GPIO_Init+0x13c>)
 8000878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800087c:	f003 0302 	and.w	r3, r3, #2
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b41      	ldr	r3, [pc, #260]	@ (800098c <MX_GPIO_Init+0x13c>)
 8000886:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800088a:	4a40      	ldr	r2, [pc, #256]	@ (800098c <MX_GPIO_Init+0x13c>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000894:	4b3d      	ldr	r3, [pc, #244]	@ (800098c <MX_GPIO_Init+0x13c>)
 8000896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b3a      	ldr	r3, [pc, #232]	@ (800098c <MX_GPIO_Init+0x13c>)
 80008a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008a8:	4a38      	ldr	r2, [pc, #224]	@ (800098c <MX_GPIO_Init+0x13c>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008b2:	4b36      	ldr	r3, [pc, #216]	@ (800098c <MX_GPIO_Init+0x13c>)
 80008b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB,R1_Pin|LD1_Pin
 80008c0:	2200      	movs	r2, #0
 80008c2:	f246 0151 	movw	r1, #24657	@ 0x6051
 80008c6:	4832      	ldr	r0, [pc, #200]	@ (8000990 <MX_GPIO_Init+0x140>)
 80008c8:	f000 fdb0 	bl	800142c <HAL_GPIO_WritePin>
                          |R4_Pin|R2_Pin|R3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USART1_TX_Pin */
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 80008cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008de:	2307      	movs	r3, #7
 80008e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4619      	mov	r1, r3
 80008e8:	4829      	ldr	r0, [pc, #164]	@ (8000990 <MX_GPIO_Init+0x140>)
 80008ea:	f000 fc3b 	bl	8001164 <HAL_GPIO_Init>


  /*Configure GPIO pin : USART1_RX_Pin */
  GPIO_InitStruct.Pin = USART1_RX_Pin;
 80008ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000900:	2307      	movs	r3, #7
 8000902:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	4619      	mov	r1, r3
 800090a:	4822      	ldr	r0, [pc, #136]	@ (8000994 <MX_GPIO_Init+0x144>)
 800090c:	f000 fc2a 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin;
 8000910:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 8000914:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800091a:	2301      	movs	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	4619      	mov	r1, r3
 8000924:	481a      	ldr	r0, [pc, #104]	@ (8000990 <MX_GPIO_Init+0x140>)
 8000926:	f000 fc1d 	bl	8001164 <HAL_GPIO_Init>


  /*Configure GPIO pins : R1_Pin R4_Pin R2_Pin R3_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R4_Pin|R2_Pin|R3_Pin;
 800092a:	f246 0341 	movw	r3, #24641	@ 0x6041
 800092e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000934:	2301      	movs	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	4619      	mov	r1, r3
 8000942:	4813      	ldr	r0, [pc, #76]	@ (8000990 <MX_GPIO_Init+0x140>)
 8000944:	f000 fc0e 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 8000948:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800094c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000952:	2301      	movs	r3, #1
 8000954:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	4619      	mov	r1, r3
 800095c:	480d      	ldr	r0, [pc, #52]	@ (8000994 <MX_GPIO_Init+0x144>)
 800095e:	f000 fc01 	bl	8001164 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI7_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	2012      	movs	r0, #18
 8000968:	f000 fb56 	bl	8001018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 800096c:	2012      	movs	r0, #18
 800096e:	f000 fb70 	bl	8001052 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	2018      	movs	r0, #24
 8000978:	f000 fb4e 	bl	8001018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 800097c:	2018      	movs	r0, #24
 800097e:	f000 fb68 	bl	8001052 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000982:	bf00      	nop
 8000984:	3720      	adds	r7, #32
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	46020c00 	.word	0x46020c00
 8000990:	42020400 	.word	0x42020400
 8000994:	42020000 	.word	0x42020000

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <Error_Handler+0x8>

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <HAL_MspInit+0x30>)
 80009ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80009b0:	4a08      	ldr	r2, [pc, #32]	@ (80009d4 <HAL_MspInit+0x30>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <HAL_MspInit+0x30>)
 80009bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	46020c00 	.word	0x46020c00

080009d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b09a      	sub	sp, #104	@ 0x68
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2240      	movs	r2, #64	@ 0x40
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 f9c3 	bl	8002d84 <memset>
  if(hi2c->Instance==I2C1)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a21      	ldr	r2, [pc, #132]	@ (8000a88 <HAL_I2C_MspInit+0xb0>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d13b      	bne.n	8000a80 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4618      	mov	r0, r3
 8000a16:	f002 f803 	bl	8002a20 <HAL_RCCEx_PeriphCLKConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a20:	f7ff ffba 	bl	8000998 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <HAL_I2C_MspInit+0xb4>)
 8000a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a2a:	4a18      	ldr	r2, [pc, #96]	@ (8000a8c <HAL_I2C_MspInit+0xb4>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a34:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <HAL_I2C_MspInit+0xb4>)
 8000a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB2     ------> I2C1_SCL
    PB1     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8000a42:	2306      	movs	r3, #6
 8000a44:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a46:	2312      	movs	r3, #18
 8000a48:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a52:	2304      	movs	r3, #4
 8000a54:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <HAL_I2C_MspInit+0xb8>)
 8000a5e:	f000 fb81 	bl	8001164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a62:	4b0a      	ldr	r3, [pc, #40]	@ (8000a8c <HAL_I2C_MspInit+0xb4>)
 8000a64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a68:	4a08      	ldr	r2, [pc, #32]	@ (8000a8c <HAL_I2C_MspInit+0xb4>)
 8000a6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a6e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000a72:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <HAL_I2C_MspInit+0xb4>)
 8000a74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a80:	bf00      	nop
 8000a82:	3768      	adds	r7, #104	@ 0x68
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40005400 	.word	0x40005400
 8000a8c:	46020c00 	.word	0x46020c00
 8000a90:	42020400 	.word	0x42020400

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <NMI_Handler+0x4>

08000a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000abc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aea:	f000 f999 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8000af6:	2080      	movs	r0, #128	@ 0x80
 8000af8:	f000 fcb0 	bl	800145c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b04:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b08:	f000 fca8 	bl	800145c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  __IO uint32_t tmpreg;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	@ (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  CLEAR_BIT(ADC4->CR, ADC_CR_ADVREGEN);

  /* Disable ADC kernel clock */
  CLEAR_BIT(RCC->AHB4ENR, RCC_AHB4ENR_ADC4EN);
#endif
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	@ 0x24
 8000b38:	af00      	add	r7, sp, #0
  uint32_t plln;
  float_t fracn;
  float_t pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 8000b3a:	4b4f      	ldr	r3, [pc, #316]	@ (8000c78 <SystemCoreClockUpdate+0x144>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f003 030c 	and.w	r3, r3, #12
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	d002      	beq.n	8000b4c <SystemCoreClockUpdate+0x18>
 8000b46:	2b0c      	cmp	r3, #12
 8000b48:	d00b      	beq.n	8000b62 <SystemCoreClockUpdate+0x2e>
 8000b4a:	e07d      	b.n	8000c48 <SystemCoreClockUpdate+0x114>
  {
    case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
      SystemCoreClock = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8000b4c:	4b4a      	ldr	r3, [pc, #296]	@ (8000c78 <SystemCoreClockUpdate+0x144>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	0d1b      	lsrs	r3, r3, #20
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	4a49      	ldr	r2, [pc, #292]	@ (8000c7c <SystemCoreClockUpdate+0x148>)
 8000b58:	fa22 f303 	lsr.w	r3, r2, r3
 8000b5c:	4a48      	ldr	r2, [pc, #288]	@ (8000c80 <SystemCoreClockUpdate+0x14c>)
 8000b5e:	6013      	str	r3, [r2, #0]
      break;
 8000b60:	e076      	b.n	8000c50 <SystemCoreClockUpdate+0x11c>

    case (RCC_CFGR1_SWS_0 | RCC_CFGR1_SWS_1):  /* PLL1 used as system clock source */
      /* PLL_VCO = (PLLsource / PLLM) * PLLN * FractionnalPart
          SYSCLK = PLL_VCO / PLLR */
      /* Get PLL1 CFGR and DIVR register values */
      tmp1 = RCC->PLL1CFGR;
 8000b62:	4b45      	ldr	r3, [pc, #276]	@ (8000c78 <SystemCoreClockUpdate+0x144>)
 8000b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b66:	61fb      	str	r3, [r7, #28]
      tmp2 = RCC->PLL1DIVR;
 8000b68:	4b43      	ldr	r3, [pc, #268]	@ (8000c78 <SystemCoreClockUpdate+0x144>)
 8000b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b6c:	617b      	str	r3, [r7, #20]

      /* Retrieve PLL1 multiplication factor and divider */
      pllm = ((tmp1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	3301      	adds	r3, #1
 8000b78:	613b      	str	r3, [r7, #16]
      plln = (tmp2 & RCC_PLL1DIVR_PLL1N) + 1U;
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b80:	3301      	adds	r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
      pllr = ((tmp2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	0e1b      	lsrs	r3, r3, #24
 8000b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]

      /* Check if fractional part is enable */
      if ((tmp1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f003 0310 	and.w	r3, r3, #16
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00b      	beq.n	8000bb2 <SystemCoreClockUpdate+0x7e>
      {
        fracn = (float_t)((uint32_t)((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8000b9a:	4b37      	ldr	r3, [pc, #220]	@ (8000c78 <SystemCoreClockUpdate+0x144>)
 8000b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b9e:	08db      	lsrs	r3, r3, #3
 8000ba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000ba4:	ee07 3a90 	vmov	s15, r3
 8000ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bac:	edc7 7a06 	vstr	s15, [r7, #24]
 8000bb0:	e002      	b.n	8000bb8 <SystemCoreClockUpdate+0x84>
      }
      else
      {
        fracn = (float_t)0U;
 8000bb2:	f04f 0300 	mov.w	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
      }

      /* determine PLL source */
      pllsource = (tmp1 & RCC_PLL1CFGR_PLL1SRC);
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	f003 0303 	and.w	r3, r3, #3
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d003      	beq.n	8000bce <SystemCoreClockUpdate+0x9a>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d003      	beq.n	8000bd4 <SystemCoreClockUpdate+0xa0>
 8000bcc:	e00c      	b.n	8000be8 <SystemCoreClockUpdate+0xb4>
      switch (pllsource)
      {
        /* HSI used as PLL1 clock source */
        case RCC_PLL1CFGR_PLL1SRC_1:
          tmp1 = HSI_VALUE;
 8000bce:	4b2d      	ldr	r3, [pc, #180]	@ (8000c84 <SystemCoreClockUpdate+0x150>)
 8000bd0:	61fb      	str	r3, [r7, #28]
          break;
 8000bd2:	e00c      	b.n	8000bee <SystemCoreClockUpdate+0xba>

        /* HSE used as PLL1 clock source */
        case (RCC_PLL1CFGR_PLL1SRC_0 | RCC_PLL1CFGR_PLL1SRC_1):
          tmp1 = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8000bd4:	4b28      	ldr	r3, [pc, #160]	@ (8000c78 <SystemCoreClockUpdate+0x144>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	0d1b      	lsrs	r3, r3, #20
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	4a27      	ldr	r2, [pc, #156]	@ (8000c7c <SystemCoreClockUpdate+0x148>)
 8000be0:	fa22 f303 	lsr.w	r3, r2, r3
 8000be4:	61fb      	str	r3, [r7, #28]
          break;
 8000be6:	e002      	b.n	8000bee <SystemCoreClockUpdate+0xba>

        default:
          tmp1 = 0U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
          break;
 8000bec:	bf00      	nop
      }

      /* Compute VCO output frequency */
      pllvco = ((float_t) tmp1 / (float_t)pllm) * (((float_t)plln + (float_t)(fracn / (float_t)0x2000U)));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	ee07 3a90 	vmov	s15, r3
 8000bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	ee07 3a90 	vmov	s15, r3
 8000bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	ee07 3a90 	vmov	s15, r3
 8000c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000c10:	ed97 6a06 	vldr	s12, [r7, #24]
 8000c14:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8000c88 <SystemCoreClockUpdate+0x154>
 8000c18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c24:	edc7 7a00 	vstr	s15, [r7]
      SystemCoreClock = (uint32_t)((float_t)(pllvco / (float_t)pllr));
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	ee07 3a90 	vmov	s15, r3
 8000c2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c32:	edd7 6a00 	vldr	s13, [r7]
 8000c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c3e:	ee17 2a90 	vmov	r2, s15
 8000c42:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <SystemCoreClockUpdate+0x14c>)
 8000c44:	601a      	str	r2, [r3, #0]
      break;
 8000c46:	e003      	b.n	8000c50 <SystemCoreClockUpdate+0x11c>

    case 0x00u:  /* HSI used as system clock source */
    default:
      SystemCoreClock = HSI_VALUE;
 8000c48:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <SystemCoreClockUpdate+0x14c>)
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c84 <SystemCoreClockUpdate+0x150>)
 8000c4c:	601a      	str	r2, [r3, #0]
      break;
 8000c4e:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp1 = AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)];
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <SystemCoreClockUpdate+0x144>)
 8000c52:	6a1b      	ldr	r3, [r3, #32]
 8000c54:	f003 0307 	and.w	r3, r3, #7
 8000c58:	4a0c      	ldr	r2, [pc, #48]	@ (8000c8c <SystemCoreClockUpdate+0x158>)
 8000c5a:	5cd3      	ldrb	r3, [r2, r3]
 8000c5c:	61fb      	str	r3, [r7, #28]

  /* HCLK clock frequency */
  SystemCoreClock >>= tmp1;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <SystemCoreClockUpdate+0x14c>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	fa22 f303 	lsr.w	r3, r2, r3
 8000c68:	4a05      	ldr	r2, [pc, #20]	@ (8000c80 <SystemCoreClockUpdate+0x14c>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	3724      	adds	r7, #36	@ 0x24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	46020c00 	.word	0x46020c00
 8000c7c:	01e84800 	.word	0x01e84800
 8000c80:	20000004 	.word	0x20000004
 8000c84:	00f42400 	.word	0x00f42400
 8000c88:	46000000 	.word	0x46000000
 8000c8c:	08002e1c 	.word	0x08002e1c

08000c90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000c90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c94:	f7ff ff3c 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c9a:	e003      	b.n	8000ca4 <LoopCopyDataInit>

08000c9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ca0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ca2:	3104      	adds	r1, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ca4:	480a      	ldr	r0, [pc, #40]	@ (8000cd0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ca8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000caa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cac:	d3f6      	bcc.n	8000c9c <CopyDataInit>
	ldr	r2, =_sbss
 8000cae:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cb0:	e002      	b.n	8000cb8 <LoopFillZerobss>

08000cb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cb2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cb4:	f842 3b04 	str.w	r3, [r2], #4

08000cb8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <LoopForever+0x16>)
	cmp	r2, r3
 8000cba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cbc:	d3f9      	bcc.n	8000cb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cbe:	f002 f869 	bl	8002d94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cc2:	f7ff fd07 	bl	80006d4 <main>

08000cc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cc6:	e7fe      	b.n	8000cc6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000cc8:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 8000ccc:	08002e34 	.word	0x08002e34
	ldr	r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cd4:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000cd8:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000cdc:	200000a4 	.word	0x200000a4

08000ce0 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC4_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <HAL_Init+0x3c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0c      	ldr	r2, [pc, #48]	@ (8000d20 <HAL_Init+0x3c>)
 8000cee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f984 	bl	8001002 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 8000cfa:	f7ff ff1b 	bl	8000b34 <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000cfe:	2004      	movs	r0, #4
 8000d00:	f000 f9d8 	bl	80010b4 <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d04:	200f      	movs	r0, #15
 8000d06:	f000 f80d 	bl	8000d24 <HAL_InitTick>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_Init+0x30>
  {
    return HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e002      	b.n	8000d1a <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d14:	f7ff fe46 	bl	80009a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40022000 	.word	0x40022000

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000d30:	4b36      	ldr	r3, [pc, #216]	@ (8000e0c <HAL_InitTick+0xe8>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d101      	bne.n	8000d3c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e062      	b.n	8000e02 <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000d3c:	4b34      	ldr	r3, [pc, #208]	@ (8000e10 <HAL_InitTick+0xec>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	2b04      	cmp	r3, #4
 8000d46:	d10c      	bne.n	8000d62 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000d48:	4b32      	ldr	r3, [pc, #200]	@ (8000e14 <HAL_InitTick+0xf0>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e0c <HAL_InitTick+0xe8>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	e03d      	b.n	8000dde <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 8000d62:	4b2d      	ldr	r3, [pc, #180]	@ (8000e18 <HAL_InitTick+0xf4>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d68:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000d6c:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000d74:	d025      	beq.n	8000dc2 <HAL_InitTick+0x9e>
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000d7c:	d82e      	bhi.n	8000ddc <HAL_InitTick+0xb8>
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d004      	beq.n	8000d8e <HAL_InitTick+0x6a>
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000d8a:	d00d      	beq.n	8000da8 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8000d8c:	e026      	b.n	8000ddc <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <HAL_InitTick+0xf0>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4b1e      	ldr	r3, [pc, #120]	@ (8000e0c <HAL_InitTick+0xe8>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4619      	mov	r1, r3
 8000d98:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000d9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da4:	60fb      	str	r3, [r7, #12]
        break;
 8000da6:	e01a      	b.n	8000dde <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000da8:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <HAL_InitTick+0xe8>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db2:	fbb3 f3f2 	udiv	r3, r3, r2
 8000db6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	60fb      	str	r3, [r7, #12]
        break;
 8000dc0:	e00d      	b.n	8000dde <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000dc2:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <HAL_InitTick+0xe8>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8000dd0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd8:	60fb      	str	r3, [r7, #12]
        break;
 8000dda:	e000      	b.n	8000dde <HAL_InitTick+0xba>
        break;
 8000ddc:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	f000 f946 	bl	8001070 <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e009      	b.n	8000e02 <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dee:	2200      	movs	r2, #0
 8000df0:	6879      	ldr	r1, [r7, #4]
 8000df2:	f04f 30ff 	mov.w	r0, #4294967295
 8000df6:	f000 f90f 	bl	8001018 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000dfa:	4a08      	ldr	r2, [pc, #32]	@ (8000e1c <HAL_InitTick+0xf8>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000000c 	.word	0x2000000c
 8000e10:	e000e010 	.word	0xe000e010
 8000e14:	20000004 	.word	0x20000004
 8000e18:	46020c00 	.word	0x46020c00
 8000e1c:	20000008 	.word	0x20000008

08000e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	2000000c 	.word	0x2000000c
 8000e44:	200000a0 	.word	0x200000a0

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	200000a0 	.word	0x200000a0

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff ffee 	bl	8000e48 <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffde 	bl	8000e48 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2000000c 	.word	0x2000000c

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4907      	ldr	r1, [pc, #28]	@ (8000f44 <__NVIC_EnableIRQ+0x38>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	@ (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	@ (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	@ 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	@ 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff4c 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
 8001026:	f7ff ff63 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 800102a:	4603      	mov	r3, r0
 800102c:	f003 0307 	and.w	r3, r3, #7
 8001030:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ffb0 	bl	8000f9c <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff7f 	bl	8000f48 <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbaxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff53 	bl	8000f0c <__NVIC_EnableIRQ>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001080:	d301      	bcc.n	8001086 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001082:	2301      	movs	r3, #1
 8001084:	e00d      	b.n	80010a2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <HAL_SYSTICK_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800108e:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <HAL_SYSTICK_Config+0x40>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_SYSTICK_Config+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <HAL_SYSTICK_Config+0x40>)
 800109a:	f043 0303 	orr.w	r3, r3, #3
 800109e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d844      	bhi.n	800114c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80010c2:	a201      	add	r2, pc, #4	@ (adr r2, 80010c8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	080010eb 	.word	0x080010eb
 80010cc:	08001109 	.word	0x08001109
 80010d0:	0800112b 	.word	0x0800112b
 80010d4:	0800114d 	.word	0x0800114d
 80010d8:	080010dd 	.word	0x080010dd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80010dc:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a1e      	ldr	r2, [pc, #120]	@ (800115c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6013      	str	r3, [r2, #0]
      break;
 80010e8:	e031      	b.n	800114e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80010ea:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a1b      	ldr	r2, [pc, #108]	@ (800115c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010f0:	f023 0304 	bic.w	r3, r3, #4
 80010f4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80010f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fc:	4a18      	ldr	r2, [pc, #96]	@ (8001160 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80010fe:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001102:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001106:	e022      	b.n	800114e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001108:	4b14      	ldr	r3, [pc, #80]	@ (800115c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a13      	ldr	r2, [pc, #76]	@ (800115c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800110e:	f023 0304 	bic.w	r3, r3, #4
 8001112:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800111e:	4a10      	ldr	r2, [pc, #64]	@ (8001160 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001120:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001124:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001128:	e011      	b.n	800114e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800112a:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a0b      	ldr	r2, [pc, #44]	@ (800115c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001130:	f023 0304 	bic.w	r3, r3, #4
 8001134:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800113c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001140:	4a07      	ldr	r2, [pc, #28]	@ (8001160 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001142:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001146:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800114a:	e000      	b.n	800114e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800114c:	bf00      	nop
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010
 8001160:	46020c00 	.word	0x46020c00

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001172:	e130      	b.n	80013d6 <HAL_GPIO_Init+0x272>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 8122 	beq.w	80013d0 <HAL_GPIO_Init+0x26c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d005      	beq.n	80011a4 <HAL_GPIO_Init+0x40>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d130      	bne.n	8001206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011da:	2201      	movs	r2, #1
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	f003 0201 	and.w	r2, r3, #1
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b03      	cmp	r3, #3
 8001210:	d017      	beq.n	8001242 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d123      	bne.n	8001296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	6939      	ldr	r1, [r7, #16]
 8001292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0203 	and.w	r2, r3, #3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d07c      	beq.n	80013d0 <HAL_GPIO_Init+0x26c>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80012d6:	4a47      	ldr	r2, [pc, #284]	@ (80013f4 <HAL_GPIO_Init+0x290>)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3318      	adds	r3, #24
 80012de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	220f      	movs	r2, #15
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	0a9a      	lsrs	r2, r3, #10
 80012fe:	4b3e      	ldr	r3, [pc, #248]	@ (80013f8 <HAL_GPIO_Init+0x294>)
 8001300:	4013      	ands	r3, r2
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	f002 0203 	and.w	r2, r2, #3
 8001308:	00d2      	lsls	r2, r2, #3
 800130a:	4093      	lsls	r3, r2
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001312:	4938      	ldr	r1, [pc, #224]	@ (80013f4 <HAL_GPIO_Init+0x290>)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	3318      	adds	r3, #24
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001320:	4b34      	ldr	r3, [pc, #208]	@ (80013f4 <HAL_GPIO_Init+0x290>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x1e0>
        {
          temp |= iocurrent;
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001344:	4a2b      	ldr	r2, [pc, #172]	@ (80013f4 <HAL_GPIO_Init+0x290>)
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800134a:	4b2a      	ldr	r3, [pc, #168]	@ (80013f4 <HAL_GPIO_Init+0x290>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x20a>
        {
          temp |= iocurrent;
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800136e:	4a21      	ldr	r2, [pc, #132]	@ (80013f4 <HAL_GPIO_Init+0x290>)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001374:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <HAL_GPIO_Init+0x290>)
 8001376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800139a:	4a16      	ldr	r2, [pc, #88]	@ (80013f4 <HAL_GPIO_Init+0x290>)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80013a2:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <HAL_GPIO_Init+0x290>)
 80013a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013c8:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <HAL_GPIO_Init+0x290>)
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f47f aec7 	bne.w	8001174 <HAL_GPIO_Init+0x10>
  }
}
 80013e6:	bf00      	nop
 80013e8:	bf00      	nop
 80013ea:	371c      	adds	r7, #28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	46022000 	.word	0x46022000
 80013f8:	002f7f7f 	.word	0x002f7f7f

080013fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	887b      	ldrh	r3, [r7, #2]
 800140e:	4013      	ands	r3, r2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001414:	2301      	movs	r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
 8001418:	e001      	b.n	800141e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800141e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001448:	e002      	b.n	8001450 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00U)
 8001466:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	4013      	ands	r3, r2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d006      	beq.n	8001480 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001472:	4a0c      	ldr	r2, [pc, #48]	@ (80014a4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f814 	bl	80014a8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00U)
 8001480:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	4013      	ands	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d006      	beq.n	800149a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800148c:	4a05      	ldr	r2, [pc, #20]	@ (80014a4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	4618      	mov	r0, r3
 8001496:	f000 f812 	bl	80014be <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	46022000 	.word	0x46022000

080014a8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e08d      	b.n	8001602 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d106      	bne.n	8001500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fa6c 	bl	80009d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2224      	movs	r2, #36	@ 0x24
 8001504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001524:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001534:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d107      	bne.n	800154e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	e006      	b.n	800155c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800155a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d108      	bne.n	8001576 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	e007      	b.n	8001586 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001584:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001594:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001598:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691a      	ldr	r2, [r3, #16]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69d9      	ldr	r1, [r3, #28]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a1a      	ldr	r2, [r3, #32]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0201 	orr.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2220      	movs	r2, #32
 80015ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af02      	add	r7, sp, #8
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	461a      	mov	r2, r3
 8001618:	460b      	mov	r3, r1
 800161a:	817b      	strh	r3, [r7, #10]
 800161c:	4613      	mov	r3, r2
 800161e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b20      	cmp	r3, #32
 800162a:	f040 80da 	bne.w	80017e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001634:	2b01      	cmp	r3, #1
 8001636:	d101      	bne.n	800163c <HAL_I2C_Master_Transmit+0x30>
 8001638:	2302      	movs	r3, #2
 800163a:	e0d3      	b.n	80017e4 <HAL_I2C_Master_Transmit+0x1d8>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001644:	f7ff fc00 	bl	8000e48 <HAL_GetTick>
 8001648:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2319      	movs	r3, #25
 8001650:	2201      	movs	r2, #1
 8001652:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 f8f0 	bl	800183c <I2C_WaitOnFlagUntilTimeout>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e0be      	b.n	80017e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2221      	movs	r2, #33	@ 0x21
 800166a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2210      	movs	r2, #16
 8001672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	893a      	ldrh	r2, [r7, #8]
 8001686:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001692:	b29b      	uxth	r3, r3
 8001694:	2bff      	cmp	r3, #255	@ 0xff
 8001696:	d90e      	bls.n	80016b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	22ff      	movs	r2, #255	@ 0xff
 800169c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	8979      	ldrh	r1, [r7, #10]
 80016a6:	4b51      	ldr	r3, [pc, #324]	@ (80017ec <HAL_I2C_Master_Transmit+0x1e0>)
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f000 fa88 	bl	8001bc4 <I2C_TransferConfig>
 80016b4:	e06c      	b.n	8001790 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	8979      	ldrh	r1, [r7, #10]
 80016c8:	4b48      	ldr	r3, [pc, #288]	@ (80017ec <HAL_I2C_Master_Transmit+0x1e0>)
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 fa77 	bl	8001bc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80016d6:	e05b      	b.n	8001790 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	6a39      	ldr	r1, [r7, #32]
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 f906 	bl	80018ee <I2C_WaitOnTXISFlagUntilTimeout>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e07b      	b.n	80017e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f0:	781a      	ldrb	r2, [r3, #0]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001706:	b29b      	uxth	r3, r3
 8001708:	3b01      	subs	r3, #1
 800170a:	b29a      	uxth	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001714:	3b01      	subs	r3, #1
 8001716:	b29a      	uxth	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001720:	b29b      	uxth	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d034      	beq.n	8001790 <HAL_I2C_Master_Transmit+0x184>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800172a:	2b00      	cmp	r3, #0
 800172c:	d130      	bne.n	8001790 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	2200      	movs	r2, #0
 8001736:	2180      	movs	r1, #128	@ 0x80
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f000 f87f 	bl	800183c <I2C_WaitOnFlagUntilTimeout>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e04d      	b.n	80017e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800174c:	b29b      	uxth	r3, r3
 800174e:	2bff      	cmp	r3, #255	@ 0xff
 8001750:	d90e      	bls.n	8001770 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	22ff      	movs	r2, #255	@ 0xff
 8001756:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800175c:	b2da      	uxtb	r2, r3
 800175e:	8979      	ldrh	r1, [r7, #10]
 8001760:	2300      	movs	r3, #0
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f000 fa2b 	bl	8001bc4 <I2C_TransferConfig>
 800176e:	e00f      	b.n	8001790 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001774:	b29a      	uxth	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800177e:	b2da      	uxtb	r2, r3
 8001780:	8979      	ldrh	r1, [r7, #10]
 8001782:	2300      	movs	r3, #0
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 fa1a 	bl	8001bc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001794:	b29b      	uxth	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d19e      	bne.n	80016d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	6a39      	ldr	r1, [r7, #32]
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 f8ec 	bl	800197c <I2C_WaitOnSTOPFlagUntilTimeout>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e01a      	b.n	80017e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2220      	movs	r2, #32
 80017b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80017c2:	400b      	ands	r3, r1
 80017c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2220      	movs	r2, #32
 80017ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e000      	b.n	80017e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80017e2:	2302      	movs	r3, #2
  }
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	80002000 	.word	0x80002000
 80017f0:	fe00e800 	.word	0xfe00e800

080017f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b02      	cmp	r3, #2
 8001808:	d103      	bne.n	8001812 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2200      	movs	r2, #0
 8001810:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b01      	cmp	r3, #1
 800181e:	d007      	beq.n	8001830 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	699a      	ldr	r2, [r3, #24]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0201 	orr.w	r2, r2, #1
 800182e:	619a      	str	r2, [r3, #24]
  }
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	4613      	mov	r3, r2
 800184a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800184c:	e03b      	b.n	80018c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	6839      	ldr	r1, [r7, #0]
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 f8d6 	bl	8001a04 <I2C_IsErrorOccurred>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e041      	b.n	80018e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001868:	d02d      	beq.n	80018c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800186a:	f7ff faed 	bl	8000e48 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d302      	bcc.n	8001880 <I2C_WaitOnFlagUntilTimeout+0x44>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d122      	bne.n	80018c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	699a      	ldr	r2, [r3, #24]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	4013      	ands	r3, r2
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	429a      	cmp	r2, r3
 800188e:	bf0c      	ite	eq
 8001890:	2301      	moveq	r3, #1
 8001892:	2300      	movne	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	461a      	mov	r2, r3
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	429a      	cmp	r2, r3
 800189c:	d113      	bne.n	80018c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	f043 0220 	orr.w	r2, r3, #32
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2220      	movs	r2, #32
 80018ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00f      	b.n	80018e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	699a      	ldr	r2, [r3, #24]
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4013      	ands	r3, r2
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	bf0c      	ite	eq
 80018d6:	2301      	moveq	r3, #1
 80018d8:	2300      	movne	r3, #0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	461a      	mov	r2, r3
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d0b4      	beq.n	800184e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b084      	sub	sp, #16
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018fa:	e033      	b.n	8001964 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	68b9      	ldr	r1, [r7, #8]
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f000 f87f 	bl	8001a04 <I2C_IsErrorOccurred>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e031      	b.n	8001974 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001916:	d025      	beq.n	8001964 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001918:	f7ff fa96 	bl	8000e48 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	429a      	cmp	r2, r3
 8001926:	d302      	bcc.n	800192e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d11a      	bne.n	8001964 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b02      	cmp	r3, #2
 800193a:	d013      	beq.n	8001964 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001940:	f043 0220 	orr.w	r2, r3, #32
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2220      	movs	r2, #32
 800194c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e007      	b.n	8001974 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b02      	cmp	r3, #2
 8001970:	d1c4      	bne.n	80018fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001988:	e02f      	b.n	80019ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 f838 	bl	8001a04 <I2C_IsErrorOccurred>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e02d      	b.n	80019fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800199e:	f7ff fa53 	bl	8000e48 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d302      	bcc.n	80019b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d11a      	bne.n	80019ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f003 0320 	and.w	r3, r3, #32
 80019be:	2b20      	cmp	r3, #32
 80019c0:	d013      	beq.n	80019ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c6:	f043 0220 	orr.w	r2, r3, #32
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2220      	movs	r2, #32
 80019d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e007      	b.n	80019fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	2b20      	cmp	r3, #32
 80019f6:	d1c8      	bne.n	800198a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	@ 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d068      	beq.n	8001b02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2210      	movs	r2, #16
 8001a36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a38:	e049      	b.n	8001ace <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a40:	d045      	beq.n	8001ace <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a42:	f7ff fa01 	bl	8000e48 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d302      	bcc.n	8001a58 <I2C_IsErrorOccurred+0x54>
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d13a      	bne.n	8001ace <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a7a:	d121      	bne.n	8001ac0 <I2C_IsErrorOccurred+0xbc>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a82:	d01d      	beq.n	8001ac0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001a84:	7cfb      	ldrb	r3, [r7, #19]
 8001a86:	2b20      	cmp	r3, #32
 8001a88:	d01a      	beq.n	8001ac0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001a9a:	f7ff f9d5 	bl	8000e48 <HAL_GetTick>
 8001a9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001aa0:	e00e      	b.n	8001ac0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001aa2:	f7ff f9d1 	bl	8000e48 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b19      	cmp	r3, #25
 8001aae:	d907      	bls.n	8001ac0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	f043 0320 	orr.w	r3, r3, #32
 8001ab6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001abe:	e006      	b.n	8001ace <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f003 0320 	and.w	r3, r3, #32
 8001aca:	2b20      	cmp	r3, #32
 8001acc:	d1e9      	bne.n	8001aa2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b20      	cmp	r3, #32
 8001ada:	d003      	beq.n	8001ae4 <I2C_IsErrorOccurred+0xe0>
 8001adc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0aa      	beq.n	8001a3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d103      	bne.n	8001af4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2220      	movs	r2, #32
 8001af2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00b      	beq.n	8001b2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00b      	beq.n	8001b4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	f043 0308 	orr.w	r3, r3, #8
 8001b3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00b      	beq.n	8001b70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	f043 0302 	orr.w	r3, r3, #2
 8001b5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001b70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d01c      	beq.n	8001bb2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f7ff fe3b 	bl	80017f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6859      	ldr	r1, [r3, #4]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc0 <I2C_IsErrorOccurred+0x1bc>)
 8001b8a:	400b      	ands	r3, r1
 8001b8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	431a      	orrs	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3728      	adds	r7, #40	@ 0x28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	fe00e800 	.word	0xfe00e800

08001bc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	817b      	strh	r3, [r7, #10]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bd6:	897b      	ldrh	r3, [r7, #10]
 8001bd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001bdc:	7a7b      	ldrb	r3, [r7, #9]
 8001bde:	041b      	lsls	r3, r3, #16
 8001be0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001be4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bf2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	0d5b      	lsrs	r3, r3, #21
 8001bfe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001c02:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <I2C_TransferConfig+0x60>)
 8001c04:	430b      	orrs	r3, r1
 8001c06:	43db      	mvns	r3, r3
 8001c08:	ea02 0103 	and.w	r1, r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c16:	bf00      	nop
 8001c18:	371c      	adds	r7, #28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	03ff63ff 	.word	0x03ff63ff

08001c28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b20      	cmp	r3, #32
 8001c3c:	d138      	bne.n	8001cb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e032      	b.n	8001cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2224      	movs	r2, #36	@ 0x24
 8001c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0201 	bic.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6819      	ldr	r1, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	e000      	b.n	8001cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cb0:	2302      	movs	r3, #2
  }
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b085      	sub	sp, #20
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d139      	bne.n	8001d48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d101      	bne.n	8001ce2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e033      	b.n	8001d4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2224      	movs	r2, #36	@ 0x24
 8001cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0201 	bic.w	r2, r2, #1
 8001d00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	e000      	b.n	8001d4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d48:	2302      	movs	r3, #2
  }
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001d64:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	e007      	b.n	8001d86 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001d76:	4b07      	ldr	r3, [pc, #28]	@ (8001d94 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 0204 	bic.w	r2, r3, #4
 8001d7e:	4905      	ldr	r1, [pc, #20]	@ (8001d94 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	40030400 	.word	0x40030400

08001d98 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001d9c:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <HAL_ICACHE_Enable+0x1c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a04      	ldr	r2, [pc, #16]	@ (8001db4 <HAL_ICACHE_Enable+0x1c>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	40030400 	.word	0x40030400

08001db8 <HAL_PWREx_ControlVoltageScaling>:
  *        only take effect after the 2.4 GHz RADIO has entered Sleep or Deepsleep mode.
  * @note  In range 2, the 2.4 GHz RADIO shall not transmit nor receive.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  uint32_t vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001dc0:	4b29      	ldr	r3, [pc, #164]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d101      	bne.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e042      	b.n	8001e5c <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Set voltage scaling level */
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 8001dd6:	4b24      	ldr	r3, [pc, #144]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8001dde:	4922      	ldr	r1, [pc, #136]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60cb      	str	r3, [r1, #12]


  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8001de6:	4b21      	ldr	r3, [pc, #132]	@ (8001e6c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2232      	movs	r2, #50	@ 0x32
 8001dec:	fb02 f303 	mul.w	r3, r2, r3
 8001df0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	0c9b      	lsrs	r3, r3, #18
 8001df8:	3301      	adds	r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001dfc:	e002      	b.n	8001e04 <HAL_PWREx_ControlVoltageScaling+0x4c>
  {
    timeout--;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001e04:	4b18      	ldr	r3, [pc, #96]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d102      	bne.n	8001e16 <HAL_PWREx_ControlVoltageScaling+0x5e>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f3      	bne.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x46>
  }

  /* Check time out  */
  if (timeout == 0U)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_PWREx_ControlVoltageScaling+0x68>
  {
    return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e01d      	b.n	8001e5c <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Wait until ACTVOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8001e20:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2232      	movs	r2, #50	@ 0x32
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	4a11      	ldr	r2, [pc, #68]	@ (8001e70 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	0c9b      	lsrs	r3, r3, #18
 8001e32:	3301      	adds	r3, #1
 8001e34:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001e36:	e002      	b.n	8001e3e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <HAL_PWREx_ControlVoltageScaling+0x98>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f3      	bne.n	8001e38 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out  */
  if (timeout == 0U)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0xa2>
  {
    return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e000      	b.n	8001e5c <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	46020800 	.word	0x46020800
 8001e6c:	20000004 	.word	0x20000004
 8001e70:	431bde83 	.word	0x431bde83

08001e74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08c      	sub	sp, #48	@ 0x30
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t mask;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e3d9      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e86:	4b90      	ldr	r3, [pc, #576]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	623b      	str	r3, [r7, #32]
  pllsrc = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001e90:	4b8d      	ldr	r3, [pc, #564]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8001e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d072      	beq.n	8001f8c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL1 in these cases it is not allowed to be disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x44>
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	2b0c      	cmp	r3, #12
 8001eb0:	d12a      	bne.n	8001f08 <HAL_RCC_OscConfig+0x94>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSE)))
 8001eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d127      	bne.n	8001f08 <HAL_RCC_OscConfig+0x94>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x50>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e3ba      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Otherwise, applying divider is allowed */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d15f      	bne.n	8001f8a <HAL_RCC_OscConfig+0x116>
        {
          assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

          /* Adjust the HSE division factor */
          __HAL_RCC_HSE_CONFIG(RCC_HSE_ON | RCC_OscInitStruct->HSEDiv);
 8001eca:	4b7f      	ldr	r3, [pc, #508]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	4a7b      	ldr	r2, [pc, #492]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8001eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ede:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSE value */
          SystemCoreClock = (HSE_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSEPRE)) >> RCC_CR_HSEPRE_Pos)));
 8001ee0:	4b79      	ldr	r3, [pc, #484]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	0d1b      	lsrs	r3, r3, #20
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	4a78      	ldr	r2, [pc, #480]	@ (80020cc <HAL_RCC_OscConfig+0x258>)
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef0:	4a77      	ldr	r2, [pc, #476]	@ (80020d0 <HAL_RCC_OscConfig+0x25c>)
 8001ef2:	6013      	str	r3, [r2, #0]

          /* Adapt Systick interrupt period */
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ef4:	4b77      	ldr	r3, [pc, #476]	@ (80020d4 <HAL_RCC_OscConfig+0x260>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe ff13 	bl	8000d24 <HAL_InitTick>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d042      	beq.n	8001f8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e398      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d01f      	beq.n	8001f50 <HAL_RCC_OscConfig+0xdc>
      {
        assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG((RCC_OscInitStruct->HSEState | RCC_OscInitStruct->HSEDiv));
 8001f10:	4b6d      	ldr	r3, [pc, #436]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6859      	ldr	r1, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	430b      	orrs	r3, r1
 8001f22:	4969      	ldr	r1, [pc, #420]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7fe ff8e 	bl	8000e48 <HAL_GetTick>
 8001f2c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0xce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f30:	f7fe ff8a 	bl	8000e48 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	@ 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e37b      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f42:	4b61      	ldr	r3, [pc, #388]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0xbc>
 8001f4e:	e01d      	b.n	8001f8c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f50:	4b5d      	ldr	r3, [pc, #372]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	495a      	ldr	r1, [pc, #360]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f62:	f7fe ff71 	bl	8000e48 <HAL_GetTick>
 8001f66:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f6a:	f7fe ff6d 	bl	8000e48 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b64      	cmp	r3, #100	@ 0x64
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e35e      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f7c:	4b52      	ldr	r3, [pc, #328]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0xf6>
 8001f88:	e000      	b.n	8001f8c <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001f8a:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d05a      	beq.n	800204e <HAL_RCC_OscConfig+0x1da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_RCC_OscConfig+0x136>
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	2b0c      	cmp	r3, #12
 8001fa2:	d113      	bne.n	8001fcc <HAL_RCC_OscConfig+0x158>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSI)))
 8001fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d110      	bne.n	8001fcc <HAL_RCC_OscConfig+0x158>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x142>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e341      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb6:	4b44      	ldr	r3, [pc, #272]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	041b      	lsls	r3, r3, #16
 8001fc4:	4940      	ldr	r1, [pc, #256]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	610b      	str	r3, [r1, #16]
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001fca:	e040      	b.n	800204e <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d023      	beq.n	800201c <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd4:	4b3c      	ldr	r3, [pc, #240]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a3b      	ldr	r2, [pc, #236]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8001fda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7fe ff32 	bl	8000e48 <HAL_GetTick>
 8001fe4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe8:	f7fe ff2e 	bl	8000e48 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e31f      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ffa:	4b33      	ldr	r3, [pc, #204]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x174>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002006:	4b30      	ldr	r3, [pc, #192]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	041b      	lsls	r3, r3, #16
 8002014:	492c      	ldr	r1, [pc, #176]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8002016:	4313      	orrs	r3, r2
 8002018:	610b      	str	r3, [r1, #16]
 800201a:	e018      	b.n	800204e <HAL_RCC_OscConfig+0x1da>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800201c:	4b2a      	ldr	r3, [pc, #168]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a29      	ldr	r2, [pc, #164]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8002022:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7fe ff0e 	bl	8000e48 <HAL_GetTick>
 800202c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x1ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002030:	f7fe ff0a 	bl	8000e48 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e2fb      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002042:	4b21      	ldr	r3, [pc, #132]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x1bc>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 80d2 	beq.w	8002200 <HAL_RCC_OscConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800205c:	2300      	movs	r3, #0
 800205e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Update LSI1 configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8002062:	4b19      	ldr	r3, [pc, #100]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8002064:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d111      	bne.n	8002094 <HAL_RCC_OscConfig+0x220>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8002072:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002076:	4a14      	ldr	r2, [pc, #80]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8002078:	f043 0304 	orr.w	r3, r3, #4
 800207c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002080:	4b11      	ldr	r3, [pc, #68]	@ (80020c8 <HAL_RCC_OscConfig+0x254>)
 8002082:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800208e:	2301      	movs	r3, #1
 8002090:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002094:	4b10      	ldr	r3, [pc, #64]	@ (80020d8 <HAL_RCC_OscConfig+0x264>)
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d123      	bne.n	80020e8 <HAL_RCC_OscConfig+0x274>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80020a0:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <HAL_RCC_OscConfig+0x264>)
 80020a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a4:	4a0c      	ldr	r2, [pc, #48]	@ (80020d8 <HAL_RCC_OscConfig+0x264>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ac:	f7fe fecc 	bl	8000e48 <HAL_GetTick>
 80020b0:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80020b2:	e013      	b.n	80020dc <HAL_RCC_OscConfig+0x268>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b4:	f7fe fec8 	bl	8000e48 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d90c      	bls.n	80020dc <HAL_RCC_OscConfig+0x268>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e2b9      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
 80020c6:	bf00      	nop
 80020c8:	46020c00 	.word	0x46020c00
 80020cc:	01e84800 	.word	0x01e84800
 80020d0:	20000004 	.word	0x20000004
 80020d4:	20000008 	.word	0x20000008
 80020d8:	46020800 	.word	0x46020800
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80020dc:	4ba4      	ldr	r3, [pc, #656]	@ (8002370 <HAL_RCC_OscConfig+0x4fc>)
 80020de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0e5      	beq.n	80020b4 <HAL_RCC_OscConfig+0x240>
        }
      }
    }

    /* Get BDCR1 register value */
    tmpreg1 = RCC->BDCR1;
 80020e8:	4ba2      	ldr	r3, [pc, #648]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 80020ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020ee:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Define mask depending on LSI presence */
    mask = RCC_BDCR1_LSI1ON;
 80020f0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80020f4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_LSI2_SUPPORT)
    mask |= RCC_BDCR1_LSI2ON;
#endif /* RCC_LSI2_SUPPORT */

    /* Check the LSI1 State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d056      	beq.n	80021ac <HAL_RCC_OscConfig+0x338>
    {
      if ((RCC_OscInitStruct->LSIState & RCC_LSI1_ON) != 0x00u)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d030      	beq.n	800216c <HAL_RCC_OscConfig+0x2f8>
      {
        /* Check LSI1 division factor */
        assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

        /* Check is LSIDiv is requested to be changed and LSI is already ON */
        if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_BDCR1_LSI1PREDIV)) && ((tmpreg1 & RCC_BDCR1_LSI1RDY) != 0x00u))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69da      	ldr	r2, [r3, #28]
 800210e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002114:	429a      	cmp	r2, r3
 8002116:	d020      	beq.n	800215a <HAL_RCC_OscConfig+0x2e6>
 8002118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800211a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d01b      	beq.n	800215a <HAL_RCC_OscConfig+0x2e6>
        {
          /* Disable LSI1 */
          tmpreg1 &= ~RCC_BDCR1_LSI1ON;
 8002122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002124:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002128:	62bb      	str	r3, [r7, #40]	@ 0x28
          RCC->BDCR1 = tmpreg1;
 800212a:	4a92      	ldr	r2, [pc, #584]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 800212c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800212e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002132:	f7fe fe89 	bl	8000e48 <HAL_GetTick>
 8002136:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is disabled */
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x2d8>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800213a:	f7fe fe85 	bl	8000e48 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b14      	cmp	r3, #20
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x2d8>
            {
              /* LSI1 may be forced ON by IWDG */
              return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e276      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 800214c:	4b89      	ldr	r3, [pc, #548]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 800214e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002152:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1ef      	bne.n	800213a <HAL_RCC_OscConfig+0x2c6>
          HAL_Delay(1);
#endif
        }

        /* Set LSI1 division factor */
        tmpreg1 &= ~RCC_BDCR1_LSI1PREDIV;
 800215a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002160:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002168:	4313      	orrs	r3, r2
 800216a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Enable Concerned LSI */
      tmpreg1 |= RCC_OscInitStruct->LSIState;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002172:	4313      	orrs	r3, r2
 8002174:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8002176:	4a7f      	ldr	r2, [pc, #508]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 8002178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800217a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217e:	f7fe fe63 	bl	8000e48 <HAL_GetTick>
 8002182:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready : LSIRDY bit is position ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x324>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002186:	f7fe fe5f 	bl	8000e48 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b14      	cmp	r3, #20
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x324>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e250      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8002198:	4b76      	ldr	r3, [pc, #472]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 800219a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0ed      	beq.n	8002186 <HAL_RCC_OscConfig+0x312>
 80021aa:	e01d      	b.n	80021e8 <HAL_RCC_OscConfig+0x374>
#endif
    }
    else
    {
      /* Disable the Internal Low Speed oscillator LSI1 and LSI2 is available */
      tmpreg1 &= ~mask;
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021b2:	4013      	ands	r3, r2
 80021b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 80021b6:	4a6f      	ldr	r2, [pc, #444]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 80021b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021be:	f7fe fe43 	bl	8000e48 <HAL_GetTick>
 80021c2:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is disabled : LSIRDY bit position is ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x364>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c6:	f7fe fe3f 	bl	8000e48 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b14      	cmp	r3, #20
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x364>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e230      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 80021d8:	4b66      	ldr	r3, [pc, #408]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 80021da:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1ee      	bne.n	80021c6 <HAL_RCC_OscConfig+0x352>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d107      	bne.n	8002200 <HAL_RCC_OscConfig+0x38c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f0:	4b60      	ldr	r3, [pc, #384]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 80021f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021f6:	4a5f      	ldr	r2, [pc, #380]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 80021f8:	f023 0304 	bic.w	r3, r3, #4
 80021fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80e2 	beq.w	80023d2 <HAL_RCC_OscConfig+0x55e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220e:	2300      	movs	r3, #0
 8002210:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8002214:	4b57      	ldr	r3, [pc, #348]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 8002216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	2b00      	cmp	r3, #0
 8002220:	d111      	bne.n	8002246 <HAL_RCC_OscConfig+0x3d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	4b54      	ldr	r3, [pc, #336]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 8002224:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002228:	4a52      	ldr	r2, [pc, #328]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 800222a:	f043 0304 	orr.w	r3, r3, #4
 800222e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002232:	4b50      	ldr	r3, [pc, #320]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 8002234:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002240:	2301      	movs	r3, #1
 8002242:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002246:	4b4a      	ldr	r3, [pc, #296]	@ (8002370 <HAL_RCC_OscConfig+0x4fc>)
 8002248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d118      	bne.n	8002284 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002252:	4b47      	ldr	r3, [pc, #284]	@ (8002370 <HAL_RCC_OscConfig+0x4fc>)
 8002254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002256:	4a46      	ldr	r2, [pc, #280]	@ (8002370 <HAL_RCC_OscConfig+0x4fc>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225e:	f7fe fdf3 	bl	8000e48 <HAL_GetTick>
 8002262:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002266:	f7fe fdef 	bl	8000e48 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e1e0      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002278:	4b3d      	ldr	r3, [pc, #244]	@ (8002370 <HAL_RCC_OscConfig+0x4fc>)
 800227a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x3f2>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d051      	beq.n	8002330 <HAL_RCC_OscConfig+0x4bc>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_LSESYSEN);
 800228c:	4b39      	ldr	r3, [pc, #228]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 800228e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002292:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002296:	62bb      	str	r3, [r7, #40]	@ 0x28
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800229e:	4313      	orrs	r3, r2
 80022a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 80022a2:	4a34      	ldr	r2, [pc, #208]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 80022a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022aa:	f7fe fdcd 	bl	8000e48 <HAL_GetTick>
 80022ae:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 80022b0:	e00a      	b.n	80022c8 <HAL_RCC_OscConfig+0x454>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b2:	f7fe fdc9 	bl	8000e48 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x454>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e1b8      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 80022c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 80022ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0ed      	beq.n	80022b2 <HAL_RCC_OscConfig+0x43e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR1_LSESYSEN) != 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d01e      	beq.n	8002320 <HAL_RCC_OscConfig+0x4ac>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_OscConfig+0x486>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e4:	f7fe fdb0 	bl	8000e48 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x486>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e19f      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 80022fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 80022fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0ed      	beq.n	80022e4 <HAL_RCC_OscConfig+0x470>
 8002308:	e057      	b.n	80023ba <HAL_RCC_OscConfig+0x546>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230a:	f7fe fd9d 	bl	8000e48 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002318:	4293      	cmp	r3, r2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e18c      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8002320:	4b14      	ldr	r3, [pc, #80]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 8002322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002326:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1ed      	bne.n	800230a <HAL_RCC_OscConfig+0x496>
 800232e:	e044      	b.n	80023ba <HAL_RCC_OscConfig+0x546>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR1, (RCC_BDCR1_LSEON | RCC_BDCR1_LSESYSEN));
 8002330:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 8002332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002336:	4a0f      	ldr	r2, [pc, #60]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 8002338:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 800233c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR1, RCC_BDCR1_LSEBYP);
 8002340:	4b0c      	ldr	r3, [pc, #48]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 8002342:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002346:	4a0b      	ldr	r2, [pc, #44]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 8002348:	f023 0304 	bic.w	r3, r3, #4
 800234c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002350:	f7fe fd7a 	bl	8000e48 <HAL_GetTick>
 8002354:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8002356:	e00f      	b.n	8002378 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002358:	f7fe fd76 	bl	8000e48 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002366:	4293      	cmp	r3, r2
 8002368:	d906      	bls.n	8002378 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e165      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
 800236e:	bf00      	nop
 8002370:	46020800 	.word	0x46020800
 8002374:	46020c00 	.word	0x46020c00
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8002378:	4b98      	ldr	r3, [pc, #608]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 800237a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1e8      	bne.n	8002358 <HAL_RCC_OscConfig+0x4e4>
        }
      }

      if (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSEN) != 0U)
 8002386:	4b95      	ldr	r3, [pc, #596]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 8002388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800238c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002390:	2b00      	cmp	r3, #0
 8002392:	d012      	beq.n	80023ba <HAL_RCC_OscConfig+0x546>
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8002394:	e00a      	b.n	80023ac <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002396:	f7fe fd57 	bl	8000e48 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e146      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 80023ac:	4b8b      	ldr	r3, [pc, #556]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 80023ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1ed      	bne.n	8002396 <HAL_RCC_OscConfig+0x522>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c2:	4b86      	ldr	r3, [pc, #536]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 80023c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023c8:	4a84      	ldr	r2, [pc, #528]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 80023ca:	f023 0304 	bic.w	r3, r3, #4
 80023ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if ((RCC_OscInitStruct->PLL1.PLLState) != RCC_PLL_NONE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 812e 	beq.w	8002638 <HAL_RCC_OscConfig+0x7c4>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	2b0c      	cmp	r3, #12
 80023e0:	f000 80ba 	beq.w	8002558 <HAL_RCC_OscConfig+0x6e4>
    {
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_ON)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	f040 8093 	bne.w	8002514 <HAL_RCC_OscConfig+0x6a0>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL1.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL1.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL1.PLLR));

        /* Disable the main PLL1. */
        tmpreg1 = (RCC->CR & ~RCC_CR_PLL1ON);
 80023ee:	4b7b      	ldr	r3, [pc, #492]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023f6:	62bb      	str	r3, [r7, #40]	@ 0x28
        RCC->CR = tmpreg1;
 80023f8:	4a78      	ldr	r2, [pc, #480]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 80023fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7fe fd23 	bl	8000e48 <HAL_GetTick>
 8002402:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        do
        {
          tmpreg1 = RCC->CR;
 8002404:	4b75      	ldr	r3, [pc, #468]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	62bb      	str	r3, [r7, #40]	@ 0x28
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240a:	f7fe fd1d 	bl	8000e48 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e10e      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
          }
        } while ((tmpreg1 & RCC_CR_PLL1RDY) != 0U);
 800241c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1ee      	bne.n	8002404 <HAL_RCC_OscConfig+0x590>

        /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
        if (RCC_OscInitStruct->PLL1.PLLSource == RCC_PLLSOURCE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	2b03      	cmp	r3, #3
 800242c:	d108      	bne.n	8002440 <HAL_RCC_OscConfig+0x5cc>
        {
          /* Clock source is HSE or HSE/2 */
          pllsrc = HSE_VALUE >> ((tmpreg1 & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos);
 800242e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002430:	0d1b      	lsrs	r3, r3, #20
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	4a6a      	ldr	r2, [pc, #424]	@ (80025e0 <HAL_RCC_OscConfig+0x76c>)
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
 800243c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800243e:	e001      	b.n	8002444 <HAL_RCC_OscConfig+0x5d0>
        }
        else
        {
          /* Clock source is HSI */
          pllsrc = HSI_VALUE;
 8002440:	4b68      	ldr	r3, [pc, #416]	@ (80025e4 <HAL_RCC_OscConfig+0x770>)
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Compute VCO input frequency depending on M divider */
        pllsrc = (pllsrc / RCC_OscInitStruct->PLL1.PLLM);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002448:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800244a:	fbb2 f3f3 	udiv	r3, r2, r3
 800244e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllsrc));

        if (pllsrc > PLL_INPUTRANGE0_FREQMAX)
 8002450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002452:	4a65      	ldr	r2, [pc, #404]	@ (80025e8 <HAL_RCC_OscConfig+0x774>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d902      	bls.n	800245e <HAL_RCC_OscConfig+0x5ea>
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE1;
 8002458:	230c      	movs	r3, #12
 800245a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800245c:	e001      	b.n	8002462 <HAL_RCC_OscConfig+0x5ee>
        }
        else
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE0;
 800245e:	2300      	movs	r3, #0
 8002460:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Configure PLL1 source, PLLM divider, VCO input range and enable PLL1R output. Clear also FRACEN*/
        tmpreg2 = RCC->PLL1CFGR;
 8002462:	4b5e      	ldr	r3, [pc, #376]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 8002464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002466:	617b      	str	r3, [r7, #20]
        tmpreg2 &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1RGE | RCC_PLL1CFGR_PLL1FRACEN | RCC_PLL1CFGR_PLL1M);
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f423 63e3 	bic.w	r3, r3, #1816	@ 0x718
 800246e:	f023 0307 	bic.w	r3, r3, #7
 8002472:	617b      	str	r3, [r7, #20]
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800247a:	431a      	orrs	r2, r3
                    ((RCC_OscInitStruct->PLL1.PLLM - 1u) << RCC_PLL1CFGR_PLL1M_Pos) | RCC_PLL1CFGR_PLL1REN);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002480:	3b01      	subs	r3, #1
 8002482:	021b      	lsls	r3, r3, #8
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8002484:	431a      	orrs	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800248e:	617b      	str	r3, [r7, #20]
        RCC->PLL1CFGR = tmpreg2;
 8002490:	4a52      	ldr	r2, [pc, #328]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLLN multiplication factor and PLLP, PLLQ, PLLR dividers */
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249a:	1e5a      	subs	r2, r3, #1
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a0:	3b01      	subs	r3, #1
 80024a2:	025b      	lsls	r3, r3, #9
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 80024a4:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLQ - 1u) << RCC_PLL1DIVR_PLL1Q_Pos) |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024aa:	3b01      	subs	r3, #1
 80024ac:	041b      	lsls	r3, r3, #16
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 80024ae:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLR - 1u) << RCC_PLL1DIVR_PLL1R_Pos));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b4:	3b01      	subs	r3, #1
 80024b6:	061b      	lsls	r3, r3, #24
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
        RCC->PLL1DIVR = tmpreg2;
 80024bc:	4a47      	ldr	r2, [pc, #284]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	6353      	str	r3, [r2, #52]	@ 0x34

        if (RCC_OscInitStruct->PLL1.PLLFractional != 0x00u)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCC_OscConfig+0x66c>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ce:	4a43      	ldr	r2, [pc, #268]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	6393      	str	r3, [r2, #56]	@ 0x38

          /* Enable PLL1FRACEN */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 80024d4:	4b41      	ldr	r3, [pc, #260]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 80024d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d8:	4a40      	ldr	r2, [pc, #256]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 80024da:	f043 0310 	orr.w	r3, r3, #16
 80024de:	6293      	str	r3, [r2, #40]	@ 0x28
        }

        /* Enable the main PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80024e0:	4b3e      	ldr	r3, [pc, #248]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a3d      	ldr	r2, [pc, #244]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 80024e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7fe fcac 	bl	8000e48 <HAL_GetTick>
 80024f0:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x692>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f4:	f7fe fca8 	bl	8000e48 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e099      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002506:	4b35      	ldr	r3, [pc, #212]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x680>
 8002512:	e091      	b.n	8002638 <HAL_RCC_OscConfig+0x7c4>
        }
      }
      else
      {
        /* Disable the main PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002514:	4b31      	ldr	r3, [pc, #196]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a30      	ldr	r2, [pc, #192]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 800251a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800251e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe fc92 	bl	8000e48 <HAL_GetTick>
 8002524:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x6c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002528:	f7fe fc8e 	bl	8000e48 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x6c6>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e07f      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800253a:	4b28      	ldr	r3, [pc, #160]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x6b4>
          }
        }

        /* CLear the PLL1 source and disable outputs to save power when PLL1 is off */
        CLEAR_BIT(RCC->PLL1CFGR, (RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | \
 8002546:	4b25      	ldr	r3, [pc, #148]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 8002548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254a:	4a24      	ldr	r2, [pc, #144]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 800254c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002550:	f023 0303 	bic.w	r3, r3, #3
 8002554:	6293      	str	r3, [r2, #40]	@ 0x28
 8002556:	e06f      	b.n	8002638 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL1 used as System clock source */
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_RCC_OscConfig+0x6f0>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e06a      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        tmpreg1 = RCC->PLL1CFGR;
 8002564:	4b1d      	ldr	r3, [pc, #116]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 8002566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002568:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg2 = RCC->PLL1DIVR;
 800256a:	4b1c      	ldr	r3, [pc, #112]	@ (80025dc <HAL_RCC_OscConfig+0x768>)
 800256c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800256e:	617b      	str	r3, [r7, #20]

        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 8002570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002572:	f003 0203 	and.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	429a      	cmp	r2, r3
 800257c:	d12b      	bne.n	80025d6 <HAL_RCC_OscConfig+0x762>
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 800257e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	f003 0207 	and.w	r2, r3, #7
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258a:	3b01      	subs	r3, #1
        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d122      	bne.n	80025d6 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259a:	3b01      	subs	r3, #1
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d11a      	bne.n	80025d6 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	0a5b      	lsrs	r3, r3, #9
 80025a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ac:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d111      	bne.n	80025d6 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	0c1b      	lsrs	r3, r3, #16
 80025b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025be:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d108      	bne.n	80025d6 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) != (RCC_OscInitStruct->PLL1.PLLR - 1u)))
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	0e1b      	lsrs	r3, r3, #24
 80025c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d0:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d00a      	beq.n	80025ec <HAL_RCC_OscConfig+0x778>
        {
          return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e02f      	b.n	800263a <HAL_RCC_OscConfig+0x7c6>
 80025da:	bf00      	nop
 80025dc:	46020c00 	.word	0x46020c00
 80025e0:	01e84800 	.word	0x01e84800
 80025e4:	00f42400 	.word	0x00f42400
 80025e8:	007a1200 	.word	0x007a1200
        }
        else
        {
          /* Check if only fractional part needs to be updated  */
          tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 80025ec:	4b15      	ldr	r3, [pc, #84]	@ (8002644 <HAL_RCC_OscConfig+0x7d0>)
 80025ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f0:	08db      	lsrs	r3, r3, #3
 80025f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025f6:	62bb      	str	r3, [r7, #40]	@ 0x28

          if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025fe:	429a      	cmp	r2, r3
 8002600:	d01a      	beq.n	8002638 <HAL_RCC_OscConfig+0x7c4>
          {
            assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

            /* Disable PLL1FRACEN */
            __HAL_RCC_PLL1_FRACN_DISABLE();
 8002602:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <HAL_RCC_OscConfig+0x7d0>)
 8002604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002606:	4a0f      	ldr	r2, [pc, #60]	@ (8002644 <HAL_RCC_OscConfig+0x7d0>)
 8002608:	f023 0310 	bic.w	r3, r3, #16
 800260c:	6293      	str	r3, [r2, #40]	@ 0x28

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800260e:	f7fe fc1b 	bl	8000e48 <HAL_GetTick>
 8002612:	61f8      	str	r0, [r7, #28]

            /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
            while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002614:	bf00      	nop
 8002616:	f7fe fc17 	bl	8000e48 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	4293      	cmp	r3, r2
 8002620:	d0f9      	beq.n	8002616 <HAL_RCC_OscConfig+0x7a2>
            {
            }

            /* Configure PLL1 PLL1FRACN */
            __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002626:	4a07      	ldr	r2, [pc, #28]	@ (8002644 <HAL_RCC_OscConfig+0x7d0>)
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	6393      	str	r3, [r2, #56]	@ 0x38

            /* Enable PLL1FRACEN to latch new value. */
            __HAL_RCC_PLL1_FRACN_ENABLE();
 800262c:	4b05      	ldr	r3, [pc, #20]	@ (8002644 <HAL_RCC_OscConfig+0x7d0>)
 800262e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002630:	4a04      	ldr	r2, [pc, #16]	@ (8002644 <HAL_RCC_OscConfig+0x7d0>)
 8002632:	f043 0310 	orr.w	r3, r3, #16
 8002636:	6293      	str	r3, [r2, #40]	@ 0x28
          }
        }
      }
    }
  }
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3730      	adds	r7, #48	@ 0x30
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	46020c00 	.word	0x46020c00

08002648 <HAL_RCC_ClockConfig>:
  *         HCLK5 prescaler is switched automatically by hardware, but configuration shall
  *         always be performed before setting new PLL1 source as Sysclk source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e115      	b.n	8002888 <HAL_RCC_ClockConfig+0x240>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800265c:	4b8c      	ldr	r3, [pc, #560]	@ (8002890 <HAL_RCC_ClockConfig+0x248>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d910      	bls.n	800268c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b89      	ldr	r3, [pc, #548]	@ (8002890 <HAL_RCC_ClockConfig+0x248>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 020f 	bic.w	r2, r3, #15
 8002672:	4987      	ldr	r1, [pc, #540]	@ (8002890 <HAL_RCC_ClockConfig+0x248>)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b85      	ldr	r3, [pc, #532]	@ (8002890 <HAL_RCC_ClockConfig+0x248>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0fd      	b.n	8002888 <HAL_RCC_ClockConfig+0x240>
  }

  /*-------------------------- HCLK5 Configuration --------------------------*/
  /* HCLK5 prescaler is switched automatically by hardware, but configuration shall
    always be performed before setting new PLL1 source as Sysclk source. */
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK5) == RCC_CLOCKTYPE_HCLK5)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00d      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x6c>
  {
    assert_param(IS_RCC_HCLK5_HSEHSI(RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
    assert_param(IS_RCC_HCLK5_PLL1(RCC_ClkInitStruct->AHB5_PLL1_CLKDivider));
    MODIFY_REG(RCC->CFGR4, (RCC_CFGR4_HDIV5 | RCC_CFGR4_HPRE5),
 8002698:	4b7e      	ldr	r3, [pc, #504]	@ (8002894 <HAL_RCC_ClockConfig+0x24c>)
 800269a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800269e:	f023 0217 	bic.w	r2, r3, #23
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6999      	ldr	r1, [r3, #24]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	430b      	orrs	r3, r1
 80026ac:	4979      	ldr	r1, [pc, #484]	@ (8002894 <HAL_RCC_ClockConfig+0x24c>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
               (RCC_ClkInitStruct->AHB5_PLL1_CLKDivider | RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d06f      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 80026c0:	4b74      	ldr	r3, [pc, #464]	@ (8002894 <HAL_RCC_ClockConfig+0x24c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	617b      	str	r3, [r7, #20]

    /* PLL1 is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d118      	bne.n	8002700 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the PLL1 ready flag */
      if ((tmpreg1 & RCC_CR_PLL1RDY) == 0U)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0d5      	b.n	8002888 <HAL_RCC_ClockConfig+0x240>
      }
      else
      {
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 80026dc:	4b6d      	ldr	r3, [pc, #436]	@ (8002894 <HAL_RCC_ClockConfig+0x24c>)
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	f003 020c 	and.w	r2, r3, #12
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d01a      	beq.n	8002724 <HAL_RCC_ClockConfig+0xdc>
        {
          /* Whatever is PLL frequency, use step prediv to reach maximum frequency. */
          /* Select pll1r to be prediv with 2-step divider when selected as Sysclk source */
          MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRESTEP, RCC_PLL1CFGR_PLL1RCLKPRE);
 80026ee:	4b69      	ldr	r3, [pc, #420]	@ (8002894 <HAL_RCC_ClockConfig+0x24c>)
 80026f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80026f6:	4a67      	ldr	r2, [pc, #412]	@ (8002894 <HAL_RCC_ClockConfig+0x24c>)
 80026f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026fc:	6293      	str	r3, [r2, #40]	@ 0x28
 80026fe:	e011      	b.n	8002724 <HAL_RCC_ClockConfig+0xdc>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d106      	bne.n	8002716 <HAL_RCC_ClockConfig+0xce>
      {
        /* Check the HSE ready flag */
        if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d108      	bne.n	8002724 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e0b8      	b.n	8002888 <HAL_RCC_ClockConfig+0x240>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0b1      	b.n	8002888 <HAL_RCC_ClockConfig+0x240>
        }
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002724:	4b5b      	ldr	r3, [pc, #364]	@ (8002894 <HAL_RCC_ClockConfig+0x24c>)
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	f023 0203 	bic.w	r2, r3, #3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4958      	ldr	r1, [pc, #352]	@ (8002894 <HAL_RCC_ClockConfig+0x24c>)
 8002732:	4313      	orrs	r3, r2
 8002734:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002736:	f7fe fb87 	bl	8000e48 <HAL_GetTick>
 800273a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 800273c:	e00a      	b.n	8002754 <HAL_RCC_ClockConfig+0x10c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273e:	f7fe fb83 	bl	8000e48 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e099      	b.n	8002888 <HAL_RCC_ClockConfig+0x240>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8002754:	4b4f      	ldr	r3, [pc, #316]	@ (8002894 <HAL_RCC_ClockConfig+0x24c>)
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	f003 020c 	and.w	r2, r3, #12
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	429a      	cmp	r2, r3
 8002764:	d1eb      	bne.n	800273e <HAL_RCC_ClockConfig+0xf6>
      }
    }

    /* If PLL1rCLK is asked to be SYSCLK source, clear prediv. */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b03      	cmp	r3, #3
 800276c:	d118      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x158>
    {
      /* Set PLL1R prediv to not divided */
      CLEAR_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRE);
 800276e:	4b49      	ldr	r3, [pc, #292]	@ (8002894 <HAL_RCC_ClockConfig+0x24c>)
 8002770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002772:	4a48      	ldr	r2, [pc, #288]	@ (8002894 <HAL_RCC_ClockConfig+0x24c>)
 8002774:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002778:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277a:	f7fe fb65 	bl	8000e48 <HAL_GetTick>
 800277e:	60f8      	str	r0, [r7, #12]

      /* Wait until PLL1 not divided is ready */
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8002780:	e008      	b.n	8002794 <HAL_RCC_ClockConfig+0x14c>
      {
        if ((HAL_GetTick() - tickstart) > PLL1_NDIV_TIMEOUT_VALUE)
 8002782:	f7fe fb61 	bl	8000e48 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b0a      	cmp	r3, #10
 800278e:	d901      	bls.n	8002794 <HAL_RCC_ClockConfig+0x14c>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e079      	b.n	8002888 <HAL_RCC_ClockConfig+0x240>
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8002794:	4b3f      	ldr	r3, [pc, #252]	@ (8002894 <HAL_RCC_ClockConfig+0x24c>)
 8002796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002798:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 80027a0:	4b3c      	ldr	r3, [pc, #240]	@ (8002894 <HAL_RCC_ClockConfig+0x24c>)
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f023 0307 	bic.w	r3, r3, #7
 80027bc:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80027c8:	2301      	movs	r3, #1
 80027ca:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027de:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80027ea:	2301      	movs	r3, #1
 80027ec:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00b      	beq.n	8002812 <HAL_RCC_ClockConfig+0x1ca>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002800:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	4313      	orrs	r3, r2
 800280c:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 800280e:	2301      	movs	r3, #1
 8002810:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <HAL_RCC_ClockConfig+0x1d6>
  {
    RCC->CFGR2 = tmpreg1;
 8002818:	4a1e      	ldr	r2, [pc, #120]	@ (8002894 <HAL_RCC_ClockConfig+0x24c>)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK7 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK7) == RCC_CLOCKTYPE_PCLK7)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB7CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB7CLKDivider);
 800282a:	4a1a      	ldr	r2, [pc, #104]	@ (8002894 <HAL_RCC_ClockConfig+0x24c>)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002832:	4b17      	ldr	r3, [pc, #92]	@ (8002890 <HAL_RCC_ClockConfig+0x248>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d210      	bcs.n	8002862 <HAL_RCC_ClockConfig+0x21a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002840:	4b13      	ldr	r3, [pc, #76]	@ (8002890 <HAL_RCC_ClockConfig+0x248>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f023 020f 	bic.w	r2, r3, #15
 8002848:	4911      	ldr	r1, [pc, #68]	@ (8002890 <HAL_RCC_ClockConfig+0x248>)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	4313      	orrs	r3, r2
 800284e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002850:	4b0f      	ldr	r3, [pc, #60]	@ (8002890 <HAL_RCC_ClockConfig+0x248>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d001      	beq.n	8002862 <HAL_RCC_ClockConfig+0x21a>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e012      	b.n	8002888 <HAL_RCC_ClockConfig+0x240>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002862:	f000 f81f 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 8002866:	4602      	mov	r2, r0
 8002868:	4b0a      	ldr	r3, [pc, #40]	@ (8002894 <HAL_RCC_ClockConfig+0x24c>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	4909      	ldr	r1, [pc, #36]	@ (8002898 <HAL_RCC_ClockConfig+0x250>)
 8002872:	5ccb      	ldrb	r3, [r1, r3]
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
 8002878:	4a08      	ldr	r2, [pc, #32]	@ (800289c <HAL_RCC_ClockConfig+0x254>)
 800287a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800287c:	4b08      	ldr	r3, [pc, #32]	@ (80028a0 <HAL_RCC_ClockConfig+0x258>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe fa4f 	bl	8000d24 <HAL_InitTick>
 8002886:	4603      	mov	r3, r0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40022000 	.word	0x40022000
 8002894:	46020c00 	.word	0x46020c00
 8002898:	08002e1c 	.word	0x08002e1c
 800289c:	20000004 	.word	0x20000004
 80028a0:	20000008 	.word	0x20000008

080028a4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
  uint32_t sysclk;

  /* Get SYSCLK source */
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028aa:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x48>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	607b      	str	r3, [r7, #4]

  if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d102      	bne.n	80028c0 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 80028ba:	4b0d      	ldr	r3, [pc, #52]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x4c>)
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	e00f      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d109      	bne.n	80028da <HAL_RCC_GetSysClockFreq+0x36>
  {
    /* HSE used as system clock source. Check if HSE is divided by 2 */
    sysclk = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 80028c6:	4b09      	ldr	r3, [pc, #36]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x48>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	0d1b      	lsrs	r3, r3, #20
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	4a08      	ldr	r2, [pc, #32]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x50>)
 80028d2:	fa22 f303 	lsr.w	r3, r2, r3
 80028d6:	607b      	str	r3, [r7, #4]
 80028d8:	e002      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else
  {
    /* PLL1 used as system clock source */
    sysclk = HAL_RCC_GetPLL1RFreq();
 80028da:	f000 f80d 	bl	80028f8 <HAL_RCC_GetPLL1RFreq>
 80028de:	6078      	str	r0, [r7, #4]
  }

  return sysclk;
 80028e0:	687b      	ldr	r3, [r7, #4]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	46020c00 	.word	0x46020c00
 80028f0:	00f42400 	.word	0x00f42400
 80028f4:	01e84800 	.word	0x01e84800

080028f8 <HAL_RCC_GetPLL1RFreq>:
/**
  * @brief  Return the PLL1R frequency.
  * @retval PLL1R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL1RFreq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL1R divider */
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 80028fe:	4b0b      	ldr	r3, [pc, #44]	@ (800292c <HAL_RCC_GetPLL1RFreq+0x34>)
 8002900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002902:	0e1b      	lsrs	r3, r3, #24
 8002904:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002908:	3301      	adds	r3, #1
 800290a:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL1R one */
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 800290c:	f000 f810 	bl	8002930 <RCC_PLL1_GetVCOOutputFreq>
 8002910:	eef0 7a40 	vmov.f32	s15, s0
 8002914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002918:	ee17 2a90 	vmov	r2, s15
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	46020c00 	.word	0x46020c00

08002930 <RCC_PLL1_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL1 VCO output frequency
  * @retval Value of PLL1 VCO output frequency
  */
static float_t RCC_PLL1_GetVCOOutputFreq(void)
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
  float_t pllm;
  float_t plln;
  float_t pllfracn;

  /* Get PLL1 DIVR register value */
  tmpreg1 = RCC->PLL1DIVR;
 8002936:	4b36      	ldr	r3, [pc, #216]	@ (8002a10 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8002938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293a:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 multiplication factor */
  tmp = (tmpreg1 & RCC_PLL1DIVR_PLL1N) + 1U;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002942:	3301      	adds	r3, #1
 8002944:	617b      	str	r3, [r7, #20]
  plln = (float_t) tmp;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002950:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Get PLL1 CFGR register value */
  tmpreg1 = RCC->PLL1CFGR;
 8002954:	4b2e      	ldr	r3, [pc, #184]	@ (8002a10 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8002956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002958:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 divider */
  tmp = ((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	3301      	adds	r3, #1
 8002964:	617b      	str	r3, [r7, #20]
  pllm = (float_t) tmp;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002970:	edc7 7a01 	vstr	s15, [r7, #4]

  /* Check if fractional part is enable */
  if ((tmpreg1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2b00      	cmp	r3, #0
 800297c:	d006      	beq.n	800298c <RCC_PLL1_GetVCOOutputFreq+0x5c>
  {
    tmp = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 800297e:	4b24      	ldr	r3, [pc, #144]	@ (8002a10 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8002980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002982:	08db      	lsrs	r3, r3, #3
 8002984:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	e001      	b.n	8002990 <RCC_PLL1_GetVCOOutputFreq+0x60>
  }
  else
  {
    tmp = 0u;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
  }
  pllfracn = (float_t)tmp;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	ee07 3a90 	vmov	s15, r3
 8002996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800299a:	edc7 7a00 	vstr	s15, [r7]

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLL1CFGR_PLL1SRC)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d002      	beq.n	80029ae <RCC_PLL1_GetVCOOutputFreq+0x7e>
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d003      	beq.n	80029b4 <RCC_PLL1_GetVCOOutputFreq+0x84>
 80029ac:	e013      	b.n	80029d6 <RCC_PLL1_GetVCOOutputFreq+0xa6>
  {
    /* HSI used as PLL1 clock source */
    case RCC_PLLSOURCE_HSI:
      pllsrc = (float_t)HSI_VALUE;
 80029ae:	4b19      	ldr	r3, [pc, #100]	@ (8002a14 <RCC_PLL1_GetVCOOutputFreq+0xe4>)
 80029b0:	613b      	str	r3, [r7, #16]
      break;
 80029b2:	e014      	b.n	80029de <RCC_PLL1_GetVCOOutputFreq+0xae>

    /* HSE used as PLL1 clock source */
    case RCC_PLLSOURCE_HSE:
      tmp = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 80029b4:	4b16      	ldr	r3, [pc, #88]	@ (8002a10 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	0d1b      	lsrs	r3, r3, #20
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	4a16      	ldr	r2, [pc, #88]	@ (8002a18 <RCC_PLL1_GetVCOOutputFreq+0xe8>)
 80029c0:	fa22 f303 	lsr.w	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]
      pllsrc = (float_t)tmp;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	ee07 3a90 	vmov	s15, r3
 80029cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d0:	edc7 7a04 	vstr	s15, [r7, #16]
      break;
 80029d4:	e003      	b.n	80029de <RCC_PLL1_GetVCOOutputFreq+0xae>

    default:
      pllsrc = (float_t)0;
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	613b      	str	r3, [r7, #16]
      break;
 80029dc:	bf00      	nop
  }

  /* Compute VCO output frequency */
  return ((pllsrc / pllm) * (plln + (pllfracn / (float_t)0x2000u)));
 80029de:	edd7 6a04 	vldr	s13, [r7, #16]
 80029e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80029e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ea:	edd7 7a00 	vldr	s15, [r7]
 80029ee:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8002a1c <RCC_PLL1_GetVCOOutputFreq+0xec>
 80029f2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80029f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80029fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029fe:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002a02:	eeb0 0a67 	vmov.f32	s0, s15
 8002a06:	371c      	adds	r7, #28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	46020c00 	.word	0x46020c00
 8002a14:	4b742400 	.word	0x4b742400
 8002a18:	01e84800 	.word	0x01e84800
 8002a1c:	46000000 	.word	0x46000000

08002a20 <HAL_RCCEx_PeriphCLKConfig>:
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a34:	4b95      	ldr	r3, [pc, #596]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a3a:	f023 0203 	bic.w	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4992      	ldr	r1, [pc, #584]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

#if defined (USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a56:	4b8d      	ldr	r3, [pc, #564]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a5c:	f023 020c 	bic.w	r2, r3, #12
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4989      	ldr	r1, [pc, #548]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
#endif


#if defined (I2C1)
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a78:	4b84      	ldr	r3, [pc, #528]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	4981      	ldr	r1, [pc, #516]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0



#if defined (LPTIM2)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a9a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aa0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	4978      	ldr	r1, [pc, #480]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }
#endif

#if defined (SPI1)
  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 8002abc:	4b73      	ldr	r3, [pc, #460]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ac2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	4970      	ldr	r1, [pc, #448]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }
#endif

  /*-------------------------- SYSTICK clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SYSTICK) == RCC_PERIPHCLK_SYSTICK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SYSTICKCLKSOURCE(PeriphClkInit->SystickClockSelection));

    /* Configure the SYSTICK clock source */
    __HAL_RCC_SYSTICK_CONFIG(PeriphClkInit->SystickClockSelection);
 8002ade:	4b6b      	ldr	r3, [pc, #428]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ae4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	4967      	ldr	r1, [pc, #412]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- TIMIC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMIC) == RCC_PERIPHCLK_TIMIC)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMICCLKSOURCE(PeriphClkInit->TimIcClockSelection));

    /* Configure the TIMIC clock source */
    __HAL_RCC_TIMIC_CONFIG(PeriphClkInit->TimIcClockSelection);
 8002b00:	4b62      	ldr	r3, [pc, #392]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b06:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	495f      	ldr	r1, [pc, #380]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
    }
  }
#endif

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d015      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Set the source of RNG clock*/
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b22:	4b5a      	ldr	r3, [pc, #360]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002b28:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	4956      	ldr	r1, [pc, #344]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL1Q)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b40:	d105      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x12e>
    {
      /* Enable PLL1 QCLK output */
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_QCLK);
 8002b42:	4b52      	ldr	r3, [pc, #328]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b46:	4a51      	ldr	r2, [pc, #324]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b4c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
  }
#endif

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b5a:	4b4c      	ldr	r3, [pc, #304]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b60:	f023 0203 	bic.w	r2, r3, #3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b68:	4948      	ldr	r1, [pc, #288]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
 8002b7c:	4b43      	ldr	r3, [pc, #268]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b82:	f023 0218 	bic.w	r2, r3, #24
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8a:	4940      	ldr	r1, [pc, #256]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }


  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ba0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ba4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bac:	4937      	ldr	r1, [pc, #220]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bc0:	4b32      	ldr	r3, [pc, #200]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002bc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002bc6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	492f      	ldr	r1, [pc, #188]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d015      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC4 interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002be2:	4b2a      	ldr	r3, [pc, #168]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002be4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002be8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf0:	4926      	ldr	r1, [pc, #152]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

    if (PeriphClkInit->AdcClockSelection == RCC_PERIPHCLK_ADC)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c00:	d105      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      /* Enable PLL1 PCLK output */
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_PCLK);
 8002c02:	4b22      	ldr	r3, [pc, #136]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c06:	4a21      	ldr	r2, [pc, #132]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c0c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 808d 	beq.w	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	77fb      	strb	r3, [r7, #31]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
    tmpreg2 = __HAL_RCC_GET_RTC_SOURCE();
 8002c20:	4b1a      	ldr	r3, [pc, #104]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002c22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c2a:	61bb      	str	r3, [r7, #24]

    /* Check if RTC clock source needs to be changed */
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d07f      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      /* Enable Power Clock */
      if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01u)
 8002c36:	4b15      	ldr	r3, [pc, #84]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d110      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x246>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002c44:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c4a:	4a10      	ldr	r2, [pc, #64]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002c4c:	f043 0304 	orr.w	r3, r3, #4
 8002c50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002c54:	4b0d      	ldr	r3, [pc, #52]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002c62:	2301      	movs	r3, #1
 8002c64:	77fb      	strb	r3, [r7, #31]
      }

      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002c66:	4b0a      	ldr	r3, [pc, #40]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6a:	4a09      	ldr	r2, [pc, #36]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c72:	f7fe f8e9 	bl	8000e48 <HAL_GetTick>
 8002c76:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002c78:	e00c      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x274>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7a:	f7fe f8e5 	bl	8000e48 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d905      	bls.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x274>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e071      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002c8c:	46020c00 	.word	0x46020c00
 8002c90:	46020800 	.word	0x46020800
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002c94:	4b38      	ldr	r3, [pc, #224]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0ec      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }

      /* Save BDCR1 content */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_RTCSEL);
 8002ca0:	4b36      	ldr	r3, [pc, #216]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ca6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002caa:	613b      	str	r3, [r7, #16]

      /* Check if a backup domain reset is required */
      if (tmpreg2 != RCC_RTCCLKSOURCE_DISABLE)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00f      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
#if defined(RCC_LSI2_SUPPORT)
        /* Save BDCR2 content */
        tmpreg2 = RCC->BDCR2;
#endif /* RCC_LSI2_SUPPORT */
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cb2:	4b32      	ldr	r3, [pc, #200]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cb8:	4a30      	ldr	r2, [pc, #192]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cbe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cc2:	4b2e      	ldr	r3, [pc, #184]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cc8:	4a2c      	ldr	r2, [pc, #176]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        RCC->BDCR2 = tmpreg2;
#endif /* RCC_LSI2_SUPPORT */
      }

      /* Apply new RTC clock source selection */
      RCC->BDCR1 = (tmpreg1 | PeriphClkInit->RTCClockSelection);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cd6:	4929      	ldr	r1, [pc, #164]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0

      /* mask all ON bits */
      tmpreg2 = (RCC_BDCR1_LSEON | RCC_BDCR1_LSI1ON);
 8002ce0:	4b27      	ldr	r3, [pc, #156]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002ce2:	61bb      	str	r3, [r7, #24]
#if defined(RCC_LSI2_SUPPORT)
      tmpreg2 |= RCC_BDCR1_LSI2ON;
#endif

      /* Check which oscillators were enable */
      tmpreg2 &= tmpreg1;
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]

      if (tmpreg2 != 0x00u)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d016      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x300>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7fe f8a9 	bl	8000e48 <HAL_GetTick>
 8002cf6:	6178      	str	r0, [r7, #20]

        /* Wait till all oscillators are enabled : RDY bit position is ON shifted by 1 */
        while (READ_BIT(RCC->BDCR1, (tmpreg2 << 1)) == 0x00u)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fe f8a5 	bl	8000e48 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e02f      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x350>
        while (READ_BIT(RCC->BDCR1, (tmpreg2 << 1)) == 0x00u)
 8002d10:	4b1a      	ldr	r3, [pc, #104]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d12:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0ec      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x2da>
          }
        }
      }
      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002d20:	7ffb      	ldrb	r3, [r7, #31]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d107      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002d26:	4b15      	ldr	r3, [pc, #84]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d2c:	4a13      	ldr	r2, [pc, #76]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d2e:	f023 0304 	bic.w	r3, r3, #4
 8002d32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }
    }
  }

  /*-------------------------- RADIO Sleep Timer clock source configuration --*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RADIOST) == RCC_PERIPHCLK_RADIOST)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d015      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RADIOSLEEPTIMERSOURCE(PeriphClkInit->RadioSlpTimClockSelection));

    /* Configure the RADIO Sleep Timer clock source */
    __HAL_RCC_RADIOSLPTIM_CONFIG(PeriphClkInit->RadioSlpTimClockSelection);
 8002d42:	4b0e      	ldr	r3, [pc, #56]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d50:	490a      	ldr	r1, [pc, #40]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0

    /* Check configuration validity as under Backup domain access control */
    if (__HAL_RCC_GET_RADIOSLPTIM_SOURCE() != PeriphClkInit->RadioSlpTimClockSelection)
 8002d58:	4b08      	ldr	r3, [pc, #32]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d5e:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d001      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x350>
    }
  }

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3720      	adds	r7, #32
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	46020800 	.word	0x46020800
 8002d7c:	46020c00 	.word	0x46020c00
 8002d80:	04000001 	.word	0x04000001

08002d84 <memset>:
 8002d84:	4402      	add	r2, r0
 8002d86:	4603      	mov	r3, r0
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d100      	bne.n	8002d8e <memset+0xa>
 8002d8c:	4770      	bx	lr
 8002d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d92:	e7f9      	b.n	8002d88 <memset+0x4>

08002d94 <__libc_init_array>:
 8002d94:	b570      	push	{r4, r5, r6, lr}
 8002d96:	4d0d      	ldr	r5, [pc, #52]	@ (8002dcc <__libc_init_array+0x38>)
 8002d98:	2600      	movs	r6, #0
 8002d9a:	4c0d      	ldr	r4, [pc, #52]	@ (8002dd0 <__libc_init_array+0x3c>)
 8002d9c:	1b64      	subs	r4, r4, r5
 8002d9e:	10a4      	asrs	r4, r4, #2
 8002da0:	42a6      	cmp	r6, r4
 8002da2:	d109      	bne.n	8002db8 <__libc_init_array+0x24>
 8002da4:	4d0b      	ldr	r5, [pc, #44]	@ (8002dd4 <__libc_init_array+0x40>)
 8002da6:	2600      	movs	r6, #0
 8002da8:	4c0b      	ldr	r4, [pc, #44]	@ (8002dd8 <__libc_init_array+0x44>)
 8002daa:	f000 f817 	bl	8002ddc <_init>
 8002dae:	1b64      	subs	r4, r4, r5
 8002db0:	10a4      	asrs	r4, r4, #2
 8002db2:	42a6      	cmp	r6, r4
 8002db4:	d105      	bne.n	8002dc2 <__libc_init_array+0x2e>
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
 8002db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dbc:	3601      	adds	r6, #1
 8002dbe:	4798      	blx	r3
 8002dc0:	e7ee      	b.n	8002da0 <__libc_init_array+0xc>
 8002dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc6:	3601      	adds	r6, #1
 8002dc8:	4798      	blx	r3
 8002dca:	e7f2      	b.n	8002db2 <__libc_init_array+0x1e>
 8002dcc:	08002e2c 	.word	0x08002e2c
 8002dd0:	08002e2c 	.word	0x08002e2c
 8002dd4:	08002e2c 	.word	0x08002e2c
 8002dd8:	08002e30 	.word	0x08002e30

08002ddc <_init>:
 8002ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dde:	bf00      	nop
 8002de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de2:	bc08      	pop	{r3}
 8002de4:	469e      	mov	lr, r3
 8002de6:	4770      	bx	lr

08002de8 <_fini>:
 8002de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dea:	bf00      	nop
 8002dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dee:	bc08      	pop	{r3}
 8002df0:	469e      	mov	lr, r3
 8002df2:	4770      	bx	lr
