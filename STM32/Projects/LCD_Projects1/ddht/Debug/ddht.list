
ddht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000015c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bac  08000160  08000160  00001160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08006d10  08006d10  00007d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070c8  080070c8  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  080070c8  080070c8  000080c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070d0  080070d0  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070d0  080070d0  000080d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070d4  080070d4  000080d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080070d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200001d4  080072ac  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  080072ac  00009400  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001127f  00000000  00000000  0000920a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002674  00000000  00000000  0001a489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0001cb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5b  00000000  00000000  0001dc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a7c  00000000  00000000  0001e9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001523c  00000000  00000000  00041427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9912  00000000  00000000  00056663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ff75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ac8  00000000  00000000  0012ffb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00135a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000160 <__do_global_dtors_aux>:
 8000160:	b510      	push	{r4, lr}
 8000162:	4c05      	ldr	r4, [pc, #20]	@ (8000178 <__do_global_dtors_aux+0x18>)
 8000164:	7823      	ldrb	r3, [r4, #0]
 8000166:	b933      	cbnz	r3, 8000176 <__do_global_dtors_aux+0x16>
 8000168:	4b04      	ldr	r3, [pc, #16]	@ (800017c <__do_global_dtors_aux+0x1c>)
 800016a:	b113      	cbz	r3, 8000172 <__do_global_dtors_aux+0x12>
 800016c:	4804      	ldr	r0, [pc, #16]	@ (8000180 <__do_global_dtors_aux+0x20>)
 800016e:	f3af 8000 	nop.w
 8000172:	2301      	movs	r3, #1
 8000174:	7023      	strb	r3, [r4, #0]
 8000176:	bd10      	pop	{r4, pc}
 8000178:	200001d4 	.word	0x200001d4
 800017c:	00000000 	.word	0x00000000
 8000180:	08006cf4 	.word	0x08006cf4

08000184 <frame_dummy>:
 8000184:	b508      	push	{r3, lr}
 8000186:	4b03      	ldr	r3, [pc, #12]	@ (8000194 <frame_dummy+0x10>)
 8000188:	b11b      	cbz	r3, 8000192 <frame_dummy+0xe>
 800018a:	4903      	ldr	r1, [pc, #12]	@ (8000198 <frame_dummy+0x14>)
 800018c:	4803      	ldr	r0, [pc, #12]	@ (800019c <frame_dummy+0x18>)
 800018e:	f3af 8000 	nop.w
 8000192:	bd08      	pop	{r3, pc}
 8000194:	00000000 	.word	0x00000000
 8000198:	200001d8 	.word	0x200001d8
 800019c:	08006cf4 	.word	0x08006cf4

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <__aeabi_drsub>:
 80001b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001b4:	e002      	b.n	80001bc <__adddf3>
 80001b6:	bf00      	nop

080001b8 <__aeabi_dsub>:
 80001b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001bc <__adddf3>:
 80001bc:	b530      	push	{r4, r5, lr}
 80001be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001c6:	ea94 0f05 	teq	r4, r5
 80001ca:	bf08      	it	eq
 80001cc:	ea90 0f02 	teqeq	r0, r2
 80001d0:	bf1f      	itttt	ne
 80001d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001e2:	f000 80e2 	beq.w	80003aa <__adddf3+0x1ee>
 80001e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ee:	bfb8      	it	lt
 80001f0:	426d      	neglt	r5, r5
 80001f2:	dd0c      	ble.n	800020e <__adddf3+0x52>
 80001f4:	442c      	add	r4, r5
 80001f6:	ea80 0202 	eor.w	r2, r0, r2
 80001fa:	ea81 0303 	eor.w	r3, r1, r3
 80001fe:	ea82 0000 	eor.w	r0, r2, r0
 8000202:	ea83 0101 	eor.w	r1, r3, r1
 8000206:	ea80 0202 	eor.w	r2, r0, r2
 800020a:	ea81 0303 	eor.w	r3, r1, r3
 800020e:	2d36      	cmp	r5, #54	@ 0x36
 8000210:	bf88      	it	hi
 8000212:	bd30      	pophi	{r4, r5, pc}
 8000214:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000218:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800021c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000220:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000224:	d002      	beq.n	800022c <__adddf3+0x70>
 8000226:	4240      	negs	r0, r0
 8000228:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800022c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000230:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000234:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000238:	d002      	beq.n	8000240 <__adddf3+0x84>
 800023a:	4252      	negs	r2, r2
 800023c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000240:	ea94 0f05 	teq	r4, r5
 8000244:	f000 80a7 	beq.w	8000396 <__adddf3+0x1da>
 8000248:	f1a4 0401 	sub.w	r4, r4, #1
 800024c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000250:	db0d      	blt.n	800026e <__adddf3+0xb2>
 8000252:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000256:	fa22 f205 	lsr.w	r2, r2, r5
 800025a:	1880      	adds	r0, r0, r2
 800025c:	f141 0100 	adc.w	r1, r1, #0
 8000260:	fa03 f20e 	lsl.w	r2, r3, lr
 8000264:	1880      	adds	r0, r0, r2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	4159      	adcs	r1, r3
 800026c:	e00e      	b.n	800028c <__adddf3+0xd0>
 800026e:	f1a5 0520 	sub.w	r5, r5, #32
 8000272:	f10e 0e20 	add.w	lr, lr, #32
 8000276:	2a01      	cmp	r2, #1
 8000278:	fa03 fc0e 	lsl.w	ip, r3, lr
 800027c:	bf28      	it	cs
 800027e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	18c0      	adds	r0, r0, r3
 8000288:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800028c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000290:	d507      	bpl.n	80002a2 <__adddf3+0xe6>
 8000292:	f04f 0e00 	mov.w	lr, #0
 8000296:	f1dc 0c00 	rsbs	ip, ip, #0
 800029a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800029e:	eb6e 0101 	sbc.w	r1, lr, r1
 80002a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002a6:	d31b      	bcc.n	80002e0 <__adddf3+0x124>
 80002a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ac:	d30c      	bcc.n	80002c8 <__adddf3+0x10c>
 80002ae:	0849      	lsrs	r1, r1, #1
 80002b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002b8:	f104 0401 	add.w	r4, r4, #1
 80002bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002c4:	f080 809a 	bcs.w	80003fc <__adddf3+0x240>
 80002c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	ea41 0105 	orr.w	r1, r1, r5
 80002de:	bd30      	pop	{r4, r5, pc}
 80002e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002e4:	4140      	adcs	r0, r0
 80002e6:	eb41 0101 	adc.w	r1, r1, r1
 80002ea:	3c01      	subs	r4, #1
 80002ec:	bf28      	it	cs
 80002ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002f2:	d2e9      	bcs.n	80002c8 <__adddf3+0x10c>
 80002f4:	f091 0f00 	teq	r1, #0
 80002f8:	bf04      	itt	eq
 80002fa:	4601      	moveq	r1, r0
 80002fc:	2000      	moveq	r0, #0
 80002fe:	fab1 f381 	clz	r3, r1
 8000302:	bf08      	it	eq
 8000304:	3320      	addeq	r3, #32
 8000306:	f1a3 030b 	sub.w	r3, r3, #11
 800030a:	f1b3 0220 	subs.w	r2, r3, #32
 800030e:	da0c      	bge.n	800032a <__adddf3+0x16e>
 8000310:	320c      	adds	r2, #12
 8000312:	dd08      	ble.n	8000326 <__adddf3+0x16a>
 8000314:	f102 0c14 	add.w	ip, r2, #20
 8000318:	f1c2 020c 	rsb	r2, r2, #12
 800031c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000320:	fa21 f102 	lsr.w	r1, r1, r2
 8000324:	e00c      	b.n	8000340 <__adddf3+0x184>
 8000326:	f102 0214 	add.w	r2, r2, #20
 800032a:	bfd8      	it	le
 800032c:	f1c2 0c20 	rsble	ip, r2, #32
 8000330:	fa01 f102 	lsl.w	r1, r1, r2
 8000334:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000338:	bfdc      	itt	le
 800033a:	ea41 010c 	orrle.w	r1, r1, ip
 800033e:	4090      	lslle	r0, r2
 8000340:	1ae4      	subs	r4, r4, r3
 8000342:	bfa2      	ittt	ge
 8000344:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000348:	4329      	orrge	r1, r5
 800034a:	bd30      	popge	{r4, r5, pc}
 800034c:	ea6f 0404 	mvn.w	r4, r4
 8000350:	3c1f      	subs	r4, #31
 8000352:	da1c      	bge.n	800038e <__adddf3+0x1d2>
 8000354:	340c      	adds	r4, #12
 8000356:	dc0e      	bgt.n	8000376 <__adddf3+0x1ba>
 8000358:	f104 0414 	add.w	r4, r4, #20
 800035c:	f1c4 0220 	rsb	r2, r4, #32
 8000360:	fa20 f004 	lsr.w	r0, r0, r4
 8000364:	fa01 f302 	lsl.w	r3, r1, r2
 8000368:	ea40 0003 	orr.w	r0, r0, r3
 800036c:	fa21 f304 	lsr.w	r3, r1, r4
 8000370:	ea45 0103 	orr.w	r1, r5, r3
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f1c4 040c 	rsb	r4, r4, #12
 800037a:	f1c4 0220 	rsb	r2, r4, #32
 800037e:	fa20 f002 	lsr.w	r0, r0, r2
 8000382:	fa01 f304 	lsl.w	r3, r1, r4
 8000386:	ea40 0003 	orr.w	r0, r0, r3
 800038a:	4629      	mov	r1, r5
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	fa21 f004 	lsr.w	r0, r1, r4
 8000392:	4629      	mov	r1, r5
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f094 0f00 	teq	r4, #0
 800039a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800039e:	bf06      	itte	eq
 80003a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003a4:	3401      	addeq	r4, #1
 80003a6:	3d01      	subne	r5, #1
 80003a8:	e74e      	b.n	8000248 <__adddf3+0x8c>
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf18      	it	ne
 80003b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b4:	d029      	beq.n	800040a <__adddf3+0x24e>
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	d005      	beq.n	80003ce <__adddf3+0x212>
 80003c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003c6:	bf04      	itt	eq
 80003c8:	4619      	moveq	r1, r3
 80003ca:	4610      	moveq	r0, r2
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea91 0f03 	teq	r1, r3
 80003d2:	bf1e      	ittt	ne
 80003d4:	2100      	movne	r1, #0
 80003d6:	2000      	movne	r0, #0
 80003d8:	bd30      	popne	{r4, r5, pc}
 80003da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003de:	d105      	bne.n	80003ec <__adddf3+0x230>
 80003e0:	0040      	lsls	r0, r0, #1
 80003e2:	4149      	adcs	r1, r1
 80003e4:	bf28      	it	cs
 80003e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ea:	bd30      	pop	{r4, r5, pc}
 80003ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003f0:	bf3c      	itt	cc
 80003f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003f6:	bd30      	popcc	{r4, r5, pc}
 80003f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000400:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000404:	f04f 0000 	mov.w	r0, #0
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf1a      	itte	ne
 8000410:	4619      	movne	r1, r3
 8000412:	4610      	movne	r0, r2
 8000414:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000418:	bf1c      	itt	ne
 800041a:	460b      	movne	r3, r1
 800041c:	4602      	movne	r2, r0
 800041e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000422:	bf06      	itte	eq
 8000424:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000428:	ea91 0f03 	teqeq	r1, r3
 800042c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	bf00      	nop

08000434 <__aeabi_ui2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f04f 0500 	mov.w	r5, #0
 800044c:	f04f 0100 	mov.w	r1, #0
 8000450:	e750      	b.n	80002f4 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_i2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800046c:	bf48      	it	mi
 800046e:	4240      	negmi	r0, r0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e73e      	b.n	80002f4 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_f2d>:
 8000478:	0042      	lsls	r2, r0, #1
 800047a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800047e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000482:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000486:	bf1f      	itttt	ne
 8000488:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800048c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000490:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000494:	4770      	bxne	lr
 8000496:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800049a:	bf08      	it	eq
 800049c:	4770      	bxeq	lr
 800049e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004a2:	bf04      	itt	eq
 80004a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004b8:	e71c      	b.n	80002f4 <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_ul2d>:
 80004bc:	ea50 0201 	orrs.w	r2, r0, r1
 80004c0:	bf08      	it	eq
 80004c2:	4770      	bxeq	lr
 80004c4:	b530      	push	{r4, r5, lr}
 80004c6:	f04f 0500 	mov.w	r5, #0
 80004ca:	e00a      	b.n	80004e2 <__aeabi_l2d+0x16>

080004cc <__aeabi_l2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004da:	d502      	bpl.n	80004e2 <__aeabi_l2d+0x16>
 80004dc:	4240      	negs	r0, r0
 80004de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ee:	f43f aed8 	beq.w	80002a2 <__adddf3+0xe6>
 80004f2:	f04f 0203 	mov.w	r2, #3
 80004f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004fa:	bf18      	it	ne
 80004fc:	3203      	addne	r2, #3
 80004fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000502:	bf18      	it	ne
 8000504:	3203      	addne	r2, #3
 8000506:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000512:	fa20 f002 	lsr.w	r0, r0, r2
 8000516:	fa01 fe03 	lsl.w	lr, r1, r3
 800051a:	ea40 000e 	orr.w	r0, r0, lr
 800051e:	fa21 f102 	lsr.w	r1, r1, r2
 8000522:	4414      	add	r4, r2
 8000524:	e6bd      	b.n	80002a2 <__adddf3+0xe6>
 8000526:	bf00      	nop

08000528 <__aeabi_dmul>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800052e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000532:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000536:	bf1d      	ittte	ne
 8000538:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800053c:	ea94 0f0c 	teqne	r4, ip
 8000540:	ea95 0f0c 	teqne	r5, ip
 8000544:	f000 f8de 	bleq	8000704 <__aeabi_dmul+0x1dc>
 8000548:	442c      	add	r4, r5
 800054a:	ea81 0603 	eor.w	r6, r1, r3
 800054e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000552:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000556:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800055a:	bf18      	it	ne
 800055c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000560:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000564:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000568:	d038      	beq.n	80005dc <__aeabi_dmul+0xb4>
 800056a:	fba0 ce02 	umull	ip, lr, r0, r2
 800056e:	f04f 0500 	mov.w	r5, #0
 8000572:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000576:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800057a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800057e:	f04f 0600 	mov.w	r6, #0
 8000582:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000586:	f09c 0f00 	teq	ip, #0
 800058a:	bf18      	it	ne
 800058c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000590:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000594:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000598:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800059c:	d204      	bcs.n	80005a8 <__aeabi_dmul+0x80>
 800059e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005a2:	416d      	adcs	r5, r5
 80005a4:	eb46 0606 	adc.w	r6, r6, r6
 80005a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005c0:	bf88      	it	hi
 80005c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005c6:	d81e      	bhi.n	8000606 <__aeabi_dmul+0xde>
 80005c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005cc:	bf08      	it	eq
 80005ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005d2:	f150 0000 	adcs.w	r0, r0, #0
 80005d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005e0:	ea46 0101 	orr.w	r1, r6, r1
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	ea81 0103 	eor.w	r1, r1, r3
 80005ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005f0:	bfc2      	ittt	gt
 80005f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	popgt	{r4, r5, r6, pc}
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000600:	f04f 0e00 	mov.w	lr, #0
 8000604:	3c01      	subs	r4, #1
 8000606:	f300 80ab 	bgt.w	8000760 <__aeabi_dmul+0x238>
 800060a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800060e:	bfde      	ittt	le
 8000610:	2000      	movle	r0, #0
 8000612:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000616:	bd70      	pople	{r4, r5, r6, pc}
 8000618:	f1c4 0400 	rsb	r4, r4, #0
 800061c:	3c20      	subs	r4, #32
 800061e:	da35      	bge.n	800068c <__aeabi_dmul+0x164>
 8000620:	340c      	adds	r4, #12
 8000622:	dc1b      	bgt.n	800065c <__aeabi_dmul+0x134>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f305 	lsl.w	r3, r0, r5
 8000630:	fa20 f004 	lsr.w	r0, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000640:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000644:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000648:	fa21 f604 	lsr.w	r6, r1, r4
 800064c:	eb42 0106 	adc.w	r1, r2, r6
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 040c 	rsb	r4, r4, #12
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f304 	lsl.w	r3, r0, r4
 8000668:	fa20 f005 	lsr.w	r0, r0, r5
 800066c:	fa01 f204 	lsl.w	r2, r1, r4
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	f141 0100 	adc.w	r1, r1, #0
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f205 	lsl.w	r2, r0, r5
 8000694:	ea4e 0e02 	orr.w	lr, lr, r2
 8000698:	fa20 f304 	lsr.w	r3, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea43 0302 	orr.w	r3, r3, r2
 80006a4:	fa21 f004 	lsr.w	r0, r1, r4
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	fa21 f204 	lsr.w	r2, r1, r4
 80006b0:	ea20 0002 	bic.w	r0, r0, r2
 80006b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f094 0f00 	teq	r4, #0
 80006c8:	d10f      	bne.n	80006ea <__aeabi_dmul+0x1c2>
 80006ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ce:	0040      	lsls	r0, r0, #1
 80006d0:	eb41 0101 	adc.w	r1, r1, r1
 80006d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3c01      	subeq	r4, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1a6>
 80006de:	ea41 0106 	orr.w	r1, r1, r6
 80006e2:	f095 0f00 	teq	r5, #0
 80006e6:	bf18      	it	ne
 80006e8:	4770      	bxne	lr
 80006ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ee:	0052      	lsls	r2, r2, #1
 80006f0:	eb43 0303 	adc.w	r3, r3, r3
 80006f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3d01      	subeq	r5, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1c6>
 80006fe:	ea43 0306 	orr.w	r3, r3, r6
 8000702:	4770      	bx	lr
 8000704:	ea94 0f0c 	teq	r4, ip
 8000708:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800070c:	bf18      	it	ne
 800070e:	ea95 0f0c 	teqne	r5, ip
 8000712:	d00c      	beq.n	800072e <__aeabi_dmul+0x206>
 8000714:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000718:	bf18      	it	ne
 800071a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071e:	d1d1      	bne.n	80006c4 <__aeabi_dmul+0x19c>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd70      	pop	{r4, r5, r6, pc}
 800072e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000732:	bf06      	itte	eq
 8000734:	4610      	moveq	r0, r2
 8000736:	4619      	moveq	r1, r3
 8000738:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073c:	d019      	beq.n	8000772 <__aeabi_dmul+0x24a>
 800073e:	ea94 0f0c 	teq	r4, ip
 8000742:	d102      	bne.n	800074a <__aeabi_dmul+0x222>
 8000744:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000748:	d113      	bne.n	8000772 <__aeabi_dmul+0x24a>
 800074a:	ea95 0f0c 	teq	r5, ip
 800074e:	d105      	bne.n	800075c <__aeabi_dmul+0x234>
 8000750:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000754:	bf1c      	itt	ne
 8000756:	4610      	movne	r0, r2
 8000758:	4619      	movne	r1, r3
 800075a:	d10a      	bne.n	8000772 <__aeabi_dmul+0x24a>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000768:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800076c:	f04f 0000 	mov.w	r0, #0
 8000770:	bd70      	pop	{r4, r5, r6, pc}
 8000772:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000776:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800077a:	bd70      	pop	{r4, r5, r6, pc}

0800077c <__aeabi_ddiv>:
 800077c:	b570      	push	{r4, r5, r6, lr}
 800077e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000782:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000786:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800078a:	bf1d      	ittte	ne
 800078c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000790:	ea94 0f0c 	teqne	r4, ip
 8000794:	ea95 0f0c 	teqne	r5, ip
 8000798:	f000 f8a7 	bleq	80008ea <__aeabi_ddiv+0x16e>
 800079c:	eba4 0405 	sub.w	r4, r4, r5
 80007a0:	ea81 0e03 	eor.w	lr, r1, r3
 80007a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ac:	f000 8088 	beq.w	80008c0 <__aeabi_ddiv+0x144>
 80007b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007d4:	429d      	cmp	r5, r3
 80007d6:	bf08      	it	eq
 80007d8:	4296      	cmpeq	r6, r2
 80007da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007e2:	d202      	bcs.n	80007ea <__aeabi_ddiv+0x6e>
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	1ab6      	subs	r6, r6, r2
 80007ec:	eb65 0503 	sbc.w	r5, r5, r3
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000858:	ea55 0e06 	orrs.w	lr, r5, r6
 800085c:	d018      	beq.n	8000890 <__aeabi_ddiv+0x114>
 800085e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000862:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000866:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800086a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800086e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000872:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000876:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800087a:	d1c0      	bne.n	80007fe <__aeabi_ddiv+0x82>
 800087c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000880:	d10b      	bne.n	800089a <__aeabi_ddiv+0x11e>
 8000882:	ea41 0100 	orr.w	r1, r1, r0
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800088e:	e7b6      	b.n	80007fe <__aeabi_ddiv+0x82>
 8000890:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000894:	bf04      	itt	eq
 8000896:	4301      	orreq	r1, r0
 8000898:	2000      	moveq	r0, #0
 800089a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800089e:	bf88      	it	hi
 80008a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008a4:	f63f aeaf 	bhi.w	8000606 <__aeabi_dmul+0xde>
 80008a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ac:	bf04      	itt	eq
 80008ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008b6:	f150 0000 	adcs.w	r0, r0, #0
 80008ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008be:	bd70      	pop	{r4, r5, r6, pc}
 80008c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008cc:	bfc2      	ittt	gt
 80008ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	popgt	{r4, r5, r6, pc}
 80008d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008dc:	f04f 0e00 	mov.w	lr, #0
 80008e0:	3c01      	subs	r4, #1
 80008e2:	e690      	b.n	8000606 <__aeabi_dmul+0xde>
 80008e4:	ea45 0e06 	orr.w	lr, r5, r6
 80008e8:	e68d      	b.n	8000606 <__aeabi_dmul+0xde>
 80008ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ee:	ea94 0f0c 	teq	r4, ip
 80008f2:	bf08      	it	eq
 80008f4:	ea95 0f0c 	teqeq	r5, ip
 80008f8:	f43f af3b 	beq.w	8000772 <__aeabi_dmul+0x24a>
 80008fc:	ea94 0f0c 	teq	r4, ip
 8000900:	d10a      	bne.n	8000918 <__aeabi_ddiv+0x19c>
 8000902:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000906:	f47f af34 	bne.w	8000772 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	f47f af25 	bne.w	800075c <__aeabi_dmul+0x234>
 8000912:	4610      	mov	r0, r2
 8000914:	4619      	mov	r1, r3
 8000916:	e72c      	b.n	8000772 <__aeabi_dmul+0x24a>
 8000918:	ea95 0f0c 	teq	r5, ip
 800091c:	d106      	bne.n	800092c <__aeabi_ddiv+0x1b0>
 800091e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000922:	f43f aefd 	beq.w	8000720 <__aeabi_dmul+0x1f8>
 8000926:	4610      	mov	r0, r2
 8000928:	4619      	mov	r1, r3
 800092a:	e722      	b.n	8000772 <__aeabi_dmul+0x24a>
 800092c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000936:	f47f aec5 	bne.w	80006c4 <__aeabi_dmul+0x19c>
 800093a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800093e:	f47f af0d 	bne.w	800075c <__aeabi_dmul+0x234>
 8000942:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000946:	f47f aeeb 	bne.w	8000720 <__aeabi_dmul+0x1f8>
 800094a:	e712      	b.n	8000772 <__aeabi_dmul+0x24a>

0800094c <__gedf2>:
 800094c:	f04f 3cff 	mov.w	ip, #4294967295
 8000950:	e006      	b.n	8000960 <__cmpdf2+0x4>
 8000952:	bf00      	nop

08000954 <__ledf2>:
 8000954:	f04f 0c01 	mov.w	ip, #1
 8000958:	e002      	b.n	8000960 <__cmpdf2+0x4>
 800095a:	bf00      	nop

0800095c <__cmpdf2>:
 800095c:	f04f 0c01 	mov.w	ip, #1
 8000960:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000964:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800096c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000976:	d01b      	beq.n	80009b0 <__cmpdf2+0x54>
 8000978:	b001      	add	sp, #4
 800097a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800097e:	bf0c      	ite	eq
 8000980:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000984:	ea91 0f03 	teqne	r1, r3
 8000988:	bf02      	ittt	eq
 800098a:	ea90 0f02 	teqeq	r0, r2
 800098e:	2000      	moveq	r0, #0
 8000990:	4770      	bxeq	lr
 8000992:	f110 0f00 	cmn.w	r0, #0
 8000996:	ea91 0f03 	teq	r1, r3
 800099a:	bf58      	it	pl
 800099c:	4299      	cmppl	r1, r3
 800099e:	bf08      	it	eq
 80009a0:	4290      	cmpeq	r0, r2
 80009a2:	bf2c      	ite	cs
 80009a4:	17d8      	asrcs	r0, r3, #31
 80009a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009aa:	f040 0001 	orr.w	r0, r0, #1
 80009ae:	4770      	bx	lr
 80009b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b8:	d102      	bne.n	80009c0 <__cmpdf2+0x64>
 80009ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009be:	d107      	bne.n	80009d0 <__cmpdf2+0x74>
 80009c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d1d6      	bne.n	8000978 <__cmpdf2+0x1c>
 80009ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ce:	d0d3      	beq.n	8000978 <__cmpdf2+0x1c>
 80009d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <__aeabi_cdrcmple>:
 80009d8:	4684      	mov	ip, r0
 80009da:	4610      	mov	r0, r2
 80009dc:	4662      	mov	r2, ip
 80009de:	468c      	mov	ip, r1
 80009e0:	4619      	mov	r1, r3
 80009e2:	4663      	mov	r3, ip
 80009e4:	e000      	b.n	80009e8 <__aeabi_cdcmpeq>
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdcmpeq>:
 80009e8:	b501      	push	{r0, lr}
 80009ea:	f7ff ffb7 	bl	800095c <__cmpdf2>
 80009ee:	2800      	cmp	r0, #0
 80009f0:	bf48      	it	mi
 80009f2:	f110 0f00 	cmnmi.w	r0, #0
 80009f6:	bd01      	pop	{r0, pc}

080009f8 <__aeabi_dcmpeq>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff fff4 	bl	80009e8 <__aeabi_cdcmpeq>
 8000a00:	bf0c      	ite	eq
 8000a02:	2001      	moveq	r0, #1
 8000a04:	2000      	movne	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmplt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffea 	bl	80009e8 <__aeabi_cdcmpeq>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmple>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffe0 	bl	80009e8 <__aeabi_cdcmpeq>
 8000a28:	bf94      	ite	ls
 8000a2a:	2001      	movls	r0, #1
 8000a2c:	2000      	movhi	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmpge>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffce 	bl	80009d8 <__aeabi_cdrcmple>
 8000a3c:	bf94      	ite	ls
 8000a3e:	2001      	movls	r0, #1
 8000a40:	2000      	movhi	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmpgt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffc4 	bl	80009d8 <__aeabi_cdrcmple>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpun>:
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d102      	bne.n	8000a6c <__aeabi_dcmpun+0x10>
 8000a66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a6a:	d10a      	bne.n	8000a82 <__aeabi_dcmpun+0x26>
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x20>
 8000a76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a7a:	d102      	bne.n	8000a82 <__aeabi_dcmpun+0x26>
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	f04f 0001 	mov.w	r0, #1
 8000a86:	4770      	bx	lr

08000a88 <__aeabi_d2iz>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d215      	bcs.n	8000abe <__aeabi_d2iz+0x36>
 8000a92:	d511      	bpl.n	8000ab8 <__aeabi_d2iz+0x30>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d912      	bls.n	8000ac4 <__aeabi_d2iz+0x3c>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	bf18      	it	ne
 8000ab4:	4240      	negne	r0, r0
 8000ab6:	4770      	bx	lr
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac2:	d105      	bne.n	8000ad0 <__aeabi_d2iz+0x48>
 8000ac4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	bf08      	it	eq
 8000aca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_d2f>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae0:	bf24      	itt	cs
 8000ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aea:	d90d      	bls.n	8000b08 <__aeabi_d2f+0x30>
 8000aec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b0c:	d121      	bne.n	8000b52 <__aeabi_d2f+0x7a>
 8000b0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b12:	bfbc      	itt	lt
 8000b14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	4770      	bxlt	lr
 8000b1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b22:	f1c2 0218 	rsb	r2, r2, #24
 8000b26:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b32:	bf18      	it	ne
 8000b34:	f040 0001 	orrne.w	r0, r0, #1
 8000b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b44:	ea40 000c 	orr.w	r0, r0, ip
 8000b48:	fa23 f302 	lsr.w	r3, r3, r2
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	e7cc      	b.n	8000aec <__aeabi_d2f+0x14>
 8000b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b56:	d107      	bne.n	8000b68 <__aeabi_d2f+0x90>
 8000b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b66:	4770      	bxne	lr
 8000b68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to your setup

void lcd_send_cmd (char cmd)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af02      	add	r7, sp, #8
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f023 030f 	bic.w	r3, r3, #15
 8000b88:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	011b      	lsls	r3, r3, #4
 8000b8e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	f043 030c 	orr.w	r3, r3, #12
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ba4:	7bbb      	ldrb	r3, [r7, #14]
 8000ba6:	f043 030c 	orr.w	r3, r3, #12
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000bae:	7bbb      	ldrb	r3, [r7, #14]
 8000bb0:	f043 0308 	orr.w	r3, r3, #8
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000bb8:	f107 0208 	add.w	r2, r7, #8
 8000bbc:	2364      	movs	r3, #100	@ 0x64
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	214e      	movs	r1, #78	@ 0x4e
 8000bc4:	4803      	ldr	r0, [pc, #12]	@ (8000bd4 <lcd_send_cmd+0x5c>)
 8000bc6:	f001 fb7b 	bl	80022c0 <HAL_I2C_Master_Transmit>
}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200001f0 	.word	0x200001f0

08000bd8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f023 030f 	bic.w	r3, r3, #15
 8000be8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	011b      	lsls	r3, r3, #4
 8000bee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
 8000bf2:	f043 030d 	orr.w	r3, r3, #13
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	f043 0309 	orr.w	r3, r3, #9
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	f043 030d 	orr.w	r3, r3, #13
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000c0e:	7bbb      	ldrb	r3, [r7, #14]
 8000c10:	f043 0309 	orr.w	r3, r3, #9
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c18:	f107 0208 	add.w	r2, r7, #8
 8000c1c:	2364      	movs	r3, #100	@ 0x64
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2304      	movs	r3, #4
 8000c22:	214e      	movs	r1, #78	@ 0x4e
 8000c24:	4803      	ldr	r0, [pc, #12]	@ (8000c34 <lcd_send_data+0x5c>)
 8000c26:	f001 fb4b 	bl	80022c0 <HAL_I2C_Master_Transmit>
}
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200001f0 	.word	0x200001f0

08000c38 <lcd_clear>:

void lcd_clear (void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f7ff ff9b 	bl	8000b78 <lcd_send_cmd>
	HAL_Delay(10);
 8000c42:	200a      	movs	r0, #10
 8000c44:	f000 ff66 	bl	8001b14 <HAL_Delay>
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
    switch (row)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d003      	beq.n	8000c64 <lcd_put_cur+0x18>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d005      	beq.n	8000c6e <lcd_put_cur+0x22>
 8000c62:	e009      	b.n	8000c78 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c6a:	603b      	str	r3, [r7, #0]
            break;
 8000c6c:	e004      	b.n	8000c78 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000c74:	603b      	str	r3, [r7, #0]
            break;
 8000c76:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff7b 	bl	8000b78 <lcd_send_cmd>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <lcd_init>:


void lcd_init (void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000c8e:	2032      	movs	r0, #50	@ 0x32
 8000c90:	f000 ff40 	bl	8001b14 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c94:	2030      	movs	r0, #48	@ 0x30
 8000c96:	f7ff ff6f 	bl	8000b78 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000c9a:	2005      	movs	r0, #5
 8000c9c:	f000 ff3a 	bl	8001b14 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ca0:	2030      	movs	r0, #48	@ 0x30
 8000ca2:	f7ff ff69 	bl	8000b78 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f000 ff34 	bl	8001b14 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000cac:	2030      	movs	r0, #48	@ 0x30
 8000cae:	f7ff ff63 	bl	8000b78 <lcd_send_cmd>
	HAL_Delay(10);
 8000cb2:	200a      	movs	r0, #10
 8000cb4:	f000 ff2e 	bl	8001b14 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000cb8:	2020      	movs	r0, #32
 8000cba:	f7ff ff5d 	bl	8000b78 <lcd_send_cmd>
	HAL_Delay(10);
 8000cbe:	200a      	movs	r0, #10
 8000cc0:	f000 ff28 	bl	8001b14 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000cc4:	2028      	movs	r0, #40	@ 0x28
 8000cc6:	f7ff ff57 	bl	8000b78 <lcd_send_cmd>
	HAL_Delay(1);
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f000 ff22 	bl	8001b14 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000cd0:	2008      	movs	r0, #8
 8000cd2:	f7ff ff51 	bl	8000b78 <lcd_send_cmd>
	HAL_Delay(1);
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f000 ff1c 	bl	8001b14 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff ff4b 	bl	8000b78 <lcd_send_cmd>
	HAL_Delay(1);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f000 ff16 	bl	8001b14 <HAL_Delay>
	HAL_Delay(1);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f000 ff13 	bl	8001b14 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000cee:	2006      	movs	r0, #6
 8000cf0:	f7ff ff42 	bl	8000b78 <lcd_send_cmd>
	HAL_Delay(1);
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f000 ff0d 	bl	8001b14 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000cfa:	200c      	movs	r0, #12
 8000cfc:	f7ff ff3c 	bl	8000b78 <lcd_send_cmd>
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000d0c:	e006      	b.n	8000d1c <lcd_send_string+0x18>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	1c5a      	adds	r2, r3, #1
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ff5e 	bl	8000bd8 <lcd_send_data>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1f4      	bne.n	8000d0e <lcd_send_string+0xa>
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <microDelay>:
float tCelsius = 0;
float tFahrenheit = 0;
float RH = 0;

void microDelay (uint16_t delay)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000d3a:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <microDelay+0x30>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim3) < delay);
 8000d42:	bf00      	nop
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <microDelay+0x30>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d3f9      	bcc.n	8000d44 <microDelay+0x14>
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000244 	.word	0x20000244

08000d64 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000d7c:	2380      	movs	r3, #128	@ 0x80
 8000d7e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	482a      	ldr	r0, [pc, #168]	@ (8000e3c <DHT11_Start+0xd8>)
 8000d92:	f001 f841 	bl	8001e18 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000d96:	2200      	movs	r2, #0
 8000d98:	2180      	movs	r1, #128	@ 0x80
 8000d9a:	4828      	ldr	r0, [pc, #160]	@ (8000e3c <DHT11_Start+0xd8>)
 8000d9c:	f001 f9a0 	bl	80020e0 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000da0:	2014      	movs	r0, #20
 8000da2:	f000 feb7 	bl	8001b14 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000da6:	2201      	movs	r2, #1
 8000da8:	2180      	movs	r1, #128	@ 0x80
 8000daa:	4824      	ldr	r0, [pc, #144]	@ (8000e3c <DHT11_Start+0xd8>)
 8000dac:	f001 f998 	bl	80020e0 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000db0:	201e      	movs	r0, #30
 8000db2:	f7ff ffbd 	bl	8000d30 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	481e      	ldr	r0, [pc, #120]	@ (8000e3c <DHT11_Start+0xd8>)
 8000dc4:	f001 f828 	bl	8001e18 <HAL_GPIO_Init>
  microDelay (40);
 8000dc8:	2028      	movs	r0, #40	@ 0x28
 8000dca:	f7ff ffb1 	bl	8000d30 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000dce:	2180      	movs	r1, #128	@ 0x80
 8000dd0:	481a      	ldr	r0, [pc, #104]	@ (8000e3c <DHT11_Start+0xd8>)
 8000dd2:	f001 f96d 	bl	80020b0 <HAL_GPIO_ReadPin>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d10b      	bne.n	8000df4 <DHT11_Start+0x90>
  {
    microDelay (80);
 8000ddc:	2050      	movs	r0, #80	@ 0x50
 8000dde:	f7ff ffa7 	bl	8000d30 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000de2:	2180      	movs	r1, #128	@ 0x80
 8000de4:	4815      	ldr	r0, [pc, #84]	@ (8000e3c <DHT11_Start+0xd8>)
 8000de6:	f001 f963 	bl	80020b0 <HAL_GPIO_ReadPin>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <DHT11_Start+0x90>
 8000df0:	2301      	movs	r3, #1
 8000df2:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8000df4:	f000 fe82 	bl	8001afc <HAL_GetTick>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4a11      	ldr	r2, [pc, #68]	@ (8000e40 <DHT11_Start+0xdc>)
 8000dfc:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000dfe:	f000 fe7d 	bl	8001afc <HAL_GetTick>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4a0f      	ldr	r2, [pc, #60]	@ (8000e44 <DHT11_Start+0xe0>)
 8000e06:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e08:	e004      	b.n	8000e14 <DHT11_Start+0xb0>
  {
    cMillis = HAL_GetTick();
 8000e0a:	f000 fe77 	bl	8001afc <HAL_GetTick>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a0c      	ldr	r2, [pc, #48]	@ (8000e44 <DHT11_Start+0xe0>)
 8000e12:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e14:	2180      	movs	r1, #128	@ 0x80
 8000e16:	4809      	ldr	r0, [pc, #36]	@ (8000e3c <DHT11_Start+0xd8>)
 8000e18:	f001 f94a 	bl	80020b0 <HAL_GPIO_ReadPin>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d006      	beq.n	8000e30 <DHT11_Start+0xcc>
 8000e22:	4b07      	ldr	r3, [pc, #28]	@ (8000e40 <DHT11_Start+0xdc>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	1c9a      	adds	r2, r3, #2
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <DHT11_Start+0xe0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8ec      	bhi.n	8000e0a <DHT11_Start+0xa6>
  }
  return Response;
 8000e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	42020400 	.word	0x42020400
 8000e40:	20000298 	.word	0x20000298
 8000e44:	2000029c 	.word	0x2000029c

08000e48 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	71fb      	strb	r3, [r7, #7]
 8000e52:	e063      	b.n	8000f1c <DHT11_Read+0xd4>
  {
    pMillis = HAL_GetTick();
 8000e54:	f000 fe52 	bl	8001afc <HAL_GetTick>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4a34      	ldr	r2, [pc, #208]	@ (8000f2c <DHT11_Read+0xe4>)
 8000e5c:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000e5e:	f000 fe4d 	bl	8001afc <HAL_GetTick>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a32      	ldr	r2, [pc, #200]	@ (8000f30 <DHT11_Read+0xe8>)
 8000e66:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e68:	e004      	b.n	8000e74 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8000e6a:	f000 fe47 	bl	8001afc <HAL_GetTick>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4a2f      	ldr	r2, [pc, #188]	@ (8000f30 <DHT11_Read+0xe8>)
 8000e72:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e74:	2180      	movs	r1, #128	@ 0x80
 8000e76:	482f      	ldr	r0, [pc, #188]	@ (8000f34 <DHT11_Read+0xec>)
 8000e78:	f001 f91a 	bl	80020b0 <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d106      	bne.n	8000e90 <DHT11_Read+0x48>
 8000e82:	4b2a      	ldr	r3, [pc, #168]	@ (8000f2c <DHT11_Read+0xe4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	1c9a      	adds	r2, r3, #2
 8000e88:	4b29      	ldr	r3, [pc, #164]	@ (8000f30 <DHT11_Read+0xe8>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d8ec      	bhi.n	8000e6a <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8000e90:	2028      	movs	r0, #40	@ 0x28
 8000e92:	f7ff ff4d 	bl	8000d30 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000e96:	2180      	movs	r1, #128	@ 0x80
 8000e98:	4826      	ldr	r0, [pc, #152]	@ (8000f34 <DHT11_Read+0xec>)
 8000e9a:	f001 f909 	bl	80020b0 <HAL_GPIO_ReadPin>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10e      	bne.n	8000ec2 <DHT11_Read+0x7a>
      b&= ~(1<<(7-a));
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2201      	movs	r2, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	b25a      	sxtb	r2, r3
 8000eb6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	71bb      	strb	r3, [r7, #6]
 8000ec0:	e00b      	b.n	8000eda <DHT11_Read+0x92>
    else
      b|= (1<<(7-a));
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f1c3 0307 	rsb	r3, r3, #7
 8000ec8:	2201      	movs	r2, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	b25a      	sxtb	r2, r3
 8000ed0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8000eda:	f000 fe0f 	bl	8001afc <HAL_GetTick>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <DHT11_Read+0xe4>)
 8000ee2:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000ee4:	f000 fe0a 	bl	8001afc <HAL_GetTick>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a11      	ldr	r2, [pc, #68]	@ (8000f30 <DHT11_Read+0xe8>)
 8000eec:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000eee:	e004      	b.n	8000efa <DHT11_Read+0xb2>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8000ef0:	f000 fe04 	bl	8001afc <HAL_GetTick>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f30 <DHT11_Read+0xe8>)
 8000ef8:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000efa:	2180      	movs	r1, #128	@ 0x80
 8000efc:	480d      	ldr	r0, [pc, #52]	@ (8000f34 <DHT11_Read+0xec>)
 8000efe:	f001 f8d7 	bl	80020b0 <HAL_GPIO_ReadPin>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d006      	beq.n	8000f16 <DHT11_Read+0xce>
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <DHT11_Read+0xe4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	1c9a      	adds	r2, r3, #2
 8000f0e:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <DHT11_Read+0xe8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d8ec      	bhi.n	8000ef0 <DHT11_Read+0xa8>
  for (a=0;a<8;a++)
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	71fb      	strb	r3, [r7, #7]
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	2b07      	cmp	r3, #7
 8000f20:	d998      	bls.n	8000e54 <DHT11_Read+0xc>
    }
  }
  return b;
 8000f22:	79bb      	ldrb	r3, [r7, #6]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000298 	.word	0x20000298
 8000f30:	2000029c 	.word	0x2000029c
 8000f34:	42020400 	.word	0x42020400

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	ed2d 8b02 	vpush	{d8}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f42:	f000 fd29 	bl	8001998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f46:	f000 f8e9 	bl	800111c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4a:	f000 f9e3 	bl	8001314 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000f4e:	f000 f97f 	bl	8001250 <MX_ICACHE_Init>
  MX_I2C1_Init();
 8000f52:	f000 f93d 	bl	80011d0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000f56:	f000 f98f 	bl	8001278 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000f5a:	4861      	ldr	r0, [pc, #388]	@ (80010e0 <main+0x1a8>)
 8000f5c:	f002 fdc4 	bl	8003ae8 <HAL_TIM_Base_Start>

  lcd_init();
 8000f60:	f7ff fe93 	bl	8000c8a <lcd_init>
  lcd_put_cur(0, 0);
 8000f64:	2100      	movs	r1, #0
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff fe70 	bl	8000c4c <lcd_put_cur>
  lcd_send_string("11installizing...");
 8000f6c:	485d      	ldr	r0, [pc, #372]	@ (80010e4 <main+0x1ac>)
 8000f6e:	f7ff fec9 	bl	8000d04 <lcd_send_string>
  HAL_Delay(2000);
 8000f72:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f76:	f000 fdcd 	bl	8001b14 <HAL_Delay>
  lcd_clear();
 8000f7a:	f7ff fe5d 	bl	8000c38 <lcd_clear>


  while (1)
    {
      if(DHT11_Start())
 8000f7e:	f7ff fef1 	bl	8000d64 <DHT11_Start>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0fa      	beq.n	8000f7e <main+0x46>
      {
        RHI = DHT11_Read(); // Relative humidity integral
 8000f88:	f7ff ff5e 	bl	8000e48 <DHT11_Read>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b55      	ldr	r3, [pc, #340]	@ (80010e8 <main+0x1b0>)
 8000f92:	701a      	strb	r2, [r3, #0]
        RHD = DHT11_Read(); // Relative humidity decimal
 8000f94:	f7ff ff58 	bl	8000e48 <DHT11_Read>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b53      	ldr	r3, [pc, #332]	@ (80010ec <main+0x1b4>)
 8000f9e:	701a      	strb	r2, [r3, #0]
        TCI = DHT11_Read(); // Celsius integral
 8000fa0:	f7ff ff52 	bl	8000e48 <DHT11_Read>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b51      	ldr	r3, [pc, #324]	@ (80010f0 <main+0x1b8>)
 8000faa:	701a      	strb	r2, [r3, #0]
        TCD = DHT11_Read(); // Celsius decimal
 8000fac:	f7ff ff4c 	bl	8000e48 <DHT11_Read>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b4f      	ldr	r3, [pc, #316]	@ (80010f4 <main+0x1bc>)
 8000fb6:	701a      	strb	r2, [r3, #0]
        SUM = DHT11_Read(); // Check sum
 8000fb8:	f7ff ff46 	bl	8000e48 <DHT11_Read>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b4d      	ldr	r3, [pc, #308]	@ (80010f8 <main+0x1c0>)
 8000fc2:	701a      	strb	r2, [r3, #0]
        if (RHI + RHD + TCI + TCD == SUM)
 8000fc4:	4b48      	ldr	r3, [pc, #288]	@ (80010e8 <main+0x1b0>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b48      	ldr	r3, [pc, #288]	@ (80010ec <main+0x1b4>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a47      	ldr	r2, [pc, #284]	@ (80010f0 <main+0x1b8>)
 8000fd2:	7812      	ldrb	r2, [r2, #0]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4a47      	ldr	r2, [pc, #284]	@ (80010f4 <main+0x1bc>)
 8000fd8:	7812      	ldrb	r2, [r2, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a46      	ldr	r2, [pc, #280]	@ (80010f8 <main+0x1c0>)
 8000fde:	7812      	ldrb	r2, [r2, #0]
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d174      	bne.n	80010ce <main+0x196>
        {
          // Can use RHI and TCI for any purposes if whole number only needed
          tCelsius = (float)TCI + (float)(TCD/10.0);
 8000fe4:	4b42      	ldr	r3, [pc, #264]	@ (80010f0 <main+0x1b8>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000ff0:	4b40      	ldr	r3, [pc, #256]	@ (80010f4 <main+0x1bc>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fa2d 	bl	8000454 <__aeabi_i2d>
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	@ (80010fc <main+0x1c4>)
 8001000:	f7ff fbbc 	bl	800077c <__aeabi_ddiv>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fd64 	bl	8000ad8 <__aeabi_d2f>
 8001010:	ee07 0a90 	vmov	s15, r0
 8001014:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001018:	4b39      	ldr	r3, [pc, #228]	@ (8001100 <main+0x1c8>)
 800101a:	edc3 7a00 	vstr	s15, [r3]
          tFahrenheit = tCelsius * 9/5 + 32;
 800101e:	4b38      	ldr	r3, [pc, #224]	@ (8001100 <main+0x1c8>)
 8001020:	edd3 7a00 	vldr	s15, [r3]
 8001024:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8001028:	ee27 7a87 	vmul.f32	s14, s15, s14
 800102c:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001030:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001034:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001104 <main+0x1cc>
 8001038:	ee77 7a87 	vadd.f32	s15, s15, s14
 800103c:	4b32      	ldr	r3, [pc, #200]	@ (8001108 <main+0x1d0>)
 800103e:	edc3 7a00 	vstr	s15, [r3]
          RH = (float)RHI + (float)(RHD/10.0);
 8001042:	4b29      	ldr	r3, [pc, #164]	@ (80010e8 <main+0x1b0>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	ee07 3a90 	vmov	s15, r3
 800104a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800104e:	4b27      	ldr	r3, [pc, #156]	@ (80010ec <main+0x1b4>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff f9fe 	bl	8000454 <__aeabi_i2d>
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b27      	ldr	r3, [pc, #156]	@ (80010fc <main+0x1c4>)
 800105e:	f7ff fb8d 	bl	800077c <__aeabi_ddiv>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f7ff fd35 	bl	8000ad8 <__aeabi_d2f>
 800106e:	ee07 0a90 	vmov	s15, r0
 8001072:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001076:	4b25      	ldr	r3, [pc, #148]	@ (800110c <main+0x1d4>)
 8001078:	edc3 7a00 	vstr	s15, [r3]
          // Can use tCelsius, tFahrenheit and RH for any purposes
          char str1[16];  // Increased size to accommodate the string
          char str2[16];  // Increased size to accommodate the string

          lcd_put_cur(0, 0);
 800107c:	2100      	movs	r1, #0
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff fde4 	bl	8000c4c <lcd_put_cur>
          sprintf(str1, "TEMP: %.2f C", tCelsius);  // Corrected format for temperature
 8001084:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <main+0x1c8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f9f5 	bl	8000478 <__aeabi_f2d>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	f107 0010 	add.w	r0, r7, #16
 8001096:	491e      	ldr	r1, [pc, #120]	@ (8001110 <main+0x1d8>)
 8001098:	f003 fce6 	bl	8004a68 <siprintf>
          lcd_send_string(str1);
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fe2f 	bl	8000d04 <lcd_send_string>

          lcd_put_cur(1, 0);
 80010a6:	2100      	movs	r1, #0
 80010a8:	2001      	movs	r0, #1
 80010aa:	f7ff fdcf 	bl	8000c4c <lcd_put_cur>
          sprintf(str2, "HUMI: %.2f %%", RH);  // Corrected format for humidity, added %% for the percent sign
 80010ae:	4b17      	ldr	r3, [pc, #92]	@ (800110c <main+0x1d4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f9e0 	bl	8000478 <__aeabi_f2d>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4638      	mov	r0, r7
 80010be:	4915      	ldr	r1, [pc, #84]	@ (8001114 <main+0x1dc>)
 80010c0:	f003 fcd2 	bl	8004a68 <siprintf>
          lcd_send_string(str2);
 80010c4:	463b      	mov	r3, r7
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fe1c 	bl	8000d04 <lcd_send_string>
 80010cc:	e757      	b.n	8000f7e <main+0x46>

        }

        else
        {
        	lcd_put_cur(0,0);
 80010ce:	2100      	movs	r1, #0
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fdbb 	bl	8000c4c <lcd_put_cur>
        	lcd_send_string("error");
 80010d6:	4810      	ldr	r0, [pc, #64]	@ (8001118 <main+0x1e0>)
 80010d8:	f7ff fe14 	bl	8000d04 <lcd_send_string>
      if(DHT11_Start())
 80010dc:	e74f      	b.n	8000f7e <main+0x46>
 80010de:	bf00      	nop
 80010e0:	20000244 	.word	0x20000244
 80010e4:	08006d10 	.word	0x08006d10
 80010e8:	20000290 	.word	0x20000290
 80010ec:	20000291 	.word	0x20000291
 80010f0:	20000292 	.word	0x20000292
 80010f4:	20000293 	.word	0x20000293
 80010f8:	20000294 	.word	0x20000294
 80010fc:	40240000 	.word	0x40240000
 8001100:	200002a0 	.word	0x200002a0
 8001104:	42000000 	.word	0x42000000
 8001108:	200002a4 	.word	0x200002a4
 800110c:	200002a8 	.word	0x200002a8
 8001110:	08006d24 	.word	0x08006d24
 8001114:	08006d34 	.word	0x08006d34
 8001118:	08006d44 	.word	0x08006d44

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b098      	sub	sp, #96	@ 0x60
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 0320 	add.w	r3, r7, #32
 8001126:	2240      	movs	r2, #64	@ 0x40
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f003 fcff 	bl	8004b2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	463b      	mov	r3, r7
 8001132:	2220      	movs	r2, #32
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f003 fcf9 	bl	8004b2e <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800113c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001140:	f001 fc94 	bl	8002a6c <HAL_PWREx_ControlVoltageScaling>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800114a:	f000 f997 	bl	800147c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800114e:	2302      	movs	r3, #2
 8001150:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001152:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001156:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001158:	2310      	movs	r3, #16
 800115a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
 800115c:	2302      	movs	r3, #2
 800115e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
 8001160:	2302      	movs	r3, #2
 8001162:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL1.PLLM = 1;
 8001164:	2301      	movs	r3, #1
 8001166:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL1.PLLN = 9;
 8001168:	2309      	movs	r3, #9
 800116a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL1.PLLP = 2;
 800116c:	2302      	movs	r3, #2
 800116e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL1.PLLQ = 2;
 8001170:	2302      	movs	r3, #2
 8001172:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLR = 3;
 8001174:	2303      	movs	r3, #3
 8001176:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL1.PLLFractional = 3072;
 8001178:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800117c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117e:	f107 0320 	add.w	r3, r7, #32
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fcd0 	bl	8002b28 <HAL_RCC_OscConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800118e:	f000 f975 	bl	800147c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001192:	233f      	movs	r3, #63	@ 0x3f
 8001194:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK7|RCC_CLOCKTYPE_HCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001196:	2303      	movs	r3, #3
 8001198:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB7CLKDivider = RCC_HCLK_DIV1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHB5_PLL1_CLKDivider = RCC_SYSCLK_PLL1_DIV2;
 80011aa:	2304      	movs	r3, #4
 80011ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHB5_HSEHSI_CLKDivider = RCC_SYSCLK_HSEHSI_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	2101      	movs	r1, #1
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 f8a0 	bl	80032fc <HAL_RCC_ClockConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80011c2:	f000 f95b 	bl	800147c <Error_Handler>
  }
}
 80011c6:	bf00      	nop
 80011c8:	3760      	adds	r7, #96	@ 0x60
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <MX_I2C1_Init+0x74>)
 80011d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001248 <MX_I2C1_Init+0x78>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_I2C1_Init+0x74>)
 80011dc:	4a1b      	ldr	r2, [pc, #108]	@ (800124c <MX_I2C1_Init+0x7c>)
 80011de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <MX_I2C1_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_I2C1_Init+0x74>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <MX_I2C1_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <MX_I2C1_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <MX_I2C1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fe:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <MX_I2C1_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001204:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <MX_I2C1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800120a:	480e      	ldr	r0, [pc, #56]	@ (8001244 <MX_I2C1_Init+0x74>)
 800120c:	f000 ffbc 	bl	8002188 <HAL_I2C_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001216:	f000 f931 	bl	800147c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800121a:	2100      	movs	r1, #0
 800121c:	4809      	ldr	r0, [pc, #36]	@ (8001244 <MX_I2C1_Init+0x74>)
 800121e:	f001 fb5d 	bl	80028dc <HAL_I2CEx_ConfigAnalogFilter>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001228:	f000 f928 	bl	800147c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800122c:	2100      	movs	r1, #0
 800122e:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_I2C1_Init+0x74>)
 8001230:	f001 fb9f 	bl	8002972 <HAL_I2CEx_ConfigDigitalFilter>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800123a:	f000 f91f 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200001f0 	.word	0x200001f0
 8001248:	40005400 	.word	0x40005400
 800124c:	00c0eaff 	.word	0x00c0eaff

08001250 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001254:	2000      	movs	r0, #0
 8001256:	f001 fbd9 	bl	8002a0c <HAL_ICACHE_ConfigAssociativityMode>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001260:	f000 f90c 	bl	800147c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001264:	f001 fbf2 	bl	8002a4c <HAL_ICACHE_Enable>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800126e:	f000 f905 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001296:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <MX_TIM3_Init+0x94>)
 8001298:	4a1d      	ldr	r2, [pc, #116]	@ (8001310 <MX_TIM3_Init+0x98>)
 800129a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50-1;
 800129c:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <MX_TIM3_Init+0x94>)
 800129e:	2231      	movs	r2, #49	@ 0x31
 80012a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a2:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <MX_TIM3_Init+0x94>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012a8:	4b18      	ldr	r3, [pc, #96]	@ (800130c <MX_TIM3_Init+0x94>)
 80012aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b0:	4b16      	ldr	r3, [pc, #88]	@ (800130c <MX_TIM3_Init+0x94>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <MX_TIM3_Init+0x94>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012bc:	4813      	ldr	r0, [pc, #76]	@ (800130c <MX_TIM3_Init+0x94>)
 80012be:	f002 fbbb 	bl	8003a38 <HAL_TIM_Base_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80012c8:	f000 f8d8 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4619      	mov	r1, r3
 80012d8:	480c      	ldr	r0, [pc, #48]	@ (800130c <MX_TIM3_Init+0x94>)
 80012da:	f002 fc51 	bl	8003b80 <HAL_TIM_ConfigClockSource>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012e4:	f000 f8ca 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_TIM3_Init+0x94>)
 80012f6:	f002 fe33 	bl	8003f60 <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001300:	f000 f8bc 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	3720      	adds	r7, #32
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000244 	.word	0x20000244
 8001310:	40000400 	.word	0x40000400

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	4b50      	ldr	r3, [pc, #320]	@ (800146c <MX_GPIO_Init+0x158>)
 800132c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001330:	4a4e      	ldr	r2, [pc, #312]	@ (800146c <MX_GPIO_Init+0x158>)
 8001332:	f043 0302 	orr.w	r3, r3, #2
 8001336:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800133a:	4b4c      	ldr	r3, [pc, #304]	@ (800146c <MX_GPIO_Init+0x158>)
 800133c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001348:	4b48      	ldr	r3, [pc, #288]	@ (800146c <MX_GPIO_Init+0x158>)
 800134a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800134e:	4a47      	ldr	r2, [pc, #284]	@ (800146c <MX_GPIO_Init+0x158>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001358:	4b44      	ldr	r3, [pc, #272]	@ (800146c <MX_GPIO_Init+0x158>)
 800135a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	4b41      	ldr	r3, [pc, #260]	@ (800146c <MX_GPIO_Init+0x158>)
 8001368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800136c:	4a3f      	ldr	r2, [pc, #252]	@ (800146c <MX_GPIO_Init+0x158>)
 800136e:	f043 0304 	orr.w	r3, r3, #4
 8001372:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001376:	4b3d      	ldr	r3, [pc, #244]	@ (800146c <MX_GPIO_Init+0x158>)
 8001378:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|GPIO_PIN_7|LD1_Pin, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 6119 	mov.w	r1, #2448	@ 0x990
 800138a:	4839      	ldr	r0, [pc, #228]	@ (8001470 <MX_GPIO_Init+0x15c>)
 800138c:	f000 fea8 	bl	80020e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USART1_TX_Pin */
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 8001390:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013a2:	2307      	movs	r3, #7
 80013a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4619      	mov	r1, r3
 80013ac:	4830      	ldr	r0, [pc, #192]	@ (8001470 <MX_GPIO_Init+0x15c>)
 80013ae:	f000 fd33 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80013b2:	f44f 6311 	mov.w	r3, #2320	@ 0x910
 80013b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4619      	mov	r1, r3
 80013ca:	4829      	ldr	r0, [pc, #164]	@ (8001470 <MX_GPIO_Init+0x15c>)
 80013cc:	f000 fd24 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART1_RX_Pin */
  GPIO_InitStruct.Pin = USART1_RX_Pin;
 80013d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013e2:	2307      	movs	r3, #7
 80013e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART1_RX_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	4821      	ldr	r0, [pc, #132]	@ (8001474 <MX_GPIO_Init+0x160>)
 80013ee:	f000 fd13 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fe:	2301      	movs	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	4619      	mov	r1, r3
 8001408:	481b      	ldr	r0, [pc, #108]	@ (8001478 <MX_GPIO_Init+0x164>)
 800140a:	f000 fd05 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800140e:	2380      	movs	r3, #128	@ 0x80
 8001410:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	2301      	movs	r3, #1
 8001414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001416:	2301      	movs	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	4619      	mov	r1, r3
 8001424:	4812      	ldr	r0, [pc, #72]	@ (8001470 <MX_GPIO_Init+0x15c>)
 8001426:	f000 fcf7 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 800142a:	2340      	movs	r3, #64	@ 0x40
 800142c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800142e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001434:	2301      	movs	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	4619      	mov	r1, r3
 800143e:	480c      	ldr	r0, [pc, #48]	@ (8001470 <MX_GPIO_Init+0x15c>)
 8001440:	f000 fcea 	bl	8001e18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI6_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	2011      	movs	r0, #17
 800144a:	f000 fc3f 	bl	8001ccc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 800144e:	2011      	movs	r0, #17
 8001450:	f000 fc59 	bl	8001d06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	2018      	movs	r0, #24
 800145a:	f000 fc37 	bl	8001ccc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 800145e:	2018      	movs	r0, #24
 8001460:	f000 fc51 	bl	8001d06 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001464:	bf00      	nop
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	46020c00 	.word	0x46020c00
 8001470:	42020400 	.word	0x42020400
 8001474:	42020000 	.word	0x42020000
 8001478:	42020800 	.word	0x42020800

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001480:	b672      	cpsid	i
}
 8001482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <Error_Handler+0x8>

08001488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <HAL_MspInit+0x30>)
 8001490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001494:	4a08      	ldr	r2, [pc, #32]	@ (80014b8 <HAL_MspInit+0x30>)
 8001496:	f043 0304 	orr.w	r3, r3, #4
 800149a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_MspInit+0x30>)
 80014a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	46020c00 	.word	0x46020c00

080014bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b09a      	sub	sp, #104	@ 0x68
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2240      	movs	r2, #64	@ 0x40
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 fb26 	bl	8004b2e <memset>
  if(hi2c->Instance==I2C1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a21      	ldr	r2, [pc, #132]	@ (800156c <HAL_I2C_MspInit+0xb0>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d13b      	bne.n	8001564 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014ec:	2304      	movs	r3, #4
 80014ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 f8eb 	bl	80036d4 <HAL_RCCEx_PeriphCLKConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001504:	f7ff ffba 	bl	800147c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001508:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <HAL_I2C_MspInit+0xb4>)
 800150a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800150e:	4a18      	ldr	r2, [pc, #96]	@ (8001570 <HAL_I2C_MspInit+0xb4>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001518:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <HAL_I2C_MspInit+0xb4>)
 800151a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB2     ------> I2C1_SCL
    PB1     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8001526:	2306      	movs	r3, #6
 8001528:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800152a:	2312      	movs	r3, #18
 800152c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001536:	2304      	movs	r3, #4
 8001538:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800153e:	4619      	mov	r1, r3
 8001540:	480c      	ldr	r0, [pc, #48]	@ (8001574 <HAL_I2C_MspInit+0xb8>)
 8001542:	f000 fc69 	bl	8001e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001546:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <HAL_I2C_MspInit+0xb4>)
 8001548:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800154c:	4a08      	ldr	r2, [pc, #32]	@ (8001570 <HAL_I2C_MspInit+0xb4>)
 800154e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001552:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_I2C_MspInit+0xb4>)
 8001558:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800155c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001564:	bf00      	nop
 8001566:	3768      	adds	r7, #104	@ 0x68
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40005400 	.word	0x40005400
 8001570:	46020c00 	.word	0x46020c00
 8001574:	42020400 	.word	0x42020400

08001578 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0b      	ldr	r2, [pc, #44]	@ (80015b4 <HAL_TIM_Base_MspInit+0x3c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d10e      	bne.n	80015a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <HAL_TIM_Base_MspInit+0x40>)
 800158c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001590:	4a09      	ldr	r2, [pc, #36]	@ (80015b8 <HAL_TIM_Base_MspInit+0x40>)
 8001592:	f043 0302 	orr.w	r3, r3, #2
 8001596:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800159a:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <HAL_TIM_Base_MspInit+0x40>)
 800159c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40000400 	.word	0x40000400
 80015b8:	46020c00 	.word	0x46020c00

080015bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <NMI_Handler+0x4>

080015c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <MemManage_Handler+0x4>

080015d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001612:	f000 fa5f 	bl	8001ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}

0800161a <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 800161e:	2040      	movs	r0, #64	@ 0x40
 8001620:	f000 fd76 	bl	8002110 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}

08001628 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800162c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001630:	f000 fd6e 	bl	8002110 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return 1;
 800163c:	2301      	movs	r3, #1
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_kill>:

int _kill(int pid, int sig)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001652:	f003 fabf 	bl	8004bd4 <__errno>
 8001656:	4603      	mov	r3, r0
 8001658:	2216      	movs	r2, #22
 800165a:	601a      	str	r2, [r3, #0]
  return -1;
 800165c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <_exit>:

void _exit (int status)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ffe7 	bl	8001648 <_kill>
  while (1) {}    /* Make sure we hang here */
 800167a:	bf00      	nop
 800167c:	e7fd      	b.n	800167a <_exit+0x12>

0800167e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	e00a      	b.n	80016a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001690:	f3af 8000 	nop.w
 8001694:	4601      	mov	r1, r0
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	60ba      	str	r2, [r7, #8]
 800169c:	b2ca      	uxtb	r2, r1
 800169e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	3301      	adds	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	dbf0      	blt.n	8001690 <_read+0x12>
  }

  return len;
 80016ae:	687b      	ldr	r3, [r7, #4]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	e009      	b.n	80016de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	60ba      	str	r2, [r7, #8]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	3301      	adds	r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	dbf1      	blt.n	80016ca <_write+0x12>
  }
  return len;
 80016e6:	687b      	ldr	r3, [r7, #4]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_close>:

int _close(int file)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001718:	605a      	str	r2, [r3, #4]
  return 0;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_isatty>:

int _isatty(int file)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001730:	2301      	movs	r3, #1
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800173e:	b480      	push	{r7}
 8001740:	b085      	sub	sp, #20
 8001742:	af00      	add	r7, sp, #0
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001760:	4a14      	ldr	r2, [pc, #80]	@ (80017b4 <_sbrk+0x5c>)
 8001762:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <_sbrk+0x60>)
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800176c:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001774:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <_sbrk+0x64>)
 8001776:	4a12      	ldr	r2, [pc, #72]	@ (80017c0 <_sbrk+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	429a      	cmp	r2, r3
 8001786:	d207      	bcs.n	8001798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001788:	f003 fa24 	bl	8004bd4 <__errno>
 800178c:	4603      	mov	r3, r0
 800178e:	220c      	movs	r2, #12
 8001790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	e009      	b.n	80017ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179e:	4b07      	ldr	r3, [pc, #28]	@ (80017bc <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a05      	ldr	r2, [pc, #20]	@ (80017bc <_sbrk+0x64>)
 80017a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20020000 	.word	0x20020000
 80017b8:	00000400 	.word	0x00000400
 80017bc:	200002ac 	.word	0x200002ac
 80017c0:	20000400 	.word	0x20000400

080017c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  __IO uint32_t tmpreg;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <SystemInit+0x20>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ce:	4a05      	ldr	r2, [pc, #20]	@ (80017e4 <SystemInit+0x20>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  CLEAR_BIT(ADC4->CR, ADC_CR_ADVREGEN);

  /* Disable ADC kernel clock */
  CLEAR_BIT(RCC->AHB4ENR, RCC_AHB4ENR_ADC4EN);
#endif
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	@ 0x24
 80017ec:	af00      	add	r7, sp, #0
  uint32_t plln;
  float_t fracn;
  float_t pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 80017ee:	4b4f      	ldr	r3, [pc, #316]	@ (800192c <SystemCoreClockUpdate+0x144>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d002      	beq.n	8001800 <SystemCoreClockUpdate+0x18>
 80017fa:	2b0c      	cmp	r3, #12
 80017fc:	d00b      	beq.n	8001816 <SystemCoreClockUpdate+0x2e>
 80017fe:	e07d      	b.n	80018fc <SystemCoreClockUpdate+0x114>
  {
    case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
      SystemCoreClock = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8001800:	4b4a      	ldr	r3, [pc, #296]	@ (800192c <SystemCoreClockUpdate+0x144>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	0d1b      	lsrs	r3, r3, #20
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	4a49      	ldr	r2, [pc, #292]	@ (8001930 <SystemCoreClockUpdate+0x148>)
 800180c:	fa22 f303 	lsr.w	r3, r2, r3
 8001810:	4a48      	ldr	r2, [pc, #288]	@ (8001934 <SystemCoreClockUpdate+0x14c>)
 8001812:	6013      	str	r3, [r2, #0]
      break;
 8001814:	e076      	b.n	8001904 <SystemCoreClockUpdate+0x11c>

    case (RCC_CFGR1_SWS_0 | RCC_CFGR1_SWS_1):  /* PLL1 used as system clock source */
      /* PLL_VCO = (PLLsource / PLLM) * PLLN * FractionnalPart
          SYSCLK = PLL_VCO / PLLR */
      /* Get PLL1 CFGR and DIVR register values */
      tmp1 = RCC->PLL1CFGR;
 8001816:	4b45      	ldr	r3, [pc, #276]	@ (800192c <SystemCoreClockUpdate+0x144>)
 8001818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181a:	61fb      	str	r3, [r7, #28]
      tmp2 = RCC->PLL1DIVR;
 800181c:	4b43      	ldr	r3, [pc, #268]	@ (800192c <SystemCoreClockUpdate+0x144>)
 800181e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001820:	617b      	str	r3, [r7, #20]

      /* Retrieve PLL1 multiplication factor and divider */
      pllm = ((tmp1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	3301      	adds	r3, #1
 800182c:	613b      	str	r3, [r7, #16]
      plln = (tmp2 & RCC_PLL1DIVR_PLL1N) + 1U;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001834:	3301      	adds	r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
      pllr = ((tmp2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	0e1b      	lsrs	r3, r3, #24
 800183c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001840:	3301      	adds	r3, #1
 8001842:	60bb      	str	r3, [r7, #8]

      /* Check if fractional part is enable */
      if ((tmp1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00b      	beq.n	8001866 <SystemCoreClockUpdate+0x7e>
      {
        fracn = (float_t)((uint32_t)((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800184e:	4b37      	ldr	r3, [pc, #220]	@ (800192c <SystemCoreClockUpdate+0x144>)
 8001850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001852:	08db      	lsrs	r3, r3, #3
 8001854:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001860:	edc7 7a06 	vstr	s15, [r7, #24]
 8001864:	e002      	b.n	800186c <SystemCoreClockUpdate+0x84>
      }
      else
      {
        fracn = (float_t)0U;
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
      }

      /* determine PLL source */
      pllsource = (tmp1 & RCC_PLL1CFGR_PLL1SRC);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d003      	beq.n	8001882 <SystemCoreClockUpdate+0x9a>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d003      	beq.n	8001888 <SystemCoreClockUpdate+0xa0>
 8001880:	e00c      	b.n	800189c <SystemCoreClockUpdate+0xb4>
      switch (pllsource)
      {
        /* HSI used as PLL1 clock source */
        case RCC_PLL1CFGR_PLL1SRC_1:
          tmp1 = HSI_VALUE;
 8001882:	4b2d      	ldr	r3, [pc, #180]	@ (8001938 <SystemCoreClockUpdate+0x150>)
 8001884:	61fb      	str	r3, [r7, #28]
          break;
 8001886:	e00c      	b.n	80018a2 <SystemCoreClockUpdate+0xba>

        /* HSE used as PLL1 clock source */
        case (RCC_PLL1CFGR_PLL1SRC_0 | RCC_PLL1CFGR_PLL1SRC_1):
          tmp1 = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8001888:	4b28      	ldr	r3, [pc, #160]	@ (800192c <SystemCoreClockUpdate+0x144>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0d1b      	lsrs	r3, r3, #20
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	4a27      	ldr	r2, [pc, #156]	@ (8001930 <SystemCoreClockUpdate+0x148>)
 8001894:	fa22 f303 	lsr.w	r3, r2, r3
 8001898:	61fb      	str	r3, [r7, #28]
          break;
 800189a:	e002      	b.n	80018a2 <SystemCoreClockUpdate+0xba>

        default:
          tmp1 = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
          break;
 80018a0:	bf00      	nop
      }

      /* Compute VCO output frequency */
      pllvco = ((float_t) tmp1 / (float_t)pllm) * (((float_t)plln + (float_t)(fracn / (float_t)0x2000U)));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018c4:	ed97 6a06 	vldr	s12, [r7, #24]
 80018c8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800193c <SystemCoreClockUpdate+0x154>
 80018cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80018d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d8:	edc7 7a00 	vstr	s15, [r7]
      SystemCoreClock = (uint32_t)((float_t)(pllvco / (float_t)pllr));
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	ee07 3a90 	vmov	s15, r3
 80018e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018e6:	edd7 6a00 	vldr	s13, [r7]
 80018ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018f2:	ee17 2a90 	vmov	r2, s15
 80018f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <SystemCoreClockUpdate+0x14c>)
 80018f8:	601a      	str	r2, [r3, #0]
      break;
 80018fa:	e003      	b.n	8001904 <SystemCoreClockUpdate+0x11c>

    case 0x00u:  /* HSI used as system clock source */
    default:
      SystemCoreClock = HSI_VALUE;
 80018fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001934 <SystemCoreClockUpdate+0x14c>)
 80018fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001938 <SystemCoreClockUpdate+0x150>)
 8001900:	601a      	str	r2, [r3, #0]
      break;
 8001902:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp1 = AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)];
 8001904:	4b09      	ldr	r3, [pc, #36]	@ (800192c <SystemCoreClockUpdate+0x144>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	4a0c      	ldr	r2, [pc, #48]	@ (8001940 <SystemCoreClockUpdate+0x158>)
 800190e:	5cd3      	ldrb	r3, [r2, r3]
 8001910:	61fb      	str	r3, [r7, #28]

  /* HCLK clock frequency */
  SystemCoreClock >>= tmp1;
 8001912:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <SystemCoreClockUpdate+0x14c>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
 800191c:	4a05      	ldr	r2, [pc, #20]	@ (8001934 <SystemCoreClockUpdate+0x14c>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	3724      	adds	r7, #36	@ 0x24
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	46020c00 	.word	0x46020c00
 8001930:	01e84800 	.word	0x01e84800
 8001934:	20000000 	.word	0x20000000
 8001938:	00f42400 	.word	0x00f42400
 800193c:	46000000 	.word	0x46000000
 8001940:	08006d4c 	.word	0x08006d4c

08001944 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800197c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001948:	f7ff ff3c 	bl	80017c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800194c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800194e:	e003      	b.n	8001958 <LoopCopyDataInit>

08001950 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001950:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001952:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001954:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001956:	3104      	adds	r1, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001958:	480a      	ldr	r0, [pc, #40]	@ (8001984 <LoopForever+0xa>)
	ldr	r3, =_edata
 800195a:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <LoopForever+0xe>)
	adds	r2, r0, r1
 800195c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800195e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001960:	d3f6      	bcc.n	8001950 <CopyDataInit>
	ldr	r2, =_sbss
 8001962:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001964:	e002      	b.n	800196c <LoopFillZerobss>

08001966 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001966:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001968:	f842 3b04 	str.w	r3, [r2], #4

0800196c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <LoopForever+0x16>)
	cmp	r2, r3
 800196e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001970:	d3f9      	bcc.n	8001966 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001972:	f003 f935 	bl	8004be0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001976:	f7ff fadf 	bl	8000f38 <main>

0800197a <LoopForever>:

LoopForever:
    b LoopForever
 800197a:	e7fe      	b.n	800197a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800197c:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 8001980:	080070d8 	.word	0x080070d8
	ldr	r0, =_sdata
 8001984:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001988:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 800198c:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8001990:	20000400 	.word	0x20000400

08001994 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC4_IRQHandler>
	...

08001998 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800199c:	4b0d      	ldr	r3, [pc, #52]	@ (80019d4 <HAL_Init+0x3c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0c      	ldr	r2, [pc, #48]	@ (80019d4 <HAL_Init+0x3c>)
 80019a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a8:	2003      	movs	r0, #3
 80019aa:	f000 f984 	bl	8001cb6 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 80019ae:	f7ff ff1b 	bl	80017e8 <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80019b2:	2004      	movs	r0, #4
 80019b4:	f000 f9d8 	bl	8001d68 <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019b8:	200f      	movs	r0, #15
 80019ba:	f000 f80d 	bl	80019d8 <HAL_InitTick>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_Init+0x30>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e002      	b.n	80019ce <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019c8:	f7ff fd5e 	bl	8001488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40022000 	.word	0x40022000

080019d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80019e4:	4b36      	ldr	r3, [pc, #216]	@ (8001ac0 <HAL_InitTick+0xe8>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e062      	b.n	8001ab6 <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80019f0:	4b34      	ldr	r3, [pc, #208]	@ (8001ac4 <HAL_InitTick+0xec>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d10c      	bne.n	8001a16 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80019fc:	4b32      	ldr	r3, [pc, #200]	@ (8001ac8 <HAL_InitTick+0xf0>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac0 <HAL_InitTick+0xe8>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4619      	mov	r1, r3
 8001a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	e03d      	b.n	8001a92 <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 8001a16:	4b2d      	ldr	r3, [pc, #180]	@ (8001acc <HAL_InitTick+0xf4>)
 8001a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a1c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001a20:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001a28:	d025      	beq.n	8001a76 <HAL_InitTick+0x9e>
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001a30:	d82e      	bhi.n	8001a90 <HAL_InitTick+0xb8>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d004      	beq.n	8001a42 <HAL_InitTick+0x6a>
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a3e:	d00d      	beq.n	8001a5c <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8001a40:	e026      	b.n	8001a90 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001a42:	4b21      	ldr	r3, [pc, #132]	@ (8001ac8 <HAL_InitTick+0xf0>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac0 <HAL_InitTick+0xe8>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001a50:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	60fb      	str	r3, [r7, #12]
        break;
 8001a5a:	e01a      	b.n	8001a92 <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001a5c:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <HAL_InitTick+0xe8>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a66:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a6a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	60fb      	str	r3, [r7, #12]
        break;
 8001a74:	e00d      	b.n	8001a92 <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001a76:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <HAL_InitTick+0xe8>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a80:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a84:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8c:	60fb      	str	r3, [r7, #12]
        break;
 8001a8e:	e000      	b.n	8001a92 <HAL_InitTick+0xba>
        break;
 8001a90:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 f946 	bl	8001d24 <HAL_SYSTICK_Config>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e009      	b.n	8001ab6 <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aaa:	f000 f90f 	bl	8001ccc <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001aae:	4a08      	ldr	r2, [pc, #32]	@ (8001ad0 <HAL_InitTick+0xf8>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000008 	.word	0x20000008
 8001ac4:	e000e010 	.word	0xe000e010
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	46020c00 	.word	0x46020c00
 8001ad0:	20000004 	.word	0x20000004

08001ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <HAL_IncTick+0x20>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_IncTick+0x24>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a04      	ldr	r2, [pc, #16]	@ (8001af8 <HAL_IncTick+0x24>)
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000008 	.word	0x20000008
 8001af8:	200002b0 	.word	0x200002b0

08001afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return uwTick;
 8001b00:	4b03      	ldr	r3, [pc, #12]	@ (8001b10 <HAL_GetTick+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	200002b0 	.word	0x200002b0

08001b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b1c:	f7ff ffee 	bl	8001afc <HAL_GetTick>
 8001b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2c:	d005      	beq.n	8001b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <HAL_Delay+0x44>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b3a:	bf00      	nop
 8001b3c:	f7ff ffde 	bl	8001afc <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d8f7      	bhi.n	8001b3c <HAL_Delay+0x28>
  {
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000008 	.word	0x20000008

08001b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60d3      	str	r3, [r2, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba8:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <__NVIC_GetPriorityGrouping+0x18>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f003 0307 	and.w	r3, r3, #7
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	db0b      	blt.n	8001bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	f003 021f 	and.w	r2, r3, #31
 8001bd8:	4907      	ldr	r1, [pc, #28]	@ (8001bf8 <__NVIC_EnableIRQ+0x38>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	2001      	movs	r0, #1
 8001be2:	fa00 f202 	lsl.w	r2, r0, r2
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000e100 	.word	0xe000e100

08001bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	6039      	str	r1, [r7, #0]
 8001c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	db0a      	blt.n	8001c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	490c      	ldr	r1, [pc, #48]	@ (8001c48 <__NVIC_SetPriority+0x4c>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	0112      	lsls	r2, r2, #4
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	440b      	add	r3, r1
 8001c20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c24:	e00a      	b.n	8001c3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4908      	ldr	r1, [pc, #32]	@ (8001c4c <__NVIC_SetPriority+0x50>)
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	3b04      	subs	r3, #4
 8001c34:	0112      	lsls	r2, r2, #4
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	440b      	add	r3, r1
 8001c3a:	761a      	strb	r2, [r3, #24]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000e100 	.word	0xe000e100
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b089      	sub	sp, #36	@ 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f1c3 0307 	rsb	r3, r3, #7
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	bf28      	it	cs
 8001c6e:	2304      	movcs	r3, #4
 8001c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3304      	adds	r3, #4
 8001c76:	2b06      	cmp	r3, #6
 8001c78:	d902      	bls.n	8001c80 <NVIC_EncodePriority+0x30>
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3b03      	subs	r3, #3
 8001c7e:	e000      	b.n	8001c82 <NVIC_EncodePriority+0x32>
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	f04f 32ff 	mov.w	r2, #4294967295
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	401a      	ands	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c98:	f04f 31ff 	mov.w	r1, #4294967295
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	43d9      	mvns	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	4313      	orrs	r3, r2
         );
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3724      	adds	r7, #36	@ 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ff4c 	bl	8001b5c <__NVIC_SetPriorityGrouping>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
 8001cda:	f7ff ff63 	bl	8001ba4 <__NVIC_GetPriorityGrouping>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f7ff ffb0 	bl	8001c50 <NVIC_EncodePriority>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff7f 	bl	8001bfc <__NVIC_SetPriority>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbaxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff53 	bl	8001bc0 <__NVIC_EnableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d34:	d301      	bcc.n	8001d3a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00d      	b.n	8001d56 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d64 <HAL_SYSTICK_Config+0x40>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001d42:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <HAL_SYSTICK_Config+0x40>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001d48:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <HAL_SYSTICK_Config+0x40>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a05      	ldr	r2, [pc, #20]	@ (8001d64 <HAL_SYSTICK_Config+0x40>)
 8001d4e:	f043 0303 	orr.w	r3, r3, #3
 8001d52:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d844      	bhi.n	8001e00 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001d76:	a201      	add	r2, pc, #4	@ (adr r2, 8001d7c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7c:	08001d9f 	.word	0x08001d9f
 8001d80:	08001dbd 	.word	0x08001dbd
 8001d84:	08001ddf 	.word	0x08001ddf
 8001d88:	08001e01 	.word	0x08001e01
 8001d8c:	08001d91 	.word	0x08001d91
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d90:	4b1f      	ldr	r3, [pc, #124]	@ (8001e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1e      	ldr	r2, [pc, #120]	@ (8001e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	6013      	str	r3, [r2, #0]
      break;
 8001d9c:	e031      	b.n	8001e02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a1b      	ldr	r2, [pc, #108]	@ (8001e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001da4:	f023 0304 	bic.w	r3, r3, #4
 8001da8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001daa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db0:	4a18      	ldr	r2, [pc, #96]	@ (8001e14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001db2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001db6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001dba:	e022      	b.n	8001e02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001dbc:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a13      	ldr	r2, [pc, #76]	@ (8001e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001dc2:	f023 0304 	bic.w	r3, r3, #4
 8001dc6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001dc8:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dce:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001dd2:	4a10      	ldr	r2, [pc, #64]	@ (8001e14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001dd4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001ddc:	e011      	b.n	8001e02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001dde:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a0b      	ldr	r2, [pc, #44]	@ (8001e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001dea:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001df4:	4a07      	ldr	r2, [pc, #28]	@ (8001e14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001df6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001dfe:	e000      	b.n	8001e02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001e00:	bf00      	nop
  }
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000e010 	.word	0xe000e010
 8001e14:	46020c00 	.word	0x46020c00

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e26:	e130      	b.n	800208a <HAL_GPIO_Init+0x272>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	4013      	ands	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8122 	beq.w	8002084 <HAL_GPIO_Init+0x26c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d005      	beq.n	8001e58 <HAL_GPIO_Init+0x40>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d130      	bne.n	8001eba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	2203      	movs	r2, #3
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e8e:	2201      	movs	r2, #1
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	f003 0201 	and.w	r2, r3, #1
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d017      	beq.n	8001ef6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d123      	bne.n	8001f4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	08da      	lsrs	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3208      	adds	r2, #8
 8001f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	220f      	movs	r2, #15
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	08da      	lsrs	r2, r3, #3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3208      	adds	r2, #8
 8001f44:	6939      	ldr	r1, [r7, #16]
 8001f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	2203      	movs	r2, #3
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0203 	and.w	r2, r3, #3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d07c      	beq.n	8002084 <HAL_GPIO_Init+0x26c>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001f8a:	4a47      	ldr	r2, [pc, #284]	@ (80020a8 <HAL_GPIO_Init+0x290>)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3318      	adds	r3, #24
 8001f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	0a9a      	lsrs	r2, r3, #10
 8001fb2:	4b3e      	ldr	r3, [pc, #248]	@ (80020ac <HAL_GPIO_Init+0x294>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	f002 0203 	and.w	r2, r2, #3
 8001fbc:	00d2      	lsls	r2, r2, #3
 8001fbe:	4093      	lsls	r3, r2
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001fc6:	4938      	ldr	r1, [pc, #224]	@ (80020a8 <HAL_GPIO_Init+0x290>)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	3318      	adds	r3, #24
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fd4:	4b34      	ldr	r3, [pc, #208]	@ (80020a8 <HAL_GPIO_Init+0x290>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x1e0>
        {
          temp |= iocurrent;
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ff8:	4a2b      	ldr	r2, [pc, #172]	@ (80020a8 <HAL_GPIO_Init+0x290>)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80020a8 <HAL_GPIO_Init+0x290>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	43db      	mvns	r3, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x20a>
        {
          temp |= iocurrent;
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002022:	4a21      	ldr	r2, [pc, #132]	@ (80020a8 <HAL_GPIO_Init+0x290>)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002028:	4b1f      	ldr	r3, [pc, #124]	@ (80020a8 <HAL_GPIO_Init+0x290>)
 800202a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800202e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	43db      	mvns	r3, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800204e:	4a16      	ldr	r2, [pc, #88]	@ (80020a8 <HAL_GPIO_Init+0x290>)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8002056:	4b14      	ldr	r3, [pc, #80]	@ (80020a8 <HAL_GPIO_Init+0x290>)
 8002058:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	43db      	mvns	r3, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800207c:	4a0a      	ldr	r2, [pc, #40]	@ (80020a8 <HAL_GPIO_Init+0x290>)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	3301      	adds	r3, #1
 8002088:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	f47f aec7 	bne.w	8001e28 <HAL_GPIO_Init+0x10>
  }
}
 800209a:	bf00      	nop
 800209c:	bf00      	nop
 800209e:	371c      	adds	r7, #28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	46022000 	.word	0x46022000
 80020ac:	002f7f7f 	.word	0x002f7f7f

080020b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	887b      	ldrh	r3, [r7, #2]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020c8:	2301      	movs	r3, #1
 80020ca:	73fb      	strb	r3, [r7, #15]
 80020cc:	e001      	b.n	80020d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	807b      	strh	r3, [r7, #2]
 80020ec:	4613      	mov	r3, r2
 80020ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020f0:	787b      	ldrb	r3, [r7, #1]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020fc:	e002      	b.n	8002104 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020fe:	887a      	ldrh	r2, [r7, #2]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00U)
 800211a:	4b0f      	ldr	r3, [pc, #60]	@ (8002158 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	4013      	ands	r3, r2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002126:	4a0c      	ldr	r2, [pc, #48]	@ (8002158 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800212c:	88fb      	ldrh	r3, [r7, #6]
 800212e:	4618      	mov	r0, r3
 8002130:	f000 f814 	bl	800215c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00U)
 8002134:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	4013      	ands	r3, r2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d006      	beq.n	800214e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002140:	4a05      	ldr	r2, [pc, #20]	@ (8002158 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002146:	88fb      	ldrh	r3, [r7, #6]
 8002148:	4618      	mov	r0, r3
 800214a:	f000 f812 	bl	8002172 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	46022000 	.word	0x46022000

0800215c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e08d      	b.n	80022b6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff f984 	bl	80014bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2224      	movs	r2, #36	@ 0x24
 80021b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d107      	bne.n	8002202 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	e006      	b.n	8002210 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800220e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d108      	bne.n	800222a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	e007      	b.n	800223a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002238:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002248:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800224c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800225c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69d9      	ldr	r1, [r3, #28]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1a      	ldr	r2, [r3, #32]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2220      	movs	r2, #32
 80022a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	461a      	mov	r2, r3
 80022cc:	460b      	mov	r3, r1
 80022ce:	817b      	strh	r3, [r7, #10]
 80022d0:	4613      	mov	r3, r2
 80022d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b20      	cmp	r3, #32
 80022de:	f040 80da 	bne.w	8002496 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_I2C_Master_Transmit+0x30>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e0d3      	b.n	8002498 <HAL_I2C_Master_Transmit+0x1d8>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022f8:	f7ff fc00 	bl	8001afc <HAL_GetTick>
 80022fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	2319      	movs	r3, #25
 8002304:	2201      	movs	r2, #1
 8002306:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f8f0 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e0be      	b.n	8002498 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2221      	movs	r2, #33	@ 0x21
 800231e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2210      	movs	r2, #16
 8002326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	893a      	ldrh	r2, [r7, #8]
 800233a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002346:	b29b      	uxth	r3, r3
 8002348:	2bff      	cmp	r3, #255	@ 0xff
 800234a:	d90e      	bls.n	800236a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	22ff      	movs	r2, #255	@ 0xff
 8002350:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002356:	b2da      	uxtb	r2, r3
 8002358:	8979      	ldrh	r1, [r7, #10]
 800235a:	4b51      	ldr	r3, [pc, #324]	@ (80024a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 fa88 	bl	8002878 <I2C_TransferConfig>
 8002368:	e06c      	b.n	8002444 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002378:	b2da      	uxtb	r2, r3
 800237a:	8979      	ldrh	r1, [r7, #10]
 800237c:	4b48      	ldr	r3, [pc, #288]	@ (80024a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 fa77 	bl	8002878 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800238a:	e05b      	b.n	8002444 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	6a39      	ldr	r1, [r7, #32]
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f906 	bl	80025a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e07b      	b.n	8002498 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	781a      	ldrb	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d034      	beq.n	8002444 <HAL_I2C_Master_Transmit+0x184>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d130      	bne.n	8002444 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	2200      	movs	r2, #0
 80023ea:	2180      	movs	r1, #128	@ 0x80
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f87f 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e04d      	b.n	8002498 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002400:	b29b      	uxth	r3, r3
 8002402:	2bff      	cmp	r3, #255	@ 0xff
 8002404:	d90e      	bls.n	8002424 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	22ff      	movs	r2, #255	@ 0xff
 800240a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002410:	b2da      	uxtb	r2, r3
 8002412:	8979      	ldrh	r1, [r7, #10]
 8002414:	2300      	movs	r3, #0
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 fa2b 	bl	8002878 <I2C_TransferConfig>
 8002422:	e00f      	b.n	8002444 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002432:	b2da      	uxtb	r2, r3
 8002434:	8979      	ldrh	r1, [r7, #10]
 8002436:	2300      	movs	r3, #0
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fa1a 	bl	8002878 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d19e      	bne.n	800238c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	6a39      	ldr	r1, [r7, #32]
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f8ec 	bl	8002630 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e01a      	b.n	8002498 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2220      	movs	r2, #32
 8002468:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6859      	ldr	r1, [r3, #4]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002476:	400b      	ands	r3, r1
 8002478:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e000      	b.n	8002498 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002496:	2302      	movs	r3, #2
  }
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	80002000 	.word	0x80002000
 80024a4:	fe00e800 	.word	0xfe00e800

080024a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d103      	bne.n	80024c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2200      	movs	r2, #0
 80024c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d007      	beq.n	80024e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699a      	ldr	r2, [r3, #24]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	619a      	str	r2, [r3, #24]
  }
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002500:	e03b      	b.n	800257a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	6839      	ldr	r1, [r7, #0]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f8d6 	bl	80026b8 <I2C_IsErrorOccurred>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e041      	b.n	800259a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d02d      	beq.n	800257a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251e:	f7ff faed 	bl	8001afc <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d302      	bcc.n	8002534 <I2C_WaitOnFlagUntilTimeout+0x44>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d122      	bne.n	800257a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	4013      	ands	r3, r2
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	429a      	cmp	r2, r3
 8002542:	bf0c      	ite	eq
 8002544:	2301      	moveq	r3, #1
 8002546:	2300      	movne	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	429a      	cmp	r2, r3
 8002550:	d113      	bne.n	800257a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	f043 0220 	orr.w	r2, r3, #32
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e00f      	b.n	800259a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699a      	ldr	r2, [r3, #24]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4013      	ands	r3, r2
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	429a      	cmp	r2, r3
 8002588:	bf0c      	ite	eq
 800258a:	2301      	moveq	r3, #1
 800258c:	2300      	movne	r3, #0
 800258e:	b2db      	uxtb	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	429a      	cmp	r2, r3
 8002596:	d0b4      	beq.n	8002502 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025ae:	e033      	b.n	8002618 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f87f 	bl	80026b8 <I2C_IsErrorOccurred>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e031      	b.n	8002628 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ca:	d025      	beq.n	8002618 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025cc:	f7ff fa96 	bl	8001afc <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d302      	bcc.n	80025e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d11a      	bne.n	8002618 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d013      	beq.n	8002618 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f4:	f043 0220 	orr.w	r2, r3, #32
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e007      	b.n	8002628 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b02      	cmp	r3, #2
 8002624:	d1c4      	bne.n	80025b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800263c:	e02f      	b.n	800269e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f838 	bl	80026b8 <I2C_IsErrorOccurred>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e02d      	b.n	80026ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002652:	f7ff fa53 	bl	8001afc <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	429a      	cmp	r2, r3
 8002660:	d302      	bcc.n	8002668 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d11a      	bne.n	800269e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	2b20      	cmp	r3, #32
 8002674:	d013      	beq.n	800269e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267a:	f043 0220 	orr.w	r2, r3, #32
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e007      	b.n	80026ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d1c8      	bne.n	800263e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	@ 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d068      	beq.n	80027b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2210      	movs	r2, #16
 80026ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026ec:	e049      	b.n	8002782 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d045      	beq.n	8002782 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026f6:	f7ff fa01 	bl	8001afc <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	429a      	cmp	r2, r3
 8002704:	d302      	bcc.n	800270c <I2C_IsErrorOccurred+0x54>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d13a      	bne.n	8002782 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002716:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800271e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800272a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800272e:	d121      	bne.n	8002774 <I2C_IsErrorOccurred+0xbc>
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002736:	d01d      	beq.n	8002774 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	2b20      	cmp	r3, #32
 800273c:	d01a      	beq.n	8002774 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800274c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800274e:	f7ff f9d5 	bl	8001afc <HAL_GetTick>
 8002752:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002754:	e00e      	b.n	8002774 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002756:	f7ff f9d1 	bl	8001afc <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b19      	cmp	r3, #25
 8002762:	d907      	bls.n	8002774 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	f043 0320 	orr.w	r3, r3, #32
 800276a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002772:	e006      	b.n	8002782 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	2b20      	cmp	r3, #32
 8002780:	d1e9      	bne.n	8002756 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b20      	cmp	r3, #32
 800278e:	d003      	beq.n	8002798 <I2C_IsErrorOccurred+0xe0>
 8002790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0aa      	beq.n	80026ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002798:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800279c:	2b00      	cmp	r3, #0
 800279e:	d103      	bne.n	80027a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2220      	movs	r2, #32
 80027a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f043 0304 	orr.w	r3, r3, #4
 80027ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00b      	beq.n	80027e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00b      	beq.n	8002802 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	f043 0308 	orr.w	r3, r3, #8
 80027f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00b      	beq.n	8002824 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	f043 0302 	orr.w	r3, r3, #2
 8002812:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800281c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002824:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01c      	beq.n	8002866 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7ff fe3b 	bl	80024a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b0d      	ldr	r3, [pc, #52]	@ (8002874 <I2C_IsErrorOccurred+0x1bc>)
 800283e:	400b      	ands	r3, r1
 8002840:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	431a      	orrs	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002866:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800286a:	4618      	mov	r0, r3
 800286c:	3728      	adds	r7, #40	@ 0x28
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	fe00e800 	.word	0xfe00e800

08002878 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	460b      	mov	r3, r1
 8002884:	817b      	strh	r3, [r7, #10]
 8002886:	4613      	mov	r3, r2
 8002888:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800288a:	897b      	ldrh	r3, [r7, #10]
 800288c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002890:	7a7b      	ldrb	r3, [r7, #9]
 8002892:	041b      	lsls	r3, r3, #16
 8002894:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002898:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	0d5b      	lsrs	r3, r3, #21
 80028b2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80028b6:	4b08      	ldr	r3, [pc, #32]	@ (80028d8 <I2C_TransferConfig+0x60>)
 80028b8:	430b      	orrs	r3, r1
 80028ba:	43db      	mvns	r3, r3
 80028bc:	ea02 0103 	and.w	r1, r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028ca:	bf00      	nop
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	03ff63ff 	.word	0x03ff63ff

080028dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d138      	bne.n	8002964 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e032      	b.n	8002966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2224      	movs	r2, #36	@ 0x24
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800292e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	e000      	b.n	8002966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002964:	2302      	movs	r3, #2
  }
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002972:	b480      	push	{r7}
 8002974:	b085      	sub	sp, #20
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b20      	cmp	r3, #32
 8002986:	d139      	bne.n	80029fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002992:	2302      	movs	r3, #2
 8002994:	e033      	b.n	80029fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2224      	movs	r2, #36	@ 0x24
 80029a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0201 	bic.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80029c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e000      	b.n	80029fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029fc:	2302      	movs	r3, #2
  }
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002a18:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
 8002a28:	e007      	b.n	8002a3a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002a2a:	4b07      	ldr	r3, [pc, #28]	@ (8002a48 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 0204 	bic.w	r2, r3, #4
 8002a32:	4905      	ldr	r1, [pc, #20]	@ (8002a48 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40030400 	.word	0x40030400

08002a4c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002a50:	4b05      	ldr	r3, [pc, #20]	@ (8002a68 <HAL_ICACHE_Enable+0x1c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a04      	ldr	r2, [pc, #16]	@ (8002a68 <HAL_ICACHE_Enable+0x1c>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	40030400 	.word	0x40030400

08002a6c <HAL_PWREx_ControlVoltageScaling>:
  *        only take effect after the 2.4 GHz RADIO has entered Sleep or Deepsleep mode.
  * @note  In range 2, the 2.4 GHz RADIO shall not transmit nor receive.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  uint32_t vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002a74:	4b29      	ldr	r3, [pc, #164]	@ (8002b1c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a7c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d101      	bne.n	8002a8a <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	e042      	b.n	8002b10 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Set voltage scaling level */
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 8002a8a:	4b24      	ldr	r3, [pc, #144]	@ (8002b1c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002a92:	4922      	ldr	r1, [pc, #136]	@ (8002b1c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60cb      	str	r3, [r1, #12]


  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8002a9a:	4b21      	ldr	r3, [pc, #132]	@ (8002b20 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2232      	movs	r2, #50	@ 0x32
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b24 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	0c9b      	lsrs	r3, r3, #18
 8002aac:	3301      	adds	r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002ab0:	e002      	b.n	8002ab8 <HAL_PWREx_ControlVoltageScaling+0x4c>
  {
    timeout--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002ab8:	4b18      	ldr	r3, [pc, #96]	@ (8002b1c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d102      	bne.n	8002aca <HAL_PWREx_ControlVoltageScaling+0x5e>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f3      	bne.n	8002ab2 <HAL_PWREx_ControlVoltageScaling+0x46>
  }

  /* Check time out  */
  if (timeout == 0U)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_PWREx_ControlVoltageScaling+0x68>
  {
    return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e01d      	b.n	8002b10 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Wait until ACTVOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8002ad4:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2232      	movs	r2, #50	@ 0x32
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	4a11      	ldr	r2, [pc, #68]	@ (8002b24 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	0c9b      	lsrs	r3, r3, #18
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002aea:	e002      	b.n	8002af2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002af2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b1c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d102      	bne.n	8002b04 <HAL_PWREx_ControlVoltageScaling+0x98>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f3      	bne.n	8002aec <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out  */
  if (timeout == 0U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_PWREx_ControlVoltageScaling+0xa2>
  {
    return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e000      	b.n	8002b10 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	46020800 	.word	0x46020800
 8002b20:	20000000 	.word	0x20000000
 8002b24:	431bde83 	.word	0x431bde83

08002b28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08c      	sub	sp, #48	@ 0x30
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t mask;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e3d9      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b3a:	4b90      	ldr	r3, [pc, #576]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
 8002b42:	623b      	str	r3, [r7, #32]
  pllsrc = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002b44:	4b8d      	ldr	r3, [pc, #564]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d072      	beq.n	8002c40 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL1 in these cases it is not allowed to be disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_OscConfig+0x44>
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	d12a      	bne.n	8002bbc <HAL_RCC_OscConfig+0x94>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSE)))
 8002b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d127      	bne.n	8002bbc <HAL_RCC_OscConfig+0x94>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_OscConfig+0x50>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e3ba      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Otherwise, applying divider is allowed */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d15f      	bne.n	8002c3e <HAL_RCC_OscConfig+0x116>
        {
          assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

          /* Adjust the HSE division factor */
          __HAL_RCC_HSE_CONFIG(RCC_HSE_ON | RCC_OscInitStruct->HSEDiv);
 8002b7e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	4a7b      	ldr	r2, [pc, #492]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002b8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b92:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSE value */
          SystemCoreClock = (HSE_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSEPRE)) >> RCC_CR_HSEPRE_Pos)));
 8002b94:	4b79      	ldr	r3, [pc, #484]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	0d1b      	lsrs	r3, r3, #20
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	4a78      	ldr	r2, [pc, #480]	@ (8002d80 <HAL_RCC_OscConfig+0x258>)
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba4:	4a77      	ldr	r2, [pc, #476]	@ (8002d84 <HAL_RCC_OscConfig+0x25c>)
 8002ba6:	6013      	str	r3, [r2, #0]

          /* Adapt Systick interrupt period */
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ba8:	4b77      	ldr	r3, [pc, #476]	@ (8002d88 <HAL_RCC_OscConfig+0x260>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fe ff13 	bl	80019d8 <HAL_InitTick>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d042      	beq.n	8002c3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e398      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01f      	beq.n	8002c04 <HAL_RCC_OscConfig+0xdc>
      {
        assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG((RCC_OscInitStruct->HSEState | RCC_OscInitStruct->HSEDiv));
 8002bc4:	4b6d      	ldr	r3, [pc, #436]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6859      	ldr	r1, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	4969      	ldr	r1, [pc, #420]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fe ff8e 	bl	8001afc <HAL_GetTick>
 8002be0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0xce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be4:	f7fe ff8a 	bl	8001afc <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b64      	cmp	r3, #100	@ 0x64
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e37b      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bf6:	4b61      	ldr	r3, [pc, #388]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0xbc>
 8002c02:	e01d      	b.n	8002c40 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c04:	4b5d      	ldr	r3, [pc, #372]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	495a      	ldr	r1, [pc, #360]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c16:	f7fe ff71 	bl	8001afc <HAL_GetTick>
 8002c1a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c1e:	f7fe ff6d 	bl	8001afc <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b64      	cmp	r3, #100	@ 0x64
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e35e      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c30:	4b52      	ldr	r3, [pc, #328]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1f0      	bne.n	8002c1e <HAL_RCC_OscConfig+0xf6>
 8002c3c:	e000      	b.n	8002c40 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002c3e:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d05a      	beq.n	8002d02 <HAL_RCC_OscConfig+0x1da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_RCC_OscConfig+0x136>
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	2b0c      	cmp	r3, #12
 8002c56:	d113      	bne.n	8002c80 <HAL_RCC_OscConfig+0x158>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSI)))
 8002c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d110      	bne.n	8002c80 <HAL_RCC_OscConfig+0x158>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_RCC_OscConfig+0x142>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e341      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6a:	4b44      	ldr	r3, [pc, #272]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	041b      	lsls	r3, r3, #16
 8002c78:	4940      	ldr	r1, [pc, #256]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	610b      	str	r3, [r1, #16]
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c7e:	e040      	b.n	8002d02 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d023      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c88:	4b3c      	ldr	r3, [pc, #240]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a3b      	ldr	r2, [pc, #236]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7fe ff32 	bl	8001afc <HAL_GetTick>
 8002c98:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c9c:	f7fe ff2e 	bl	8001afc <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e31f      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cae:	4b33      	ldr	r3, [pc, #204]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0x174>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cba:	4b30      	ldr	r3, [pc, #192]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	041b      	lsls	r3, r3, #16
 8002cc8:	492c      	ldr	r1, [pc, #176]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	610b      	str	r3, [r1, #16]
 8002cce:	e018      	b.n	8002d02 <HAL_RCC_OscConfig+0x1da>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a29      	ldr	r2, [pc, #164]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002cd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7fe ff0e 	bl	8001afc <HAL_GetTick>
 8002ce0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x1ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce4:	f7fe ff0a 	bl	8001afc <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e2fb      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cf6:	4b21      	ldr	r3, [pc, #132]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80d2 	beq.w	8002eb4 <HAL_RCC_OscConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Update LSI1 configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8002d16:	4b19      	ldr	r3, [pc, #100]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d111      	bne.n	8002d48 <HAL_RCC_OscConfig+0x220>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d24:	4b15      	ldr	r3, [pc, #84]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d2a:	4a14      	ldr	r2, [pc, #80]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002d2c:	f043 0304 	orr.w	r3, r3, #4
 8002d30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002d34:	4b11      	ldr	r3, [pc, #68]	@ (8002d7c <HAL_RCC_OscConfig+0x254>)
 8002d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002d42:	2301      	movs	r3, #1
 8002d44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d48:	4b10      	ldr	r3, [pc, #64]	@ (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d123      	bne.n	8002d9c <HAL_RCC_OscConfig+0x274>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002d54:	4b0d      	ldr	r3, [pc, #52]	@ (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d58:	4a0c      	ldr	r2, [pc, #48]	@ (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d60:	f7fe fecc 	bl	8001afc <HAL_GetTick>
 8002d64:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d66:	e013      	b.n	8002d90 <HAL_RCC_OscConfig+0x268>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d68:	f7fe fec8 	bl	8001afc <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d90c      	bls.n	8002d90 <HAL_RCC_OscConfig+0x268>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e2b9      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
 8002d7a:	bf00      	nop
 8002d7c:	46020c00 	.word	0x46020c00
 8002d80:	01e84800 	.word	0x01e84800
 8002d84:	20000000 	.word	0x20000000
 8002d88:	20000004 	.word	0x20000004
 8002d8c:	46020800 	.word	0x46020800
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d90:	4ba4      	ldr	r3, [pc, #656]	@ (8003024 <HAL_RCC_OscConfig+0x4fc>)
 8002d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0e5      	beq.n	8002d68 <HAL_RCC_OscConfig+0x240>
        }
      }
    }

    /* Get BDCR1 register value */
    tmpreg1 = RCC->BDCR1;
 8002d9c:	4ba2      	ldr	r3, [pc, #648]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002da2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Define mask depending on LSI presence */
    mask = RCC_BDCR1_LSI1ON;
 8002da4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002da8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_LSI2_SUPPORT)
    mask |= RCC_BDCR1_LSI2ON;
#endif /* RCC_LSI2_SUPPORT */

    /* Check the LSI1 State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d056      	beq.n	8002e60 <HAL_RCC_OscConfig+0x338>
    {
      if ((RCC_OscInitStruct->LSIState & RCC_LSI1_ON) != 0x00u)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d030      	beq.n	8002e20 <HAL_RCC_OscConfig+0x2f8>
      {
        /* Check LSI1 division factor */
        assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

        /* Check is LSIDiv is requested to be changed and LSI is already ON */
        if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_BDCR1_LSI1PREDIV)) && ((tmpreg1 & RCC_BDCR1_LSI1RDY) != 0x00u))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d020      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2e6>
 8002dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d01b      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2e6>
        {
          /* Disable LSI1 */
          tmpreg1 &= ~RCC_BDCR1_LSI1ON;
 8002dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
          RCC->BDCR1 = tmpreg1;
 8002dde:	4a92      	ldr	r2, [pc, #584]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002de6:	f7fe fe89 	bl	8001afc <HAL_GetTick>
 8002dea:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is disabled */
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x2d8>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dee:	f7fe fe85 	bl	8001afc <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b14      	cmp	r3, #20
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x2d8>
            {
              /* LSI1 may be forced ON by IWDG */
              return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e276      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8002e00:	4b89      	ldr	r3, [pc, #548]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1ef      	bne.n	8002dee <HAL_RCC_OscConfig+0x2c6>
          HAL_Delay(1);
#endif
        }

        /* Set LSI1 division factor */
        tmpreg1 &= ~RCC_BDCR1_LSI1PREDIV;
 8002e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e14:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Enable Concerned LSI */
      tmpreg1 |= RCC_OscInitStruct->LSIState;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e26:	4313      	orrs	r3, r2
 8002e28:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8002e2a:	4a7f      	ldr	r2, [pc, #508]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e32:	f7fe fe63 	bl	8001afc <HAL_GetTick>
 8002e36:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready : LSIRDY bit is position ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x324>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3a:	f7fe fe5f 	bl	8001afc <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b14      	cmp	r3, #20
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x324>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e250      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8002e4c:	4b76      	ldr	r3, [pc, #472]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002e4e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0ed      	beq.n	8002e3a <HAL_RCC_OscConfig+0x312>
 8002e5e:	e01d      	b.n	8002e9c <HAL_RCC_OscConfig+0x374>
#endif
    }
    else
    {
      /* Disable the Internal Low Speed oscillator LSI1 and LSI2 is available */
      tmpreg1 &= ~mask;
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e66:	4013      	ands	r3, r2
 8002e68:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8002e6a:	4a6f      	ldr	r2, [pc, #444]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e72:	f7fe fe43 	bl	8001afc <HAL_GetTick>
 8002e76:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is disabled : LSIRDY bit position is ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x364>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e7a:	f7fe fe3f 	bl	8001afc <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b14      	cmp	r3, #20
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x364>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e230      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8002e8c:	4b66      	ldr	r3, [pc, #408]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002e8e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ee      	bne.n	8002e7a <HAL_RCC_OscConfig+0x352>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d107      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x38c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea4:	4b60      	ldr	r3, [pc, #384]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eaa:	4a5f      	ldr	r2, [pc, #380]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002eac:	f023 0304 	bic.w	r3, r3, #4
 8002eb0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80e2 	beq.w	8003086 <HAL_RCC_OscConfig+0x55e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8002ec8:	4b57      	ldr	r3, [pc, #348]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d111      	bne.n	8002efa <HAL_RCC_OscConfig+0x3d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed6:	4b54      	ldr	r3, [pc, #336]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002edc:	4a52      	ldr	r2, [pc, #328]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002ede:	f043 0304 	orr.w	r3, r3, #4
 8002ee2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002ee6:	4b50      	ldr	r3, [pc, #320]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002efa:	4b4a      	ldr	r3, [pc, #296]	@ (8003024 <HAL_RCC_OscConfig+0x4fc>)
 8002efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d118      	bne.n	8002f38 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002f06:	4b47      	ldr	r3, [pc, #284]	@ (8003024 <HAL_RCC_OscConfig+0x4fc>)
 8002f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0a:	4a46      	ldr	r2, [pc, #280]	@ (8003024 <HAL_RCC_OscConfig+0x4fc>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f12:	f7fe fdf3 	bl	8001afc <HAL_GetTick>
 8002f16:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1a:	f7fe fdef 	bl	8001afc <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e1e0      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8003024 <HAL_RCC_OscConfig+0x4fc>)
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x3f2>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d051      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x4bc>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_LSESYSEN);
 8002f40:	4b39      	ldr	r3, [pc, #228]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002f42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f52:	4313      	orrs	r3, r2
 8002f54:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8002f56:	4a34      	ldr	r2, [pc, #208]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5e:	f7fe fdcd 	bl	8001afc <HAL_GetTick>
 8002f62:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 8002f64:	e00a      	b.n	8002f7c <HAL_RCC_OscConfig+0x454>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7fe fdc9 	bl	8001afc <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x454>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e1b8      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 8002f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002f7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0ed      	beq.n	8002f66 <HAL_RCC_OscConfig+0x43e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR1_LSESYSEN) != 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d01e      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x4ac>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 8002f96:	e00a      	b.n	8002fae <HAL_RCC_OscConfig+0x486>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f98:	f7fe fdb0 	bl	8001afc <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x486>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e19f      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 8002fae:	4b1e      	ldr	r3, [pc, #120]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002fb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0ed      	beq.n	8002f98 <HAL_RCC_OscConfig+0x470>
 8002fbc:	e057      	b.n	800306e <HAL_RCC_OscConfig+0x546>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fbe:	f7fe fd9d 	bl	8001afc <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e18c      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8002fd4:	4b14      	ldr	r3, [pc, #80]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002fd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1ed      	bne.n	8002fbe <HAL_RCC_OscConfig+0x496>
 8002fe2:	e044      	b.n	800306e <HAL_RCC_OscConfig+0x546>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR1, (RCC_BDCR1_LSEON | RCC_BDCR1_LSESYSEN));
 8002fe4:	4b10      	ldr	r3, [pc, #64]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fea:	4a0f      	ldr	r2, [pc, #60]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002fec:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8002ff0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR1, RCC_BDCR1_LSEBYP);
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002ff6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8003028 <HAL_RCC_OscConfig+0x500>)
 8002ffc:	f023 0304 	bic.w	r3, r3, #4
 8003000:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7fe fd7a 	bl	8001afc <HAL_GetTick>
 8003008:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 800300a:	e00f      	b.n	800302c <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300c:	f7fe fd76 	bl	8001afc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d906      	bls.n	800302c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e165      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
 8003022:	bf00      	nop
 8003024:	46020800 	.word	0x46020800
 8003028:	46020c00 	.word	0x46020c00
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 800302c:	4b98      	ldr	r3, [pc, #608]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 800302e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1e8      	bne.n	800300c <HAL_RCC_OscConfig+0x4e4>
        }
      }

      if (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSEN) != 0U)
 800303a:	4b95      	ldr	r3, [pc, #596]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 800303c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003044:	2b00      	cmp	r3, #0
 8003046:	d012      	beq.n	800306e <HAL_RCC_OscConfig+0x546>
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8003048:	e00a      	b.n	8003060 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304a:	f7fe fd57 	bl	8001afc <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003058:	4293      	cmp	r3, r2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e146      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8003060:	4b8b      	ldr	r3, [pc, #556]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 8003062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003066:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1ed      	bne.n	800304a <HAL_RCC_OscConfig+0x522>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800306e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003072:	2b01      	cmp	r3, #1
 8003074:	d107      	bne.n	8003086 <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003076:	4b86      	ldr	r3, [pc, #536]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 8003078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800307c:	4a84      	ldr	r2, [pc, #528]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 800307e:	f023 0304 	bic.w	r3, r3, #4
 8003082:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if ((RCC_OscInitStruct->PLL1.PLLState) != RCC_PLL_NONE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 812e 	beq.w	80032ec <HAL_RCC_OscConfig+0x7c4>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	2b0c      	cmp	r3, #12
 8003094:	f000 80ba 	beq.w	800320c <HAL_RCC_OscConfig+0x6e4>
    {
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_ON)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	2b02      	cmp	r3, #2
 800309e:	f040 8093 	bne.w	80031c8 <HAL_RCC_OscConfig+0x6a0>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL1.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL1.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL1.PLLR));

        /* Disable the main PLL1. */
        tmpreg1 = (RCC->CR & ~RCC_CR_PLL1ON);
 80030a2:	4b7b      	ldr	r3, [pc, #492]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030aa:	62bb      	str	r3, [r7, #40]	@ 0x28
        RCC->CR = tmpreg1;
 80030ac:	4a78      	ldr	r2, [pc, #480]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 80030ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7fe fd23 	bl	8001afc <HAL_GetTick>
 80030b6:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        do
        {
          tmpreg1 = RCC->CR;
 80030b8:	4b75      	ldr	r3, [pc, #468]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	62bb      	str	r3, [r7, #40]	@ 0x28
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030be:	f7fe fd1d 	bl	8001afc <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e10e      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
          }
        } while ((tmpreg1 & RCC_CR_PLL1RDY) != 0U);
 80030d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1ee      	bne.n	80030b8 <HAL_RCC_OscConfig+0x590>

        /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
        if (RCC_OscInitStruct->PLL1.PLLSource == RCC_PLLSOURCE_HSE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d108      	bne.n	80030f4 <HAL_RCC_OscConfig+0x5cc>
        {
          /* Clock source is HSE or HSE/2 */
          pllsrc = HSE_VALUE >> ((tmpreg1 & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos);
 80030e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e4:	0d1b      	lsrs	r3, r3, #20
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	4a6a      	ldr	r2, [pc, #424]	@ (8003294 <HAL_RCC_OscConfig+0x76c>)
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
 80030f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030f2:	e001      	b.n	80030f8 <HAL_RCC_OscConfig+0x5d0>
        }
        else
        {
          /* Clock source is HSI */
          pllsrc = HSI_VALUE;
 80030f4:	4b68      	ldr	r3, [pc, #416]	@ (8003298 <HAL_RCC_OscConfig+0x770>)
 80030f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Compute VCO input frequency depending on M divider */
        pllsrc = (pllsrc / RCC_OscInitStruct->PLL1.PLLM);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003102:	62fb      	str	r3, [r7, #44]	@ 0x2c
        assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllsrc));

        if (pllsrc > PLL_INPUTRANGE0_FREQMAX)
 8003104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003106:	4a65      	ldr	r2, [pc, #404]	@ (800329c <HAL_RCC_OscConfig+0x774>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d902      	bls.n	8003112 <HAL_RCC_OscConfig+0x5ea>
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE1;
 800310c:	230c      	movs	r3, #12
 800310e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003110:	e001      	b.n	8003116 <HAL_RCC_OscConfig+0x5ee>
        }
        else
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE0;
 8003112:	2300      	movs	r3, #0
 8003114:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Configure PLL1 source, PLLM divider, VCO input range and enable PLL1R output. Clear also FRACEN*/
        tmpreg2 = RCC->PLL1CFGR;
 8003116:	4b5e      	ldr	r3, [pc, #376]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 8003118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311a:	617b      	str	r3, [r7, #20]
        tmpreg2 &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1RGE | RCC_PLL1CFGR_PLL1FRACEN | RCC_PLL1CFGR_PLL1M);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f423 63e3 	bic.w	r3, r3, #1816	@ 0x718
 8003122:	f023 0307 	bic.w	r3, r3, #7
 8003126:	617b      	str	r3, [r7, #20]
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800312c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800312e:	431a      	orrs	r2, r3
                    ((RCC_OscInitStruct->PLL1.PLLM - 1u) << RCC_PLL1CFGR_PLL1M_Pos) | RCC_PLL1CFGR_PLL1REN);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003134:	3b01      	subs	r3, #1
 8003136:	021b      	lsls	r3, r3, #8
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8003138:	431a      	orrs	r2, r3
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003142:	617b      	str	r3, [r7, #20]
        RCC->PLL1CFGR = tmpreg2;
 8003144:	4a52      	ldr	r2, [pc, #328]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLLN multiplication factor and PLLP, PLLQ, PLLR dividers */
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314e:	1e5a      	subs	r2, r3, #1
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003154:	3b01      	subs	r3, #1
 8003156:	025b      	lsls	r3, r3, #9
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8003158:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLQ - 1u) << RCC_PLL1DIVR_PLL1Q_Pos) |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800315e:	3b01      	subs	r3, #1
 8003160:	041b      	lsls	r3, r3, #16
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 8003162:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLR - 1u) << RCC_PLL1DIVR_PLL1R_Pos));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003168:	3b01      	subs	r3, #1
 800316a:	061b      	lsls	r3, r3, #24
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
        RCC->PLL1DIVR = tmpreg2;
 8003170:	4a47      	ldr	r2, [pc, #284]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	6353      	str	r3, [r2, #52]	@ 0x34

        if (RCC_OscInitStruct->PLL1.PLLFractional != 0x00u)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_RCC_OscConfig+0x66c>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003182:	4a43      	ldr	r2, [pc, #268]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	6393      	str	r3, [r2, #56]	@ 0x38

          /* Enable PLL1FRACEN */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 8003188:	4b41      	ldr	r3, [pc, #260]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 800318a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318c:	4a40      	ldr	r2, [pc, #256]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 800318e:	f043 0310 	orr.w	r3, r3, #16
 8003192:	6293      	str	r3, [r2, #40]	@ 0x28
        }

        /* Enable the main PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003194:	4b3e      	ldr	r3, [pc, #248]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a3d      	ldr	r2, [pc, #244]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 800319a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800319e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fe fcac 	bl	8001afc <HAL_GetTick>
 80031a4:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x692>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a8:	f7fe fca8 	bl	8001afc <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e099      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80031ba:	4b35      	ldr	r3, [pc, #212]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x680>
 80031c6:	e091      	b.n	80032ec <HAL_RCC_OscConfig+0x7c4>
        }
      }
      else
      {
        /* Disable the main PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80031c8:	4b31      	ldr	r3, [pc, #196]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a30      	ldr	r2, [pc, #192]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 80031ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7fe fc92 	bl	8001afc <HAL_GetTick>
 80031d8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x6c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fe fc8e 	bl	8001afc <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x6c6>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e07f      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80031ee:	4b28      	ldr	r3, [pc, #160]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x6b4>
          }
        }

        /* CLear the PLL1 source and disable outputs to save power when PLL1 is off */
        CLEAR_BIT(RCC->PLL1CFGR, (RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | \
 80031fa:	4b25      	ldr	r3, [pc, #148]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 80031fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fe:	4a24      	ldr	r2, [pc, #144]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 8003200:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003204:	f023 0303 	bic.w	r3, r3, #3
 8003208:	6293      	str	r3, [r2, #40]	@ 0x28
 800320a:	e06f      	b.n	80032ec <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL1 used as System clock source */
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_RCC_OscConfig+0x6f0>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e06a      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        tmpreg1 = RCC->PLL1CFGR;
 8003218:	4b1d      	ldr	r3, [pc, #116]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 800321a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321c:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg2 = RCC->PLL1DIVR;
 800321e:	4b1c      	ldr	r3, [pc, #112]	@ (8003290 <HAL_RCC_OscConfig+0x768>)
 8003220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003222:	617b      	str	r3, [r7, #20]

        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 8003224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003226:	f003 0203 	and.w	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	429a      	cmp	r2, r3
 8003230:	d12b      	bne.n	800328a <HAL_RCC_OscConfig+0x762>
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 8003232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	f003 0207 	and.w	r2, r3, #7
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323e:	3b01      	subs	r3, #1
        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d122      	bne.n	800328a <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324e:	3b01      	subs	r3, #1
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 8003250:	429a      	cmp	r2, r3
 8003252:	d11a      	bne.n	800328a <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	0a5b      	lsrs	r3, r3, #9
 8003258:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003260:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 8003262:	429a      	cmp	r2, r3
 8003264:	d111      	bne.n	800328a <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	0c1b      	lsrs	r3, r3, #16
 800326a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003272:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d108      	bne.n	800328a <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) != (RCC_OscInitStruct->PLL1.PLLR - 1u)))
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	0e1b      	lsrs	r3, r3, #24
 800327c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003284:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 8003286:	429a      	cmp	r2, r3
 8003288:	d00a      	beq.n	80032a0 <HAL_RCC_OscConfig+0x778>
        {
          return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e02f      	b.n	80032ee <HAL_RCC_OscConfig+0x7c6>
 800328e:	bf00      	nop
 8003290:	46020c00 	.word	0x46020c00
 8003294:	01e84800 	.word	0x01e84800
 8003298:	00f42400 	.word	0x00f42400
 800329c:	007a1200 	.word	0x007a1200
        }
        else
        {
          /* Check if only fractional part needs to be updated  */
          tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 80032a0:	4b15      	ldr	r3, [pc, #84]	@ (80032f8 <HAL_RCC_OscConfig+0x7d0>)
 80032a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a4:	08db      	lsrs	r3, r3, #3
 80032a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032aa:	62bb      	str	r3, [r7, #40]	@ 0x28

          if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d01a      	beq.n	80032ec <HAL_RCC_OscConfig+0x7c4>
          {
            assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

            /* Disable PLL1FRACEN */
            __HAL_RCC_PLL1_FRACN_DISABLE();
 80032b6:	4b10      	ldr	r3, [pc, #64]	@ (80032f8 <HAL_RCC_OscConfig+0x7d0>)
 80032b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ba:	4a0f      	ldr	r2, [pc, #60]	@ (80032f8 <HAL_RCC_OscConfig+0x7d0>)
 80032bc:	f023 0310 	bic.w	r3, r3, #16
 80032c0:	6293      	str	r3, [r2, #40]	@ 0x28

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032c2:	f7fe fc1b 	bl	8001afc <HAL_GetTick>
 80032c6:	61f8      	str	r0, [r7, #28]

            /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
            while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80032c8:	bf00      	nop
 80032ca:	f7fe fc17 	bl	8001afc <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d0f9      	beq.n	80032ca <HAL_RCC_OscConfig+0x7a2>
            {
            }

            /* Configure PLL1 PLL1FRACN */
            __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032da:	4a07      	ldr	r2, [pc, #28]	@ (80032f8 <HAL_RCC_OscConfig+0x7d0>)
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	6393      	str	r3, [r2, #56]	@ 0x38

            /* Enable PLL1FRACEN to latch new value. */
            __HAL_RCC_PLL1_FRACN_ENABLE();
 80032e0:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <HAL_RCC_OscConfig+0x7d0>)
 80032e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e4:	4a04      	ldr	r2, [pc, #16]	@ (80032f8 <HAL_RCC_OscConfig+0x7d0>)
 80032e6:	f043 0310 	orr.w	r3, r3, #16
 80032ea:	6293      	str	r3, [r2, #40]	@ 0x28
          }
        }
      }
    }
  }
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3730      	adds	r7, #48	@ 0x30
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	46020c00 	.word	0x46020c00

080032fc <HAL_RCC_ClockConfig>:
  *         HCLK5 prescaler is switched automatically by hardware, but configuration shall
  *         always be performed before setting new PLL1 source as Sysclk source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e115      	b.n	800353c <HAL_RCC_ClockConfig+0x240>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003310:	4b8c      	ldr	r3, [pc, #560]	@ (8003544 <HAL_RCC_ClockConfig+0x248>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d910      	bls.n	8003340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4b89      	ldr	r3, [pc, #548]	@ (8003544 <HAL_RCC_ClockConfig+0x248>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 020f 	bic.w	r2, r3, #15
 8003326:	4987      	ldr	r1, [pc, #540]	@ (8003544 <HAL_RCC_ClockConfig+0x248>)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	4313      	orrs	r3, r2
 800332c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b85      	ldr	r3, [pc, #532]	@ (8003544 <HAL_RCC_ClockConfig+0x248>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0fd      	b.n	800353c <HAL_RCC_ClockConfig+0x240>
  }

  /*-------------------------- HCLK5 Configuration --------------------------*/
  /* HCLK5 prescaler is switched automatically by hardware, but configuration shall
    always be performed before setting new PLL1 source as Sysclk source. */
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK5) == RCC_CLOCKTYPE_HCLK5)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00d      	beq.n	8003368 <HAL_RCC_ClockConfig+0x6c>
  {
    assert_param(IS_RCC_HCLK5_HSEHSI(RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
    assert_param(IS_RCC_HCLK5_PLL1(RCC_ClkInitStruct->AHB5_PLL1_CLKDivider));
    MODIFY_REG(RCC->CFGR4, (RCC_CFGR4_HDIV5 | RCC_CFGR4_HPRE5),
 800334c:	4b7e      	ldr	r3, [pc, #504]	@ (8003548 <HAL_RCC_ClockConfig+0x24c>)
 800334e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003352:	f023 0217 	bic.w	r2, r3, #23
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6999      	ldr	r1, [r3, #24]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	430b      	orrs	r3, r1
 8003360:	4979      	ldr	r1, [pc, #484]	@ (8003548 <HAL_RCC_ClockConfig+0x24c>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
               (RCC_ClkInitStruct->AHB5_PLL1_CLKDivider | RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d06f      	beq.n	8003454 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 8003374:	4b74      	ldr	r3, [pc, #464]	@ (8003548 <HAL_RCC_ClockConfig+0x24c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	617b      	str	r3, [r7, #20]

    /* PLL1 is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b03      	cmp	r3, #3
 8003380:	d118      	bne.n	80033b4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the PLL1 ready flag */
      if ((tmpreg1 & RCC_CR_PLL1RDY) == 0U)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0d5      	b.n	800353c <HAL_RCC_ClockConfig+0x240>
      }
      else
      {
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8003390:	4b6d      	ldr	r3, [pc, #436]	@ (8003548 <HAL_RCC_ClockConfig+0x24c>)
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	f003 020c 	and.w	r2, r3, #12
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	429a      	cmp	r2, r3
 80033a0:	d01a      	beq.n	80033d8 <HAL_RCC_ClockConfig+0xdc>
        {
          /* Whatever is PLL frequency, use step prediv to reach maximum frequency. */
          /* Select pll1r to be prediv with 2-step divider when selected as Sysclk source */
          MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRESTEP, RCC_PLL1CFGR_PLL1RCLKPRE);
 80033a2:	4b69      	ldr	r3, [pc, #420]	@ (8003548 <HAL_RCC_ClockConfig+0x24c>)
 80033a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80033aa:	4a67      	ldr	r2, [pc, #412]	@ (8003548 <HAL_RCC_ClockConfig+0x24c>)
 80033ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033b0:	6293      	str	r3, [r2, #40]	@ 0x28
 80033b2:	e011      	b.n	80033d8 <HAL_RCC_ClockConfig+0xdc>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d106      	bne.n	80033ca <HAL_RCC_ClockConfig+0xce>
      {
        /* Check the HSE ready flag */
        if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d108      	bne.n	80033d8 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0b8      	b.n	800353c <HAL_RCC_ClockConfig+0x240>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0b1      	b.n	800353c <HAL_RCC_ClockConfig+0x240>
        }
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033d8:	4b5b      	ldr	r3, [pc, #364]	@ (8003548 <HAL_RCC_ClockConfig+0x24c>)
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f023 0203 	bic.w	r2, r3, #3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4958      	ldr	r1, [pc, #352]	@ (8003548 <HAL_RCC_ClockConfig+0x24c>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ea:	f7fe fb87 	bl	8001afc <HAL_GetTick>
 80033ee:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_ClockConfig+0x10c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f2:	f7fe fb83 	bl	8001afc <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e099      	b.n	800353c <HAL_RCC_ClockConfig+0x240>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8003408:	4b4f      	ldr	r3, [pc, #316]	@ (8003548 <HAL_RCC_ClockConfig+0x24c>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f003 020c 	and.w	r2, r3, #12
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	429a      	cmp	r2, r3
 8003418:	d1eb      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xf6>
      }
    }

    /* If PLL1rCLK is asked to be SYSCLK source, clear prediv. */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b03      	cmp	r3, #3
 8003420:	d118      	bne.n	8003454 <HAL_RCC_ClockConfig+0x158>
    {
      /* Set PLL1R prediv to not divided */
      CLEAR_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRE);
 8003422:	4b49      	ldr	r3, [pc, #292]	@ (8003548 <HAL_RCC_ClockConfig+0x24c>)
 8003424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003426:	4a48      	ldr	r2, [pc, #288]	@ (8003548 <HAL_RCC_ClockConfig+0x24c>)
 8003428:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800342c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7fe fb65 	bl	8001afc <HAL_GetTick>
 8003432:	60f8      	str	r0, [r7, #12]

      /* Wait until PLL1 not divided is ready */
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8003434:	e008      	b.n	8003448 <HAL_RCC_ClockConfig+0x14c>
      {
        if ((HAL_GetTick() - tickstart) > PLL1_NDIV_TIMEOUT_VALUE)
 8003436:	f7fe fb61 	bl	8001afc <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b0a      	cmp	r3, #10
 8003442:	d901      	bls.n	8003448 <HAL_RCC_ClockConfig+0x14c>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e079      	b.n	800353c <HAL_RCC_ClockConfig+0x240>
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8003448:	4b3f      	ldr	r3, [pc, #252]	@ (8003548 <HAL_RCC_ClockConfig+0x24c>)
 800344a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 8003454:	4b3c      	ldr	r3, [pc, #240]	@ (8003548 <HAL_RCC_ClockConfig+0x24c>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 800345a:	2300      	movs	r3, #0
 800345c:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f023 0307 	bic.w	r3, r3, #7
 8003470:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 800347c:	2301      	movs	r3, #1
 800347e:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003492:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	4313      	orrs	r3, r2
 800349c:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 800349e:	2301      	movs	r3, #1
 80034a0:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x1ca>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80034b4:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80034c2:	2301      	movs	r3, #1
 80034c4:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x1d6>
  {
    RCC->CFGR2 = tmpreg1;
 80034cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003548 <HAL_RCC_ClockConfig+0x24c>)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK7 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK7) == RCC_CLOCKTYPE_PCLK7)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB7CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB7CLKDivider);
 80034de:	4a1a      	ldr	r2, [pc, #104]	@ (8003548 <HAL_RCC_ClockConfig+0x24c>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034e6:	4b17      	ldr	r3, [pc, #92]	@ (8003544 <HAL_RCC_ClockConfig+0x248>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d210      	bcs.n	8003516 <HAL_RCC_ClockConfig+0x21a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f4:	4b13      	ldr	r3, [pc, #76]	@ (8003544 <HAL_RCC_ClockConfig+0x248>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f023 020f 	bic.w	r2, r3, #15
 80034fc:	4911      	ldr	r1, [pc, #68]	@ (8003544 <HAL_RCC_ClockConfig+0x248>)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	4313      	orrs	r3, r2
 8003502:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003504:	4b0f      	ldr	r3, [pc, #60]	@ (8003544 <HAL_RCC_ClockConfig+0x248>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d001      	beq.n	8003516 <HAL_RCC_ClockConfig+0x21a>
    {
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e012      	b.n	800353c <HAL_RCC_ClockConfig+0x240>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003516:	f000 f81f 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 800351a:	4602      	mov	r2, r0
 800351c:	4b0a      	ldr	r3, [pc, #40]	@ (8003548 <HAL_RCC_ClockConfig+0x24c>)
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	4909      	ldr	r1, [pc, #36]	@ (800354c <HAL_RCC_ClockConfig+0x250>)
 8003526:	5ccb      	ldrb	r3, [r1, r3]
 8003528:	fa22 f303 	lsr.w	r3, r2, r3
 800352c:	4a08      	ldr	r2, [pc, #32]	@ (8003550 <HAL_RCC_ClockConfig+0x254>)
 800352e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003530:	4b08      	ldr	r3, [pc, #32]	@ (8003554 <HAL_RCC_ClockConfig+0x258>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7fe fa4f 	bl	80019d8 <HAL_InitTick>
 800353a:	4603      	mov	r3, r0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40022000 	.word	0x40022000
 8003548:	46020c00 	.word	0x46020c00
 800354c:	08006d4c 	.word	0x08006d4c
 8003550:	20000000 	.word	0x20000000
 8003554:	20000004 	.word	0x20000004

08003558 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
  uint32_t sysclk;

  /* Get SYSCLK source */
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 800355e:	4b10      	ldr	r3, [pc, #64]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x48>)
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	607b      	str	r3, [r7, #4]

  if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d102      	bne.n	8003574 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 800356e:	4b0d      	ldr	r3, [pc, #52]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x4c>)
 8003570:	607b      	str	r3, [r7, #4]
 8003572:	e00f      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b08      	cmp	r3, #8
 8003578:	d109      	bne.n	800358e <HAL_RCC_GetSysClockFreq+0x36>
  {
    /* HSE used as system clock source. Check if HSE is divided by 2 */
    sysclk = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 800357a:	4b09      	ldr	r3, [pc, #36]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x48>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	0d1b      	lsrs	r3, r3, #20
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	4a08      	ldr	r2, [pc, #32]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x50>)
 8003586:	fa22 f303 	lsr.w	r3, r2, r3
 800358a:	607b      	str	r3, [r7, #4]
 800358c:	e002      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else
  {
    /* PLL1 used as system clock source */
    sysclk = HAL_RCC_GetPLL1RFreq();
 800358e:	f000 f80d 	bl	80035ac <HAL_RCC_GetPLL1RFreq>
 8003592:	6078      	str	r0, [r7, #4]
  }

  return sysclk;
 8003594:	687b      	ldr	r3, [r7, #4]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	46020c00 	.word	0x46020c00
 80035a4:	00f42400 	.word	0x00f42400
 80035a8:	01e84800 	.word	0x01e84800

080035ac <HAL_RCC_GetPLL1RFreq>:
/**
  * @brief  Return the PLL1R frequency.
  * @retval PLL1R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL1RFreq(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL1R divider */
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 80035b2:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <HAL_RCC_GetPLL1RFreq+0x34>)
 80035b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b6:	0e1b      	lsrs	r3, r3, #24
 80035b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035bc:	3301      	adds	r3, #1
 80035be:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL1R one */
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 80035c0:	f000 f810 	bl	80035e4 <RCC_PLL1_GetVCOOutputFreq>
 80035c4:	eef0 7a40 	vmov.f32	s15, s0
 80035c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035cc:	ee17 2a90 	vmov	r2, s15
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	46020c00 	.word	0x46020c00

080035e4 <RCC_PLL1_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL1 VCO output frequency
  * @retval Value of PLL1 VCO output frequency
  */
static float_t RCC_PLL1_GetVCOOutputFreq(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
  float_t pllm;
  float_t plln;
  float_t pllfracn;

  /* Get PLL1 DIVR register value */
  tmpreg1 = RCC->PLL1DIVR;
 80035ea:	4b36      	ldr	r3, [pc, #216]	@ (80036c4 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 80035ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 multiplication factor */
  tmp = (tmpreg1 & RCC_PLL1DIVR_PLL1N) + 1U;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f6:	3301      	adds	r3, #1
 80035f8:	617b      	str	r3, [r7, #20]
  plln = (float_t) tmp;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	ee07 3a90 	vmov	s15, r3
 8003600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003604:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Get PLL1 CFGR register value */
  tmpreg1 = RCC->PLL1CFGR;
 8003608:	4b2e      	ldr	r3, [pc, #184]	@ (80036c4 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 800360a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360c:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 divider */
  tmp = ((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	0a1b      	lsrs	r3, r3, #8
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	3301      	adds	r3, #1
 8003618:	617b      	str	r3, [r7, #20]
  pllm = (float_t) tmp;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	ee07 3a90 	vmov	s15, r3
 8003620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003624:	edc7 7a01 	vstr	s15, [r7, #4]

  /* Check if fractional part is enable */
  if ((tmpreg1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b00      	cmp	r3, #0
 8003630:	d006      	beq.n	8003640 <RCC_PLL1_GetVCOOutputFreq+0x5c>
  {
    tmp = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 8003632:	4b24      	ldr	r3, [pc, #144]	@ (80036c4 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8003634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003636:	08db      	lsrs	r3, r3, #3
 8003638:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	e001      	b.n	8003644 <RCC_PLL1_GetVCOOutputFreq+0x60>
  }
  else
  {
    tmp = 0u;
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]
  }
  pllfracn = (float_t)tmp;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364e:	edc7 7a00 	vstr	s15, [r7]

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLL1CFGR_PLL1SRC)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d002      	beq.n	8003662 <RCC_PLL1_GetVCOOutputFreq+0x7e>
 800365c:	2b03      	cmp	r3, #3
 800365e:	d003      	beq.n	8003668 <RCC_PLL1_GetVCOOutputFreq+0x84>
 8003660:	e013      	b.n	800368a <RCC_PLL1_GetVCOOutputFreq+0xa6>
  {
    /* HSI used as PLL1 clock source */
    case RCC_PLLSOURCE_HSI:
      pllsrc = (float_t)HSI_VALUE;
 8003662:	4b19      	ldr	r3, [pc, #100]	@ (80036c8 <RCC_PLL1_GetVCOOutputFreq+0xe4>)
 8003664:	613b      	str	r3, [r7, #16]
      break;
 8003666:	e014      	b.n	8003692 <RCC_PLL1_GetVCOOutputFreq+0xae>

    /* HSE used as PLL1 clock source */
    case RCC_PLLSOURCE_HSE:
      tmp = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8003668:	4b16      	ldr	r3, [pc, #88]	@ (80036c4 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	0d1b      	lsrs	r3, r3, #20
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	4a16      	ldr	r2, [pc, #88]	@ (80036cc <RCC_PLL1_GetVCOOutputFreq+0xe8>)
 8003674:	fa22 f303 	lsr.w	r3, r2, r3
 8003678:	617b      	str	r3, [r7, #20]
      pllsrc = (float_t)tmp;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	ee07 3a90 	vmov	s15, r3
 8003680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003684:	edc7 7a04 	vstr	s15, [r7, #16]
      break;
 8003688:	e003      	b.n	8003692 <RCC_PLL1_GetVCOOutputFreq+0xae>

    default:
      pllsrc = (float_t)0;
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
      break;
 8003690:	bf00      	nop
  }

  /* Compute VCO output frequency */
  return ((pllsrc / pllm) * (plln + (pllfracn / (float_t)0x2000u)));
 8003692:	edd7 6a04 	vldr	s13, [r7, #16]
 8003696:	edd7 7a01 	vldr	s15, [r7, #4]
 800369a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800369e:	edd7 7a00 	vldr	s15, [r7]
 80036a2:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 80036d0 <RCC_PLL1_GetVCOOutputFreq+0xec>
 80036a6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80036aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80036ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036b2:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80036b6:	eeb0 0a67 	vmov.f32	s0, s15
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	46020c00 	.word	0x46020c00
 80036c8:	4b742400 	.word	0x4b742400
 80036cc:	01e84800 	.word	0x01e84800
 80036d0:	46000000 	.word	0x46000000

080036d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036e8:	4b95      	ldr	r3, [pc, #596]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80036ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036ee:	f023 0203 	bic.w	r2, r3, #3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4992      	ldr	r1, [pc, #584]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

#if defined (USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800370a:	4b8d      	ldr	r3, [pc, #564]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800370c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003710:	f023 020c 	bic.w	r2, r3, #12
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	4989      	ldr	r1, [pc, #548]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
#endif


#if defined (I2C1)
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800372c:	4b84      	ldr	r3, [pc, #528]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800372e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003732:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	4981      	ldr	r1, [pc, #516]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0



#if defined (LPTIM2)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800374e:	4b7c      	ldr	r3, [pc, #496]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003754:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	4978      	ldr	r1, [pc, #480]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }
#endif

#if defined (SPI1)
  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 8003770:	4b73      	ldr	r3, [pc, #460]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003776:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	4970      	ldr	r1, [pc, #448]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }
#endif

  /*-------------------------- SYSTICK clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SYSTICK) == RCC_PERIPHCLK_SYSTICK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SYSTICKCLKSOURCE(PeriphClkInit->SystickClockSelection));

    /* Configure the SYSTICK clock source */
    __HAL_RCC_SYSTICK_CONFIG(PeriphClkInit->SystickClockSelection);
 8003792:	4b6b      	ldr	r3, [pc, #428]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003798:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	4967      	ldr	r1, [pc, #412]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- TIMIC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMIC) == RCC_PERIPHCLK_TIMIC)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMICCLKSOURCE(PeriphClkInit->TimIcClockSelection));

    /* Configure the TIMIC clock source */
    __HAL_RCC_TIMIC_CONFIG(PeriphClkInit->TimIcClockSelection);
 80037b4:	4b62      	ldr	r3, [pc, #392]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	495f      	ldr	r1, [pc, #380]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
    }
  }
#endif

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d015      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Set the source of RNG clock*/
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037d6:	4b5a      	ldr	r3, [pc, #360]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80037dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	4956      	ldr	r1, [pc, #344]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL1Q)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037f4:	d105      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x12e>
    {
      /* Enable PLL1 QCLK output */
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_QCLK);
 80037f6:	4b52      	ldr	r3, [pc, #328]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fa:	4a51      	ldr	r2, [pc, #324]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003800:	6293      	str	r3, [r2, #40]	@ 0x28
    }
  }
#endif

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800380e:	4b4c      	ldr	r3, [pc, #304]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003810:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003814:	f023 0203 	bic.w	r2, r3, #3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	4948      	ldr	r1, [pc, #288]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
 8003830:	4b43      	ldr	r3, [pc, #268]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003832:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003836:	f023 0218 	bic.w	r2, r3, #24
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383e:	4940      	ldr	r1, [pc, #256]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }


  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003852:	4b3b      	ldr	r3, [pc, #236]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003858:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003860:	4937      	ldr	r1, [pc, #220]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003874:	4b32      	ldr	r3, [pc, #200]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003876:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800387a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003882:	492f      	ldr	r1, [pc, #188]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d015      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC4 interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003896:	4b2a      	ldr	r3, [pc, #168]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800389c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a4:	4926      	ldr	r1, [pc, #152]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

    if (PeriphClkInit->AdcClockSelection == RCC_PERIPHCLK_ADC)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038b4:	d105      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      /* Enable PLL1 PCLK output */
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_PCLK);
 80038b6:	4b22      	ldr	r3, [pc, #136]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ba:	4a21      	ldr	r2, [pc, #132]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c0:	6293      	str	r3, [r2, #40]	@ 0x28
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 808d 	beq.w	80039ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038d0:	2300      	movs	r3, #0
 80038d2:	77fb      	strb	r3, [r7, #31]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
    tmpreg2 = __HAL_RCC_GET_RTC_SOURCE();
 80038d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038de:	61bb      	str	r3, [r7, #24]

    /* Check if RTC clock source needs to be changed */
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d07f      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      /* Enable Power Clock */
      if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01u)
 80038ea:	4b15      	ldr	r3, [pc, #84]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d110      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x246>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80038f8:	4b11      	ldr	r3, [pc, #68]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038fe:	4a10      	ldr	r2, [pc, #64]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003900:	f043 0304 	orr.w	r3, r3, #4
 8003904:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003908:	4b0d      	ldr	r3, [pc, #52]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800390a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003916:	2301      	movs	r3, #1
 8003918:	77fb      	strb	r3, [r7, #31]
      }

      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800391a:	4b0a      	ldr	r3, [pc, #40]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800391c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391e:	4a09      	ldr	r2, [pc, #36]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003926:	f7fe f8e9 	bl	8001afc <HAL_GetTick>
 800392a:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800392c:	e00c      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x274>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800392e:	f7fe f8e5 	bl	8001afc <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d905      	bls.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x274>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e071      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003940:	46020c00 	.word	0x46020c00
 8003944:	46020800 	.word	0x46020800
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003948:	4b38      	ldr	r3, [pc, #224]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800394a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0ec      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }

      /* Save BDCR1 content */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_RTCSEL);
 8003954:	4b36      	ldr	r3, [pc, #216]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003956:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800395a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800395e:	613b      	str	r3, [r7, #16]

      /* Check if a backup domain reset is required */
      if (tmpreg2 != RCC_RTCCLKSOURCE_DISABLE)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00f      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
#if defined(RCC_LSI2_SUPPORT)
        /* Save BDCR2 content */
        tmpreg2 = RCC->BDCR2;
#endif /* RCC_LSI2_SUPPORT */
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003966:	4b32      	ldr	r3, [pc, #200]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800396c:	4a30      	ldr	r2, [pc, #192]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800396e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003972:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003976:	4b2e      	ldr	r3, [pc, #184]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003978:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800397c:	4a2c      	ldr	r2, [pc, #176]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800397e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003982:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        RCC->BDCR2 = tmpreg2;
#endif /* RCC_LSI2_SUPPORT */
      }

      /* Apply new RTC clock source selection */
      RCC->BDCR1 = (tmpreg1 | PeriphClkInit->RTCClockSelection);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800398a:	4929      	ldr	r1, [pc, #164]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0

      /* mask all ON bits */
      tmpreg2 = (RCC_BDCR1_LSEON | RCC_BDCR1_LSI1ON);
 8003994:	4b27      	ldr	r3, [pc, #156]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003996:	61bb      	str	r3, [r7, #24]
#if defined(RCC_LSI2_SUPPORT)
      tmpreg2 |= RCC_BDCR1_LSI2ON;
#endif

      /* Check which oscillators were enable */
      tmpreg2 &= tmpreg1;
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4013      	ands	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]

      if (tmpreg2 != 0x00u)
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d016      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x300>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a6:	f7fe f8a9 	bl	8001afc <HAL_GetTick>
 80039aa:	6178      	str	r0, [r7, #20]

        /* Wait till all oscillators are enabled : RDY bit position is ON shifted by 1 */
        while (READ_BIT(RCC->BDCR1, (tmpreg2 << 1)) == 0x00u)
 80039ac:	e00a      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ae:	f7fe f8a5 	bl	8001afc <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039bc:	4293      	cmp	r3, r2
 80039be:	d901      	bls.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e02f      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x350>
        while (READ_BIT(RCC->BDCR1, (tmpreg2 << 1)) == 0x00u)
 80039c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039c6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0ec      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
          }
        }
      }
      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80039d4:	7ffb      	ldrb	r3, [r7, #31]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d107      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80039da:	4b15      	ldr	r3, [pc, #84]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039e0:	4a13      	ldr	r2, [pc, #76]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039e2:	f023 0304 	bic.w	r3, r3, #4
 80039e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }
    }
  }

  /*-------------------------- RADIO Sleep Timer clock source configuration --*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RADIOST) == RCC_PERIPHCLK_RADIOST)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d015      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RADIOSLEEPTIMERSOURCE(PeriphClkInit->RadioSlpTimClockSelection));

    /* Configure the RADIO Sleep Timer clock source */
    __HAL_RCC_RADIOSLPTIM_CONFIG(PeriphClkInit->RadioSlpTimClockSelection);
 80039f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a04:	490a      	ldr	r1, [pc, #40]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0

    /* Check configuration validity as under Backup domain access control */
    if (__HAL_RCC_GET_RADIOSLPTIM_SOURCE() != PeriphClkInit->RadioSlpTimClockSelection)
 8003a0c:	4b08      	ldr	r3, [pc, #32]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a12:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d001      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x350>
    }
  }

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3720      	adds	r7, #32
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	46020800 	.word	0x46020800
 8003a30:	46020c00 	.word	0x46020c00
 8003a34:	04000001 	.word	0x04000001

08003a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e049      	b.n	8003ade <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fd fd8a 	bl	8001578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3304      	adds	r3, #4
 8003a74:	4619      	mov	r1, r3
 8003a76:	4610      	mov	r0, r2
 8003a78:	f000 f95c 	bl	8003d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d001      	beq.n	8003b00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e033      	b.n	8003b68 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a19      	ldr	r2, [pc, #100]	@ (8003b74 <HAL_TIM_Base_Start+0x8c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d009      	beq.n	8003b26 <HAL_TIM_Base_Start+0x3e>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b1a:	d004      	beq.n	8003b26 <HAL_TIM_Base_Start+0x3e>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a15      	ldr	r2, [pc, #84]	@ (8003b78 <HAL_TIM_Base_Start+0x90>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d115      	bne.n	8003b52 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	4b13      	ldr	r3, [pc, #76]	@ (8003b7c <HAL_TIM_Base_Start+0x94>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b06      	cmp	r3, #6
 8003b36:	d015      	beq.n	8003b64 <HAL_TIM_Base_Start+0x7c>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b3e:	d011      	beq.n	8003b64 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b50:	e008      	b.n	8003b64 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0201 	orr.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	e000      	b.n	8003b66 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	40012c00 	.word	0x40012c00
 8003b78:	40000400 	.word	0x40000400
 8003b7c:	00010007 	.word	0x00010007

08003b80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_TIM_ConfigClockSource+0x1c>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e0c2      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x1a2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003bba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a55      	ldr	r2, [pc, #340]	@ (8003d2c <HAL_TIM_ConfigClockSource+0x1ac>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	f000 808d 	beq.w	8003cf6 <HAL_TIM_ConfigClockSource+0x176>
 8003bdc:	4a53      	ldr	r2, [pc, #332]	@ (8003d2c <HAL_TIM_ConfigClockSource+0x1ac>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	f200 8092 	bhi.w	8003d08 <HAL_TIM_ConfigClockSource+0x188>
 8003be4:	4a52      	ldr	r2, [pc, #328]	@ (8003d30 <HAL_TIM_ConfigClockSource+0x1b0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	f000 8085 	beq.w	8003cf6 <HAL_TIM_ConfigClockSource+0x176>
 8003bec:	4a50      	ldr	r2, [pc, #320]	@ (8003d30 <HAL_TIM_ConfigClockSource+0x1b0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	f200 808a 	bhi.w	8003d08 <HAL_TIM_ConfigClockSource+0x188>
 8003bf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bf8:	d03a      	beq.n	8003c70 <HAL_TIM_ConfigClockSource+0xf0>
 8003bfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bfe:	f200 8083 	bhi.w	8003d08 <HAL_TIM_ConfigClockSource+0x188>
 8003c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c06:	f000 8082 	beq.w	8003d0e <HAL_TIM_ConfigClockSource+0x18e>
 8003c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c0e:	d87b      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x188>
 8003c10:	2b70      	cmp	r3, #112	@ 0x70
 8003c12:	d016      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0xc2>
 8003c14:	2b70      	cmp	r3, #112	@ 0x70
 8003c16:	d877      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x188>
 8003c18:	2b60      	cmp	r3, #96	@ 0x60
 8003c1a:	d04c      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0x136>
 8003c1c:	2b60      	cmp	r3, #96	@ 0x60
 8003c1e:	d873      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x188>
 8003c20:	2b50      	cmp	r3, #80	@ 0x50
 8003c22:	d038      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x116>
 8003c24:	2b50      	cmp	r3, #80	@ 0x50
 8003c26:	d86f      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x188>
 8003c28:	2b40      	cmp	r3, #64	@ 0x40
 8003c2a:	d054      	beq.n	8003cd6 <HAL_TIM_ConfigClockSource+0x156>
 8003c2c:	2b40      	cmp	r3, #64	@ 0x40
 8003c2e:	d86b      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x188>
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d060      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0x176>
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	d867      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x188>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d05c      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0x176>
 8003c3c:	2b10      	cmp	r3, #16
 8003c3e:	d05a      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0x176>
 8003c40:	e062      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x188>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c52:	f000 f965 	bl	8003f20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	609a      	str	r2, [r3, #8]
      break;
 8003c6e:	e04f      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x190>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c80:	f000 f94e 	bl	8003f20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c92:	609a      	str	r2, [r3, #8]
      break;
 8003c94:	e03c      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x190>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f000 f8c0 	bl	8003e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2150      	movs	r1, #80	@ 0x50
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 f919 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 8003cb4:	e02c      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x190>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f000 f8df 	bl	8003e86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2160      	movs	r1, #96	@ 0x60
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 f909 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 8003cd4:	e01c      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x190>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f000 f8a0 	bl	8003e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2140      	movs	r1, #64	@ 0x40
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f8f9 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 8003cf4:	e00c      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x190>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4610      	mov	r0, r2
 8003d02:	f000 f8f0 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 8003d06:	e003      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x190>
    }

    default:
      status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d0c:	e000      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x190>
      break;
 8003d0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	00100040 	.word	0x00100040
 8003d30:	00100030 	.word	0x00100030

08003d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a34      	ldr	r2, [pc, #208]	@ (8003e18 <TIM_Base_SetConfig+0xe4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d007      	beq.n	8003d5c <TIM_Base_SetConfig+0x28>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d52:	d003      	beq.n	8003d5c <TIM_Base_SetConfig+0x28>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a31      	ldr	r2, [pc, #196]	@ (8003e1c <TIM_Base_SetConfig+0xe8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d108      	bne.n	8003d6e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a29      	ldr	r2, [pc, #164]	@ (8003e18 <TIM_Base_SetConfig+0xe4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00f      	beq.n	8003d96 <TIM_Base_SetConfig+0x62>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d7c:	d00b      	beq.n	8003d96 <TIM_Base_SetConfig+0x62>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a26      	ldr	r2, [pc, #152]	@ (8003e1c <TIM_Base_SetConfig+0xe8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d007      	beq.n	8003d96 <TIM_Base_SetConfig+0x62>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a25      	ldr	r2, [pc, #148]	@ (8003e20 <TIM_Base_SetConfig+0xec>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d003      	beq.n	8003d96 <TIM_Base_SetConfig+0x62>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a24      	ldr	r2, [pc, #144]	@ (8003e24 <TIM_Base_SetConfig+0xf0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d108      	bne.n	8003da8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a12      	ldr	r2, [pc, #72]	@ (8003e18 <TIM_Base_SetConfig+0xe4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d007      	beq.n	8003de4 <TIM_Base_SetConfig+0xb0>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a12      	ldr	r2, [pc, #72]	@ (8003e20 <TIM_Base_SetConfig+0xec>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d003      	beq.n	8003de4 <TIM_Base_SetConfig+0xb0>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a11      	ldr	r2, [pc, #68]	@ (8003e24 <TIM_Base_SetConfig+0xf0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d103      	bne.n	8003dec <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d105      	bne.n	8003e0a <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f023 0201 	bic.w	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	611a      	str	r2, [r3, #16]
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40012c00 	.word	0x40012c00
 8003e1c:	40000400 	.word	0x40000400
 8003e20:	40014400 	.word	0x40014400
 8003e24:	40014800 	.word	0x40014800

08003e28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	f023 0201 	bic.w	r2, r3, #1
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f023 030a 	bic.w	r3, r3, #10
 8003e64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	621a      	str	r2, [r3, #32]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b087      	sub	sp, #28
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	f023 0210 	bic.w	r2, r3, #16
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003eb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	031b      	lsls	r3, r3, #12
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ec2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	621a      	str	r2, [r3, #32]
}
 8003eda:	bf00      	nop
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f043 0307 	orr.w	r3, r3, #7
 8003f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	609a      	str	r2, [r3, #8]
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	021a      	lsls	r2, r3, #8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	609a      	str	r2, [r3, #8]
}
 8003f54:	bf00      	nop
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e051      	b.n	800401c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a22      	ldr	r2, [pc, #136]	@ (8004028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d108      	bne.n	8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003fa8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a14      	ldr	r2, [pc, #80]	@ (8004028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d009      	beq.n	8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe4:	d004      	beq.n	8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a10      	ldr	r2, [pc, #64]	@ (800402c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d10c      	bne.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ff6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40012c00 	.word	0x40012c00
 800402c:	40000400 	.word	0x40000400

08004030 <__cvt>:
 8004030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004034:	ec57 6b10 	vmov	r6, r7, d0
 8004038:	2f00      	cmp	r7, #0
 800403a:	460c      	mov	r4, r1
 800403c:	4619      	mov	r1, r3
 800403e:	463b      	mov	r3, r7
 8004040:	bfb4      	ite	lt
 8004042:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004046:	2300      	movge	r3, #0
 8004048:	4691      	mov	r9, r2
 800404a:	bfbf      	itttt	lt
 800404c:	4632      	movlt	r2, r6
 800404e:	461f      	movlt	r7, r3
 8004050:	232d      	movlt	r3, #45	@ 0x2d
 8004052:	4616      	movlt	r6, r2
 8004054:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004058:	700b      	strb	r3, [r1, #0]
 800405a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800405c:	f023 0820 	bic.w	r8, r3, #32
 8004060:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004064:	d005      	beq.n	8004072 <__cvt+0x42>
 8004066:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800406a:	d100      	bne.n	800406e <__cvt+0x3e>
 800406c:	3401      	adds	r4, #1
 800406e:	2102      	movs	r1, #2
 8004070:	e000      	b.n	8004074 <__cvt+0x44>
 8004072:	2103      	movs	r1, #3
 8004074:	ab03      	add	r3, sp, #12
 8004076:	4622      	mov	r2, r4
 8004078:	9301      	str	r3, [sp, #4]
 800407a:	ab02      	add	r3, sp, #8
 800407c:	ec47 6b10 	vmov	d0, r6, r7
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	4653      	mov	r3, sl
 8004084:	f000 fe70 	bl	8004d68 <_dtoa_r>
 8004088:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800408c:	4605      	mov	r5, r0
 800408e:	d119      	bne.n	80040c4 <__cvt+0x94>
 8004090:	f019 0f01 	tst.w	r9, #1
 8004094:	d00e      	beq.n	80040b4 <__cvt+0x84>
 8004096:	eb00 0904 	add.w	r9, r0, r4
 800409a:	2200      	movs	r2, #0
 800409c:	2300      	movs	r3, #0
 800409e:	4630      	mov	r0, r6
 80040a0:	4639      	mov	r1, r7
 80040a2:	f7fc fca9 	bl	80009f8 <__aeabi_dcmpeq>
 80040a6:	b108      	cbz	r0, 80040ac <__cvt+0x7c>
 80040a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80040ac:	2230      	movs	r2, #48	@ 0x30
 80040ae:	9b03      	ldr	r3, [sp, #12]
 80040b0:	454b      	cmp	r3, r9
 80040b2:	d31e      	bcc.n	80040f2 <__cvt+0xc2>
 80040b4:	9b03      	ldr	r3, [sp, #12]
 80040b6:	4628      	mov	r0, r5
 80040b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80040ba:	1b5b      	subs	r3, r3, r5
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	b004      	add	sp, #16
 80040c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80040c8:	eb00 0904 	add.w	r9, r0, r4
 80040cc:	d1e5      	bne.n	800409a <__cvt+0x6a>
 80040ce:	7803      	ldrb	r3, [r0, #0]
 80040d0:	2b30      	cmp	r3, #48	@ 0x30
 80040d2:	d10a      	bne.n	80040ea <__cvt+0xba>
 80040d4:	2200      	movs	r2, #0
 80040d6:	2300      	movs	r3, #0
 80040d8:	4630      	mov	r0, r6
 80040da:	4639      	mov	r1, r7
 80040dc:	f7fc fc8c 	bl	80009f8 <__aeabi_dcmpeq>
 80040e0:	b918      	cbnz	r0, 80040ea <__cvt+0xba>
 80040e2:	f1c4 0401 	rsb	r4, r4, #1
 80040e6:	f8ca 4000 	str.w	r4, [sl]
 80040ea:	f8da 3000 	ldr.w	r3, [sl]
 80040ee:	4499      	add	r9, r3
 80040f0:	e7d3      	b.n	800409a <__cvt+0x6a>
 80040f2:	1c59      	adds	r1, r3, #1
 80040f4:	9103      	str	r1, [sp, #12]
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	e7d9      	b.n	80040ae <__cvt+0x7e>

080040fa <__exponent>:
 80040fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040fc:	2900      	cmp	r1, #0
 80040fe:	7002      	strb	r2, [r0, #0]
 8004100:	bfba      	itte	lt
 8004102:	4249      	neglt	r1, r1
 8004104:	232d      	movlt	r3, #45	@ 0x2d
 8004106:	232b      	movge	r3, #43	@ 0x2b
 8004108:	2909      	cmp	r1, #9
 800410a:	7043      	strb	r3, [r0, #1]
 800410c:	dd28      	ble.n	8004160 <__exponent+0x66>
 800410e:	f10d 0307 	add.w	r3, sp, #7
 8004112:	270a      	movs	r7, #10
 8004114:	461d      	mov	r5, r3
 8004116:	461a      	mov	r2, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	fbb1 f6f7 	udiv	r6, r1, r7
 800411e:	fb07 1416 	mls	r4, r7, r6, r1
 8004122:	3430      	adds	r4, #48	@ 0x30
 8004124:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004128:	460c      	mov	r4, r1
 800412a:	4631      	mov	r1, r6
 800412c:	2c63      	cmp	r4, #99	@ 0x63
 800412e:	dcf2      	bgt.n	8004116 <__exponent+0x1c>
 8004130:	3130      	adds	r1, #48	@ 0x30
 8004132:	1e94      	subs	r4, r2, #2
 8004134:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004138:	1c41      	adds	r1, r0, #1
 800413a:	4623      	mov	r3, r4
 800413c:	42ab      	cmp	r3, r5
 800413e:	d30a      	bcc.n	8004156 <__exponent+0x5c>
 8004140:	f10d 0309 	add.w	r3, sp, #9
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	42ac      	cmp	r4, r5
 8004148:	bf88      	it	hi
 800414a:	2300      	movhi	r3, #0
 800414c:	3302      	adds	r3, #2
 800414e:	4403      	add	r3, r0
 8004150:	1a18      	subs	r0, r3, r0
 8004152:	b003      	add	sp, #12
 8004154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004156:	f813 6b01 	ldrb.w	r6, [r3], #1
 800415a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800415e:	e7ed      	b.n	800413c <__exponent+0x42>
 8004160:	2330      	movs	r3, #48	@ 0x30
 8004162:	3130      	adds	r1, #48	@ 0x30
 8004164:	7083      	strb	r3, [r0, #2]
 8004166:	1d03      	adds	r3, r0, #4
 8004168:	70c1      	strb	r1, [r0, #3]
 800416a:	e7f1      	b.n	8004150 <__exponent+0x56>

0800416c <_printf_float>:
 800416c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004170:	b08d      	sub	sp, #52	@ 0x34
 8004172:	460c      	mov	r4, r1
 8004174:	4616      	mov	r6, r2
 8004176:	461f      	mov	r7, r3
 8004178:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800417c:	4605      	mov	r5, r0
 800417e:	f000 fcdf 	bl	8004b40 <_localeconv_r>
 8004182:	6803      	ldr	r3, [r0, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	9304      	str	r3, [sp, #16]
 8004188:	f7fc f80a 	bl	80001a0 <strlen>
 800418c:	2300      	movs	r3, #0
 800418e:	9005      	str	r0, [sp, #20]
 8004190:	930a      	str	r3, [sp, #40]	@ 0x28
 8004192:	f8d8 3000 	ldr.w	r3, [r8]
 8004196:	f894 a018 	ldrb.w	sl, [r4, #24]
 800419a:	3307      	adds	r3, #7
 800419c:	f8d4 b000 	ldr.w	fp, [r4]
 80041a0:	f023 0307 	bic.w	r3, r3, #7
 80041a4:	f103 0208 	add.w	r2, r3, #8
 80041a8:	f8c8 2000 	str.w	r2, [r8]
 80041ac:	f04f 32ff 	mov.w	r2, #4294967295
 80041b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80041b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80041b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80041bc:	9307      	str	r3, [sp, #28]
 80041be:	4b9d      	ldr	r3, [pc, #628]	@ (8004434 <_printf_float+0x2c8>)
 80041c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80041c8:	f7fc fc48 	bl	8000a5c <__aeabi_dcmpun>
 80041cc:	bb70      	cbnz	r0, 800422c <_printf_float+0xc0>
 80041ce:	f04f 32ff 	mov.w	r2, #4294967295
 80041d2:	4b98      	ldr	r3, [pc, #608]	@ (8004434 <_printf_float+0x2c8>)
 80041d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041d8:	f7fc fc22 	bl	8000a20 <__aeabi_dcmple>
 80041dc:	bb30      	cbnz	r0, 800422c <_printf_float+0xc0>
 80041de:	2200      	movs	r2, #0
 80041e0:	2300      	movs	r3, #0
 80041e2:	4640      	mov	r0, r8
 80041e4:	4649      	mov	r1, r9
 80041e6:	f7fc fc11 	bl	8000a0c <__aeabi_dcmplt>
 80041ea:	b110      	cbz	r0, 80041f2 <_printf_float+0x86>
 80041ec:	232d      	movs	r3, #45	@ 0x2d
 80041ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041f2:	4a91      	ldr	r2, [pc, #580]	@ (8004438 <_printf_float+0x2cc>)
 80041f4:	4b91      	ldr	r3, [pc, #580]	@ (800443c <_printf_float+0x2d0>)
 80041f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80041fa:	bf94      	ite	ls
 80041fc:	4690      	movls	r8, r2
 80041fe:	4698      	movhi	r8, r3
 8004200:	2303      	movs	r3, #3
 8004202:	f04f 0900 	mov.w	r9, #0
 8004206:	6123      	str	r3, [r4, #16]
 8004208:	f02b 0304 	bic.w	r3, fp, #4
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	4633      	mov	r3, r6
 8004210:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004212:	4621      	mov	r1, r4
 8004214:	4628      	mov	r0, r5
 8004216:	9700      	str	r7, [sp, #0]
 8004218:	f000 f9d2 	bl	80045c0 <_printf_common>
 800421c:	3001      	adds	r0, #1
 800421e:	f040 808d 	bne.w	800433c <_printf_float+0x1d0>
 8004222:	f04f 30ff 	mov.w	r0, #4294967295
 8004226:	b00d      	add	sp, #52	@ 0x34
 8004228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800422c:	4642      	mov	r2, r8
 800422e:	464b      	mov	r3, r9
 8004230:	4640      	mov	r0, r8
 8004232:	4649      	mov	r1, r9
 8004234:	f7fc fc12 	bl	8000a5c <__aeabi_dcmpun>
 8004238:	b140      	cbz	r0, 800424c <_printf_float+0xe0>
 800423a:	464b      	mov	r3, r9
 800423c:	4a80      	ldr	r2, [pc, #512]	@ (8004440 <_printf_float+0x2d4>)
 800423e:	2b00      	cmp	r3, #0
 8004240:	bfbc      	itt	lt
 8004242:	232d      	movlt	r3, #45	@ 0x2d
 8004244:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004248:	4b7e      	ldr	r3, [pc, #504]	@ (8004444 <_printf_float+0x2d8>)
 800424a:	e7d4      	b.n	80041f6 <_printf_float+0x8a>
 800424c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004250:	6863      	ldr	r3, [r4, #4]
 8004252:	9206      	str	r2, [sp, #24]
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	d13b      	bne.n	80042d0 <_printf_float+0x164>
 8004258:	2306      	movs	r3, #6
 800425a:	6063      	str	r3, [r4, #4]
 800425c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004260:	2300      	movs	r3, #0
 8004262:	4628      	mov	r0, r5
 8004264:	6022      	str	r2, [r4, #0]
 8004266:	9303      	str	r3, [sp, #12]
 8004268:	ab0a      	add	r3, sp, #40	@ 0x28
 800426a:	e9cd a301 	strd	sl, r3, [sp, #4]
 800426e:	ab09      	add	r3, sp, #36	@ 0x24
 8004270:	ec49 8b10 	vmov	d0, r8, r9
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800427a:	6861      	ldr	r1, [r4, #4]
 800427c:	f7ff fed8 	bl	8004030 <__cvt>
 8004280:	9b06      	ldr	r3, [sp, #24]
 8004282:	4680      	mov	r8, r0
 8004284:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004286:	2b47      	cmp	r3, #71	@ 0x47
 8004288:	d129      	bne.n	80042de <_printf_float+0x172>
 800428a:	1cc8      	adds	r0, r1, #3
 800428c:	db02      	blt.n	8004294 <_printf_float+0x128>
 800428e:	6863      	ldr	r3, [r4, #4]
 8004290:	4299      	cmp	r1, r3
 8004292:	dd41      	ble.n	8004318 <_printf_float+0x1ac>
 8004294:	f1aa 0a02 	sub.w	sl, sl, #2
 8004298:	fa5f fa8a 	uxtb.w	sl, sl
 800429c:	3901      	subs	r1, #1
 800429e:	4652      	mov	r2, sl
 80042a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80042a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80042a6:	f7ff ff28 	bl	80040fa <__exponent>
 80042aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80042ac:	4681      	mov	r9, r0
 80042ae:	1813      	adds	r3, r2, r0
 80042b0:	2a01      	cmp	r2, #1
 80042b2:	6123      	str	r3, [r4, #16]
 80042b4:	dc02      	bgt.n	80042bc <_printf_float+0x150>
 80042b6:	6822      	ldr	r2, [r4, #0]
 80042b8:	07d2      	lsls	r2, r2, #31
 80042ba:	d501      	bpl.n	80042c0 <_printf_float+0x154>
 80042bc:	3301      	adds	r3, #1
 80042be:	6123      	str	r3, [r4, #16]
 80042c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0a2      	beq.n	800420e <_printf_float+0xa2>
 80042c8:	232d      	movs	r3, #45	@ 0x2d
 80042ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042ce:	e79e      	b.n	800420e <_printf_float+0xa2>
 80042d0:	9a06      	ldr	r2, [sp, #24]
 80042d2:	2a47      	cmp	r2, #71	@ 0x47
 80042d4:	d1c2      	bne.n	800425c <_printf_float+0xf0>
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1c0      	bne.n	800425c <_printf_float+0xf0>
 80042da:	2301      	movs	r3, #1
 80042dc:	e7bd      	b.n	800425a <_printf_float+0xee>
 80042de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80042e2:	d9db      	bls.n	800429c <_printf_float+0x130>
 80042e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80042e8:	d118      	bne.n	800431c <_printf_float+0x1b0>
 80042ea:	2900      	cmp	r1, #0
 80042ec:	6863      	ldr	r3, [r4, #4]
 80042ee:	dd0b      	ble.n	8004308 <_printf_float+0x19c>
 80042f0:	6121      	str	r1, [r4, #16]
 80042f2:	b913      	cbnz	r3, 80042fa <_printf_float+0x18e>
 80042f4:	6822      	ldr	r2, [r4, #0]
 80042f6:	07d0      	lsls	r0, r2, #31
 80042f8:	d502      	bpl.n	8004300 <_printf_float+0x194>
 80042fa:	3301      	adds	r3, #1
 80042fc:	440b      	add	r3, r1
 80042fe:	6123      	str	r3, [r4, #16]
 8004300:	f04f 0900 	mov.w	r9, #0
 8004304:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004306:	e7db      	b.n	80042c0 <_printf_float+0x154>
 8004308:	b913      	cbnz	r3, 8004310 <_printf_float+0x1a4>
 800430a:	6822      	ldr	r2, [r4, #0]
 800430c:	07d2      	lsls	r2, r2, #31
 800430e:	d501      	bpl.n	8004314 <_printf_float+0x1a8>
 8004310:	3302      	adds	r3, #2
 8004312:	e7f4      	b.n	80042fe <_printf_float+0x192>
 8004314:	2301      	movs	r3, #1
 8004316:	e7f2      	b.n	80042fe <_printf_float+0x192>
 8004318:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800431c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800431e:	4299      	cmp	r1, r3
 8004320:	db05      	blt.n	800432e <_printf_float+0x1c2>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	6121      	str	r1, [r4, #16]
 8004326:	07d8      	lsls	r0, r3, #31
 8004328:	d5ea      	bpl.n	8004300 <_printf_float+0x194>
 800432a:	1c4b      	adds	r3, r1, #1
 800432c:	e7e7      	b.n	80042fe <_printf_float+0x192>
 800432e:	2900      	cmp	r1, #0
 8004330:	bfd4      	ite	le
 8004332:	f1c1 0202 	rsble	r2, r1, #2
 8004336:	2201      	movgt	r2, #1
 8004338:	4413      	add	r3, r2
 800433a:	e7e0      	b.n	80042fe <_printf_float+0x192>
 800433c:	6823      	ldr	r3, [r4, #0]
 800433e:	055a      	lsls	r2, r3, #21
 8004340:	d407      	bmi.n	8004352 <_printf_float+0x1e6>
 8004342:	6923      	ldr	r3, [r4, #16]
 8004344:	4642      	mov	r2, r8
 8004346:	4631      	mov	r1, r6
 8004348:	4628      	mov	r0, r5
 800434a:	47b8      	blx	r7
 800434c:	3001      	adds	r0, #1
 800434e:	d12b      	bne.n	80043a8 <_printf_float+0x23c>
 8004350:	e767      	b.n	8004222 <_printf_float+0xb6>
 8004352:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004356:	f240 80dd 	bls.w	8004514 <_printf_float+0x3a8>
 800435a:	2200      	movs	r2, #0
 800435c:	2300      	movs	r3, #0
 800435e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004362:	f7fc fb49 	bl	80009f8 <__aeabi_dcmpeq>
 8004366:	2800      	cmp	r0, #0
 8004368:	d033      	beq.n	80043d2 <_printf_float+0x266>
 800436a:	2301      	movs	r3, #1
 800436c:	4a36      	ldr	r2, [pc, #216]	@ (8004448 <_printf_float+0x2dc>)
 800436e:	4631      	mov	r1, r6
 8004370:	4628      	mov	r0, r5
 8004372:	47b8      	blx	r7
 8004374:	3001      	adds	r0, #1
 8004376:	f43f af54 	beq.w	8004222 <_printf_float+0xb6>
 800437a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800437e:	4543      	cmp	r3, r8
 8004380:	db02      	blt.n	8004388 <_printf_float+0x21c>
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	07d8      	lsls	r0, r3, #31
 8004386:	d50f      	bpl.n	80043a8 <_printf_float+0x23c>
 8004388:	4631      	mov	r1, r6
 800438a:	4628      	mov	r0, r5
 800438c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004390:	47b8      	blx	r7
 8004392:	3001      	adds	r0, #1
 8004394:	f43f af45 	beq.w	8004222 <_printf_float+0xb6>
 8004398:	f04f 0900 	mov.w	r9, #0
 800439c:	f108 38ff 	add.w	r8, r8, #4294967295
 80043a0:	f104 0a1a 	add.w	sl, r4, #26
 80043a4:	45c8      	cmp	r8, r9
 80043a6:	dc09      	bgt.n	80043bc <_printf_float+0x250>
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	079b      	lsls	r3, r3, #30
 80043ac:	f100 8103 	bmi.w	80045b6 <_printf_float+0x44a>
 80043b0:	68e0      	ldr	r0, [r4, #12]
 80043b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80043b4:	4298      	cmp	r0, r3
 80043b6:	bfb8      	it	lt
 80043b8:	4618      	movlt	r0, r3
 80043ba:	e734      	b.n	8004226 <_printf_float+0xba>
 80043bc:	2301      	movs	r3, #1
 80043be:	4652      	mov	r2, sl
 80043c0:	4631      	mov	r1, r6
 80043c2:	4628      	mov	r0, r5
 80043c4:	47b8      	blx	r7
 80043c6:	3001      	adds	r0, #1
 80043c8:	f43f af2b 	beq.w	8004222 <_printf_float+0xb6>
 80043cc:	f109 0901 	add.w	r9, r9, #1
 80043d0:	e7e8      	b.n	80043a4 <_printf_float+0x238>
 80043d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	dc39      	bgt.n	800444c <_printf_float+0x2e0>
 80043d8:	2301      	movs	r3, #1
 80043da:	4a1b      	ldr	r2, [pc, #108]	@ (8004448 <_printf_float+0x2dc>)
 80043dc:	4631      	mov	r1, r6
 80043de:	4628      	mov	r0, r5
 80043e0:	47b8      	blx	r7
 80043e2:	3001      	adds	r0, #1
 80043e4:	f43f af1d 	beq.w	8004222 <_printf_float+0xb6>
 80043e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80043ec:	ea59 0303 	orrs.w	r3, r9, r3
 80043f0:	d102      	bne.n	80043f8 <_printf_float+0x28c>
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	07d9      	lsls	r1, r3, #31
 80043f6:	d5d7      	bpl.n	80043a8 <_printf_float+0x23c>
 80043f8:	4631      	mov	r1, r6
 80043fa:	4628      	mov	r0, r5
 80043fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004400:	47b8      	blx	r7
 8004402:	3001      	adds	r0, #1
 8004404:	f43f af0d 	beq.w	8004222 <_printf_float+0xb6>
 8004408:	f04f 0a00 	mov.w	sl, #0
 800440c:	f104 0b1a 	add.w	fp, r4, #26
 8004410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004412:	425b      	negs	r3, r3
 8004414:	4553      	cmp	r3, sl
 8004416:	dc01      	bgt.n	800441c <_printf_float+0x2b0>
 8004418:	464b      	mov	r3, r9
 800441a:	e793      	b.n	8004344 <_printf_float+0x1d8>
 800441c:	2301      	movs	r3, #1
 800441e:	465a      	mov	r2, fp
 8004420:	4631      	mov	r1, r6
 8004422:	4628      	mov	r0, r5
 8004424:	47b8      	blx	r7
 8004426:	3001      	adds	r0, #1
 8004428:	f43f aefb 	beq.w	8004222 <_printf_float+0xb6>
 800442c:	f10a 0a01 	add.w	sl, sl, #1
 8004430:	e7ee      	b.n	8004410 <_printf_float+0x2a4>
 8004432:	bf00      	nop
 8004434:	7fefffff 	.word	0x7fefffff
 8004438:	08006d54 	.word	0x08006d54
 800443c:	08006d58 	.word	0x08006d58
 8004440:	08006d5c 	.word	0x08006d5c
 8004444:	08006d60 	.word	0x08006d60
 8004448:	08006d64 	.word	0x08006d64
 800444c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800444e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004452:	4553      	cmp	r3, sl
 8004454:	bfa8      	it	ge
 8004456:	4653      	movge	r3, sl
 8004458:	2b00      	cmp	r3, #0
 800445a:	4699      	mov	r9, r3
 800445c:	dc36      	bgt.n	80044cc <_printf_float+0x360>
 800445e:	f04f 0b00 	mov.w	fp, #0
 8004462:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004466:	f104 021a 	add.w	r2, r4, #26
 800446a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800446c:	9306      	str	r3, [sp, #24]
 800446e:	eba3 0309 	sub.w	r3, r3, r9
 8004472:	455b      	cmp	r3, fp
 8004474:	dc31      	bgt.n	80044da <_printf_float+0x36e>
 8004476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004478:	459a      	cmp	sl, r3
 800447a:	dc3a      	bgt.n	80044f2 <_printf_float+0x386>
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	07da      	lsls	r2, r3, #31
 8004480:	d437      	bmi.n	80044f2 <_printf_float+0x386>
 8004482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004484:	ebaa 0903 	sub.w	r9, sl, r3
 8004488:	9b06      	ldr	r3, [sp, #24]
 800448a:	ebaa 0303 	sub.w	r3, sl, r3
 800448e:	4599      	cmp	r9, r3
 8004490:	bfa8      	it	ge
 8004492:	4699      	movge	r9, r3
 8004494:	f1b9 0f00 	cmp.w	r9, #0
 8004498:	dc33      	bgt.n	8004502 <_printf_float+0x396>
 800449a:	f04f 0800 	mov.w	r8, #0
 800449e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044a2:	f104 0b1a 	add.w	fp, r4, #26
 80044a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044a8:	ebaa 0303 	sub.w	r3, sl, r3
 80044ac:	eba3 0309 	sub.w	r3, r3, r9
 80044b0:	4543      	cmp	r3, r8
 80044b2:	f77f af79 	ble.w	80043a8 <_printf_float+0x23c>
 80044b6:	2301      	movs	r3, #1
 80044b8:	465a      	mov	r2, fp
 80044ba:	4631      	mov	r1, r6
 80044bc:	4628      	mov	r0, r5
 80044be:	47b8      	blx	r7
 80044c0:	3001      	adds	r0, #1
 80044c2:	f43f aeae 	beq.w	8004222 <_printf_float+0xb6>
 80044c6:	f108 0801 	add.w	r8, r8, #1
 80044ca:	e7ec      	b.n	80044a6 <_printf_float+0x33a>
 80044cc:	4642      	mov	r2, r8
 80044ce:	4631      	mov	r1, r6
 80044d0:	4628      	mov	r0, r5
 80044d2:	47b8      	blx	r7
 80044d4:	3001      	adds	r0, #1
 80044d6:	d1c2      	bne.n	800445e <_printf_float+0x2f2>
 80044d8:	e6a3      	b.n	8004222 <_printf_float+0xb6>
 80044da:	2301      	movs	r3, #1
 80044dc:	4631      	mov	r1, r6
 80044de:	4628      	mov	r0, r5
 80044e0:	9206      	str	r2, [sp, #24]
 80044e2:	47b8      	blx	r7
 80044e4:	3001      	adds	r0, #1
 80044e6:	f43f ae9c 	beq.w	8004222 <_printf_float+0xb6>
 80044ea:	f10b 0b01 	add.w	fp, fp, #1
 80044ee:	9a06      	ldr	r2, [sp, #24]
 80044f0:	e7bb      	b.n	800446a <_printf_float+0x2fe>
 80044f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044f6:	4631      	mov	r1, r6
 80044f8:	4628      	mov	r0, r5
 80044fa:	47b8      	blx	r7
 80044fc:	3001      	adds	r0, #1
 80044fe:	d1c0      	bne.n	8004482 <_printf_float+0x316>
 8004500:	e68f      	b.n	8004222 <_printf_float+0xb6>
 8004502:	9a06      	ldr	r2, [sp, #24]
 8004504:	464b      	mov	r3, r9
 8004506:	4631      	mov	r1, r6
 8004508:	4628      	mov	r0, r5
 800450a:	4442      	add	r2, r8
 800450c:	47b8      	blx	r7
 800450e:	3001      	adds	r0, #1
 8004510:	d1c3      	bne.n	800449a <_printf_float+0x32e>
 8004512:	e686      	b.n	8004222 <_printf_float+0xb6>
 8004514:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004518:	f1ba 0f01 	cmp.w	sl, #1
 800451c:	dc01      	bgt.n	8004522 <_printf_float+0x3b6>
 800451e:	07db      	lsls	r3, r3, #31
 8004520:	d536      	bpl.n	8004590 <_printf_float+0x424>
 8004522:	2301      	movs	r3, #1
 8004524:	4642      	mov	r2, r8
 8004526:	4631      	mov	r1, r6
 8004528:	4628      	mov	r0, r5
 800452a:	47b8      	blx	r7
 800452c:	3001      	adds	r0, #1
 800452e:	f43f ae78 	beq.w	8004222 <_printf_float+0xb6>
 8004532:	4631      	mov	r1, r6
 8004534:	4628      	mov	r0, r5
 8004536:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800453a:	47b8      	blx	r7
 800453c:	3001      	adds	r0, #1
 800453e:	f43f ae70 	beq.w	8004222 <_printf_float+0xb6>
 8004542:	2200      	movs	r2, #0
 8004544:	2300      	movs	r3, #0
 8004546:	f10a 3aff 	add.w	sl, sl, #4294967295
 800454a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800454e:	f7fc fa53 	bl	80009f8 <__aeabi_dcmpeq>
 8004552:	b9c0      	cbnz	r0, 8004586 <_printf_float+0x41a>
 8004554:	4653      	mov	r3, sl
 8004556:	f108 0201 	add.w	r2, r8, #1
 800455a:	4631      	mov	r1, r6
 800455c:	4628      	mov	r0, r5
 800455e:	47b8      	blx	r7
 8004560:	3001      	adds	r0, #1
 8004562:	d10c      	bne.n	800457e <_printf_float+0x412>
 8004564:	e65d      	b.n	8004222 <_printf_float+0xb6>
 8004566:	2301      	movs	r3, #1
 8004568:	465a      	mov	r2, fp
 800456a:	4631      	mov	r1, r6
 800456c:	4628      	mov	r0, r5
 800456e:	47b8      	blx	r7
 8004570:	3001      	adds	r0, #1
 8004572:	f43f ae56 	beq.w	8004222 <_printf_float+0xb6>
 8004576:	f108 0801 	add.w	r8, r8, #1
 800457a:	45d0      	cmp	r8, sl
 800457c:	dbf3      	blt.n	8004566 <_printf_float+0x3fa>
 800457e:	464b      	mov	r3, r9
 8004580:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004584:	e6df      	b.n	8004346 <_printf_float+0x1da>
 8004586:	f04f 0800 	mov.w	r8, #0
 800458a:	f104 0b1a 	add.w	fp, r4, #26
 800458e:	e7f4      	b.n	800457a <_printf_float+0x40e>
 8004590:	2301      	movs	r3, #1
 8004592:	4642      	mov	r2, r8
 8004594:	e7e1      	b.n	800455a <_printf_float+0x3ee>
 8004596:	2301      	movs	r3, #1
 8004598:	464a      	mov	r2, r9
 800459a:	4631      	mov	r1, r6
 800459c:	4628      	mov	r0, r5
 800459e:	47b8      	blx	r7
 80045a0:	3001      	adds	r0, #1
 80045a2:	f43f ae3e 	beq.w	8004222 <_printf_float+0xb6>
 80045a6:	f108 0801 	add.w	r8, r8, #1
 80045aa:	68e3      	ldr	r3, [r4, #12]
 80045ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80045ae:	1a5b      	subs	r3, r3, r1
 80045b0:	4543      	cmp	r3, r8
 80045b2:	dcf0      	bgt.n	8004596 <_printf_float+0x42a>
 80045b4:	e6fc      	b.n	80043b0 <_printf_float+0x244>
 80045b6:	f04f 0800 	mov.w	r8, #0
 80045ba:	f104 0919 	add.w	r9, r4, #25
 80045be:	e7f4      	b.n	80045aa <_printf_float+0x43e>

080045c0 <_printf_common>:
 80045c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c4:	4616      	mov	r6, r2
 80045c6:	4698      	mov	r8, r3
 80045c8:	688a      	ldr	r2, [r1, #8]
 80045ca:	4607      	mov	r7, r0
 80045cc:	690b      	ldr	r3, [r1, #16]
 80045ce:	460c      	mov	r4, r1
 80045d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045d4:	4293      	cmp	r3, r2
 80045d6:	bfb8      	it	lt
 80045d8:	4613      	movlt	r3, r2
 80045da:	6033      	str	r3, [r6, #0]
 80045dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045e0:	b10a      	cbz	r2, 80045e6 <_printf_common+0x26>
 80045e2:	3301      	adds	r3, #1
 80045e4:	6033      	str	r3, [r6, #0]
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	0699      	lsls	r1, r3, #26
 80045ea:	bf42      	ittt	mi
 80045ec:	6833      	ldrmi	r3, [r6, #0]
 80045ee:	3302      	addmi	r3, #2
 80045f0:	6033      	strmi	r3, [r6, #0]
 80045f2:	6825      	ldr	r5, [r4, #0]
 80045f4:	f015 0506 	ands.w	r5, r5, #6
 80045f8:	d106      	bne.n	8004608 <_printf_common+0x48>
 80045fa:	f104 0a19 	add.w	sl, r4, #25
 80045fe:	68e3      	ldr	r3, [r4, #12]
 8004600:	6832      	ldr	r2, [r6, #0]
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	42ab      	cmp	r3, r5
 8004606:	dc2b      	bgt.n	8004660 <_printf_common+0xa0>
 8004608:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800460c:	6822      	ldr	r2, [r4, #0]
 800460e:	3b00      	subs	r3, #0
 8004610:	bf18      	it	ne
 8004612:	2301      	movne	r3, #1
 8004614:	0692      	lsls	r2, r2, #26
 8004616:	d430      	bmi.n	800467a <_printf_common+0xba>
 8004618:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800461c:	4641      	mov	r1, r8
 800461e:	4638      	mov	r0, r7
 8004620:	47c8      	blx	r9
 8004622:	3001      	adds	r0, #1
 8004624:	d023      	beq.n	800466e <_printf_common+0xae>
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	341a      	adds	r4, #26
 800462a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800462e:	f003 0306 	and.w	r3, r3, #6
 8004632:	2b04      	cmp	r3, #4
 8004634:	bf0a      	itet	eq
 8004636:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800463a:	2500      	movne	r5, #0
 800463c:	6833      	ldreq	r3, [r6, #0]
 800463e:	f04f 0600 	mov.w	r6, #0
 8004642:	bf08      	it	eq
 8004644:	1aed      	subeq	r5, r5, r3
 8004646:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800464a:	bf08      	it	eq
 800464c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004650:	4293      	cmp	r3, r2
 8004652:	bfc4      	itt	gt
 8004654:	1a9b      	subgt	r3, r3, r2
 8004656:	18ed      	addgt	r5, r5, r3
 8004658:	42b5      	cmp	r5, r6
 800465a:	d11a      	bne.n	8004692 <_printf_common+0xd2>
 800465c:	2000      	movs	r0, #0
 800465e:	e008      	b.n	8004672 <_printf_common+0xb2>
 8004660:	2301      	movs	r3, #1
 8004662:	4652      	mov	r2, sl
 8004664:	4641      	mov	r1, r8
 8004666:	4638      	mov	r0, r7
 8004668:	47c8      	blx	r9
 800466a:	3001      	adds	r0, #1
 800466c:	d103      	bne.n	8004676 <_printf_common+0xb6>
 800466e:	f04f 30ff 	mov.w	r0, #4294967295
 8004672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004676:	3501      	adds	r5, #1
 8004678:	e7c1      	b.n	80045fe <_printf_common+0x3e>
 800467a:	18e1      	adds	r1, r4, r3
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	2030      	movs	r0, #48	@ 0x30
 8004680:	3302      	adds	r3, #2
 8004682:	4422      	add	r2, r4
 8004684:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004688:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800468c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004690:	e7c2      	b.n	8004618 <_printf_common+0x58>
 8004692:	2301      	movs	r3, #1
 8004694:	4622      	mov	r2, r4
 8004696:	4641      	mov	r1, r8
 8004698:	4638      	mov	r0, r7
 800469a:	47c8      	blx	r9
 800469c:	3001      	adds	r0, #1
 800469e:	d0e6      	beq.n	800466e <_printf_common+0xae>
 80046a0:	3601      	adds	r6, #1
 80046a2:	e7d9      	b.n	8004658 <_printf_common+0x98>

080046a4 <_printf_i>:
 80046a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046a8:	7e0f      	ldrb	r7, [r1, #24]
 80046aa:	4691      	mov	r9, r2
 80046ac:	4680      	mov	r8, r0
 80046ae:	460c      	mov	r4, r1
 80046b0:	2f78      	cmp	r7, #120	@ 0x78
 80046b2:	469a      	mov	sl, r3
 80046b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046ba:	d807      	bhi.n	80046cc <_printf_i+0x28>
 80046bc:	2f62      	cmp	r7, #98	@ 0x62
 80046be:	d80a      	bhi.n	80046d6 <_printf_i+0x32>
 80046c0:	2f00      	cmp	r7, #0
 80046c2:	f000 80d2 	beq.w	800486a <_printf_i+0x1c6>
 80046c6:	2f58      	cmp	r7, #88	@ 0x58
 80046c8:	f000 80b9 	beq.w	800483e <_printf_i+0x19a>
 80046cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046d4:	e03a      	b.n	800474c <_printf_i+0xa8>
 80046d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046da:	2b15      	cmp	r3, #21
 80046dc:	d8f6      	bhi.n	80046cc <_printf_i+0x28>
 80046de:	a101      	add	r1, pc, #4	@ (adr r1, 80046e4 <_printf_i+0x40>)
 80046e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046e4:	0800473d 	.word	0x0800473d
 80046e8:	08004751 	.word	0x08004751
 80046ec:	080046cd 	.word	0x080046cd
 80046f0:	080046cd 	.word	0x080046cd
 80046f4:	080046cd 	.word	0x080046cd
 80046f8:	080046cd 	.word	0x080046cd
 80046fc:	08004751 	.word	0x08004751
 8004700:	080046cd 	.word	0x080046cd
 8004704:	080046cd 	.word	0x080046cd
 8004708:	080046cd 	.word	0x080046cd
 800470c:	080046cd 	.word	0x080046cd
 8004710:	08004851 	.word	0x08004851
 8004714:	0800477b 	.word	0x0800477b
 8004718:	0800480b 	.word	0x0800480b
 800471c:	080046cd 	.word	0x080046cd
 8004720:	080046cd 	.word	0x080046cd
 8004724:	08004873 	.word	0x08004873
 8004728:	080046cd 	.word	0x080046cd
 800472c:	0800477b 	.word	0x0800477b
 8004730:	080046cd 	.word	0x080046cd
 8004734:	080046cd 	.word	0x080046cd
 8004738:	08004813 	.word	0x08004813
 800473c:	6833      	ldr	r3, [r6, #0]
 800473e:	1d1a      	adds	r2, r3, #4
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6032      	str	r2, [r6, #0]
 8004744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004748:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800474c:	2301      	movs	r3, #1
 800474e:	e09d      	b.n	800488c <_printf_i+0x1e8>
 8004750:	6833      	ldr	r3, [r6, #0]
 8004752:	6820      	ldr	r0, [r4, #0]
 8004754:	1d19      	adds	r1, r3, #4
 8004756:	6031      	str	r1, [r6, #0]
 8004758:	0606      	lsls	r6, r0, #24
 800475a:	d501      	bpl.n	8004760 <_printf_i+0xbc>
 800475c:	681d      	ldr	r5, [r3, #0]
 800475e:	e003      	b.n	8004768 <_printf_i+0xc4>
 8004760:	0645      	lsls	r5, r0, #25
 8004762:	d5fb      	bpl.n	800475c <_printf_i+0xb8>
 8004764:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004768:	2d00      	cmp	r5, #0
 800476a:	da03      	bge.n	8004774 <_printf_i+0xd0>
 800476c:	232d      	movs	r3, #45	@ 0x2d
 800476e:	426d      	negs	r5, r5
 8004770:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004774:	4859      	ldr	r0, [pc, #356]	@ (80048dc <_printf_i+0x238>)
 8004776:	230a      	movs	r3, #10
 8004778:	e011      	b.n	800479e <_printf_i+0xfa>
 800477a:	6821      	ldr	r1, [r4, #0]
 800477c:	6833      	ldr	r3, [r6, #0]
 800477e:	0608      	lsls	r0, r1, #24
 8004780:	f853 5b04 	ldr.w	r5, [r3], #4
 8004784:	d402      	bmi.n	800478c <_printf_i+0xe8>
 8004786:	0649      	lsls	r1, r1, #25
 8004788:	bf48      	it	mi
 800478a:	b2ad      	uxthmi	r5, r5
 800478c:	2f6f      	cmp	r7, #111	@ 0x6f
 800478e:	6033      	str	r3, [r6, #0]
 8004790:	4852      	ldr	r0, [pc, #328]	@ (80048dc <_printf_i+0x238>)
 8004792:	bf14      	ite	ne
 8004794:	230a      	movne	r3, #10
 8004796:	2308      	moveq	r3, #8
 8004798:	2100      	movs	r1, #0
 800479a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800479e:	6866      	ldr	r6, [r4, #4]
 80047a0:	2e00      	cmp	r6, #0
 80047a2:	60a6      	str	r6, [r4, #8]
 80047a4:	bfa2      	ittt	ge
 80047a6:	6821      	ldrge	r1, [r4, #0]
 80047a8:	f021 0104 	bicge.w	r1, r1, #4
 80047ac:	6021      	strge	r1, [r4, #0]
 80047ae:	b90d      	cbnz	r5, 80047b4 <_printf_i+0x110>
 80047b0:	2e00      	cmp	r6, #0
 80047b2:	d04b      	beq.n	800484c <_printf_i+0x1a8>
 80047b4:	4616      	mov	r6, r2
 80047b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80047ba:	fb03 5711 	mls	r7, r3, r1, r5
 80047be:	5dc7      	ldrb	r7, [r0, r7]
 80047c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047c4:	462f      	mov	r7, r5
 80047c6:	460d      	mov	r5, r1
 80047c8:	42bb      	cmp	r3, r7
 80047ca:	d9f4      	bls.n	80047b6 <_printf_i+0x112>
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d10b      	bne.n	80047e8 <_printf_i+0x144>
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	07df      	lsls	r7, r3, #31
 80047d4:	d508      	bpl.n	80047e8 <_printf_i+0x144>
 80047d6:	6923      	ldr	r3, [r4, #16]
 80047d8:	6861      	ldr	r1, [r4, #4]
 80047da:	4299      	cmp	r1, r3
 80047dc:	bfde      	ittt	le
 80047de:	2330      	movle	r3, #48	@ 0x30
 80047e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047e8:	1b92      	subs	r2, r2, r6
 80047ea:	6122      	str	r2, [r4, #16]
 80047ec:	464b      	mov	r3, r9
 80047ee:	aa03      	add	r2, sp, #12
 80047f0:	4621      	mov	r1, r4
 80047f2:	4640      	mov	r0, r8
 80047f4:	f8cd a000 	str.w	sl, [sp]
 80047f8:	f7ff fee2 	bl	80045c0 <_printf_common>
 80047fc:	3001      	adds	r0, #1
 80047fe:	d14a      	bne.n	8004896 <_printf_i+0x1f2>
 8004800:	f04f 30ff 	mov.w	r0, #4294967295
 8004804:	b004      	add	sp, #16
 8004806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	f043 0320 	orr.w	r3, r3, #32
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	2778      	movs	r7, #120	@ 0x78
 8004814:	4832      	ldr	r0, [pc, #200]	@ (80048e0 <_printf_i+0x23c>)
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800481c:	061f      	lsls	r7, r3, #24
 800481e:	6831      	ldr	r1, [r6, #0]
 8004820:	f851 5b04 	ldr.w	r5, [r1], #4
 8004824:	d402      	bmi.n	800482c <_printf_i+0x188>
 8004826:	065f      	lsls	r7, r3, #25
 8004828:	bf48      	it	mi
 800482a:	b2ad      	uxthmi	r5, r5
 800482c:	6031      	str	r1, [r6, #0]
 800482e:	07d9      	lsls	r1, r3, #31
 8004830:	bf44      	itt	mi
 8004832:	f043 0320 	orrmi.w	r3, r3, #32
 8004836:	6023      	strmi	r3, [r4, #0]
 8004838:	b11d      	cbz	r5, 8004842 <_printf_i+0x19e>
 800483a:	2310      	movs	r3, #16
 800483c:	e7ac      	b.n	8004798 <_printf_i+0xf4>
 800483e:	4827      	ldr	r0, [pc, #156]	@ (80048dc <_printf_i+0x238>)
 8004840:	e7e9      	b.n	8004816 <_printf_i+0x172>
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	f023 0320 	bic.w	r3, r3, #32
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	e7f6      	b.n	800483a <_printf_i+0x196>
 800484c:	4616      	mov	r6, r2
 800484e:	e7bd      	b.n	80047cc <_printf_i+0x128>
 8004850:	6833      	ldr	r3, [r6, #0]
 8004852:	6825      	ldr	r5, [r4, #0]
 8004854:	1d18      	adds	r0, r3, #4
 8004856:	6961      	ldr	r1, [r4, #20]
 8004858:	6030      	str	r0, [r6, #0]
 800485a:	062e      	lsls	r6, r5, #24
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	d501      	bpl.n	8004864 <_printf_i+0x1c0>
 8004860:	6019      	str	r1, [r3, #0]
 8004862:	e002      	b.n	800486a <_printf_i+0x1c6>
 8004864:	0668      	lsls	r0, r5, #25
 8004866:	d5fb      	bpl.n	8004860 <_printf_i+0x1bc>
 8004868:	8019      	strh	r1, [r3, #0]
 800486a:	2300      	movs	r3, #0
 800486c:	4616      	mov	r6, r2
 800486e:	6123      	str	r3, [r4, #16]
 8004870:	e7bc      	b.n	80047ec <_printf_i+0x148>
 8004872:	6833      	ldr	r3, [r6, #0]
 8004874:	2100      	movs	r1, #0
 8004876:	1d1a      	adds	r2, r3, #4
 8004878:	6032      	str	r2, [r6, #0]
 800487a:	681e      	ldr	r6, [r3, #0]
 800487c:	6862      	ldr	r2, [r4, #4]
 800487e:	4630      	mov	r0, r6
 8004880:	f000 f9d5 	bl	8004c2e <memchr>
 8004884:	b108      	cbz	r0, 800488a <_printf_i+0x1e6>
 8004886:	1b80      	subs	r0, r0, r6
 8004888:	6060      	str	r0, [r4, #4]
 800488a:	6863      	ldr	r3, [r4, #4]
 800488c:	6123      	str	r3, [r4, #16]
 800488e:	2300      	movs	r3, #0
 8004890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004894:	e7aa      	b.n	80047ec <_printf_i+0x148>
 8004896:	6923      	ldr	r3, [r4, #16]
 8004898:	4632      	mov	r2, r6
 800489a:	4649      	mov	r1, r9
 800489c:	4640      	mov	r0, r8
 800489e:	47d0      	blx	sl
 80048a0:	3001      	adds	r0, #1
 80048a2:	d0ad      	beq.n	8004800 <_printf_i+0x15c>
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	079b      	lsls	r3, r3, #30
 80048a8:	d413      	bmi.n	80048d2 <_printf_i+0x22e>
 80048aa:	68e0      	ldr	r0, [r4, #12]
 80048ac:	9b03      	ldr	r3, [sp, #12]
 80048ae:	4298      	cmp	r0, r3
 80048b0:	bfb8      	it	lt
 80048b2:	4618      	movlt	r0, r3
 80048b4:	e7a6      	b.n	8004804 <_printf_i+0x160>
 80048b6:	2301      	movs	r3, #1
 80048b8:	4632      	mov	r2, r6
 80048ba:	4649      	mov	r1, r9
 80048bc:	4640      	mov	r0, r8
 80048be:	47d0      	blx	sl
 80048c0:	3001      	adds	r0, #1
 80048c2:	d09d      	beq.n	8004800 <_printf_i+0x15c>
 80048c4:	3501      	adds	r5, #1
 80048c6:	68e3      	ldr	r3, [r4, #12]
 80048c8:	9903      	ldr	r1, [sp, #12]
 80048ca:	1a5b      	subs	r3, r3, r1
 80048cc:	42ab      	cmp	r3, r5
 80048ce:	dcf2      	bgt.n	80048b6 <_printf_i+0x212>
 80048d0:	e7eb      	b.n	80048aa <_printf_i+0x206>
 80048d2:	2500      	movs	r5, #0
 80048d4:	f104 0619 	add.w	r6, r4, #25
 80048d8:	e7f5      	b.n	80048c6 <_printf_i+0x222>
 80048da:	bf00      	nop
 80048dc:	08006d66 	.word	0x08006d66
 80048e0:	08006d77 	.word	0x08006d77

080048e4 <std>:
 80048e4:	2300      	movs	r3, #0
 80048e6:	b510      	push	{r4, lr}
 80048e8:	4604      	mov	r4, r0
 80048ea:	6083      	str	r3, [r0, #8]
 80048ec:	8181      	strh	r1, [r0, #12]
 80048ee:	4619      	mov	r1, r3
 80048f0:	6643      	str	r3, [r0, #100]	@ 0x64
 80048f2:	81c2      	strh	r2, [r0, #14]
 80048f4:	2208      	movs	r2, #8
 80048f6:	6183      	str	r3, [r0, #24]
 80048f8:	e9c0 3300 	strd	r3, r3, [r0]
 80048fc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004900:	305c      	adds	r0, #92	@ 0x5c
 8004902:	f000 f914 	bl	8004b2e <memset>
 8004906:	4b0d      	ldr	r3, [pc, #52]	@ (800493c <std+0x58>)
 8004908:	6224      	str	r4, [r4, #32]
 800490a:	6263      	str	r3, [r4, #36]	@ 0x24
 800490c:	4b0c      	ldr	r3, [pc, #48]	@ (8004940 <std+0x5c>)
 800490e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004910:	4b0c      	ldr	r3, [pc, #48]	@ (8004944 <std+0x60>)
 8004912:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004914:	4b0c      	ldr	r3, [pc, #48]	@ (8004948 <std+0x64>)
 8004916:	6323      	str	r3, [r4, #48]	@ 0x30
 8004918:	4b0c      	ldr	r3, [pc, #48]	@ (800494c <std+0x68>)
 800491a:	429c      	cmp	r4, r3
 800491c:	d006      	beq.n	800492c <std+0x48>
 800491e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004922:	4294      	cmp	r4, r2
 8004924:	d002      	beq.n	800492c <std+0x48>
 8004926:	33d0      	adds	r3, #208	@ 0xd0
 8004928:	429c      	cmp	r4, r3
 800492a:	d105      	bne.n	8004938 <std+0x54>
 800492c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004934:	f000 b978 	b.w	8004c28 <__retarget_lock_init_recursive>
 8004938:	bd10      	pop	{r4, pc}
 800493a:	bf00      	nop
 800493c:	08004aa9 	.word	0x08004aa9
 8004940:	08004acb 	.word	0x08004acb
 8004944:	08004b03 	.word	0x08004b03
 8004948:	08004b27 	.word	0x08004b27
 800494c:	200002b4 	.word	0x200002b4

08004950 <stdio_exit_handler>:
 8004950:	4a02      	ldr	r2, [pc, #8]	@ (800495c <stdio_exit_handler+0xc>)
 8004952:	4903      	ldr	r1, [pc, #12]	@ (8004960 <stdio_exit_handler+0x10>)
 8004954:	4803      	ldr	r0, [pc, #12]	@ (8004964 <stdio_exit_handler+0x14>)
 8004956:	f000 b869 	b.w	8004a2c <_fwalk_sglue>
 800495a:	bf00      	nop
 800495c:	2000000c 	.word	0x2000000c
 8004960:	080065b9 	.word	0x080065b9
 8004964:	2000001c 	.word	0x2000001c

08004968 <cleanup_stdio>:
 8004968:	6841      	ldr	r1, [r0, #4]
 800496a:	4b0c      	ldr	r3, [pc, #48]	@ (800499c <cleanup_stdio+0x34>)
 800496c:	4299      	cmp	r1, r3
 800496e:	b510      	push	{r4, lr}
 8004970:	4604      	mov	r4, r0
 8004972:	d001      	beq.n	8004978 <cleanup_stdio+0x10>
 8004974:	f001 fe20 	bl	80065b8 <_fflush_r>
 8004978:	68a1      	ldr	r1, [r4, #8]
 800497a:	4b09      	ldr	r3, [pc, #36]	@ (80049a0 <cleanup_stdio+0x38>)
 800497c:	4299      	cmp	r1, r3
 800497e:	d002      	beq.n	8004986 <cleanup_stdio+0x1e>
 8004980:	4620      	mov	r0, r4
 8004982:	f001 fe19 	bl	80065b8 <_fflush_r>
 8004986:	68e1      	ldr	r1, [r4, #12]
 8004988:	4b06      	ldr	r3, [pc, #24]	@ (80049a4 <cleanup_stdio+0x3c>)
 800498a:	4299      	cmp	r1, r3
 800498c:	d004      	beq.n	8004998 <cleanup_stdio+0x30>
 800498e:	4620      	mov	r0, r4
 8004990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004994:	f001 be10 	b.w	80065b8 <_fflush_r>
 8004998:	bd10      	pop	{r4, pc}
 800499a:	bf00      	nop
 800499c:	200002b4 	.word	0x200002b4
 80049a0:	2000031c 	.word	0x2000031c
 80049a4:	20000384 	.word	0x20000384

080049a8 <global_stdio_init.part.0>:
 80049a8:	b510      	push	{r4, lr}
 80049aa:	4b0b      	ldr	r3, [pc, #44]	@ (80049d8 <global_stdio_init.part.0+0x30>)
 80049ac:	2104      	movs	r1, #4
 80049ae:	4c0b      	ldr	r4, [pc, #44]	@ (80049dc <global_stdio_init.part.0+0x34>)
 80049b0:	4a0b      	ldr	r2, [pc, #44]	@ (80049e0 <global_stdio_init.part.0+0x38>)
 80049b2:	4620      	mov	r0, r4
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f7ff ff94 	bl	80048e4 <std>
 80049bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80049c0:	2201      	movs	r2, #1
 80049c2:	2109      	movs	r1, #9
 80049c4:	f7ff ff8e 	bl	80048e4 <std>
 80049c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80049cc:	2202      	movs	r2, #2
 80049ce:	2112      	movs	r1, #18
 80049d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d4:	f7ff bf86 	b.w	80048e4 <std>
 80049d8:	200003ec 	.word	0x200003ec
 80049dc:	200002b4 	.word	0x200002b4
 80049e0:	08004951 	.word	0x08004951

080049e4 <__sfp_lock_acquire>:
 80049e4:	4801      	ldr	r0, [pc, #4]	@ (80049ec <__sfp_lock_acquire+0x8>)
 80049e6:	f000 b920 	b.w	8004c2a <__retarget_lock_acquire_recursive>
 80049ea:	bf00      	nop
 80049ec:	200003f5 	.word	0x200003f5

080049f0 <__sfp_lock_release>:
 80049f0:	4801      	ldr	r0, [pc, #4]	@ (80049f8 <__sfp_lock_release+0x8>)
 80049f2:	f000 b91b 	b.w	8004c2c <__retarget_lock_release_recursive>
 80049f6:	bf00      	nop
 80049f8:	200003f5 	.word	0x200003f5

080049fc <__sinit>:
 80049fc:	b510      	push	{r4, lr}
 80049fe:	4604      	mov	r4, r0
 8004a00:	f7ff fff0 	bl	80049e4 <__sfp_lock_acquire>
 8004a04:	6a23      	ldr	r3, [r4, #32]
 8004a06:	b11b      	cbz	r3, 8004a10 <__sinit+0x14>
 8004a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a0c:	f7ff bff0 	b.w	80049f0 <__sfp_lock_release>
 8004a10:	4b04      	ldr	r3, [pc, #16]	@ (8004a24 <__sinit+0x28>)
 8004a12:	6223      	str	r3, [r4, #32]
 8004a14:	4b04      	ldr	r3, [pc, #16]	@ (8004a28 <__sinit+0x2c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f5      	bne.n	8004a08 <__sinit+0xc>
 8004a1c:	f7ff ffc4 	bl	80049a8 <global_stdio_init.part.0>
 8004a20:	e7f2      	b.n	8004a08 <__sinit+0xc>
 8004a22:	bf00      	nop
 8004a24:	08004969 	.word	0x08004969
 8004a28:	200003ec 	.word	0x200003ec

08004a2c <_fwalk_sglue>:
 8004a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a30:	4607      	mov	r7, r0
 8004a32:	4688      	mov	r8, r1
 8004a34:	4614      	mov	r4, r2
 8004a36:	2600      	movs	r6, #0
 8004a38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a3c:	f1b9 0901 	subs.w	r9, r9, #1
 8004a40:	d505      	bpl.n	8004a4e <_fwalk_sglue+0x22>
 8004a42:	6824      	ldr	r4, [r4, #0]
 8004a44:	2c00      	cmp	r4, #0
 8004a46:	d1f7      	bne.n	8004a38 <_fwalk_sglue+0xc>
 8004a48:	4630      	mov	r0, r6
 8004a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a4e:	89ab      	ldrh	r3, [r5, #12]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d907      	bls.n	8004a64 <_fwalk_sglue+0x38>
 8004a54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	d003      	beq.n	8004a64 <_fwalk_sglue+0x38>
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	4638      	mov	r0, r7
 8004a60:	47c0      	blx	r8
 8004a62:	4306      	orrs	r6, r0
 8004a64:	3568      	adds	r5, #104	@ 0x68
 8004a66:	e7e9      	b.n	8004a3c <_fwalk_sglue+0x10>

08004a68 <siprintf>:
 8004a68:	b40e      	push	{r1, r2, r3}
 8004a6a:	b500      	push	{lr}
 8004a6c:	b09c      	sub	sp, #112	@ 0x70
 8004a6e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a72:	ab1d      	add	r3, sp, #116	@ 0x74
 8004a74:	9002      	str	r0, [sp, #8]
 8004a76:	9006      	str	r0, [sp, #24]
 8004a78:	9107      	str	r1, [sp, #28]
 8004a7a:	9104      	str	r1, [sp, #16]
 8004a7c:	4808      	ldr	r0, [pc, #32]	@ (8004aa0 <siprintf+0x38>)
 8004a7e:	4909      	ldr	r1, [pc, #36]	@ (8004aa4 <siprintf+0x3c>)
 8004a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a84:	9105      	str	r1, [sp, #20]
 8004a86:	a902      	add	r1, sp, #8
 8004a88:	6800      	ldr	r0, [r0, #0]
 8004a8a:	9301      	str	r3, [sp, #4]
 8004a8c:	f001 fc14 	bl	80062b8 <_svfiprintf_r>
 8004a90:	9b02      	ldr	r3, [sp, #8]
 8004a92:	2200      	movs	r2, #0
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	b01c      	add	sp, #112	@ 0x70
 8004a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a9c:	b003      	add	sp, #12
 8004a9e:	4770      	bx	lr
 8004aa0:	20000018 	.word	0x20000018
 8004aa4:	ffff0208 	.word	0xffff0208

08004aa8 <__sread>:
 8004aa8:	b510      	push	{r4, lr}
 8004aaa:	460c      	mov	r4, r1
 8004aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab0:	f000 f86c 	bl	8004b8c <_read_r>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	bfab      	itete	ge
 8004ab8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004aba:	89a3      	ldrhlt	r3, [r4, #12]
 8004abc:	181b      	addge	r3, r3, r0
 8004abe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004ac2:	bfac      	ite	ge
 8004ac4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ac6:	81a3      	strhlt	r3, [r4, #12]
 8004ac8:	bd10      	pop	{r4, pc}

08004aca <__swrite>:
 8004aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ace:	461f      	mov	r7, r3
 8004ad0:	898b      	ldrh	r3, [r1, #12]
 8004ad2:	4605      	mov	r5, r0
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	05db      	lsls	r3, r3, #23
 8004ad8:	4616      	mov	r6, r2
 8004ada:	d505      	bpl.n	8004ae8 <__swrite+0x1e>
 8004adc:	2302      	movs	r3, #2
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ae4:	f000 f840 	bl	8004b68 <_lseek_r>
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	4632      	mov	r2, r6
 8004aec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004af0:	4628      	mov	r0, r5
 8004af2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004af6:	81a3      	strh	r3, [r4, #12]
 8004af8:	463b      	mov	r3, r7
 8004afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004afe:	f000 b857 	b.w	8004bb0 <_write_r>

08004b02 <__sseek>:
 8004b02:	b510      	push	{r4, lr}
 8004b04:	460c      	mov	r4, r1
 8004b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b0a:	f000 f82d 	bl	8004b68 <_lseek_r>
 8004b0e:	1c43      	adds	r3, r0, #1
 8004b10:	89a3      	ldrh	r3, [r4, #12]
 8004b12:	bf15      	itete	ne
 8004b14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b1e:	81a3      	strheq	r3, [r4, #12]
 8004b20:	bf18      	it	ne
 8004b22:	81a3      	strhne	r3, [r4, #12]
 8004b24:	bd10      	pop	{r4, pc}

08004b26 <__sclose>:
 8004b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b2a:	f000 b80d 	b.w	8004b48 <_close_r>

08004b2e <memset>:
 8004b2e:	4402      	add	r2, r0
 8004b30:	4603      	mov	r3, r0
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d100      	bne.n	8004b38 <memset+0xa>
 8004b36:	4770      	bx	lr
 8004b38:	f803 1b01 	strb.w	r1, [r3], #1
 8004b3c:	e7f9      	b.n	8004b32 <memset+0x4>
	...

08004b40 <_localeconv_r>:
 8004b40:	4800      	ldr	r0, [pc, #0]	@ (8004b44 <_localeconv_r+0x4>)
 8004b42:	4770      	bx	lr
 8004b44:	20000158 	.word	0x20000158

08004b48 <_close_r>:
 8004b48:	b538      	push	{r3, r4, r5, lr}
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	4d05      	ldr	r5, [pc, #20]	@ (8004b64 <_close_r+0x1c>)
 8004b4e:	4604      	mov	r4, r0
 8004b50:	4608      	mov	r0, r1
 8004b52:	602b      	str	r3, [r5, #0]
 8004b54:	f7fc fdcc 	bl	80016f0 <_close>
 8004b58:	1c43      	adds	r3, r0, #1
 8004b5a:	d102      	bne.n	8004b62 <_close_r+0x1a>
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	b103      	cbz	r3, 8004b62 <_close_r+0x1a>
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	bd38      	pop	{r3, r4, r5, pc}
 8004b64:	200003f0 	.word	0x200003f0

08004b68 <_lseek_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	4d06      	ldr	r5, [pc, #24]	@ (8004b88 <_lseek_r+0x20>)
 8004b6e:	4608      	mov	r0, r1
 8004b70:	4611      	mov	r1, r2
 8004b72:	2200      	movs	r2, #0
 8004b74:	602a      	str	r2, [r5, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	f7fc fde1 	bl	800173e <_lseek>
 8004b7c:	1c43      	adds	r3, r0, #1
 8004b7e:	d102      	bne.n	8004b86 <_lseek_r+0x1e>
 8004b80:	682b      	ldr	r3, [r5, #0]
 8004b82:	b103      	cbz	r3, 8004b86 <_lseek_r+0x1e>
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	bd38      	pop	{r3, r4, r5, pc}
 8004b88:	200003f0 	.word	0x200003f0

08004b8c <_read_r>:
 8004b8c:	b538      	push	{r3, r4, r5, lr}
 8004b8e:	4604      	mov	r4, r0
 8004b90:	4d06      	ldr	r5, [pc, #24]	@ (8004bac <_read_r+0x20>)
 8004b92:	4608      	mov	r0, r1
 8004b94:	4611      	mov	r1, r2
 8004b96:	2200      	movs	r2, #0
 8004b98:	602a      	str	r2, [r5, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f7fc fd6f 	bl	800167e <_read>
 8004ba0:	1c43      	adds	r3, r0, #1
 8004ba2:	d102      	bne.n	8004baa <_read_r+0x1e>
 8004ba4:	682b      	ldr	r3, [r5, #0]
 8004ba6:	b103      	cbz	r3, 8004baa <_read_r+0x1e>
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	bd38      	pop	{r3, r4, r5, pc}
 8004bac:	200003f0 	.word	0x200003f0

08004bb0 <_write_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	4d06      	ldr	r5, [pc, #24]	@ (8004bd0 <_write_r+0x20>)
 8004bb6:	4608      	mov	r0, r1
 8004bb8:	4611      	mov	r1, r2
 8004bba:	2200      	movs	r2, #0
 8004bbc:	602a      	str	r2, [r5, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f7fc fd7a 	bl	80016b8 <_write>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_write_r+0x1e>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_write_r+0x1e>
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	200003f0 	.word	0x200003f0

08004bd4 <__errno>:
 8004bd4:	4b01      	ldr	r3, [pc, #4]	@ (8004bdc <__errno+0x8>)
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	20000018 	.word	0x20000018

08004be0 <__libc_init_array>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	4d0d      	ldr	r5, [pc, #52]	@ (8004c18 <__libc_init_array+0x38>)
 8004be4:	2600      	movs	r6, #0
 8004be6:	4c0d      	ldr	r4, [pc, #52]	@ (8004c1c <__libc_init_array+0x3c>)
 8004be8:	1b64      	subs	r4, r4, r5
 8004bea:	10a4      	asrs	r4, r4, #2
 8004bec:	42a6      	cmp	r6, r4
 8004bee:	d109      	bne.n	8004c04 <__libc_init_array+0x24>
 8004bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8004c20 <__libc_init_array+0x40>)
 8004bf2:	2600      	movs	r6, #0
 8004bf4:	4c0b      	ldr	r4, [pc, #44]	@ (8004c24 <__libc_init_array+0x44>)
 8004bf6:	f002 f87d 	bl	8006cf4 <_init>
 8004bfa:	1b64      	subs	r4, r4, r5
 8004bfc:	10a4      	asrs	r4, r4, #2
 8004bfe:	42a6      	cmp	r6, r4
 8004c00:	d105      	bne.n	8004c0e <__libc_init_array+0x2e>
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
 8004c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c08:	3601      	adds	r6, #1
 8004c0a:	4798      	blx	r3
 8004c0c:	e7ee      	b.n	8004bec <__libc_init_array+0xc>
 8004c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c12:	3601      	adds	r6, #1
 8004c14:	4798      	blx	r3
 8004c16:	e7f2      	b.n	8004bfe <__libc_init_array+0x1e>
 8004c18:	080070d0 	.word	0x080070d0
 8004c1c:	080070d0 	.word	0x080070d0
 8004c20:	080070d0 	.word	0x080070d0
 8004c24:	080070d4 	.word	0x080070d4

08004c28 <__retarget_lock_init_recursive>:
 8004c28:	4770      	bx	lr

08004c2a <__retarget_lock_acquire_recursive>:
 8004c2a:	4770      	bx	lr

08004c2c <__retarget_lock_release_recursive>:
 8004c2c:	4770      	bx	lr

08004c2e <memchr>:
 8004c2e:	b2c9      	uxtb	r1, r1
 8004c30:	4603      	mov	r3, r0
 8004c32:	4402      	add	r2, r0
 8004c34:	b510      	push	{r4, lr}
 8004c36:	4293      	cmp	r3, r2
 8004c38:	4618      	mov	r0, r3
 8004c3a:	d101      	bne.n	8004c40 <memchr+0x12>
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	e003      	b.n	8004c48 <memchr+0x1a>
 8004c40:	7804      	ldrb	r4, [r0, #0]
 8004c42:	3301      	adds	r3, #1
 8004c44:	428c      	cmp	r4, r1
 8004c46:	d1f6      	bne.n	8004c36 <memchr+0x8>
 8004c48:	bd10      	pop	{r4, pc}

08004c4a <quorem>:
 8004c4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4e:	6903      	ldr	r3, [r0, #16]
 8004c50:	4607      	mov	r7, r0
 8004c52:	690c      	ldr	r4, [r1, #16]
 8004c54:	42a3      	cmp	r3, r4
 8004c56:	f2c0 8083 	blt.w	8004d60 <quorem+0x116>
 8004c5a:	3c01      	subs	r4, #1
 8004c5c:	f100 0514 	add.w	r5, r0, #20
 8004c60:	f101 0814 	add.w	r8, r1, #20
 8004c64:	00a3      	lsls	r3, r4, #2
 8004c66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c6a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c82:	d331      	bcc.n	8004ce8 <quorem+0x9e>
 8004c84:	f04f 0a00 	mov.w	sl, #0
 8004c88:	46c4      	mov	ip, r8
 8004c8a:	46ae      	mov	lr, r5
 8004c8c:	46d3      	mov	fp, sl
 8004c8e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004c92:	b298      	uxth	r0, r3
 8004c94:	45e1      	cmp	r9, ip
 8004c96:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8004c9a:	fb06 a000 	mla	r0, r6, r0, sl
 8004c9e:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8004ca2:	b280      	uxth	r0, r0
 8004ca4:	fb06 2303 	mla	r3, r6, r3, r2
 8004ca8:	f8de 2000 	ldr.w	r2, [lr]
 8004cac:	b292      	uxth	r2, r2
 8004cae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004cb2:	eba2 0200 	sub.w	r2, r2, r0
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f8de 0000 	ldr.w	r0, [lr]
 8004cbc:	445a      	add	r2, fp
 8004cbe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004cc2:	b292      	uxth	r2, r2
 8004cc4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004cc8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004ccc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004cd0:	f84e 2b04 	str.w	r2, [lr], #4
 8004cd4:	d2db      	bcs.n	8004c8e <quorem+0x44>
 8004cd6:	9b00      	ldr	r3, [sp, #0]
 8004cd8:	58eb      	ldr	r3, [r5, r3]
 8004cda:	b92b      	cbnz	r3, 8004ce8 <quorem+0x9e>
 8004cdc:	9b01      	ldr	r3, [sp, #4]
 8004cde:	3b04      	subs	r3, #4
 8004ce0:	429d      	cmp	r5, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	d330      	bcc.n	8004d48 <quorem+0xfe>
 8004ce6:	613c      	str	r4, [r7, #16]
 8004ce8:	4638      	mov	r0, r7
 8004cea:	f001 f97d 	bl	8005fe8 <__mcmp>
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	db26      	blt.n	8004d40 <quorem+0xf6>
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	f858 2b04 	ldr.w	r2, [r8], #4
 8004cfa:	f8d1 c000 	ldr.w	ip, [r1]
 8004cfe:	fa1f fe82 	uxth.w	lr, r2
 8004d02:	45c1      	cmp	r9, r8
 8004d04:	fa1f f38c 	uxth.w	r3, ip
 8004d08:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8004d0c:	eba3 030e 	sub.w	r3, r3, lr
 8004d10:	4403      	add	r3, r0
 8004d12:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004d1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d20:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004d24:	f841 3b04 	str.w	r3, [r1], #4
 8004d28:	d2e5      	bcs.n	8004cf6 <quorem+0xac>
 8004d2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d32:	b922      	cbnz	r2, 8004d3e <quorem+0xf4>
 8004d34:	3b04      	subs	r3, #4
 8004d36:	429d      	cmp	r5, r3
 8004d38:	461a      	mov	r2, r3
 8004d3a:	d30b      	bcc.n	8004d54 <quorem+0x10a>
 8004d3c:	613c      	str	r4, [r7, #16]
 8004d3e:	3601      	adds	r6, #1
 8004d40:	4630      	mov	r0, r6
 8004d42:	b003      	add	sp, #12
 8004d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d48:	6812      	ldr	r2, [r2, #0]
 8004d4a:	3b04      	subs	r3, #4
 8004d4c:	2a00      	cmp	r2, #0
 8004d4e:	d1ca      	bne.n	8004ce6 <quorem+0x9c>
 8004d50:	3c01      	subs	r4, #1
 8004d52:	e7c5      	b.n	8004ce0 <quorem+0x96>
 8004d54:	6812      	ldr	r2, [r2, #0]
 8004d56:	3b04      	subs	r3, #4
 8004d58:	2a00      	cmp	r2, #0
 8004d5a:	d1ef      	bne.n	8004d3c <quorem+0xf2>
 8004d5c:	3c01      	subs	r4, #1
 8004d5e:	e7ea      	b.n	8004d36 <quorem+0xec>
 8004d60:	2000      	movs	r0, #0
 8004d62:	e7ee      	b.n	8004d42 <quorem+0xf8>
 8004d64:	0000      	movs	r0, r0
	...

08004d68 <_dtoa_r>:
 8004d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6c:	69c7      	ldr	r7, [r0, #28]
 8004d6e:	b099      	sub	sp, #100	@ 0x64
 8004d70:	4683      	mov	fp, r0
 8004d72:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004d74:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d76:	920e      	str	r2, [sp, #56]	@ 0x38
 8004d78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004d7a:	ec55 4b10 	vmov	r4, r5, d0
 8004d7e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004d82:	b97f      	cbnz	r7, 8004da4 <_dtoa_r+0x3c>
 8004d84:	2010      	movs	r0, #16
 8004d86:	f000 fdfd 	bl	8005984 <malloc>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004d90:	b920      	cbnz	r0, 8004d9c <_dtoa_r+0x34>
 8004d92:	4ba7      	ldr	r3, [pc, #668]	@ (8005030 <_dtoa_r+0x2c8>)
 8004d94:	21ef      	movs	r1, #239	@ 0xef
 8004d96:	48a7      	ldr	r0, [pc, #668]	@ (8005034 <_dtoa_r+0x2cc>)
 8004d98:	f001 fc6e 	bl	8006678 <__assert_func>
 8004d9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004da0:	6007      	str	r7, [r0, #0]
 8004da2:	60c7      	str	r7, [r0, #12]
 8004da4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004da8:	6819      	ldr	r1, [r3, #0]
 8004daa:	b159      	cbz	r1, 8004dc4 <_dtoa_r+0x5c>
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	2301      	movs	r3, #1
 8004db0:	4658      	mov	r0, fp
 8004db2:	4093      	lsls	r3, r2
 8004db4:	604a      	str	r2, [r1, #4]
 8004db6:	608b      	str	r3, [r1, #8]
 8004db8:	f000 feda 	bl	8005b70 <_Bfree>
 8004dbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	1e2b      	subs	r3, r5, #0
 8004dc6:	bfb7      	itett	lt
 8004dc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004dcc:	2300      	movge	r3, #0
 8004dce:	2201      	movlt	r2, #1
 8004dd0:	9303      	strlt	r3, [sp, #12]
 8004dd2:	bfa8      	it	ge
 8004dd4:	6033      	strge	r3, [r6, #0]
 8004dd6:	9f03      	ldr	r7, [sp, #12]
 8004dd8:	4b97      	ldr	r3, [pc, #604]	@ (8005038 <_dtoa_r+0x2d0>)
 8004dda:	bfb8      	it	lt
 8004ddc:	6032      	strlt	r2, [r6, #0]
 8004dde:	43bb      	bics	r3, r7
 8004de0:	d112      	bne.n	8004e08 <_dtoa_r+0xa0>
 8004de2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004de6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004dee:	4323      	orrs	r3, r4
 8004df0:	f000 854c 	beq.w	800588c <_dtoa_r+0xb24>
 8004df4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004df6:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800504c <_dtoa_r+0x2e4>
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 854e 	beq.w	800589c <_dtoa_r+0xb34>
 8004e00:	f10a 0303 	add.w	r3, sl, #3
 8004e04:	f000 bd48 	b.w	8005898 <_dtoa_r+0xb30>
 8004e08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2300      	movs	r3, #0
 8004e10:	ec51 0b17 	vmov	r0, r1, d7
 8004e14:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004e18:	f7fb fdee 	bl	80009f8 <__aeabi_dcmpeq>
 8004e1c:	4680      	mov	r8, r0
 8004e1e:	b158      	cbz	r0, 8004e38 <_dtoa_r+0xd0>
 8004e20:	2301      	movs	r3, #1
 8004e22:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004e28:	b113      	cbz	r3, 8004e30 <_dtoa_r+0xc8>
 8004e2a:	4b84      	ldr	r3, [pc, #528]	@ (800503c <_dtoa_r+0x2d4>)
 8004e2c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8005050 <_dtoa_r+0x2e8>
 8004e34:	f000 bd32 	b.w	800589c <_dtoa_r+0xb34>
 8004e38:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004e3c:	aa16      	add	r2, sp, #88	@ 0x58
 8004e3e:	a917      	add	r1, sp, #92	@ 0x5c
 8004e40:	4658      	mov	r0, fp
 8004e42:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004e46:	f001 f983 	bl	8006150 <__d2b>
 8004e4a:	4681      	mov	r9, r0
 8004e4c:	2e00      	cmp	r6, #0
 8004e4e:	d075      	beq.n	8004f3c <_dtoa_r+0x1d4>
 8004e50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e52:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004e56:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004e5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e5e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004e62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e66:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	4b74      	ldr	r3, [pc, #464]	@ (8005040 <_dtoa_r+0x2d8>)
 8004e70:	f7fb f9a2 	bl	80001b8 <__aeabi_dsub>
 8004e74:	a368      	add	r3, pc, #416	@ (adr r3, 8005018 <_dtoa_r+0x2b0>)
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	f7fb fb55 	bl	8000528 <__aeabi_dmul>
 8004e7e:	a368      	add	r3, pc, #416	@ (adr r3, 8005020 <_dtoa_r+0x2b8>)
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	f7fb f99a 	bl	80001bc <__adddf3>
 8004e88:	4604      	mov	r4, r0
 8004e8a:	460d      	mov	r5, r1
 8004e8c:	4630      	mov	r0, r6
 8004e8e:	f7fb fae1 	bl	8000454 <__aeabi_i2d>
 8004e92:	a365      	add	r3, pc, #404	@ (adr r3, 8005028 <_dtoa_r+0x2c0>)
 8004e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e98:	f7fb fb46 	bl	8000528 <__aeabi_dmul>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	f7fb f98a 	bl	80001bc <__adddf3>
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	460d      	mov	r5, r1
 8004eac:	f7fb fdec 	bl	8000a88 <__aeabi_d2iz>
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	4607      	mov	r7, r0
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	4629      	mov	r1, r5
 8004eba:	f7fb fda7 	bl	8000a0c <__aeabi_dcmplt>
 8004ebe:	b140      	cbz	r0, 8004ed2 <_dtoa_r+0x16a>
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	f7fb fac7 	bl	8000454 <__aeabi_i2d>
 8004ec6:	4622      	mov	r2, r4
 8004ec8:	462b      	mov	r3, r5
 8004eca:	f7fb fd95 	bl	80009f8 <__aeabi_dcmpeq>
 8004ece:	b900      	cbnz	r0, 8004ed2 <_dtoa_r+0x16a>
 8004ed0:	3f01      	subs	r7, #1
 8004ed2:	2f16      	cmp	r7, #22
 8004ed4:	d851      	bhi.n	8004f7a <_dtoa_r+0x212>
 8004ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8005044 <_dtoa_r+0x2dc>)
 8004ed8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004edc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f7fb fd92 	bl	8000a0c <__aeabi_dcmplt>
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	d048      	beq.n	8004f7e <_dtoa_r+0x216>
 8004eec:	3f01      	subs	r7, #1
 8004eee:	2300      	movs	r3, #0
 8004ef0:	9312      	str	r3, [sp, #72]	@ 0x48
 8004ef2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004ef4:	1b9b      	subs	r3, r3, r6
 8004ef6:	1e5a      	subs	r2, r3, #1
 8004ef8:	bf46      	itte	mi
 8004efa:	f1c3 0801 	rsbmi	r8, r3, #1
 8004efe:	2300      	movmi	r3, #0
 8004f00:	f04f 0800 	movpl.w	r8, #0
 8004f04:	9208      	str	r2, [sp, #32]
 8004f06:	bf48      	it	mi
 8004f08:	9308      	strmi	r3, [sp, #32]
 8004f0a:	2f00      	cmp	r7, #0
 8004f0c:	db39      	blt.n	8004f82 <_dtoa_r+0x21a>
 8004f0e:	9b08      	ldr	r3, [sp, #32]
 8004f10:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004f12:	443b      	add	r3, r7
 8004f14:	9308      	str	r3, [sp, #32]
 8004f16:	2300      	movs	r3, #0
 8004f18:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f1c:	2b09      	cmp	r3, #9
 8004f1e:	d864      	bhi.n	8004fea <_dtoa_r+0x282>
 8004f20:	2b05      	cmp	r3, #5
 8004f22:	bfc5      	ittet	gt
 8004f24:	3b04      	subgt	r3, #4
 8004f26:	2400      	movgt	r4, #0
 8004f28:	2401      	movle	r4, #1
 8004f2a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f2e:	3b02      	subs	r3, #2
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d865      	bhi.n	8005000 <_dtoa_r+0x298>
 8004f34:	e8df f003 	tbb	[pc, r3]
 8004f38:	5737392c 	.word	0x5737392c
 8004f3c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004f40:	441e      	add	r6, r3
 8004f42:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004f46:	2b20      	cmp	r3, #32
 8004f48:	bfc9      	itett	gt
 8004f4a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004f4e:	f1c3 0320 	rsble	r3, r3, #32
 8004f52:	409f      	lslgt	r7, r3
 8004f54:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004f58:	bfd8      	it	le
 8004f5a:	fa04 f003 	lslle.w	r0, r4, r3
 8004f5e:	f106 36ff 	add.w	r6, r6, #4294967295
 8004f62:	bfc4      	itt	gt
 8004f64:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004f68:	ea47 0003 	orrgt.w	r0, r7, r3
 8004f6c:	f7fb fa62 	bl	8000434 <__aeabi_ui2d>
 8004f70:	2201      	movs	r2, #1
 8004f72:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004f76:	9214      	str	r2, [sp, #80]	@ 0x50
 8004f78:	e777      	b.n	8004e6a <_dtoa_r+0x102>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e7b8      	b.n	8004ef0 <_dtoa_r+0x188>
 8004f7e:	9012      	str	r0, [sp, #72]	@ 0x48
 8004f80:	e7b7      	b.n	8004ef2 <_dtoa_r+0x18a>
 8004f82:	427b      	negs	r3, r7
 8004f84:	eba8 0807 	sub.w	r8, r8, r7
 8004f88:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004f8e:	e7c4      	b.n	8004f1a <_dtoa_r+0x1b2>
 8004f90:	2300      	movs	r3, #0
 8004f92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	dc35      	bgt.n	8005006 <_dtoa_r+0x29e>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	9307      	str	r3, [sp, #28]
 8004fa2:	920e      	str	r2, [sp, #56]	@ 0x38
 8004fa4:	e00b      	b.n	8004fbe <_dtoa_r+0x256>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e7f3      	b.n	8004f92 <_dtoa_r+0x22a>
 8004faa:	2300      	movs	r3, #0
 8004fac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fb0:	18fb      	adds	r3, r7, r3
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	9307      	str	r3, [sp, #28]
 8004fba:	bfb8      	it	lt
 8004fbc:	2301      	movlt	r3, #1
 8004fbe:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	f102 0514 	add.w	r5, r2, #20
 8004fca:	429d      	cmp	r5, r3
 8004fcc:	d91f      	bls.n	800500e <_dtoa_r+0x2a6>
 8004fce:	6041      	str	r1, [r0, #4]
 8004fd0:	4658      	mov	r0, fp
 8004fd2:	f000 fd8d 	bl	8005af0 <_Balloc>
 8004fd6:	4682      	mov	sl, r0
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d13b      	bne.n	8005054 <_dtoa_r+0x2ec>
 8004fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8005048 <_dtoa_r+0x2e0>)
 8004fde:	4602      	mov	r2, r0
 8004fe0:	f240 11af 	movw	r1, #431	@ 0x1af
 8004fe4:	e6d7      	b.n	8004d96 <_dtoa_r+0x2e>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e7e0      	b.n	8004fac <_dtoa_r+0x244>
 8004fea:	2401      	movs	r4, #1
 8004fec:	2300      	movs	r3, #0
 8004fee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	9307      	str	r3, [sp, #28]
 8004ffc:	2312      	movs	r3, #18
 8004ffe:	e7d0      	b.n	8004fa2 <_dtoa_r+0x23a>
 8005000:	2301      	movs	r3, #1
 8005002:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005004:	e7f5      	b.n	8004ff2 <_dtoa_r+0x28a>
 8005006:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	9307      	str	r3, [sp, #28]
 800500c:	e7d7      	b.n	8004fbe <_dtoa_r+0x256>
 800500e:	3101      	adds	r1, #1
 8005010:	0052      	lsls	r2, r2, #1
 8005012:	e7d8      	b.n	8004fc6 <_dtoa_r+0x25e>
 8005014:	f3af 8000 	nop.w
 8005018:	636f4361 	.word	0x636f4361
 800501c:	3fd287a7 	.word	0x3fd287a7
 8005020:	8b60c8b3 	.word	0x8b60c8b3
 8005024:	3fc68a28 	.word	0x3fc68a28
 8005028:	509f79fb 	.word	0x509f79fb
 800502c:	3fd34413 	.word	0x3fd34413
 8005030:	08006d95 	.word	0x08006d95
 8005034:	08006dac 	.word	0x08006dac
 8005038:	7ff00000 	.word	0x7ff00000
 800503c:	08006d65 	.word	0x08006d65
 8005040:	3ff80000 	.word	0x3ff80000
 8005044:	08006ea8 	.word	0x08006ea8
 8005048:	08006e04 	.word	0x08006e04
 800504c:	08006d91 	.word	0x08006d91
 8005050:	08006d64 	.word	0x08006d64
 8005054:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005058:	6018      	str	r0, [r3, #0]
 800505a:	9b07      	ldr	r3, [sp, #28]
 800505c:	2b0e      	cmp	r3, #14
 800505e:	f200 80a4 	bhi.w	80051aa <_dtoa_r+0x442>
 8005062:	2c00      	cmp	r4, #0
 8005064:	f000 80a1 	beq.w	80051aa <_dtoa_r+0x442>
 8005068:	2f00      	cmp	r7, #0
 800506a:	dd33      	ble.n	80050d4 <_dtoa_r+0x36c>
 800506c:	f007 020f 	and.w	r2, r7, #15
 8005070:	4bac      	ldr	r3, [pc, #688]	@ (8005324 <_dtoa_r+0x5bc>)
 8005072:	05f8      	lsls	r0, r7, #23
 8005074:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005078:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800507c:	ed93 7b00 	vldr	d7, [r3]
 8005080:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005084:	d516      	bpl.n	80050b4 <_dtoa_r+0x34c>
 8005086:	4ba8      	ldr	r3, [pc, #672]	@ (8005328 <_dtoa_r+0x5c0>)
 8005088:	f004 040f 	and.w	r4, r4, #15
 800508c:	2603      	movs	r6, #3
 800508e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005092:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005096:	f7fb fb71 	bl	800077c <__aeabi_ddiv>
 800509a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800509e:	4da2      	ldr	r5, [pc, #648]	@ (8005328 <_dtoa_r+0x5c0>)
 80050a0:	b954      	cbnz	r4, 80050b8 <_dtoa_r+0x350>
 80050a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050aa:	f7fb fb67 	bl	800077c <__aeabi_ddiv>
 80050ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050b2:	e028      	b.n	8005106 <_dtoa_r+0x39e>
 80050b4:	2602      	movs	r6, #2
 80050b6:	e7f2      	b.n	800509e <_dtoa_r+0x336>
 80050b8:	07e1      	lsls	r1, r4, #31
 80050ba:	d508      	bpl.n	80050ce <_dtoa_r+0x366>
 80050bc:	3601      	adds	r6, #1
 80050be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050c6:	f7fb fa2f 	bl	8000528 <__aeabi_dmul>
 80050ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050ce:	1064      	asrs	r4, r4, #1
 80050d0:	3508      	adds	r5, #8
 80050d2:	e7e5      	b.n	80050a0 <_dtoa_r+0x338>
 80050d4:	f000 80d2 	beq.w	800527c <_dtoa_r+0x514>
 80050d8:	427c      	negs	r4, r7
 80050da:	4b92      	ldr	r3, [pc, #584]	@ (8005324 <_dtoa_r+0x5bc>)
 80050dc:	4d92      	ldr	r5, [pc, #584]	@ (8005328 <_dtoa_r+0x5c0>)
 80050de:	2602      	movs	r6, #2
 80050e0:	f004 020f 	and.w	r2, r4, #15
 80050e4:	1124      	asrs	r4, r4, #4
 80050e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	f7fb fa19 	bl	8000528 <__aeabi_dmul>
 80050f6:	2300      	movs	r3, #0
 80050f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050fc:	2c00      	cmp	r4, #0
 80050fe:	f040 80b2 	bne.w	8005266 <_dtoa_r+0x4fe>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1d3      	bne.n	80050ae <_dtoa_r+0x346>
 8005106:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005108:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 80b7 	beq.w	8005280 <_dtoa_r+0x518>
 8005112:	2200      	movs	r2, #0
 8005114:	4b85      	ldr	r3, [pc, #532]	@ (800532c <_dtoa_r+0x5c4>)
 8005116:	4620      	mov	r0, r4
 8005118:	4629      	mov	r1, r5
 800511a:	f7fb fc77 	bl	8000a0c <__aeabi_dcmplt>
 800511e:	2800      	cmp	r0, #0
 8005120:	f000 80ae 	beq.w	8005280 <_dtoa_r+0x518>
 8005124:	9b07      	ldr	r3, [sp, #28]
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 80aa 	beq.w	8005280 <_dtoa_r+0x518>
 800512c:	9b00      	ldr	r3, [sp, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	dd37      	ble.n	80051a2 <_dtoa_r+0x43a>
 8005132:	1e7b      	subs	r3, r7, #1
 8005134:	4620      	mov	r0, r4
 8005136:	2200      	movs	r2, #0
 8005138:	4629      	mov	r1, r5
 800513a:	9304      	str	r3, [sp, #16]
 800513c:	3601      	adds	r6, #1
 800513e:	4b7c      	ldr	r3, [pc, #496]	@ (8005330 <_dtoa_r+0x5c8>)
 8005140:	f7fb f9f2 	bl	8000528 <__aeabi_dmul>
 8005144:	9c00      	ldr	r4, [sp, #0]
 8005146:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800514a:	4630      	mov	r0, r6
 800514c:	f7fb f982 	bl	8000454 <__aeabi_i2d>
 8005150:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005154:	f7fb f9e8 	bl	8000528 <__aeabi_dmul>
 8005158:	2200      	movs	r2, #0
 800515a:	4b76      	ldr	r3, [pc, #472]	@ (8005334 <_dtoa_r+0x5cc>)
 800515c:	f7fb f82e 	bl	80001bc <__adddf3>
 8005160:	4605      	mov	r5, r0
 8005162:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005166:	2c00      	cmp	r4, #0
 8005168:	f040 808d 	bne.w	8005286 <_dtoa_r+0x51e>
 800516c:	2200      	movs	r2, #0
 800516e:	4b72      	ldr	r3, [pc, #456]	@ (8005338 <_dtoa_r+0x5d0>)
 8005170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005174:	f7fb f820 	bl	80001b8 <__aeabi_dsub>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005180:	462a      	mov	r2, r5
 8005182:	4633      	mov	r3, r6
 8005184:	f7fb fc60 	bl	8000a48 <__aeabi_dcmpgt>
 8005188:	2800      	cmp	r0, #0
 800518a:	f040 828b 	bne.w	80056a4 <_dtoa_r+0x93c>
 800518e:	462a      	mov	r2, r5
 8005190:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005194:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005198:	f7fb fc38 	bl	8000a0c <__aeabi_dcmplt>
 800519c:	2800      	cmp	r0, #0
 800519e:	f040 8128 	bne.w	80053f2 <_dtoa_r+0x68a>
 80051a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80051a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80051aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f2c0 815a 	blt.w	8005466 <_dtoa_r+0x6fe>
 80051b2:	2f0e      	cmp	r7, #14
 80051b4:	f300 8157 	bgt.w	8005466 <_dtoa_r+0x6fe>
 80051b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005324 <_dtoa_r+0x5bc>)
 80051ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80051be:	ed93 7b00 	vldr	d7, [r3]
 80051c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	ed8d 7b00 	vstr	d7, [sp]
 80051ca:	da03      	bge.n	80051d4 <_dtoa_r+0x46c>
 80051cc:	9b07      	ldr	r3, [sp, #28]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f340 8101 	ble.w	80053d6 <_dtoa_r+0x66e>
 80051d4:	4656      	mov	r6, sl
 80051d6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80051da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051de:	4620      	mov	r0, r4
 80051e0:	4629      	mov	r1, r5
 80051e2:	f7fb facb 	bl	800077c <__aeabi_ddiv>
 80051e6:	f7fb fc4f 	bl	8000a88 <__aeabi_d2iz>
 80051ea:	4680      	mov	r8, r0
 80051ec:	f7fb f932 	bl	8000454 <__aeabi_i2d>
 80051f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051f4:	f7fb f998 	bl	8000528 <__aeabi_dmul>
 80051f8:	4602      	mov	r2, r0
 80051fa:	4620      	mov	r0, r4
 80051fc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005200:	460b      	mov	r3, r1
 8005202:	4629      	mov	r1, r5
 8005204:	f7fa ffd8 	bl	80001b8 <__aeabi_dsub>
 8005208:	9d07      	ldr	r5, [sp, #28]
 800520a:	f806 4b01 	strb.w	r4, [r6], #1
 800520e:	eba6 040a 	sub.w	r4, r6, sl
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	42a5      	cmp	r5, r4
 8005218:	f040 8117 	bne.w	800544a <_dtoa_r+0x6e2>
 800521c:	f7fa ffce 	bl	80001bc <__adddf3>
 8005220:	4604      	mov	r4, r0
 8005222:	460d      	mov	r5, r1
 8005224:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005228:	f7fb fc0e 	bl	8000a48 <__aeabi_dcmpgt>
 800522c:	2800      	cmp	r0, #0
 800522e:	f040 80f9 	bne.w	8005424 <_dtoa_r+0x6bc>
 8005232:	4620      	mov	r0, r4
 8005234:	4629      	mov	r1, r5
 8005236:	e9dd 2300 	ldrd	r2, r3, [sp]
 800523a:	f7fb fbdd 	bl	80009f8 <__aeabi_dcmpeq>
 800523e:	b118      	cbz	r0, 8005248 <_dtoa_r+0x4e0>
 8005240:	f018 0f01 	tst.w	r8, #1
 8005244:	f040 80ee 	bne.w	8005424 <_dtoa_r+0x6bc>
 8005248:	4649      	mov	r1, r9
 800524a:	4658      	mov	r0, fp
 800524c:	f000 fc90 	bl	8005b70 <_Bfree>
 8005250:	2300      	movs	r3, #0
 8005252:	3701      	adds	r7, #1
 8005254:	7033      	strb	r3, [r6, #0]
 8005256:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005258:	601f      	str	r7, [r3, #0]
 800525a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 831d 	beq.w	800589c <_dtoa_r+0xb34>
 8005262:	601e      	str	r6, [r3, #0]
 8005264:	e31a      	b.n	800589c <_dtoa_r+0xb34>
 8005266:	07e2      	lsls	r2, r4, #31
 8005268:	d505      	bpl.n	8005276 <_dtoa_r+0x50e>
 800526a:	3601      	adds	r6, #1
 800526c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005270:	f7fb f95a 	bl	8000528 <__aeabi_dmul>
 8005274:	2301      	movs	r3, #1
 8005276:	1064      	asrs	r4, r4, #1
 8005278:	3508      	adds	r5, #8
 800527a:	e73f      	b.n	80050fc <_dtoa_r+0x394>
 800527c:	2602      	movs	r6, #2
 800527e:	e742      	b.n	8005106 <_dtoa_r+0x39e>
 8005280:	9c07      	ldr	r4, [sp, #28]
 8005282:	9704      	str	r7, [sp, #16]
 8005284:	e761      	b.n	800514a <_dtoa_r+0x3e2>
 8005286:	4b27      	ldr	r3, [pc, #156]	@ (8005324 <_dtoa_r+0x5bc>)
 8005288:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800528a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800528e:	4454      	add	r4, sl
 8005290:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005294:	2900      	cmp	r1, #0
 8005296:	d053      	beq.n	8005340 <_dtoa_r+0x5d8>
 8005298:	2000      	movs	r0, #0
 800529a:	4928      	ldr	r1, [pc, #160]	@ (800533c <_dtoa_r+0x5d4>)
 800529c:	f7fb fa6e 	bl	800077c <__aeabi_ddiv>
 80052a0:	4633      	mov	r3, r6
 80052a2:	4656      	mov	r6, sl
 80052a4:	462a      	mov	r2, r5
 80052a6:	f7fa ff87 	bl	80001b8 <__aeabi_dsub>
 80052aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80052ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052b2:	f7fb fbe9 	bl	8000a88 <__aeabi_d2iz>
 80052b6:	4605      	mov	r5, r0
 80052b8:	f7fb f8cc 	bl	8000454 <__aeabi_i2d>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	3530      	adds	r5, #48	@ 0x30
 80052c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052c6:	f7fa ff77 	bl	80001b8 <__aeabi_dsub>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	f806 5b01 	strb.w	r5, [r6], #1
 80052d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80052da:	f7fb fb97 	bl	8000a0c <__aeabi_dcmplt>
 80052de:	2800      	cmp	r0, #0
 80052e0:	d171      	bne.n	80053c6 <_dtoa_r+0x65e>
 80052e2:	2000      	movs	r0, #0
 80052e4:	4911      	ldr	r1, [pc, #68]	@ (800532c <_dtoa_r+0x5c4>)
 80052e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052ea:	f7fa ff65 	bl	80001b8 <__aeabi_dsub>
 80052ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80052f2:	f7fb fb8b 	bl	8000a0c <__aeabi_dcmplt>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	f040 8095 	bne.w	8005426 <_dtoa_r+0x6be>
 80052fc:	42a6      	cmp	r6, r4
 80052fe:	f43f af50 	beq.w	80051a2 <_dtoa_r+0x43a>
 8005302:	2200      	movs	r2, #0
 8005304:	4b0a      	ldr	r3, [pc, #40]	@ (8005330 <_dtoa_r+0x5c8>)
 8005306:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800530a:	f7fb f90d 	bl	8000528 <__aeabi_dmul>
 800530e:	2200      	movs	r2, #0
 8005310:	4b07      	ldr	r3, [pc, #28]	@ (8005330 <_dtoa_r+0x5c8>)
 8005312:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800531a:	f7fb f905 	bl	8000528 <__aeabi_dmul>
 800531e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005322:	e7c4      	b.n	80052ae <_dtoa_r+0x546>
 8005324:	08006ea8 	.word	0x08006ea8
 8005328:	08006e80 	.word	0x08006e80
 800532c:	3ff00000 	.word	0x3ff00000
 8005330:	40240000 	.word	0x40240000
 8005334:	401c0000 	.word	0x401c0000
 8005338:	40140000 	.word	0x40140000
 800533c:	3fe00000 	.word	0x3fe00000
 8005340:	4631      	mov	r1, r6
 8005342:	4656      	mov	r6, sl
 8005344:	4628      	mov	r0, r5
 8005346:	f7fb f8ef 	bl	8000528 <__aeabi_dmul>
 800534a:	9415      	str	r4, [sp, #84]	@ 0x54
 800534c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005354:	f7fb fb98 	bl	8000a88 <__aeabi_d2iz>
 8005358:	4605      	mov	r5, r0
 800535a:	f7fb f87b 	bl	8000454 <__aeabi_i2d>
 800535e:	4602      	mov	r2, r0
 8005360:	3530      	adds	r5, #48	@ 0x30
 8005362:	460b      	mov	r3, r1
 8005364:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005368:	f7fa ff26 	bl	80001b8 <__aeabi_dsub>
 800536c:	f806 5b01 	strb.w	r5, [r6], #1
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	42a6      	cmp	r6, r4
 8005376:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800537a:	f04f 0200 	mov.w	r2, #0
 800537e:	d124      	bne.n	80053ca <_dtoa_r+0x662>
 8005380:	4bac      	ldr	r3, [pc, #688]	@ (8005634 <_dtoa_r+0x8cc>)
 8005382:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005386:	f7fa ff19 	bl	80001bc <__adddf3>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005392:	f7fb fb59 	bl	8000a48 <__aeabi_dcmpgt>
 8005396:	2800      	cmp	r0, #0
 8005398:	d145      	bne.n	8005426 <_dtoa_r+0x6be>
 800539a:	2000      	movs	r0, #0
 800539c:	49a5      	ldr	r1, [pc, #660]	@ (8005634 <_dtoa_r+0x8cc>)
 800539e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80053a2:	f7fa ff09 	bl	80001b8 <__aeabi_dsub>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053ae:	f7fb fb2d 	bl	8000a0c <__aeabi_dcmplt>
 80053b2:	2800      	cmp	r0, #0
 80053b4:	f43f aef5 	beq.w	80051a2 <_dtoa_r+0x43a>
 80053b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80053ba:	1e73      	subs	r3, r6, #1
 80053bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80053be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80053c2:	2b30      	cmp	r3, #48	@ 0x30
 80053c4:	d0f8      	beq.n	80053b8 <_dtoa_r+0x650>
 80053c6:	9f04      	ldr	r7, [sp, #16]
 80053c8:	e73e      	b.n	8005248 <_dtoa_r+0x4e0>
 80053ca:	4b9b      	ldr	r3, [pc, #620]	@ (8005638 <_dtoa_r+0x8d0>)
 80053cc:	f7fb f8ac 	bl	8000528 <__aeabi_dmul>
 80053d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053d4:	e7bc      	b.n	8005350 <_dtoa_r+0x5e8>
 80053d6:	d10c      	bne.n	80053f2 <_dtoa_r+0x68a>
 80053d8:	2200      	movs	r2, #0
 80053da:	4b98      	ldr	r3, [pc, #608]	@ (800563c <_dtoa_r+0x8d4>)
 80053dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053e0:	f7fb f8a2 	bl	8000528 <__aeabi_dmul>
 80053e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053e8:	f7fb fb24 	bl	8000a34 <__aeabi_dcmpge>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	f000 8157 	beq.w	80056a0 <_dtoa_r+0x938>
 80053f2:	2400      	movs	r4, #0
 80053f4:	4625      	mov	r5, r4
 80053f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80053f8:	4656      	mov	r6, sl
 80053fa:	43db      	mvns	r3, r3
 80053fc:	9304      	str	r3, [sp, #16]
 80053fe:	2700      	movs	r7, #0
 8005400:	4621      	mov	r1, r4
 8005402:	4658      	mov	r0, fp
 8005404:	f000 fbb4 	bl	8005b70 <_Bfree>
 8005408:	2d00      	cmp	r5, #0
 800540a:	d0dc      	beq.n	80053c6 <_dtoa_r+0x65e>
 800540c:	b12f      	cbz	r7, 800541a <_dtoa_r+0x6b2>
 800540e:	42af      	cmp	r7, r5
 8005410:	d003      	beq.n	800541a <_dtoa_r+0x6b2>
 8005412:	4639      	mov	r1, r7
 8005414:	4658      	mov	r0, fp
 8005416:	f000 fbab 	bl	8005b70 <_Bfree>
 800541a:	4629      	mov	r1, r5
 800541c:	4658      	mov	r0, fp
 800541e:	f000 fba7 	bl	8005b70 <_Bfree>
 8005422:	e7d0      	b.n	80053c6 <_dtoa_r+0x65e>
 8005424:	9704      	str	r7, [sp, #16]
 8005426:	4633      	mov	r3, r6
 8005428:	461e      	mov	r6, r3
 800542a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800542e:	2a39      	cmp	r2, #57	@ 0x39
 8005430:	d107      	bne.n	8005442 <_dtoa_r+0x6da>
 8005432:	459a      	cmp	sl, r3
 8005434:	d1f8      	bne.n	8005428 <_dtoa_r+0x6c0>
 8005436:	9a04      	ldr	r2, [sp, #16]
 8005438:	3201      	adds	r2, #1
 800543a:	9204      	str	r2, [sp, #16]
 800543c:	2230      	movs	r2, #48	@ 0x30
 800543e:	f88a 2000 	strb.w	r2, [sl]
 8005442:	781a      	ldrb	r2, [r3, #0]
 8005444:	3201      	adds	r2, #1
 8005446:	701a      	strb	r2, [r3, #0]
 8005448:	e7bd      	b.n	80053c6 <_dtoa_r+0x65e>
 800544a:	2200      	movs	r2, #0
 800544c:	4b7a      	ldr	r3, [pc, #488]	@ (8005638 <_dtoa_r+0x8d0>)
 800544e:	f7fb f86b 	bl	8000528 <__aeabi_dmul>
 8005452:	2200      	movs	r2, #0
 8005454:	2300      	movs	r3, #0
 8005456:	4604      	mov	r4, r0
 8005458:	460d      	mov	r5, r1
 800545a:	f7fb facd 	bl	80009f8 <__aeabi_dcmpeq>
 800545e:	2800      	cmp	r0, #0
 8005460:	f43f aebb 	beq.w	80051da <_dtoa_r+0x472>
 8005464:	e6f0      	b.n	8005248 <_dtoa_r+0x4e0>
 8005466:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005468:	2a00      	cmp	r2, #0
 800546a:	f000 80db 	beq.w	8005624 <_dtoa_r+0x8bc>
 800546e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005470:	2a01      	cmp	r2, #1
 8005472:	f300 80bf 	bgt.w	80055f4 <_dtoa_r+0x88c>
 8005476:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005478:	2a00      	cmp	r2, #0
 800547a:	f000 80b7 	beq.w	80055ec <_dtoa_r+0x884>
 800547e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005482:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005484:	4646      	mov	r6, r8
 8005486:	9a08      	ldr	r2, [sp, #32]
 8005488:	2101      	movs	r1, #1
 800548a:	4658      	mov	r0, fp
 800548c:	4498      	add	r8, r3
 800548e:	441a      	add	r2, r3
 8005490:	9208      	str	r2, [sp, #32]
 8005492:	f000 fc23 	bl	8005cdc <__i2b>
 8005496:	4605      	mov	r5, r0
 8005498:	b15e      	cbz	r6, 80054b2 <_dtoa_r+0x74a>
 800549a:	9b08      	ldr	r3, [sp, #32]
 800549c:	2b00      	cmp	r3, #0
 800549e:	dd08      	ble.n	80054b2 <_dtoa_r+0x74a>
 80054a0:	42b3      	cmp	r3, r6
 80054a2:	9a08      	ldr	r2, [sp, #32]
 80054a4:	bfa8      	it	ge
 80054a6:	4633      	movge	r3, r6
 80054a8:	eba8 0803 	sub.w	r8, r8, r3
 80054ac:	1af6      	subs	r6, r6, r3
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	9308      	str	r3, [sp, #32]
 80054b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054b4:	b1f3      	cbz	r3, 80054f4 <_dtoa_r+0x78c>
 80054b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 80b7 	beq.w	800562c <_dtoa_r+0x8c4>
 80054be:	b18c      	cbz	r4, 80054e4 <_dtoa_r+0x77c>
 80054c0:	4629      	mov	r1, r5
 80054c2:	4622      	mov	r2, r4
 80054c4:	4658      	mov	r0, fp
 80054c6:	f000 fcc9 	bl	8005e5c <__pow5mult>
 80054ca:	464a      	mov	r2, r9
 80054cc:	4601      	mov	r1, r0
 80054ce:	4605      	mov	r5, r0
 80054d0:	4658      	mov	r0, fp
 80054d2:	f000 fc19 	bl	8005d08 <__multiply>
 80054d6:	4649      	mov	r1, r9
 80054d8:	9004      	str	r0, [sp, #16]
 80054da:	4658      	mov	r0, fp
 80054dc:	f000 fb48 	bl	8005b70 <_Bfree>
 80054e0:	9b04      	ldr	r3, [sp, #16]
 80054e2:	4699      	mov	r9, r3
 80054e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054e6:	1b1a      	subs	r2, r3, r4
 80054e8:	d004      	beq.n	80054f4 <_dtoa_r+0x78c>
 80054ea:	4649      	mov	r1, r9
 80054ec:	4658      	mov	r0, fp
 80054ee:	f000 fcb5 	bl	8005e5c <__pow5mult>
 80054f2:	4681      	mov	r9, r0
 80054f4:	2101      	movs	r1, #1
 80054f6:	4658      	mov	r0, fp
 80054f8:	f000 fbf0 	bl	8005cdc <__i2b>
 80054fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054fe:	4604      	mov	r4, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 81cf 	beq.w	80058a4 <_dtoa_r+0xb3c>
 8005506:	461a      	mov	r2, r3
 8005508:	4601      	mov	r1, r0
 800550a:	4658      	mov	r0, fp
 800550c:	f000 fca6 	bl	8005e5c <__pow5mult>
 8005510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005512:	4604      	mov	r4, r0
 8005514:	2b01      	cmp	r3, #1
 8005516:	f300 8095 	bgt.w	8005644 <_dtoa_r+0x8dc>
 800551a:	9b02      	ldr	r3, [sp, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f040 8087 	bne.w	8005630 <_dtoa_r+0x8c8>
 8005522:	9b03      	ldr	r3, [sp, #12]
 8005524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005528:	2b00      	cmp	r3, #0
 800552a:	f040 8089 	bne.w	8005640 <_dtoa_r+0x8d8>
 800552e:	9b03      	ldr	r3, [sp, #12]
 8005530:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005534:	0d1b      	lsrs	r3, r3, #20
 8005536:	051b      	lsls	r3, r3, #20
 8005538:	b12b      	cbz	r3, 8005546 <_dtoa_r+0x7de>
 800553a:	9b08      	ldr	r3, [sp, #32]
 800553c:	f108 0801 	add.w	r8, r8, #1
 8005540:	3301      	adds	r3, #1
 8005542:	9308      	str	r3, [sp, #32]
 8005544:	2301      	movs	r3, #1
 8005546:	930a      	str	r3, [sp, #40]	@ 0x28
 8005548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 81b0 	beq.w	80058b0 <_dtoa_r+0xb48>
 8005550:	6923      	ldr	r3, [r4, #16]
 8005552:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005556:	6918      	ldr	r0, [r3, #16]
 8005558:	f000 fb74 	bl	8005c44 <__hi0bits>
 800555c:	f1c0 0020 	rsb	r0, r0, #32
 8005560:	9b08      	ldr	r3, [sp, #32]
 8005562:	4418      	add	r0, r3
 8005564:	f010 001f 	ands.w	r0, r0, #31
 8005568:	d077      	beq.n	800565a <_dtoa_r+0x8f2>
 800556a:	f1c0 0320 	rsb	r3, r0, #32
 800556e:	2b04      	cmp	r3, #4
 8005570:	dd6b      	ble.n	800564a <_dtoa_r+0x8e2>
 8005572:	f1c0 001c 	rsb	r0, r0, #28
 8005576:	9b08      	ldr	r3, [sp, #32]
 8005578:	4480      	add	r8, r0
 800557a:	4403      	add	r3, r0
 800557c:	4406      	add	r6, r0
 800557e:	9308      	str	r3, [sp, #32]
 8005580:	f1b8 0f00 	cmp.w	r8, #0
 8005584:	dd05      	ble.n	8005592 <_dtoa_r+0x82a>
 8005586:	4649      	mov	r1, r9
 8005588:	4642      	mov	r2, r8
 800558a:	4658      	mov	r0, fp
 800558c:	f000 fcc0 	bl	8005f10 <__lshift>
 8005590:	4681      	mov	r9, r0
 8005592:	9b08      	ldr	r3, [sp, #32]
 8005594:	2b00      	cmp	r3, #0
 8005596:	dd05      	ble.n	80055a4 <_dtoa_r+0x83c>
 8005598:	4621      	mov	r1, r4
 800559a:	461a      	mov	r2, r3
 800559c:	4658      	mov	r0, fp
 800559e:	f000 fcb7 	bl	8005f10 <__lshift>
 80055a2:	4604      	mov	r4, r0
 80055a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d059      	beq.n	800565e <_dtoa_r+0x8f6>
 80055aa:	4621      	mov	r1, r4
 80055ac:	4648      	mov	r0, r9
 80055ae:	f000 fd1b 	bl	8005fe8 <__mcmp>
 80055b2:	2800      	cmp	r0, #0
 80055b4:	da53      	bge.n	800565e <_dtoa_r+0x8f6>
 80055b6:	1e7b      	subs	r3, r7, #1
 80055b8:	4649      	mov	r1, r9
 80055ba:	220a      	movs	r2, #10
 80055bc:	4658      	mov	r0, fp
 80055be:	9304      	str	r3, [sp, #16]
 80055c0:	2300      	movs	r3, #0
 80055c2:	f000 faf7 	bl	8005bb4 <__multadd>
 80055c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055c8:	4681      	mov	r9, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 8172 	beq.w	80058b4 <_dtoa_r+0xb4c>
 80055d0:	2300      	movs	r3, #0
 80055d2:	4629      	mov	r1, r5
 80055d4:	220a      	movs	r2, #10
 80055d6:	4658      	mov	r0, fp
 80055d8:	f000 faec 	bl	8005bb4 <__multadd>
 80055dc:	9b00      	ldr	r3, [sp, #0]
 80055de:	4605      	mov	r5, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	dc67      	bgt.n	80056b4 <_dtoa_r+0x94c>
 80055e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	dc41      	bgt.n	800566e <_dtoa_r+0x906>
 80055ea:	e063      	b.n	80056b4 <_dtoa_r+0x94c>
 80055ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80055ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80055f2:	e746      	b.n	8005482 <_dtoa_r+0x71a>
 80055f4:	9b07      	ldr	r3, [sp, #28]
 80055f6:	1e5c      	subs	r4, r3, #1
 80055f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055fa:	42a3      	cmp	r3, r4
 80055fc:	bfb7      	itett	lt
 80055fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005600:	1b1c      	subge	r4, r3, r4
 8005602:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005604:	1ae3      	sublt	r3, r4, r3
 8005606:	bfbe      	ittt	lt
 8005608:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800560a:	2400      	movlt	r4, #0
 800560c:	18d2      	addlt	r2, r2, r3
 800560e:	9b07      	ldr	r3, [sp, #28]
 8005610:	bfb8      	it	lt
 8005612:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005614:	2b00      	cmp	r3, #0
 8005616:	bfb5      	itete	lt
 8005618:	eba8 0603 	sublt.w	r6, r8, r3
 800561c:	4646      	movge	r6, r8
 800561e:	2300      	movlt	r3, #0
 8005620:	9b07      	ldrge	r3, [sp, #28]
 8005622:	e730      	b.n	8005486 <_dtoa_r+0x71e>
 8005624:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005626:	4646      	mov	r6, r8
 8005628:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800562a:	e735      	b.n	8005498 <_dtoa_r+0x730>
 800562c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800562e:	e75c      	b.n	80054ea <_dtoa_r+0x782>
 8005630:	2300      	movs	r3, #0
 8005632:	e788      	b.n	8005546 <_dtoa_r+0x7de>
 8005634:	3fe00000 	.word	0x3fe00000
 8005638:	40240000 	.word	0x40240000
 800563c:	40140000 	.word	0x40140000
 8005640:	9b02      	ldr	r3, [sp, #8]
 8005642:	e780      	b.n	8005546 <_dtoa_r+0x7de>
 8005644:	2300      	movs	r3, #0
 8005646:	930a      	str	r3, [sp, #40]	@ 0x28
 8005648:	e782      	b.n	8005550 <_dtoa_r+0x7e8>
 800564a:	d099      	beq.n	8005580 <_dtoa_r+0x818>
 800564c:	331c      	adds	r3, #28
 800564e:	9a08      	ldr	r2, [sp, #32]
 8005650:	441a      	add	r2, r3
 8005652:	4498      	add	r8, r3
 8005654:	441e      	add	r6, r3
 8005656:	9208      	str	r2, [sp, #32]
 8005658:	e792      	b.n	8005580 <_dtoa_r+0x818>
 800565a:	4603      	mov	r3, r0
 800565c:	e7f6      	b.n	800564c <_dtoa_r+0x8e4>
 800565e:	9b07      	ldr	r3, [sp, #28]
 8005660:	9704      	str	r7, [sp, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	dc20      	bgt.n	80056a8 <_dtoa_r+0x940>
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800566a:	2b02      	cmp	r3, #2
 800566c:	dd1e      	ble.n	80056ac <_dtoa_r+0x944>
 800566e:	9b00      	ldr	r3, [sp, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	f47f aec0 	bne.w	80053f6 <_dtoa_r+0x68e>
 8005676:	4621      	mov	r1, r4
 8005678:	2205      	movs	r2, #5
 800567a:	4658      	mov	r0, fp
 800567c:	f000 fa9a 	bl	8005bb4 <__multadd>
 8005680:	4601      	mov	r1, r0
 8005682:	4604      	mov	r4, r0
 8005684:	4648      	mov	r0, r9
 8005686:	f000 fcaf 	bl	8005fe8 <__mcmp>
 800568a:	2800      	cmp	r0, #0
 800568c:	f77f aeb3 	ble.w	80053f6 <_dtoa_r+0x68e>
 8005690:	2331      	movs	r3, #49	@ 0x31
 8005692:	4656      	mov	r6, sl
 8005694:	f806 3b01 	strb.w	r3, [r6], #1
 8005698:	9b04      	ldr	r3, [sp, #16]
 800569a:	3301      	adds	r3, #1
 800569c:	9304      	str	r3, [sp, #16]
 800569e:	e6ae      	b.n	80053fe <_dtoa_r+0x696>
 80056a0:	9c07      	ldr	r4, [sp, #28]
 80056a2:	9704      	str	r7, [sp, #16]
 80056a4:	4625      	mov	r5, r4
 80056a6:	e7f3      	b.n	8005690 <_dtoa_r+0x928>
 80056a8:	9b07      	ldr	r3, [sp, #28]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 8104 	beq.w	80058bc <_dtoa_r+0xb54>
 80056b4:	2e00      	cmp	r6, #0
 80056b6:	dd05      	ble.n	80056c4 <_dtoa_r+0x95c>
 80056b8:	4629      	mov	r1, r5
 80056ba:	4632      	mov	r2, r6
 80056bc:	4658      	mov	r0, fp
 80056be:	f000 fc27 	bl	8005f10 <__lshift>
 80056c2:	4605      	mov	r5, r0
 80056c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d05a      	beq.n	8005780 <_dtoa_r+0xa18>
 80056ca:	6869      	ldr	r1, [r5, #4]
 80056cc:	4658      	mov	r0, fp
 80056ce:	f000 fa0f 	bl	8005af0 <_Balloc>
 80056d2:	4606      	mov	r6, r0
 80056d4:	b928      	cbnz	r0, 80056e2 <_dtoa_r+0x97a>
 80056d6:	4b84      	ldr	r3, [pc, #528]	@ (80058e8 <_dtoa_r+0xb80>)
 80056d8:	4602      	mov	r2, r0
 80056da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80056de:	f7ff bb5a 	b.w	8004d96 <_dtoa_r+0x2e>
 80056e2:	692a      	ldr	r2, [r5, #16]
 80056e4:	f105 010c 	add.w	r1, r5, #12
 80056e8:	300c      	adds	r0, #12
 80056ea:	3202      	adds	r2, #2
 80056ec:	0092      	lsls	r2, r2, #2
 80056ee:	f000 ffb5 	bl	800665c <memcpy>
 80056f2:	2201      	movs	r2, #1
 80056f4:	4631      	mov	r1, r6
 80056f6:	4658      	mov	r0, fp
 80056f8:	f000 fc0a 	bl	8005f10 <__lshift>
 80056fc:	f10a 0301 	add.w	r3, sl, #1
 8005700:	462f      	mov	r7, r5
 8005702:	4605      	mov	r5, r0
 8005704:	9307      	str	r3, [sp, #28]
 8005706:	9b00      	ldr	r3, [sp, #0]
 8005708:	4453      	add	r3, sl
 800570a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800570c:	9b02      	ldr	r3, [sp, #8]
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	930a      	str	r3, [sp, #40]	@ 0x28
 8005714:	9b07      	ldr	r3, [sp, #28]
 8005716:	4621      	mov	r1, r4
 8005718:	4648      	mov	r0, r9
 800571a:	3b01      	subs	r3, #1
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	f7ff fa94 	bl	8004c4a <quorem>
 8005722:	4639      	mov	r1, r7
 8005724:	9002      	str	r0, [sp, #8]
 8005726:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800572a:	4648      	mov	r0, r9
 800572c:	f000 fc5c 	bl	8005fe8 <__mcmp>
 8005730:	462a      	mov	r2, r5
 8005732:	9008      	str	r0, [sp, #32]
 8005734:	4621      	mov	r1, r4
 8005736:	4658      	mov	r0, fp
 8005738:	f000 fc72 	bl	8006020 <__mdiff>
 800573c:	68c2      	ldr	r2, [r0, #12]
 800573e:	4606      	mov	r6, r0
 8005740:	bb02      	cbnz	r2, 8005784 <_dtoa_r+0xa1c>
 8005742:	4601      	mov	r1, r0
 8005744:	4648      	mov	r0, r9
 8005746:	f000 fc4f 	bl	8005fe8 <__mcmp>
 800574a:	4602      	mov	r2, r0
 800574c:	4631      	mov	r1, r6
 800574e:	4658      	mov	r0, fp
 8005750:	920e      	str	r2, [sp, #56]	@ 0x38
 8005752:	f000 fa0d 	bl	8005b70 <_Bfree>
 8005756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005758:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800575a:	9e07      	ldr	r6, [sp, #28]
 800575c:	ea43 0102 	orr.w	r1, r3, r2
 8005760:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005762:	4319      	orrs	r1, r3
 8005764:	d110      	bne.n	8005788 <_dtoa_r+0xa20>
 8005766:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800576a:	d029      	beq.n	80057c0 <_dtoa_r+0xa58>
 800576c:	9b08      	ldr	r3, [sp, #32]
 800576e:	2b00      	cmp	r3, #0
 8005770:	dd02      	ble.n	8005778 <_dtoa_r+0xa10>
 8005772:	9b02      	ldr	r3, [sp, #8]
 8005774:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005778:	9b00      	ldr	r3, [sp, #0]
 800577a:	f883 8000 	strb.w	r8, [r3]
 800577e:	e63f      	b.n	8005400 <_dtoa_r+0x698>
 8005780:	4628      	mov	r0, r5
 8005782:	e7bb      	b.n	80056fc <_dtoa_r+0x994>
 8005784:	2201      	movs	r2, #1
 8005786:	e7e1      	b.n	800574c <_dtoa_r+0x9e4>
 8005788:	9b08      	ldr	r3, [sp, #32]
 800578a:	2b00      	cmp	r3, #0
 800578c:	db04      	blt.n	8005798 <_dtoa_r+0xa30>
 800578e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005790:	430b      	orrs	r3, r1
 8005792:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005794:	430b      	orrs	r3, r1
 8005796:	d120      	bne.n	80057da <_dtoa_r+0xa72>
 8005798:	2a00      	cmp	r2, #0
 800579a:	dded      	ble.n	8005778 <_dtoa_r+0xa10>
 800579c:	4649      	mov	r1, r9
 800579e:	2201      	movs	r2, #1
 80057a0:	4658      	mov	r0, fp
 80057a2:	f000 fbb5 	bl	8005f10 <__lshift>
 80057a6:	4621      	mov	r1, r4
 80057a8:	4681      	mov	r9, r0
 80057aa:	f000 fc1d 	bl	8005fe8 <__mcmp>
 80057ae:	2800      	cmp	r0, #0
 80057b0:	dc03      	bgt.n	80057ba <_dtoa_r+0xa52>
 80057b2:	d1e1      	bne.n	8005778 <_dtoa_r+0xa10>
 80057b4:	f018 0f01 	tst.w	r8, #1
 80057b8:	d0de      	beq.n	8005778 <_dtoa_r+0xa10>
 80057ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80057be:	d1d8      	bne.n	8005772 <_dtoa_r+0xa0a>
 80057c0:	2339      	movs	r3, #57	@ 0x39
 80057c2:	9a00      	ldr	r2, [sp, #0]
 80057c4:	7013      	strb	r3, [r2, #0]
 80057c6:	4633      	mov	r3, r6
 80057c8:	461e      	mov	r6, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80057d0:	2a39      	cmp	r2, #57	@ 0x39
 80057d2:	d052      	beq.n	800587a <_dtoa_r+0xb12>
 80057d4:	3201      	adds	r2, #1
 80057d6:	701a      	strb	r2, [r3, #0]
 80057d8:	e612      	b.n	8005400 <_dtoa_r+0x698>
 80057da:	2a00      	cmp	r2, #0
 80057dc:	dd07      	ble.n	80057ee <_dtoa_r+0xa86>
 80057de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80057e2:	d0ed      	beq.n	80057c0 <_dtoa_r+0xa58>
 80057e4:	f108 0301 	add.w	r3, r8, #1
 80057e8:	9a00      	ldr	r2, [sp, #0]
 80057ea:	7013      	strb	r3, [r2, #0]
 80057ec:	e608      	b.n	8005400 <_dtoa_r+0x698>
 80057ee:	9b07      	ldr	r3, [sp, #28]
 80057f0:	9a07      	ldr	r2, [sp, #28]
 80057f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80057f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d028      	beq.n	800584e <_dtoa_r+0xae6>
 80057fc:	4649      	mov	r1, r9
 80057fe:	2300      	movs	r3, #0
 8005800:	220a      	movs	r2, #10
 8005802:	4658      	mov	r0, fp
 8005804:	f000 f9d6 	bl	8005bb4 <__multadd>
 8005808:	42af      	cmp	r7, r5
 800580a:	4681      	mov	r9, r0
 800580c:	f04f 0300 	mov.w	r3, #0
 8005810:	f04f 020a 	mov.w	r2, #10
 8005814:	4639      	mov	r1, r7
 8005816:	4658      	mov	r0, fp
 8005818:	d107      	bne.n	800582a <_dtoa_r+0xac2>
 800581a:	f000 f9cb 	bl	8005bb4 <__multadd>
 800581e:	4607      	mov	r7, r0
 8005820:	4605      	mov	r5, r0
 8005822:	9b07      	ldr	r3, [sp, #28]
 8005824:	3301      	adds	r3, #1
 8005826:	9307      	str	r3, [sp, #28]
 8005828:	e774      	b.n	8005714 <_dtoa_r+0x9ac>
 800582a:	f000 f9c3 	bl	8005bb4 <__multadd>
 800582e:	4629      	mov	r1, r5
 8005830:	4607      	mov	r7, r0
 8005832:	2300      	movs	r3, #0
 8005834:	220a      	movs	r2, #10
 8005836:	4658      	mov	r0, fp
 8005838:	f000 f9bc 	bl	8005bb4 <__multadd>
 800583c:	4605      	mov	r5, r0
 800583e:	e7f0      	b.n	8005822 <_dtoa_r+0xaba>
 8005840:	9b00      	ldr	r3, [sp, #0]
 8005842:	2700      	movs	r7, #0
 8005844:	2b00      	cmp	r3, #0
 8005846:	bfcc      	ite	gt
 8005848:	461e      	movgt	r6, r3
 800584a:	2601      	movle	r6, #1
 800584c:	4456      	add	r6, sl
 800584e:	4649      	mov	r1, r9
 8005850:	2201      	movs	r2, #1
 8005852:	4658      	mov	r0, fp
 8005854:	f000 fb5c 	bl	8005f10 <__lshift>
 8005858:	4621      	mov	r1, r4
 800585a:	4681      	mov	r9, r0
 800585c:	f000 fbc4 	bl	8005fe8 <__mcmp>
 8005860:	2800      	cmp	r0, #0
 8005862:	dcb0      	bgt.n	80057c6 <_dtoa_r+0xa5e>
 8005864:	d102      	bne.n	800586c <_dtoa_r+0xb04>
 8005866:	f018 0f01 	tst.w	r8, #1
 800586a:	d1ac      	bne.n	80057c6 <_dtoa_r+0xa5e>
 800586c:	4633      	mov	r3, r6
 800586e:	461e      	mov	r6, r3
 8005870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005874:	2a30      	cmp	r2, #48	@ 0x30
 8005876:	d0fa      	beq.n	800586e <_dtoa_r+0xb06>
 8005878:	e5c2      	b.n	8005400 <_dtoa_r+0x698>
 800587a:	459a      	cmp	sl, r3
 800587c:	d1a4      	bne.n	80057c8 <_dtoa_r+0xa60>
 800587e:	9b04      	ldr	r3, [sp, #16]
 8005880:	3301      	adds	r3, #1
 8005882:	9304      	str	r3, [sp, #16]
 8005884:	2331      	movs	r3, #49	@ 0x31
 8005886:	f88a 3000 	strb.w	r3, [sl]
 800588a:	e5b9      	b.n	8005400 <_dtoa_r+0x698>
 800588c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800588e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80058ec <_dtoa_r+0xb84>
 8005892:	b11b      	cbz	r3, 800589c <_dtoa_r+0xb34>
 8005894:	f10a 0308 	add.w	r3, sl, #8
 8005898:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800589a:	6013      	str	r3, [r2, #0]
 800589c:	4650      	mov	r0, sl
 800589e:	b019      	add	sp, #100	@ 0x64
 80058a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	f77f ae37 	ble.w	800551a <_dtoa_r+0x7b2>
 80058ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80058ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80058b0:	2001      	movs	r0, #1
 80058b2:	e655      	b.n	8005560 <_dtoa_r+0x7f8>
 80058b4:	9b00      	ldr	r3, [sp, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f77f aed6 	ble.w	8005668 <_dtoa_r+0x900>
 80058bc:	4656      	mov	r6, sl
 80058be:	4621      	mov	r1, r4
 80058c0:	4648      	mov	r0, r9
 80058c2:	f7ff f9c2 	bl	8004c4a <quorem>
 80058c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80058ca:	9b00      	ldr	r3, [sp, #0]
 80058cc:	f806 8b01 	strb.w	r8, [r6], #1
 80058d0:	eba6 020a 	sub.w	r2, r6, sl
 80058d4:	4293      	cmp	r3, r2
 80058d6:	ddb3      	ble.n	8005840 <_dtoa_r+0xad8>
 80058d8:	4649      	mov	r1, r9
 80058da:	2300      	movs	r3, #0
 80058dc:	220a      	movs	r2, #10
 80058de:	4658      	mov	r0, fp
 80058e0:	f000 f968 	bl	8005bb4 <__multadd>
 80058e4:	4681      	mov	r9, r0
 80058e6:	e7ea      	b.n	80058be <_dtoa_r+0xb56>
 80058e8:	08006e04 	.word	0x08006e04
 80058ec:	08006d88 	.word	0x08006d88

080058f0 <_free_r>:
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	4605      	mov	r5, r0
 80058f4:	2900      	cmp	r1, #0
 80058f6:	d041      	beq.n	800597c <_free_r+0x8c>
 80058f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058fc:	1f0c      	subs	r4, r1, #4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	bfb8      	it	lt
 8005902:	18e4      	addlt	r4, r4, r3
 8005904:	f000 f8e8 	bl	8005ad8 <__malloc_lock>
 8005908:	4a1d      	ldr	r2, [pc, #116]	@ (8005980 <_free_r+0x90>)
 800590a:	6813      	ldr	r3, [r2, #0]
 800590c:	b933      	cbnz	r3, 800591c <_free_r+0x2c>
 800590e:	6063      	str	r3, [r4, #4]
 8005910:	6014      	str	r4, [r2, #0]
 8005912:	4628      	mov	r0, r5
 8005914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005918:	f000 b8e4 	b.w	8005ae4 <__malloc_unlock>
 800591c:	42a3      	cmp	r3, r4
 800591e:	d908      	bls.n	8005932 <_free_r+0x42>
 8005920:	6820      	ldr	r0, [r4, #0]
 8005922:	1821      	adds	r1, r4, r0
 8005924:	428b      	cmp	r3, r1
 8005926:	bf01      	itttt	eq
 8005928:	6819      	ldreq	r1, [r3, #0]
 800592a:	685b      	ldreq	r3, [r3, #4]
 800592c:	1809      	addeq	r1, r1, r0
 800592e:	6021      	streq	r1, [r4, #0]
 8005930:	e7ed      	b.n	800590e <_free_r+0x1e>
 8005932:	461a      	mov	r2, r3
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	b10b      	cbz	r3, 800593c <_free_r+0x4c>
 8005938:	42a3      	cmp	r3, r4
 800593a:	d9fa      	bls.n	8005932 <_free_r+0x42>
 800593c:	6811      	ldr	r1, [r2, #0]
 800593e:	1850      	adds	r0, r2, r1
 8005940:	42a0      	cmp	r0, r4
 8005942:	d10b      	bne.n	800595c <_free_r+0x6c>
 8005944:	6820      	ldr	r0, [r4, #0]
 8005946:	4401      	add	r1, r0
 8005948:	1850      	adds	r0, r2, r1
 800594a:	6011      	str	r1, [r2, #0]
 800594c:	4283      	cmp	r3, r0
 800594e:	d1e0      	bne.n	8005912 <_free_r+0x22>
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	4408      	add	r0, r1
 8005956:	6053      	str	r3, [r2, #4]
 8005958:	6010      	str	r0, [r2, #0]
 800595a:	e7da      	b.n	8005912 <_free_r+0x22>
 800595c:	d902      	bls.n	8005964 <_free_r+0x74>
 800595e:	230c      	movs	r3, #12
 8005960:	602b      	str	r3, [r5, #0]
 8005962:	e7d6      	b.n	8005912 <_free_r+0x22>
 8005964:	6820      	ldr	r0, [r4, #0]
 8005966:	1821      	adds	r1, r4, r0
 8005968:	428b      	cmp	r3, r1
 800596a:	bf02      	ittt	eq
 800596c:	6819      	ldreq	r1, [r3, #0]
 800596e:	685b      	ldreq	r3, [r3, #4]
 8005970:	1809      	addeq	r1, r1, r0
 8005972:	6063      	str	r3, [r4, #4]
 8005974:	bf08      	it	eq
 8005976:	6021      	streq	r1, [r4, #0]
 8005978:	6054      	str	r4, [r2, #4]
 800597a:	e7ca      	b.n	8005912 <_free_r+0x22>
 800597c:	bd38      	pop	{r3, r4, r5, pc}
 800597e:	bf00      	nop
 8005980:	200003fc 	.word	0x200003fc

08005984 <malloc>:
 8005984:	4b02      	ldr	r3, [pc, #8]	@ (8005990 <malloc+0xc>)
 8005986:	4601      	mov	r1, r0
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	f000 b825 	b.w	80059d8 <_malloc_r>
 800598e:	bf00      	nop
 8005990:	20000018 	.word	0x20000018

08005994 <sbrk_aligned>:
 8005994:	b570      	push	{r4, r5, r6, lr}
 8005996:	4e0f      	ldr	r6, [pc, #60]	@ (80059d4 <sbrk_aligned+0x40>)
 8005998:	460c      	mov	r4, r1
 800599a:	4605      	mov	r5, r0
 800599c:	6831      	ldr	r1, [r6, #0]
 800599e:	b911      	cbnz	r1, 80059a6 <sbrk_aligned+0x12>
 80059a0:	f000 fe4c 	bl	800663c <_sbrk_r>
 80059a4:	6030      	str	r0, [r6, #0]
 80059a6:	4621      	mov	r1, r4
 80059a8:	4628      	mov	r0, r5
 80059aa:	f000 fe47 	bl	800663c <_sbrk_r>
 80059ae:	1c43      	adds	r3, r0, #1
 80059b0:	d103      	bne.n	80059ba <sbrk_aligned+0x26>
 80059b2:	f04f 34ff 	mov.w	r4, #4294967295
 80059b6:	4620      	mov	r0, r4
 80059b8:	bd70      	pop	{r4, r5, r6, pc}
 80059ba:	1cc4      	adds	r4, r0, #3
 80059bc:	f024 0403 	bic.w	r4, r4, #3
 80059c0:	42a0      	cmp	r0, r4
 80059c2:	d0f8      	beq.n	80059b6 <sbrk_aligned+0x22>
 80059c4:	1a21      	subs	r1, r4, r0
 80059c6:	4628      	mov	r0, r5
 80059c8:	f000 fe38 	bl	800663c <_sbrk_r>
 80059cc:	3001      	adds	r0, #1
 80059ce:	d1f2      	bne.n	80059b6 <sbrk_aligned+0x22>
 80059d0:	e7ef      	b.n	80059b2 <sbrk_aligned+0x1e>
 80059d2:	bf00      	nop
 80059d4:	200003f8 	.word	0x200003f8

080059d8 <_malloc_r>:
 80059d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059dc:	1ccd      	adds	r5, r1, #3
 80059de:	4606      	mov	r6, r0
 80059e0:	f025 0503 	bic.w	r5, r5, #3
 80059e4:	3508      	adds	r5, #8
 80059e6:	2d0c      	cmp	r5, #12
 80059e8:	bf38      	it	cc
 80059ea:	250c      	movcc	r5, #12
 80059ec:	2d00      	cmp	r5, #0
 80059ee:	db01      	blt.n	80059f4 <_malloc_r+0x1c>
 80059f0:	42a9      	cmp	r1, r5
 80059f2:	d904      	bls.n	80059fe <_malloc_r+0x26>
 80059f4:	230c      	movs	r3, #12
 80059f6:	6033      	str	r3, [r6, #0]
 80059f8:	2000      	movs	r0, #0
 80059fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ad4 <_malloc_r+0xfc>
 8005a02:	f000 f869 	bl	8005ad8 <__malloc_lock>
 8005a06:	f8d8 3000 	ldr.w	r3, [r8]
 8005a0a:	461c      	mov	r4, r3
 8005a0c:	bb44      	cbnz	r4, 8005a60 <_malloc_r+0x88>
 8005a0e:	4629      	mov	r1, r5
 8005a10:	4630      	mov	r0, r6
 8005a12:	f7ff ffbf 	bl	8005994 <sbrk_aligned>
 8005a16:	1c43      	adds	r3, r0, #1
 8005a18:	4604      	mov	r4, r0
 8005a1a:	d158      	bne.n	8005ace <_malloc_r+0xf6>
 8005a1c:	f8d8 4000 	ldr.w	r4, [r8]
 8005a20:	4627      	mov	r7, r4
 8005a22:	2f00      	cmp	r7, #0
 8005a24:	d143      	bne.n	8005aae <_malloc_r+0xd6>
 8005a26:	2c00      	cmp	r4, #0
 8005a28:	d04b      	beq.n	8005ac2 <_malloc_r+0xea>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	4639      	mov	r1, r7
 8005a2e:	4630      	mov	r0, r6
 8005a30:	eb04 0903 	add.w	r9, r4, r3
 8005a34:	f000 fe02 	bl	800663c <_sbrk_r>
 8005a38:	4581      	cmp	r9, r0
 8005a3a:	d142      	bne.n	8005ac2 <_malloc_r+0xea>
 8005a3c:	6821      	ldr	r1, [r4, #0]
 8005a3e:	4630      	mov	r0, r6
 8005a40:	1a6d      	subs	r5, r5, r1
 8005a42:	4629      	mov	r1, r5
 8005a44:	f7ff ffa6 	bl	8005994 <sbrk_aligned>
 8005a48:	3001      	adds	r0, #1
 8005a4a:	d03a      	beq.n	8005ac2 <_malloc_r+0xea>
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	442b      	add	r3, r5
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	f8d8 3000 	ldr.w	r3, [r8]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	bb62      	cbnz	r2, 8005ab4 <_malloc_r+0xdc>
 8005a5a:	f8c8 7000 	str.w	r7, [r8]
 8005a5e:	e00f      	b.n	8005a80 <_malloc_r+0xa8>
 8005a60:	6822      	ldr	r2, [r4, #0]
 8005a62:	1b52      	subs	r2, r2, r5
 8005a64:	d420      	bmi.n	8005aa8 <_malloc_r+0xd0>
 8005a66:	2a0b      	cmp	r2, #11
 8005a68:	d917      	bls.n	8005a9a <_malloc_r+0xc2>
 8005a6a:	1961      	adds	r1, r4, r5
 8005a6c:	42a3      	cmp	r3, r4
 8005a6e:	6025      	str	r5, [r4, #0]
 8005a70:	bf18      	it	ne
 8005a72:	6059      	strne	r1, [r3, #4]
 8005a74:	6863      	ldr	r3, [r4, #4]
 8005a76:	bf08      	it	eq
 8005a78:	f8c8 1000 	streq.w	r1, [r8]
 8005a7c:	5162      	str	r2, [r4, r5]
 8005a7e:	604b      	str	r3, [r1, #4]
 8005a80:	4630      	mov	r0, r6
 8005a82:	f000 f82f 	bl	8005ae4 <__malloc_unlock>
 8005a86:	f104 000b 	add.w	r0, r4, #11
 8005a8a:	1d23      	adds	r3, r4, #4
 8005a8c:	f020 0007 	bic.w	r0, r0, #7
 8005a90:	1ac2      	subs	r2, r0, r3
 8005a92:	bf1c      	itt	ne
 8005a94:	1a1b      	subne	r3, r3, r0
 8005a96:	50a3      	strne	r3, [r4, r2]
 8005a98:	e7af      	b.n	80059fa <_malloc_r+0x22>
 8005a9a:	6862      	ldr	r2, [r4, #4]
 8005a9c:	42a3      	cmp	r3, r4
 8005a9e:	bf0c      	ite	eq
 8005aa0:	f8c8 2000 	streq.w	r2, [r8]
 8005aa4:	605a      	strne	r2, [r3, #4]
 8005aa6:	e7eb      	b.n	8005a80 <_malloc_r+0xa8>
 8005aa8:	4623      	mov	r3, r4
 8005aaa:	6864      	ldr	r4, [r4, #4]
 8005aac:	e7ae      	b.n	8005a0c <_malloc_r+0x34>
 8005aae:	463c      	mov	r4, r7
 8005ab0:	687f      	ldr	r7, [r7, #4]
 8005ab2:	e7b6      	b.n	8005a22 <_malloc_r+0x4a>
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	42a3      	cmp	r3, r4
 8005aba:	d1fb      	bne.n	8005ab4 <_malloc_r+0xdc>
 8005abc:	2300      	movs	r3, #0
 8005abe:	6053      	str	r3, [r2, #4]
 8005ac0:	e7de      	b.n	8005a80 <_malloc_r+0xa8>
 8005ac2:	230c      	movs	r3, #12
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	6033      	str	r3, [r6, #0]
 8005ac8:	f000 f80c 	bl	8005ae4 <__malloc_unlock>
 8005acc:	e794      	b.n	80059f8 <_malloc_r+0x20>
 8005ace:	6005      	str	r5, [r0, #0]
 8005ad0:	e7d6      	b.n	8005a80 <_malloc_r+0xa8>
 8005ad2:	bf00      	nop
 8005ad4:	200003fc 	.word	0x200003fc

08005ad8 <__malloc_lock>:
 8005ad8:	4801      	ldr	r0, [pc, #4]	@ (8005ae0 <__malloc_lock+0x8>)
 8005ada:	f7ff b8a6 	b.w	8004c2a <__retarget_lock_acquire_recursive>
 8005ade:	bf00      	nop
 8005ae0:	200003f4 	.word	0x200003f4

08005ae4 <__malloc_unlock>:
 8005ae4:	4801      	ldr	r0, [pc, #4]	@ (8005aec <__malloc_unlock+0x8>)
 8005ae6:	f7ff b8a1 	b.w	8004c2c <__retarget_lock_release_recursive>
 8005aea:	bf00      	nop
 8005aec:	200003f4 	.word	0x200003f4

08005af0 <_Balloc>:
 8005af0:	b570      	push	{r4, r5, r6, lr}
 8005af2:	69c6      	ldr	r6, [r0, #28]
 8005af4:	4604      	mov	r4, r0
 8005af6:	460d      	mov	r5, r1
 8005af8:	b976      	cbnz	r6, 8005b18 <_Balloc+0x28>
 8005afa:	2010      	movs	r0, #16
 8005afc:	f7ff ff42 	bl	8005984 <malloc>
 8005b00:	4602      	mov	r2, r0
 8005b02:	61e0      	str	r0, [r4, #28]
 8005b04:	b920      	cbnz	r0, 8005b10 <_Balloc+0x20>
 8005b06:	4b18      	ldr	r3, [pc, #96]	@ (8005b68 <_Balloc+0x78>)
 8005b08:	216b      	movs	r1, #107	@ 0x6b
 8005b0a:	4818      	ldr	r0, [pc, #96]	@ (8005b6c <_Balloc+0x7c>)
 8005b0c:	f000 fdb4 	bl	8006678 <__assert_func>
 8005b10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b14:	6006      	str	r6, [r0, #0]
 8005b16:	60c6      	str	r6, [r0, #12]
 8005b18:	69e6      	ldr	r6, [r4, #28]
 8005b1a:	68f3      	ldr	r3, [r6, #12]
 8005b1c:	b183      	cbz	r3, 8005b40 <_Balloc+0x50>
 8005b1e:	69e3      	ldr	r3, [r4, #28]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b26:	b9b8      	cbnz	r0, 8005b58 <_Balloc+0x68>
 8005b28:	2101      	movs	r1, #1
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	fa01 f605 	lsl.w	r6, r1, r5
 8005b30:	1d72      	adds	r2, r6, #5
 8005b32:	0092      	lsls	r2, r2, #2
 8005b34:	f000 fdbe 	bl	80066b4 <_calloc_r>
 8005b38:	b160      	cbz	r0, 8005b54 <_Balloc+0x64>
 8005b3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005b3e:	e00e      	b.n	8005b5e <_Balloc+0x6e>
 8005b40:	2221      	movs	r2, #33	@ 0x21
 8005b42:	2104      	movs	r1, #4
 8005b44:	4620      	mov	r0, r4
 8005b46:	f000 fdb5 	bl	80066b4 <_calloc_r>
 8005b4a:	69e3      	ldr	r3, [r4, #28]
 8005b4c:	60f0      	str	r0, [r6, #12]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1e4      	bne.n	8005b1e <_Balloc+0x2e>
 8005b54:	2000      	movs	r0, #0
 8005b56:	bd70      	pop	{r4, r5, r6, pc}
 8005b58:	6802      	ldr	r2, [r0, #0]
 8005b5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b64:	e7f7      	b.n	8005b56 <_Balloc+0x66>
 8005b66:	bf00      	nop
 8005b68:	08006d95 	.word	0x08006d95
 8005b6c:	08006e15 	.word	0x08006e15

08005b70 <_Bfree>:
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	69c6      	ldr	r6, [r0, #28]
 8005b74:	4605      	mov	r5, r0
 8005b76:	460c      	mov	r4, r1
 8005b78:	b976      	cbnz	r6, 8005b98 <_Bfree+0x28>
 8005b7a:	2010      	movs	r0, #16
 8005b7c:	f7ff ff02 	bl	8005984 <malloc>
 8005b80:	4602      	mov	r2, r0
 8005b82:	61e8      	str	r0, [r5, #28]
 8005b84:	b920      	cbnz	r0, 8005b90 <_Bfree+0x20>
 8005b86:	4b09      	ldr	r3, [pc, #36]	@ (8005bac <_Bfree+0x3c>)
 8005b88:	218f      	movs	r1, #143	@ 0x8f
 8005b8a:	4809      	ldr	r0, [pc, #36]	@ (8005bb0 <_Bfree+0x40>)
 8005b8c:	f000 fd74 	bl	8006678 <__assert_func>
 8005b90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b94:	6006      	str	r6, [r0, #0]
 8005b96:	60c6      	str	r6, [r0, #12]
 8005b98:	b13c      	cbz	r4, 8005baa <_Bfree+0x3a>
 8005b9a:	69eb      	ldr	r3, [r5, #28]
 8005b9c:	6862      	ldr	r2, [r4, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ba4:	6021      	str	r1, [r4, #0]
 8005ba6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
 8005bac:	08006d95 	.word	0x08006d95
 8005bb0:	08006e15 	.word	0x08006e15

08005bb4 <__multadd>:
 8005bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb8:	f101 0c14 	add.w	ip, r1, #20
 8005bbc:	4607      	mov	r7, r0
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	461e      	mov	r6, r3
 8005bc2:	690d      	ldr	r5, [r1, #16]
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	f8dc 3000 	ldr.w	r3, [ip]
 8005bca:	3001      	adds	r0, #1
 8005bcc:	b299      	uxth	r1, r3
 8005bce:	4285      	cmp	r5, r0
 8005bd0:	fb02 6101 	mla	r1, r2, r1, r6
 8005bd4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005bd8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8005bdc:	b289      	uxth	r1, r1
 8005bde:	fb02 3306 	mla	r3, r2, r6, r3
 8005be2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005be6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005bea:	f84c 1b04 	str.w	r1, [ip], #4
 8005bee:	dcea      	bgt.n	8005bc6 <__multadd+0x12>
 8005bf0:	b30e      	cbz	r6, 8005c36 <__multadd+0x82>
 8005bf2:	68a3      	ldr	r3, [r4, #8]
 8005bf4:	42ab      	cmp	r3, r5
 8005bf6:	dc19      	bgt.n	8005c2c <__multadd+0x78>
 8005bf8:	6861      	ldr	r1, [r4, #4]
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	3101      	adds	r1, #1
 8005bfe:	f7ff ff77 	bl	8005af0 <_Balloc>
 8005c02:	4680      	mov	r8, r0
 8005c04:	b928      	cbnz	r0, 8005c12 <__multadd+0x5e>
 8005c06:	4602      	mov	r2, r0
 8005c08:	4b0c      	ldr	r3, [pc, #48]	@ (8005c3c <__multadd+0x88>)
 8005c0a:	21ba      	movs	r1, #186	@ 0xba
 8005c0c:	480c      	ldr	r0, [pc, #48]	@ (8005c40 <__multadd+0x8c>)
 8005c0e:	f000 fd33 	bl	8006678 <__assert_func>
 8005c12:	6922      	ldr	r2, [r4, #16]
 8005c14:	f104 010c 	add.w	r1, r4, #12
 8005c18:	300c      	adds	r0, #12
 8005c1a:	3202      	adds	r2, #2
 8005c1c:	0092      	lsls	r2, r2, #2
 8005c1e:	f000 fd1d 	bl	800665c <memcpy>
 8005c22:	4621      	mov	r1, r4
 8005c24:	4644      	mov	r4, r8
 8005c26:	4638      	mov	r0, r7
 8005c28:	f7ff ffa2 	bl	8005b70 <_Bfree>
 8005c2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c30:	3501      	adds	r5, #1
 8005c32:	615e      	str	r6, [r3, #20]
 8005c34:	6125      	str	r5, [r4, #16]
 8005c36:	4620      	mov	r0, r4
 8005c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c3c:	08006e04 	.word	0x08006e04
 8005c40:	08006e15 	.word	0x08006e15

08005c44 <__hi0bits>:
 8005c44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005c48:	4603      	mov	r3, r0
 8005c4a:	bf36      	itet	cc
 8005c4c:	0403      	lslcc	r3, r0, #16
 8005c4e:	2000      	movcs	r0, #0
 8005c50:	2010      	movcc	r0, #16
 8005c52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c56:	bf3c      	itt	cc
 8005c58:	021b      	lslcc	r3, r3, #8
 8005c5a:	3008      	addcc	r0, #8
 8005c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c60:	bf3c      	itt	cc
 8005c62:	011b      	lslcc	r3, r3, #4
 8005c64:	3004      	addcc	r0, #4
 8005c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c6a:	bf3c      	itt	cc
 8005c6c:	009b      	lslcc	r3, r3, #2
 8005c6e:	3002      	addcc	r0, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	db05      	blt.n	8005c80 <__hi0bits+0x3c>
 8005c74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005c78:	f100 0001 	add.w	r0, r0, #1
 8005c7c:	bf08      	it	eq
 8005c7e:	2020      	moveq	r0, #32
 8005c80:	4770      	bx	lr

08005c82 <__lo0bits>:
 8005c82:	6803      	ldr	r3, [r0, #0]
 8005c84:	4602      	mov	r2, r0
 8005c86:	f013 0007 	ands.w	r0, r3, #7
 8005c8a:	d00b      	beq.n	8005ca4 <__lo0bits+0x22>
 8005c8c:	07d9      	lsls	r1, r3, #31
 8005c8e:	d421      	bmi.n	8005cd4 <__lo0bits+0x52>
 8005c90:	0798      	lsls	r0, r3, #30
 8005c92:	bf47      	ittee	mi
 8005c94:	085b      	lsrmi	r3, r3, #1
 8005c96:	2001      	movmi	r0, #1
 8005c98:	089b      	lsrpl	r3, r3, #2
 8005c9a:	2002      	movpl	r0, #2
 8005c9c:	bf4c      	ite	mi
 8005c9e:	6013      	strmi	r3, [r2, #0]
 8005ca0:	6013      	strpl	r3, [r2, #0]
 8005ca2:	4770      	bx	lr
 8005ca4:	b299      	uxth	r1, r3
 8005ca6:	b909      	cbnz	r1, 8005cac <__lo0bits+0x2a>
 8005ca8:	0c1b      	lsrs	r3, r3, #16
 8005caa:	2010      	movs	r0, #16
 8005cac:	b2d9      	uxtb	r1, r3
 8005cae:	b909      	cbnz	r1, 8005cb4 <__lo0bits+0x32>
 8005cb0:	3008      	adds	r0, #8
 8005cb2:	0a1b      	lsrs	r3, r3, #8
 8005cb4:	0719      	lsls	r1, r3, #28
 8005cb6:	bf04      	itt	eq
 8005cb8:	091b      	lsreq	r3, r3, #4
 8005cba:	3004      	addeq	r0, #4
 8005cbc:	0799      	lsls	r1, r3, #30
 8005cbe:	bf04      	itt	eq
 8005cc0:	089b      	lsreq	r3, r3, #2
 8005cc2:	3002      	addeq	r0, #2
 8005cc4:	07d9      	lsls	r1, r3, #31
 8005cc6:	d403      	bmi.n	8005cd0 <__lo0bits+0x4e>
 8005cc8:	085b      	lsrs	r3, r3, #1
 8005cca:	f100 0001 	add.w	r0, r0, #1
 8005cce:	d003      	beq.n	8005cd8 <__lo0bits+0x56>
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	4770      	bx	lr
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	4770      	bx	lr
 8005cd8:	2020      	movs	r0, #32
 8005cda:	4770      	bx	lr

08005cdc <__i2b>:
 8005cdc:	b510      	push	{r4, lr}
 8005cde:	460c      	mov	r4, r1
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	f7ff ff05 	bl	8005af0 <_Balloc>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	b928      	cbnz	r0, 8005cf6 <__i2b+0x1a>
 8005cea:	4b05      	ldr	r3, [pc, #20]	@ (8005d00 <__i2b+0x24>)
 8005cec:	f240 1145 	movw	r1, #325	@ 0x145
 8005cf0:	4804      	ldr	r0, [pc, #16]	@ (8005d04 <__i2b+0x28>)
 8005cf2:	f000 fcc1 	bl	8006678 <__assert_func>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	6144      	str	r4, [r0, #20]
 8005cfa:	6103      	str	r3, [r0, #16]
 8005cfc:	bd10      	pop	{r4, pc}
 8005cfe:	bf00      	nop
 8005d00:	08006e04 	.word	0x08006e04
 8005d04:	08006e15 	.word	0x08006e15

08005d08 <__multiply>:
 8005d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0c:	4614      	mov	r4, r2
 8005d0e:	690a      	ldr	r2, [r1, #16]
 8005d10:	460f      	mov	r7, r1
 8005d12:	b085      	sub	sp, #20
 8005d14:	6923      	ldr	r3, [r4, #16]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	bfa2      	ittt	ge
 8005d1a:	4623      	movge	r3, r4
 8005d1c:	460c      	movge	r4, r1
 8005d1e:	461f      	movge	r7, r3
 8005d20:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005d24:	68a3      	ldr	r3, [r4, #8]
 8005d26:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005d2a:	6861      	ldr	r1, [r4, #4]
 8005d2c:	eb0a 0609 	add.w	r6, sl, r9
 8005d30:	42b3      	cmp	r3, r6
 8005d32:	bfb8      	it	lt
 8005d34:	3101      	addlt	r1, #1
 8005d36:	f7ff fedb 	bl	8005af0 <_Balloc>
 8005d3a:	b930      	cbnz	r0, 8005d4a <__multiply+0x42>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	4b45      	ldr	r3, [pc, #276]	@ (8005e54 <__multiply+0x14c>)
 8005d40:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005d44:	4844      	ldr	r0, [pc, #272]	@ (8005e58 <__multiply+0x150>)
 8005d46:	f000 fc97 	bl	8006678 <__assert_func>
 8005d4a:	f100 0514 	add.w	r5, r0, #20
 8005d4e:	2200      	movs	r2, #0
 8005d50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005d54:	462b      	mov	r3, r5
 8005d56:	4543      	cmp	r3, r8
 8005d58:	d321      	bcc.n	8005d9e <__multiply+0x96>
 8005d5a:	f107 0114 	add.w	r1, r7, #20
 8005d5e:	f104 0214 	add.w	r2, r4, #20
 8005d62:	f104 0715 	add.w	r7, r4, #21
 8005d66:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005d6a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005d6e:	9302      	str	r3, [sp, #8]
 8005d70:	1b13      	subs	r3, r2, r4
 8005d72:	3b15      	subs	r3, #21
 8005d74:	f023 0303 	bic.w	r3, r3, #3
 8005d78:	3304      	adds	r3, #4
 8005d7a:	42ba      	cmp	r2, r7
 8005d7c:	bf38      	it	cc
 8005d7e:	2304      	movcc	r3, #4
 8005d80:	9301      	str	r3, [sp, #4]
 8005d82:	9b02      	ldr	r3, [sp, #8]
 8005d84:	9103      	str	r1, [sp, #12]
 8005d86:	428b      	cmp	r3, r1
 8005d88:	d80c      	bhi.n	8005da4 <__multiply+0x9c>
 8005d8a:	2e00      	cmp	r6, #0
 8005d8c:	dd03      	ble.n	8005d96 <__multiply+0x8e>
 8005d8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d05b      	beq.n	8005e4e <__multiply+0x146>
 8005d96:	6106      	str	r6, [r0, #16]
 8005d98:	b005      	add	sp, #20
 8005d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9e:	f843 2b04 	str.w	r2, [r3], #4
 8005da2:	e7d8      	b.n	8005d56 <__multiply+0x4e>
 8005da4:	f8b1 a000 	ldrh.w	sl, [r1]
 8005da8:	f1ba 0f00 	cmp.w	sl, #0
 8005dac:	d024      	beq.n	8005df8 <__multiply+0xf0>
 8005dae:	f104 0e14 	add.w	lr, r4, #20
 8005db2:	46a9      	mov	r9, r5
 8005db4:	f04f 0c00 	mov.w	ip, #0
 8005db8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005dbc:	f8d9 3000 	ldr.w	r3, [r9]
 8005dc0:	fa1f fb87 	uxth.w	fp, r7
 8005dc4:	4572      	cmp	r2, lr
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	fb0a 330b 	mla	r3, sl, fp, r3
 8005dcc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005dd0:	f8d9 7000 	ldr.w	r7, [r9]
 8005dd4:	4463      	add	r3, ip
 8005dd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005dda:	fb0a c70b 	mla	r7, sl, fp, ip
 8005dde:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005de8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005dec:	f849 3b04 	str.w	r3, [r9], #4
 8005df0:	d8e2      	bhi.n	8005db8 <__multiply+0xb0>
 8005df2:	9b01      	ldr	r3, [sp, #4]
 8005df4:	f845 c003 	str.w	ip, [r5, r3]
 8005df8:	9b03      	ldr	r3, [sp, #12]
 8005dfa:	3104      	adds	r1, #4
 8005dfc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005e00:	f1b9 0f00 	cmp.w	r9, #0
 8005e04:	d021      	beq.n	8005e4a <__multiply+0x142>
 8005e06:	682b      	ldr	r3, [r5, #0]
 8005e08:	f104 0c14 	add.w	ip, r4, #20
 8005e0c:	46ae      	mov	lr, r5
 8005e0e:	f04f 0a00 	mov.w	sl, #0
 8005e12:	f8bc b000 	ldrh.w	fp, [ip]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005e1c:	fb09 770b 	mla	r7, r9, fp, r7
 8005e20:	4457      	add	r7, sl
 8005e22:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005e26:	f84e 3b04 	str.w	r3, [lr], #4
 8005e2a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005e2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e32:	f8be 3000 	ldrh.w	r3, [lr]
 8005e36:	4562      	cmp	r2, ip
 8005e38:	fb09 330a 	mla	r3, r9, sl, r3
 8005e3c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005e40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e44:	d8e5      	bhi.n	8005e12 <__multiply+0x10a>
 8005e46:	9f01      	ldr	r7, [sp, #4]
 8005e48:	51eb      	str	r3, [r5, r7]
 8005e4a:	3504      	adds	r5, #4
 8005e4c:	e799      	b.n	8005d82 <__multiply+0x7a>
 8005e4e:	3e01      	subs	r6, #1
 8005e50:	e79b      	b.n	8005d8a <__multiply+0x82>
 8005e52:	bf00      	nop
 8005e54:	08006e04 	.word	0x08006e04
 8005e58:	08006e15 	.word	0x08006e15

08005e5c <__pow5mult>:
 8005e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e60:	4615      	mov	r5, r2
 8005e62:	f012 0203 	ands.w	r2, r2, #3
 8005e66:	4607      	mov	r7, r0
 8005e68:	460e      	mov	r6, r1
 8005e6a:	d007      	beq.n	8005e7c <__pow5mult+0x20>
 8005e6c:	3a01      	subs	r2, #1
 8005e6e:	4c25      	ldr	r4, [pc, #148]	@ (8005f04 <__pow5mult+0xa8>)
 8005e70:	2300      	movs	r3, #0
 8005e72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e76:	f7ff fe9d 	bl	8005bb4 <__multadd>
 8005e7a:	4606      	mov	r6, r0
 8005e7c:	10ad      	asrs	r5, r5, #2
 8005e7e:	d03d      	beq.n	8005efc <__pow5mult+0xa0>
 8005e80:	69fc      	ldr	r4, [r7, #28]
 8005e82:	b97c      	cbnz	r4, 8005ea4 <__pow5mult+0x48>
 8005e84:	2010      	movs	r0, #16
 8005e86:	f7ff fd7d 	bl	8005984 <malloc>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	61f8      	str	r0, [r7, #28]
 8005e8e:	b928      	cbnz	r0, 8005e9c <__pow5mult+0x40>
 8005e90:	4b1d      	ldr	r3, [pc, #116]	@ (8005f08 <__pow5mult+0xac>)
 8005e92:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005e96:	481d      	ldr	r0, [pc, #116]	@ (8005f0c <__pow5mult+0xb0>)
 8005e98:	f000 fbee 	bl	8006678 <__assert_func>
 8005e9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ea0:	6004      	str	r4, [r0, #0]
 8005ea2:	60c4      	str	r4, [r0, #12]
 8005ea4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005ea8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005eac:	b94c      	cbnz	r4, 8005ec2 <__pow5mult+0x66>
 8005eae:	f240 2171 	movw	r1, #625	@ 0x271
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	f7ff ff12 	bl	8005cdc <__i2b>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	4604      	mov	r4, r0
 8005ebc:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ec0:	6003      	str	r3, [r0, #0]
 8005ec2:	f04f 0900 	mov.w	r9, #0
 8005ec6:	07eb      	lsls	r3, r5, #31
 8005ec8:	d50a      	bpl.n	8005ee0 <__pow5mult+0x84>
 8005eca:	4631      	mov	r1, r6
 8005ecc:	4622      	mov	r2, r4
 8005ece:	4638      	mov	r0, r7
 8005ed0:	f7ff ff1a 	bl	8005d08 <__multiply>
 8005ed4:	4680      	mov	r8, r0
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	4638      	mov	r0, r7
 8005eda:	4646      	mov	r6, r8
 8005edc:	f7ff fe48 	bl	8005b70 <_Bfree>
 8005ee0:	106d      	asrs	r5, r5, #1
 8005ee2:	d00b      	beq.n	8005efc <__pow5mult+0xa0>
 8005ee4:	6820      	ldr	r0, [r4, #0]
 8005ee6:	b938      	cbnz	r0, 8005ef8 <__pow5mult+0x9c>
 8005ee8:	4622      	mov	r2, r4
 8005eea:	4621      	mov	r1, r4
 8005eec:	4638      	mov	r0, r7
 8005eee:	f7ff ff0b 	bl	8005d08 <__multiply>
 8005ef2:	6020      	str	r0, [r4, #0]
 8005ef4:	f8c0 9000 	str.w	r9, [r0]
 8005ef8:	4604      	mov	r4, r0
 8005efa:	e7e4      	b.n	8005ec6 <__pow5mult+0x6a>
 8005efc:	4630      	mov	r0, r6
 8005efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f02:	bf00      	nop
 8005f04:	08006e70 	.word	0x08006e70
 8005f08:	08006d95 	.word	0x08006d95
 8005f0c:	08006e15 	.word	0x08006e15

08005f10 <__lshift>:
 8005f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f14:	460c      	mov	r4, r1
 8005f16:	4607      	mov	r7, r0
 8005f18:	4691      	mov	r9, r2
 8005f1a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f1e:	6923      	ldr	r3, [r4, #16]
 8005f20:	6849      	ldr	r1, [r1, #4]
 8005f22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f26:	68a3      	ldr	r3, [r4, #8]
 8005f28:	f108 0601 	add.w	r6, r8, #1
 8005f2c:	42b3      	cmp	r3, r6
 8005f2e:	db0b      	blt.n	8005f48 <__lshift+0x38>
 8005f30:	4638      	mov	r0, r7
 8005f32:	f7ff fddd 	bl	8005af0 <_Balloc>
 8005f36:	4605      	mov	r5, r0
 8005f38:	b948      	cbnz	r0, 8005f4e <__lshift+0x3e>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	4b28      	ldr	r3, [pc, #160]	@ (8005fe0 <__lshift+0xd0>)
 8005f3e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005f42:	4828      	ldr	r0, [pc, #160]	@ (8005fe4 <__lshift+0xd4>)
 8005f44:	f000 fb98 	bl	8006678 <__assert_func>
 8005f48:	3101      	adds	r1, #1
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	e7ee      	b.n	8005f2c <__lshift+0x1c>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f100 0114 	add.w	r1, r0, #20
 8005f54:	f100 0210 	add.w	r2, r0, #16
 8005f58:	4618      	mov	r0, r3
 8005f5a:	4553      	cmp	r3, sl
 8005f5c:	db33      	blt.n	8005fc6 <__lshift+0xb6>
 8005f5e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f62:	f104 0314 	add.w	r3, r4, #20
 8005f66:	6920      	ldr	r0, [r4, #16]
 8005f68:	f019 091f 	ands.w	r9, r9, #31
 8005f6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f74:	d02b      	beq.n	8005fce <__lshift+0xbe>
 8005f76:	f1c9 0e20 	rsb	lr, r9, #32
 8005f7a:	468a      	mov	sl, r1
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	6818      	ldr	r0, [r3, #0]
 8005f80:	fa00 f009 	lsl.w	r0, r0, r9
 8005f84:	4310      	orrs	r0, r2
 8005f86:	f84a 0b04 	str.w	r0, [sl], #4
 8005f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f8e:	459c      	cmp	ip, r3
 8005f90:	fa22 f20e 	lsr.w	r2, r2, lr
 8005f94:	d8f3      	bhi.n	8005f7e <__lshift+0x6e>
 8005f96:	ebac 0304 	sub.w	r3, ip, r4
 8005f9a:	f104 0015 	add.w	r0, r4, #21
 8005f9e:	3b15      	subs	r3, #21
 8005fa0:	f023 0303 	bic.w	r3, r3, #3
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	4584      	cmp	ip, r0
 8005fa8:	bf38      	it	cc
 8005faa:	2304      	movcc	r3, #4
 8005fac:	50ca      	str	r2, [r1, r3]
 8005fae:	b10a      	cbz	r2, 8005fb4 <__lshift+0xa4>
 8005fb0:	f108 0602 	add.w	r6, r8, #2
 8005fb4:	3e01      	subs	r6, #1
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	4621      	mov	r1, r4
 8005fba:	612e      	str	r6, [r5, #16]
 8005fbc:	f7ff fdd8 	bl	8005b70 <_Bfree>
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	f842 0f04 	str.w	r0, [r2, #4]!
 8005fcc:	e7c5      	b.n	8005f5a <__lshift+0x4a>
 8005fce:	3904      	subs	r1, #4
 8005fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fd4:	459c      	cmp	ip, r3
 8005fd6:	f841 2f04 	str.w	r2, [r1, #4]!
 8005fda:	d8f9      	bhi.n	8005fd0 <__lshift+0xc0>
 8005fdc:	e7ea      	b.n	8005fb4 <__lshift+0xa4>
 8005fde:	bf00      	nop
 8005fe0:	08006e04 	.word	0x08006e04
 8005fe4:	08006e15 	.word	0x08006e15

08005fe8 <__mcmp>:
 8005fe8:	4603      	mov	r3, r0
 8005fea:	690a      	ldr	r2, [r1, #16]
 8005fec:	6900      	ldr	r0, [r0, #16]
 8005fee:	1a80      	subs	r0, r0, r2
 8005ff0:	b530      	push	{r4, r5, lr}
 8005ff2:	d10e      	bne.n	8006012 <__mcmp+0x2a>
 8005ff4:	3314      	adds	r3, #20
 8005ff6:	3114      	adds	r1, #20
 8005ff8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005ffc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006000:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006004:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006008:	4295      	cmp	r5, r2
 800600a:	d003      	beq.n	8006014 <__mcmp+0x2c>
 800600c:	d205      	bcs.n	800601a <__mcmp+0x32>
 800600e:	f04f 30ff 	mov.w	r0, #4294967295
 8006012:	bd30      	pop	{r4, r5, pc}
 8006014:	42a3      	cmp	r3, r4
 8006016:	d3f3      	bcc.n	8006000 <__mcmp+0x18>
 8006018:	e7fb      	b.n	8006012 <__mcmp+0x2a>
 800601a:	2001      	movs	r0, #1
 800601c:	e7f9      	b.n	8006012 <__mcmp+0x2a>
	...

08006020 <__mdiff>:
 8006020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006024:	4689      	mov	r9, r1
 8006026:	4606      	mov	r6, r0
 8006028:	4611      	mov	r1, r2
 800602a:	4614      	mov	r4, r2
 800602c:	4648      	mov	r0, r9
 800602e:	f7ff ffdb 	bl	8005fe8 <__mcmp>
 8006032:	1e05      	subs	r5, r0, #0
 8006034:	d112      	bne.n	800605c <__mdiff+0x3c>
 8006036:	4629      	mov	r1, r5
 8006038:	4630      	mov	r0, r6
 800603a:	f7ff fd59 	bl	8005af0 <_Balloc>
 800603e:	4602      	mov	r2, r0
 8006040:	b928      	cbnz	r0, 800604e <__mdiff+0x2e>
 8006042:	4b41      	ldr	r3, [pc, #260]	@ (8006148 <__mdiff+0x128>)
 8006044:	f240 2137 	movw	r1, #567	@ 0x237
 8006048:	4840      	ldr	r0, [pc, #256]	@ (800614c <__mdiff+0x12c>)
 800604a:	f000 fb15 	bl	8006678 <__assert_func>
 800604e:	2301      	movs	r3, #1
 8006050:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006054:	4610      	mov	r0, r2
 8006056:	b003      	add	sp, #12
 8006058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800605c:	bfbc      	itt	lt
 800605e:	464b      	movlt	r3, r9
 8006060:	46a1      	movlt	r9, r4
 8006062:	4630      	mov	r0, r6
 8006064:	bfb8      	it	lt
 8006066:	2501      	movlt	r5, #1
 8006068:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800606c:	bfb4      	ite	lt
 800606e:	461c      	movlt	r4, r3
 8006070:	2500      	movge	r5, #0
 8006072:	f7ff fd3d 	bl	8005af0 <_Balloc>
 8006076:	4602      	mov	r2, r0
 8006078:	b918      	cbnz	r0, 8006082 <__mdiff+0x62>
 800607a:	4b33      	ldr	r3, [pc, #204]	@ (8006148 <__mdiff+0x128>)
 800607c:	f240 2145 	movw	r1, #581	@ 0x245
 8006080:	e7e2      	b.n	8006048 <__mdiff+0x28>
 8006082:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006086:	f104 0e14 	add.w	lr, r4, #20
 800608a:	6926      	ldr	r6, [r4, #16]
 800608c:	f100 0b14 	add.w	fp, r0, #20
 8006090:	60c5      	str	r5, [r0, #12]
 8006092:	f109 0514 	add.w	r5, r9, #20
 8006096:	f109 0310 	add.w	r3, r9, #16
 800609a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800609e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80060a2:	46d9      	mov	r9, fp
 80060a4:	f04f 0c00 	mov.w	ip, #0
 80060a8:	9301      	str	r3, [sp, #4]
 80060aa:	9b01      	ldr	r3, [sp, #4]
 80060ac:	f85e 0b04 	ldr.w	r0, [lr], #4
 80060b0:	f853 af04 	ldr.w	sl, [r3, #4]!
 80060b4:	4576      	cmp	r6, lr
 80060b6:	9301      	str	r3, [sp, #4]
 80060b8:	fa1f f38a 	uxth.w	r3, sl
 80060bc:	4619      	mov	r1, r3
 80060be:	b283      	uxth	r3, r0
 80060c0:	ea4f 4010 	mov.w	r0, r0, lsr #16
 80060c4:	eba1 0303 	sub.w	r3, r1, r3
 80060c8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80060cc:	4463      	add	r3, ip
 80060ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80060d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80060dc:	f849 3b04 	str.w	r3, [r9], #4
 80060e0:	d8e3      	bhi.n	80060aa <__mdiff+0x8a>
 80060e2:	1b33      	subs	r3, r6, r4
 80060e4:	3415      	adds	r4, #21
 80060e6:	3b15      	subs	r3, #21
 80060e8:	f023 0303 	bic.w	r3, r3, #3
 80060ec:	3304      	adds	r3, #4
 80060ee:	42a6      	cmp	r6, r4
 80060f0:	bf38      	it	cc
 80060f2:	2304      	movcc	r3, #4
 80060f4:	441d      	add	r5, r3
 80060f6:	445b      	add	r3, fp
 80060f8:	462c      	mov	r4, r5
 80060fa:	461e      	mov	r6, r3
 80060fc:	4544      	cmp	r4, r8
 80060fe:	d30e      	bcc.n	800611e <__mdiff+0xfe>
 8006100:	f108 0103 	add.w	r1, r8, #3
 8006104:	1b49      	subs	r1, r1, r5
 8006106:	3d03      	subs	r5, #3
 8006108:	f021 0103 	bic.w	r1, r1, #3
 800610c:	45a8      	cmp	r8, r5
 800610e:	bf38      	it	cc
 8006110:	2100      	movcc	r1, #0
 8006112:	440b      	add	r3, r1
 8006114:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006118:	b199      	cbz	r1, 8006142 <__mdiff+0x122>
 800611a:	6117      	str	r7, [r2, #16]
 800611c:	e79a      	b.n	8006054 <__mdiff+0x34>
 800611e:	f854 1b04 	ldr.w	r1, [r4], #4
 8006122:	46e6      	mov	lr, ip
 8006124:	fa1f fc81 	uxth.w	ip, r1
 8006128:	0c08      	lsrs	r0, r1, #16
 800612a:	4471      	add	r1, lr
 800612c:	44f4      	add	ip, lr
 800612e:	b289      	uxth	r1, r1
 8006130:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006134:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006138:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800613c:	f846 1b04 	str.w	r1, [r6], #4
 8006140:	e7dc      	b.n	80060fc <__mdiff+0xdc>
 8006142:	3f01      	subs	r7, #1
 8006144:	e7e6      	b.n	8006114 <__mdiff+0xf4>
 8006146:	bf00      	nop
 8006148:	08006e04 	.word	0x08006e04
 800614c:	08006e15 	.word	0x08006e15

08006150 <__d2b>:
 8006150:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006154:	460f      	mov	r7, r1
 8006156:	2101      	movs	r1, #1
 8006158:	4616      	mov	r6, r2
 800615a:	ec59 8b10 	vmov	r8, r9, d0
 800615e:	f7ff fcc7 	bl	8005af0 <_Balloc>
 8006162:	4604      	mov	r4, r0
 8006164:	b930      	cbnz	r0, 8006174 <__d2b+0x24>
 8006166:	4602      	mov	r2, r0
 8006168:	4b23      	ldr	r3, [pc, #140]	@ (80061f8 <__d2b+0xa8>)
 800616a:	f240 310f 	movw	r1, #783	@ 0x30f
 800616e:	4823      	ldr	r0, [pc, #140]	@ (80061fc <__d2b+0xac>)
 8006170:	f000 fa82 	bl	8006678 <__assert_func>
 8006174:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006178:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800617c:	b10d      	cbz	r5, 8006182 <__d2b+0x32>
 800617e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006182:	9301      	str	r3, [sp, #4]
 8006184:	f1b8 0300 	subs.w	r3, r8, #0
 8006188:	d023      	beq.n	80061d2 <__d2b+0x82>
 800618a:	4668      	mov	r0, sp
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	f7ff fd78 	bl	8005c82 <__lo0bits>
 8006192:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006196:	b1d0      	cbz	r0, 80061ce <__d2b+0x7e>
 8006198:	f1c0 0320 	rsb	r3, r0, #32
 800619c:	fa02 f303 	lsl.w	r3, r2, r3
 80061a0:	40c2      	lsrs	r2, r0
 80061a2:	430b      	orrs	r3, r1
 80061a4:	9201      	str	r2, [sp, #4]
 80061a6:	6163      	str	r3, [r4, #20]
 80061a8:	9b01      	ldr	r3, [sp, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	61a3      	str	r3, [r4, #24]
 80061ae:	bf0c      	ite	eq
 80061b0:	2201      	moveq	r2, #1
 80061b2:	2202      	movne	r2, #2
 80061b4:	6122      	str	r2, [r4, #16]
 80061b6:	b1a5      	cbz	r5, 80061e2 <__d2b+0x92>
 80061b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80061bc:	4405      	add	r5, r0
 80061be:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80061c2:	603d      	str	r5, [r7, #0]
 80061c4:	6030      	str	r0, [r6, #0]
 80061c6:	4620      	mov	r0, r4
 80061c8:	b003      	add	sp, #12
 80061ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061ce:	6161      	str	r1, [r4, #20]
 80061d0:	e7ea      	b.n	80061a8 <__d2b+0x58>
 80061d2:	a801      	add	r0, sp, #4
 80061d4:	f7ff fd55 	bl	8005c82 <__lo0bits>
 80061d8:	9b01      	ldr	r3, [sp, #4]
 80061da:	3020      	adds	r0, #32
 80061dc:	2201      	movs	r2, #1
 80061de:	6163      	str	r3, [r4, #20]
 80061e0:	e7e8      	b.n	80061b4 <__d2b+0x64>
 80061e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80061e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80061ea:	6038      	str	r0, [r7, #0]
 80061ec:	6918      	ldr	r0, [r3, #16]
 80061ee:	f7ff fd29 	bl	8005c44 <__hi0bits>
 80061f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80061f6:	e7e5      	b.n	80061c4 <__d2b+0x74>
 80061f8:	08006e04 	.word	0x08006e04
 80061fc:	08006e15 	.word	0x08006e15

08006200 <__ssputs_r>:
 8006200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006204:	461f      	mov	r7, r3
 8006206:	688e      	ldr	r6, [r1, #8]
 8006208:	4682      	mov	sl, r0
 800620a:	460c      	mov	r4, r1
 800620c:	42be      	cmp	r6, r7
 800620e:	4690      	mov	r8, r2
 8006210:	680b      	ldr	r3, [r1, #0]
 8006212:	d82d      	bhi.n	8006270 <__ssputs_r+0x70>
 8006214:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006218:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800621c:	d026      	beq.n	800626c <__ssputs_r+0x6c>
 800621e:	6965      	ldr	r5, [r4, #20]
 8006220:	6909      	ldr	r1, [r1, #16]
 8006222:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006226:	eba3 0901 	sub.w	r9, r3, r1
 800622a:	1c7b      	adds	r3, r7, #1
 800622c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006230:	444b      	add	r3, r9
 8006232:	106d      	asrs	r5, r5, #1
 8006234:	429d      	cmp	r5, r3
 8006236:	bf38      	it	cc
 8006238:	461d      	movcc	r5, r3
 800623a:	0553      	lsls	r3, r2, #21
 800623c:	d527      	bpl.n	800628e <__ssputs_r+0x8e>
 800623e:	4629      	mov	r1, r5
 8006240:	f7ff fbca 	bl	80059d8 <_malloc_r>
 8006244:	4606      	mov	r6, r0
 8006246:	b360      	cbz	r0, 80062a2 <__ssputs_r+0xa2>
 8006248:	464a      	mov	r2, r9
 800624a:	6921      	ldr	r1, [r4, #16]
 800624c:	f000 fa06 	bl	800665c <memcpy>
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800625a:	81a3      	strh	r3, [r4, #12]
 800625c:	6126      	str	r6, [r4, #16]
 800625e:	444e      	add	r6, r9
 8006260:	6165      	str	r5, [r4, #20]
 8006262:	eba5 0509 	sub.w	r5, r5, r9
 8006266:	6026      	str	r6, [r4, #0]
 8006268:	463e      	mov	r6, r7
 800626a:	60a5      	str	r5, [r4, #8]
 800626c:	42be      	cmp	r6, r7
 800626e:	d900      	bls.n	8006272 <__ssputs_r+0x72>
 8006270:	463e      	mov	r6, r7
 8006272:	4632      	mov	r2, r6
 8006274:	4641      	mov	r1, r8
 8006276:	6820      	ldr	r0, [r4, #0]
 8006278:	f000 f9c6 	bl	8006608 <memmove>
 800627c:	68a3      	ldr	r3, [r4, #8]
 800627e:	2000      	movs	r0, #0
 8006280:	1b9b      	subs	r3, r3, r6
 8006282:	60a3      	str	r3, [r4, #8]
 8006284:	6823      	ldr	r3, [r4, #0]
 8006286:	4433      	add	r3, r6
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628e:	462a      	mov	r2, r5
 8006290:	f000 fa36 	bl	8006700 <_realloc_r>
 8006294:	4606      	mov	r6, r0
 8006296:	2800      	cmp	r0, #0
 8006298:	d1e0      	bne.n	800625c <__ssputs_r+0x5c>
 800629a:	6921      	ldr	r1, [r4, #16]
 800629c:	4650      	mov	r0, sl
 800629e:	f7ff fb27 	bl	80058f0 <_free_r>
 80062a2:	230c      	movs	r3, #12
 80062a4:	f04f 30ff 	mov.w	r0, #4294967295
 80062a8:	f8ca 3000 	str.w	r3, [sl]
 80062ac:	89a3      	ldrh	r3, [r4, #12]
 80062ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062b2:	81a3      	strh	r3, [r4, #12]
 80062b4:	e7e9      	b.n	800628a <__ssputs_r+0x8a>
	...

080062b8 <_svfiprintf_r>:
 80062b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062bc:	4698      	mov	r8, r3
 80062be:	898b      	ldrh	r3, [r1, #12]
 80062c0:	b09d      	sub	sp, #116	@ 0x74
 80062c2:	4607      	mov	r7, r0
 80062c4:	061b      	lsls	r3, r3, #24
 80062c6:	460d      	mov	r5, r1
 80062c8:	4614      	mov	r4, r2
 80062ca:	d510      	bpl.n	80062ee <_svfiprintf_r+0x36>
 80062cc:	690b      	ldr	r3, [r1, #16]
 80062ce:	b973      	cbnz	r3, 80062ee <_svfiprintf_r+0x36>
 80062d0:	2140      	movs	r1, #64	@ 0x40
 80062d2:	f7ff fb81 	bl	80059d8 <_malloc_r>
 80062d6:	6028      	str	r0, [r5, #0]
 80062d8:	6128      	str	r0, [r5, #16]
 80062da:	b930      	cbnz	r0, 80062ea <_svfiprintf_r+0x32>
 80062dc:	230c      	movs	r3, #12
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	f04f 30ff 	mov.w	r0, #4294967295
 80062e4:	b01d      	add	sp, #116	@ 0x74
 80062e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ea:	2340      	movs	r3, #64	@ 0x40
 80062ec:	616b      	str	r3, [r5, #20]
 80062ee:	2300      	movs	r3, #0
 80062f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80062f4:	f04f 0901 	mov.w	r9, #1
 80062f8:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800649c <_svfiprintf_r+0x1e4>
 80062fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80062fe:	2320      	movs	r3, #32
 8006300:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006304:	2330      	movs	r3, #48	@ 0x30
 8006306:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800630a:	4623      	mov	r3, r4
 800630c:	469a      	mov	sl, r3
 800630e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006312:	b10a      	cbz	r2, 8006318 <_svfiprintf_r+0x60>
 8006314:	2a25      	cmp	r2, #37	@ 0x25
 8006316:	d1f9      	bne.n	800630c <_svfiprintf_r+0x54>
 8006318:	ebba 0b04 	subs.w	fp, sl, r4
 800631c:	d00b      	beq.n	8006336 <_svfiprintf_r+0x7e>
 800631e:	465b      	mov	r3, fp
 8006320:	4622      	mov	r2, r4
 8006322:	4629      	mov	r1, r5
 8006324:	4638      	mov	r0, r7
 8006326:	f7ff ff6b 	bl	8006200 <__ssputs_r>
 800632a:	3001      	adds	r0, #1
 800632c:	f000 80a7 	beq.w	800647e <_svfiprintf_r+0x1c6>
 8006330:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006332:	445a      	add	r2, fp
 8006334:	9209      	str	r2, [sp, #36]	@ 0x24
 8006336:	f89a 3000 	ldrb.w	r3, [sl]
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 809f 	beq.w	800647e <_svfiprintf_r+0x1c6>
 8006340:	2300      	movs	r3, #0
 8006342:	f04f 32ff 	mov.w	r2, #4294967295
 8006346:	f10a 0a01 	add.w	sl, sl, #1
 800634a:	9304      	str	r3, [sp, #16]
 800634c:	9307      	str	r3, [sp, #28]
 800634e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006352:	931a      	str	r3, [sp, #104]	@ 0x68
 8006354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006358:	4654      	mov	r4, sl
 800635a:	2205      	movs	r2, #5
 800635c:	484f      	ldr	r0, [pc, #316]	@ (800649c <_svfiprintf_r+0x1e4>)
 800635e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006362:	f7fe fc64 	bl	8004c2e <memchr>
 8006366:	9a04      	ldr	r2, [sp, #16]
 8006368:	b9d8      	cbnz	r0, 80063a2 <_svfiprintf_r+0xea>
 800636a:	06d0      	lsls	r0, r2, #27
 800636c:	bf44      	itt	mi
 800636e:	2320      	movmi	r3, #32
 8006370:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006374:	0711      	lsls	r1, r2, #28
 8006376:	bf44      	itt	mi
 8006378:	232b      	movmi	r3, #43	@ 0x2b
 800637a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800637e:	f89a 3000 	ldrb.w	r3, [sl]
 8006382:	2b2a      	cmp	r3, #42	@ 0x2a
 8006384:	d015      	beq.n	80063b2 <_svfiprintf_r+0xfa>
 8006386:	9a07      	ldr	r2, [sp, #28]
 8006388:	4654      	mov	r4, sl
 800638a:	2000      	movs	r0, #0
 800638c:	f04f 0c0a 	mov.w	ip, #10
 8006390:	4621      	mov	r1, r4
 8006392:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006396:	3b30      	subs	r3, #48	@ 0x30
 8006398:	2b09      	cmp	r3, #9
 800639a:	d94b      	bls.n	8006434 <_svfiprintf_r+0x17c>
 800639c:	b1b0      	cbz	r0, 80063cc <_svfiprintf_r+0x114>
 800639e:	9207      	str	r2, [sp, #28]
 80063a0:	e014      	b.n	80063cc <_svfiprintf_r+0x114>
 80063a2:	eba0 0308 	sub.w	r3, r0, r8
 80063a6:	46a2      	mov	sl, r4
 80063a8:	fa09 f303 	lsl.w	r3, r9, r3
 80063ac:	4313      	orrs	r3, r2
 80063ae:	9304      	str	r3, [sp, #16]
 80063b0:	e7d2      	b.n	8006358 <_svfiprintf_r+0xa0>
 80063b2:	9b03      	ldr	r3, [sp, #12]
 80063b4:	1d19      	adds	r1, r3, #4
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	9103      	str	r1, [sp, #12]
 80063bc:	bfbb      	ittet	lt
 80063be:	425b      	neglt	r3, r3
 80063c0:	f042 0202 	orrlt.w	r2, r2, #2
 80063c4:	9307      	strge	r3, [sp, #28]
 80063c6:	9307      	strlt	r3, [sp, #28]
 80063c8:	bfb8      	it	lt
 80063ca:	9204      	strlt	r2, [sp, #16]
 80063cc:	7823      	ldrb	r3, [r4, #0]
 80063ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80063d0:	d10a      	bne.n	80063e8 <_svfiprintf_r+0x130>
 80063d2:	7863      	ldrb	r3, [r4, #1]
 80063d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80063d6:	d132      	bne.n	800643e <_svfiprintf_r+0x186>
 80063d8:	9b03      	ldr	r3, [sp, #12]
 80063da:	3402      	adds	r4, #2
 80063dc:	1d1a      	adds	r2, r3, #4
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063e4:	9203      	str	r2, [sp, #12]
 80063e6:	9305      	str	r3, [sp, #20]
 80063e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80064ac <_svfiprintf_r+0x1f4>
 80063ec:	2203      	movs	r2, #3
 80063ee:	7821      	ldrb	r1, [r4, #0]
 80063f0:	4650      	mov	r0, sl
 80063f2:	f7fe fc1c 	bl	8004c2e <memchr>
 80063f6:	b138      	cbz	r0, 8006408 <_svfiprintf_r+0x150>
 80063f8:	eba0 000a 	sub.w	r0, r0, sl
 80063fc:	2240      	movs	r2, #64	@ 0x40
 80063fe:	9b04      	ldr	r3, [sp, #16]
 8006400:	3401      	adds	r4, #1
 8006402:	4082      	lsls	r2, r0
 8006404:	4313      	orrs	r3, r2
 8006406:	9304      	str	r3, [sp, #16]
 8006408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800640c:	2206      	movs	r2, #6
 800640e:	4824      	ldr	r0, [pc, #144]	@ (80064a0 <_svfiprintf_r+0x1e8>)
 8006410:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006414:	f7fe fc0b 	bl	8004c2e <memchr>
 8006418:	2800      	cmp	r0, #0
 800641a:	d036      	beq.n	800648a <_svfiprintf_r+0x1d2>
 800641c:	4b21      	ldr	r3, [pc, #132]	@ (80064a4 <_svfiprintf_r+0x1ec>)
 800641e:	bb1b      	cbnz	r3, 8006468 <_svfiprintf_r+0x1b0>
 8006420:	9b03      	ldr	r3, [sp, #12]
 8006422:	3307      	adds	r3, #7
 8006424:	f023 0307 	bic.w	r3, r3, #7
 8006428:	3308      	adds	r3, #8
 800642a:	9303      	str	r3, [sp, #12]
 800642c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800642e:	4433      	add	r3, r6
 8006430:	9309      	str	r3, [sp, #36]	@ 0x24
 8006432:	e76a      	b.n	800630a <_svfiprintf_r+0x52>
 8006434:	fb0c 3202 	mla	r2, ip, r2, r3
 8006438:	460c      	mov	r4, r1
 800643a:	2001      	movs	r0, #1
 800643c:	e7a8      	b.n	8006390 <_svfiprintf_r+0xd8>
 800643e:	2300      	movs	r3, #0
 8006440:	3401      	adds	r4, #1
 8006442:	f04f 0c0a 	mov.w	ip, #10
 8006446:	4619      	mov	r1, r3
 8006448:	9305      	str	r3, [sp, #20]
 800644a:	4620      	mov	r0, r4
 800644c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006450:	3a30      	subs	r2, #48	@ 0x30
 8006452:	2a09      	cmp	r2, #9
 8006454:	d903      	bls.n	800645e <_svfiprintf_r+0x1a6>
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0c6      	beq.n	80063e8 <_svfiprintf_r+0x130>
 800645a:	9105      	str	r1, [sp, #20]
 800645c:	e7c4      	b.n	80063e8 <_svfiprintf_r+0x130>
 800645e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006462:	4604      	mov	r4, r0
 8006464:	2301      	movs	r3, #1
 8006466:	e7f0      	b.n	800644a <_svfiprintf_r+0x192>
 8006468:	ab03      	add	r3, sp, #12
 800646a:	462a      	mov	r2, r5
 800646c:	a904      	add	r1, sp, #16
 800646e:	4638      	mov	r0, r7
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	4b0d      	ldr	r3, [pc, #52]	@ (80064a8 <_svfiprintf_r+0x1f0>)
 8006474:	f7fd fe7a 	bl	800416c <_printf_float>
 8006478:	1c42      	adds	r2, r0, #1
 800647a:	4606      	mov	r6, r0
 800647c:	d1d6      	bne.n	800642c <_svfiprintf_r+0x174>
 800647e:	89ab      	ldrh	r3, [r5, #12]
 8006480:	065b      	lsls	r3, r3, #25
 8006482:	f53f af2d 	bmi.w	80062e0 <_svfiprintf_r+0x28>
 8006486:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006488:	e72c      	b.n	80062e4 <_svfiprintf_r+0x2c>
 800648a:	ab03      	add	r3, sp, #12
 800648c:	462a      	mov	r2, r5
 800648e:	a904      	add	r1, sp, #16
 8006490:	4638      	mov	r0, r7
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	4b04      	ldr	r3, [pc, #16]	@ (80064a8 <_svfiprintf_r+0x1f0>)
 8006496:	f7fe f905 	bl	80046a4 <_printf_i>
 800649a:	e7ed      	b.n	8006478 <_svfiprintf_r+0x1c0>
 800649c:	08006f70 	.word	0x08006f70
 80064a0:	08006f7a 	.word	0x08006f7a
 80064a4:	0800416d 	.word	0x0800416d
 80064a8:	08006201 	.word	0x08006201
 80064ac:	08006f76 	.word	0x08006f76

080064b0 <__sflush_r>:
 80064b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b8:	0716      	lsls	r6, r2, #28
 80064ba:	4605      	mov	r5, r0
 80064bc:	460c      	mov	r4, r1
 80064be:	d454      	bmi.n	800656a <__sflush_r+0xba>
 80064c0:	684b      	ldr	r3, [r1, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	dc02      	bgt.n	80064cc <__sflush_r+0x1c>
 80064c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	dd48      	ble.n	800655e <__sflush_r+0xae>
 80064cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064ce:	2e00      	cmp	r6, #0
 80064d0:	d045      	beq.n	800655e <__sflush_r+0xae>
 80064d2:	2300      	movs	r3, #0
 80064d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80064d8:	682f      	ldr	r7, [r5, #0]
 80064da:	6a21      	ldr	r1, [r4, #32]
 80064dc:	602b      	str	r3, [r5, #0]
 80064de:	d030      	beq.n	8006542 <__sflush_r+0x92>
 80064e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064e2:	89a3      	ldrh	r3, [r4, #12]
 80064e4:	0759      	lsls	r1, r3, #29
 80064e6:	d505      	bpl.n	80064f4 <__sflush_r+0x44>
 80064e8:	6863      	ldr	r3, [r4, #4]
 80064ea:	1ad2      	subs	r2, r2, r3
 80064ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80064ee:	b10b      	cbz	r3, 80064f4 <__sflush_r+0x44>
 80064f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064f2:	1ad2      	subs	r2, r2, r3
 80064f4:	2300      	movs	r3, #0
 80064f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064f8:	6a21      	ldr	r1, [r4, #32]
 80064fa:	4628      	mov	r0, r5
 80064fc:	47b0      	blx	r6
 80064fe:	1c43      	adds	r3, r0, #1
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	d106      	bne.n	8006512 <__sflush_r+0x62>
 8006504:	6829      	ldr	r1, [r5, #0]
 8006506:	291d      	cmp	r1, #29
 8006508:	d82b      	bhi.n	8006562 <__sflush_r+0xb2>
 800650a:	4a2a      	ldr	r2, [pc, #168]	@ (80065b4 <__sflush_r+0x104>)
 800650c:	410a      	asrs	r2, r1
 800650e:	07d6      	lsls	r6, r2, #31
 8006510:	d427      	bmi.n	8006562 <__sflush_r+0xb2>
 8006512:	2200      	movs	r2, #0
 8006514:	04d9      	lsls	r1, r3, #19
 8006516:	6062      	str	r2, [r4, #4]
 8006518:	6922      	ldr	r2, [r4, #16]
 800651a:	6022      	str	r2, [r4, #0]
 800651c:	d504      	bpl.n	8006528 <__sflush_r+0x78>
 800651e:	1c42      	adds	r2, r0, #1
 8006520:	d101      	bne.n	8006526 <__sflush_r+0x76>
 8006522:	682b      	ldr	r3, [r5, #0]
 8006524:	b903      	cbnz	r3, 8006528 <__sflush_r+0x78>
 8006526:	6560      	str	r0, [r4, #84]	@ 0x54
 8006528:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800652a:	602f      	str	r7, [r5, #0]
 800652c:	b1b9      	cbz	r1, 800655e <__sflush_r+0xae>
 800652e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006532:	4299      	cmp	r1, r3
 8006534:	d002      	beq.n	800653c <__sflush_r+0x8c>
 8006536:	4628      	mov	r0, r5
 8006538:	f7ff f9da 	bl	80058f0 <_free_r>
 800653c:	2300      	movs	r3, #0
 800653e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006540:	e00d      	b.n	800655e <__sflush_r+0xae>
 8006542:	2301      	movs	r3, #1
 8006544:	4628      	mov	r0, r5
 8006546:	47b0      	blx	r6
 8006548:	4602      	mov	r2, r0
 800654a:	1c50      	adds	r0, r2, #1
 800654c:	d1c9      	bne.n	80064e2 <__sflush_r+0x32>
 800654e:	682b      	ldr	r3, [r5, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0c6      	beq.n	80064e2 <__sflush_r+0x32>
 8006554:	2b1d      	cmp	r3, #29
 8006556:	d001      	beq.n	800655c <__sflush_r+0xac>
 8006558:	2b16      	cmp	r3, #22
 800655a:	d11d      	bne.n	8006598 <__sflush_r+0xe8>
 800655c:	602f      	str	r7, [r5, #0]
 800655e:	2000      	movs	r0, #0
 8006560:	e021      	b.n	80065a6 <__sflush_r+0xf6>
 8006562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006566:	b21b      	sxth	r3, r3
 8006568:	e01a      	b.n	80065a0 <__sflush_r+0xf0>
 800656a:	690f      	ldr	r7, [r1, #16]
 800656c:	2f00      	cmp	r7, #0
 800656e:	d0f6      	beq.n	800655e <__sflush_r+0xae>
 8006570:	0793      	lsls	r3, r2, #30
 8006572:	680e      	ldr	r6, [r1, #0]
 8006574:	600f      	str	r7, [r1, #0]
 8006576:	bf0c      	ite	eq
 8006578:	694b      	ldreq	r3, [r1, #20]
 800657a:	2300      	movne	r3, #0
 800657c:	eba6 0807 	sub.w	r8, r6, r7
 8006580:	608b      	str	r3, [r1, #8]
 8006582:	f1b8 0f00 	cmp.w	r8, #0
 8006586:	ddea      	ble.n	800655e <__sflush_r+0xae>
 8006588:	4643      	mov	r3, r8
 800658a:	463a      	mov	r2, r7
 800658c:	6a21      	ldr	r1, [r4, #32]
 800658e:	4628      	mov	r0, r5
 8006590:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006592:	47b0      	blx	r6
 8006594:	2800      	cmp	r0, #0
 8006596:	dc08      	bgt.n	80065aa <__sflush_r+0xfa>
 8006598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800659c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065a0:	f04f 30ff 	mov.w	r0, #4294967295
 80065a4:	81a3      	strh	r3, [r4, #12]
 80065a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065aa:	4407      	add	r7, r0
 80065ac:	eba8 0800 	sub.w	r8, r8, r0
 80065b0:	e7e7      	b.n	8006582 <__sflush_r+0xd2>
 80065b2:	bf00      	nop
 80065b4:	dfbffffe 	.word	0xdfbffffe

080065b8 <_fflush_r>:
 80065b8:	b538      	push	{r3, r4, r5, lr}
 80065ba:	690b      	ldr	r3, [r1, #16]
 80065bc:	4605      	mov	r5, r0
 80065be:	460c      	mov	r4, r1
 80065c0:	b913      	cbnz	r3, 80065c8 <_fflush_r+0x10>
 80065c2:	2500      	movs	r5, #0
 80065c4:	4628      	mov	r0, r5
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	b118      	cbz	r0, 80065d2 <_fflush_r+0x1a>
 80065ca:	6a03      	ldr	r3, [r0, #32]
 80065cc:	b90b      	cbnz	r3, 80065d2 <_fflush_r+0x1a>
 80065ce:	f7fe fa15 	bl	80049fc <__sinit>
 80065d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d0f3      	beq.n	80065c2 <_fflush_r+0xa>
 80065da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065dc:	07d0      	lsls	r0, r2, #31
 80065de:	d404      	bmi.n	80065ea <_fflush_r+0x32>
 80065e0:	0599      	lsls	r1, r3, #22
 80065e2:	d402      	bmi.n	80065ea <_fflush_r+0x32>
 80065e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065e6:	f7fe fb20 	bl	8004c2a <__retarget_lock_acquire_recursive>
 80065ea:	4628      	mov	r0, r5
 80065ec:	4621      	mov	r1, r4
 80065ee:	f7ff ff5f 	bl	80064b0 <__sflush_r>
 80065f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065f4:	4605      	mov	r5, r0
 80065f6:	07da      	lsls	r2, r3, #31
 80065f8:	d4e4      	bmi.n	80065c4 <_fflush_r+0xc>
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	059b      	lsls	r3, r3, #22
 80065fe:	d4e1      	bmi.n	80065c4 <_fflush_r+0xc>
 8006600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006602:	f7fe fb13 	bl	8004c2c <__retarget_lock_release_recursive>
 8006606:	e7dd      	b.n	80065c4 <_fflush_r+0xc>

08006608 <memmove>:
 8006608:	4288      	cmp	r0, r1
 800660a:	b510      	push	{r4, lr}
 800660c:	eb01 0402 	add.w	r4, r1, r2
 8006610:	d902      	bls.n	8006618 <memmove+0x10>
 8006612:	4284      	cmp	r4, r0
 8006614:	4623      	mov	r3, r4
 8006616:	d807      	bhi.n	8006628 <memmove+0x20>
 8006618:	1e43      	subs	r3, r0, #1
 800661a:	42a1      	cmp	r1, r4
 800661c:	d008      	beq.n	8006630 <memmove+0x28>
 800661e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006622:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006626:	e7f8      	b.n	800661a <memmove+0x12>
 8006628:	4402      	add	r2, r0
 800662a:	4601      	mov	r1, r0
 800662c:	428a      	cmp	r2, r1
 800662e:	d100      	bne.n	8006632 <memmove+0x2a>
 8006630:	bd10      	pop	{r4, pc}
 8006632:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006636:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800663a:	e7f7      	b.n	800662c <memmove+0x24>

0800663c <_sbrk_r>:
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	2300      	movs	r3, #0
 8006640:	4d05      	ldr	r5, [pc, #20]	@ (8006658 <_sbrk_r+0x1c>)
 8006642:	4604      	mov	r4, r0
 8006644:	4608      	mov	r0, r1
 8006646:	602b      	str	r3, [r5, #0]
 8006648:	f7fb f886 	bl	8001758 <_sbrk>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	d102      	bne.n	8006656 <_sbrk_r+0x1a>
 8006650:	682b      	ldr	r3, [r5, #0]
 8006652:	b103      	cbz	r3, 8006656 <_sbrk_r+0x1a>
 8006654:	6023      	str	r3, [r4, #0]
 8006656:	bd38      	pop	{r3, r4, r5, pc}
 8006658:	200003f0 	.word	0x200003f0

0800665c <memcpy>:
 800665c:	440a      	add	r2, r1
 800665e:	1e43      	subs	r3, r0, #1
 8006660:	4291      	cmp	r1, r2
 8006662:	d100      	bne.n	8006666 <memcpy+0xa>
 8006664:	4770      	bx	lr
 8006666:	b510      	push	{r4, lr}
 8006668:	f811 4b01 	ldrb.w	r4, [r1], #1
 800666c:	4291      	cmp	r1, r2
 800666e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006672:	d1f9      	bne.n	8006668 <memcpy+0xc>
 8006674:	bd10      	pop	{r4, pc}
	...

08006678 <__assert_func>:
 8006678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800667a:	4614      	mov	r4, r2
 800667c:	461a      	mov	r2, r3
 800667e:	4b09      	ldr	r3, [pc, #36]	@ (80066a4 <__assert_func+0x2c>)
 8006680:	4605      	mov	r5, r0
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68d8      	ldr	r0, [r3, #12]
 8006686:	b954      	cbnz	r4, 800669e <__assert_func+0x26>
 8006688:	4b07      	ldr	r3, [pc, #28]	@ (80066a8 <__assert_func+0x30>)
 800668a:	461c      	mov	r4, r3
 800668c:	9100      	str	r1, [sp, #0]
 800668e:	4907      	ldr	r1, [pc, #28]	@ (80066ac <__assert_func+0x34>)
 8006690:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006694:	462b      	mov	r3, r5
 8006696:	f000 f86f 	bl	8006778 <fiprintf>
 800669a:	f000 f87f 	bl	800679c <abort>
 800669e:	4b04      	ldr	r3, [pc, #16]	@ (80066b0 <__assert_func+0x38>)
 80066a0:	e7f4      	b.n	800668c <__assert_func+0x14>
 80066a2:	bf00      	nop
 80066a4:	20000018 	.word	0x20000018
 80066a8:	08006fc6 	.word	0x08006fc6
 80066ac:	08006f98 	.word	0x08006f98
 80066b0:	08006f8b 	.word	0x08006f8b

080066b4 <_calloc_r>:
 80066b4:	b570      	push	{r4, r5, r6, lr}
 80066b6:	fba1 5402 	umull	r5, r4, r1, r2
 80066ba:	b93c      	cbnz	r4, 80066cc <_calloc_r+0x18>
 80066bc:	4629      	mov	r1, r5
 80066be:	f7ff f98b 	bl	80059d8 <_malloc_r>
 80066c2:	4606      	mov	r6, r0
 80066c4:	b928      	cbnz	r0, 80066d2 <_calloc_r+0x1e>
 80066c6:	2600      	movs	r6, #0
 80066c8:	4630      	mov	r0, r6
 80066ca:	bd70      	pop	{r4, r5, r6, pc}
 80066cc:	220c      	movs	r2, #12
 80066ce:	6002      	str	r2, [r0, #0]
 80066d0:	e7f9      	b.n	80066c6 <_calloc_r+0x12>
 80066d2:	462a      	mov	r2, r5
 80066d4:	4621      	mov	r1, r4
 80066d6:	f7fe fa2a 	bl	8004b2e <memset>
 80066da:	e7f5      	b.n	80066c8 <_calloc_r+0x14>

080066dc <__ascii_mbtowc>:
 80066dc:	b082      	sub	sp, #8
 80066de:	b901      	cbnz	r1, 80066e2 <__ascii_mbtowc+0x6>
 80066e0:	a901      	add	r1, sp, #4
 80066e2:	b142      	cbz	r2, 80066f6 <__ascii_mbtowc+0x1a>
 80066e4:	b14b      	cbz	r3, 80066fa <__ascii_mbtowc+0x1e>
 80066e6:	7813      	ldrb	r3, [r2, #0]
 80066e8:	600b      	str	r3, [r1, #0]
 80066ea:	7812      	ldrb	r2, [r2, #0]
 80066ec:	1e10      	subs	r0, r2, #0
 80066ee:	bf18      	it	ne
 80066f0:	2001      	movne	r0, #1
 80066f2:	b002      	add	sp, #8
 80066f4:	4770      	bx	lr
 80066f6:	4610      	mov	r0, r2
 80066f8:	e7fb      	b.n	80066f2 <__ascii_mbtowc+0x16>
 80066fa:	f06f 0001 	mvn.w	r0, #1
 80066fe:	e7f8      	b.n	80066f2 <__ascii_mbtowc+0x16>

08006700 <_realloc_r>:
 8006700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006704:	4680      	mov	r8, r0
 8006706:	4615      	mov	r5, r2
 8006708:	460c      	mov	r4, r1
 800670a:	b921      	cbnz	r1, 8006716 <_realloc_r+0x16>
 800670c:	4611      	mov	r1, r2
 800670e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006712:	f7ff b961 	b.w	80059d8 <_malloc_r>
 8006716:	b92a      	cbnz	r2, 8006724 <_realloc_r+0x24>
 8006718:	f7ff f8ea 	bl	80058f0 <_free_r>
 800671c:	2400      	movs	r4, #0
 800671e:	4620      	mov	r0, r4
 8006720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006724:	f000 f841 	bl	80067aa <_malloc_usable_size_r>
 8006728:	4285      	cmp	r5, r0
 800672a:	4606      	mov	r6, r0
 800672c:	d802      	bhi.n	8006734 <_realloc_r+0x34>
 800672e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006732:	d8f4      	bhi.n	800671e <_realloc_r+0x1e>
 8006734:	4629      	mov	r1, r5
 8006736:	4640      	mov	r0, r8
 8006738:	f7ff f94e 	bl	80059d8 <_malloc_r>
 800673c:	4607      	mov	r7, r0
 800673e:	2800      	cmp	r0, #0
 8006740:	d0ec      	beq.n	800671c <_realloc_r+0x1c>
 8006742:	42b5      	cmp	r5, r6
 8006744:	462a      	mov	r2, r5
 8006746:	4621      	mov	r1, r4
 8006748:	bf28      	it	cs
 800674a:	4632      	movcs	r2, r6
 800674c:	f7ff ff86 	bl	800665c <memcpy>
 8006750:	4621      	mov	r1, r4
 8006752:	4640      	mov	r0, r8
 8006754:	463c      	mov	r4, r7
 8006756:	f7ff f8cb 	bl	80058f0 <_free_r>
 800675a:	e7e0      	b.n	800671e <_realloc_r+0x1e>

0800675c <__ascii_wctomb>:
 800675c:	4603      	mov	r3, r0
 800675e:	4608      	mov	r0, r1
 8006760:	b141      	cbz	r1, 8006774 <__ascii_wctomb+0x18>
 8006762:	2aff      	cmp	r2, #255	@ 0xff
 8006764:	d904      	bls.n	8006770 <__ascii_wctomb+0x14>
 8006766:	228a      	movs	r2, #138	@ 0x8a
 8006768:	f04f 30ff 	mov.w	r0, #4294967295
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	4770      	bx	lr
 8006770:	2001      	movs	r0, #1
 8006772:	700a      	strb	r2, [r1, #0]
 8006774:	4770      	bx	lr
	...

08006778 <fiprintf>:
 8006778:	b40e      	push	{r1, r2, r3}
 800677a:	b503      	push	{r0, r1, lr}
 800677c:	ab03      	add	r3, sp, #12
 800677e:	4601      	mov	r1, r0
 8006780:	4805      	ldr	r0, [pc, #20]	@ (8006798 <fiprintf+0x20>)
 8006782:	f853 2b04 	ldr.w	r2, [r3], #4
 8006786:	6800      	ldr	r0, [r0, #0]
 8006788:	9301      	str	r3, [sp, #4]
 800678a:	f000 f83f 	bl	800680c <_vfiprintf_r>
 800678e:	b002      	add	sp, #8
 8006790:	f85d eb04 	ldr.w	lr, [sp], #4
 8006794:	b003      	add	sp, #12
 8006796:	4770      	bx	lr
 8006798:	20000018 	.word	0x20000018

0800679c <abort>:
 800679c:	2006      	movs	r0, #6
 800679e:	b508      	push	{r3, lr}
 80067a0:	f000 fa08 	bl	8006bb4 <raise>
 80067a4:	2001      	movs	r0, #1
 80067a6:	f7fa ff5f 	bl	8001668 <_exit>

080067aa <_malloc_usable_size_r>:
 80067aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ae:	1f18      	subs	r0, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	bfbc      	itt	lt
 80067b4:	580b      	ldrlt	r3, [r1, r0]
 80067b6:	18c0      	addlt	r0, r0, r3
 80067b8:	4770      	bx	lr

080067ba <__sfputc_r>:
 80067ba:	6893      	ldr	r3, [r2, #8]
 80067bc:	3b01      	subs	r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	6093      	str	r3, [r2, #8]
 80067c2:	b410      	push	{r4}
 80067c4:	da08      	bge.n	80067d8 <__sfputc_r+0x1e>
 80067c6:	6994      	ldr	r4, [r2, #24]
 80067c8:	42a3      	cmp	r3, r4
 80067ca:	db01      	blt.n	80067d0 <__sfputc_r+0x16>
 80067cc:	290a      	cmp	r1, #10
 80067ce:	d103      	bne.n	80067d8 <__sfputc_r+0x1e>
 80067d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067d4:	f000 b932 	b.w	8006a3c <__swbuf_r>
 80067d8:	6813      	ldr	r3, [r2, #0]
 80067da:	1c58      	adds	r0, r3, #1
 80067dc:	6010      	str	r0, [r2, #0]
 80067de:	4608      	mov	r0, r1
 80067e0:	7019      	strb	r1, [r3, #0]
 80067e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <__sfputs_r>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	4606      	mov	r6, r0
 80067ec:	460f      	mov	r7, r1
 80067ee:	4614      	mov	r4, r2
 80067f0:	18d5      	adds	r5, r2, r3
 80067f2:	42ac      	cmp	r4, r5
 80067f4:	d101      	bne.n	80067fa <__sfputs_r+0x12>
 80067f6:	2000      	movs	r0, #0
 80067f8:	e007      	b.n	800680a <__sfputs_r+0x22>
 80067fa:	463a      	mov	r2, r7
 80067fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006800:	4630      	mov	r0, r6
 8006802:	f7ff ffda 	bl	80067ba <__sfputc_r>
 8006806:	1c43      	adds	r3, r0, #1
 8006808:	d1f3      	bne.n	80067f2 <__sfputs_r+0xa>
 800680a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800680c <_vfiprintf_r>:
 800680c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006810:	460d      	mov	r5, r1
 8006812:	b09d      	sub	sp, #116	@ 0x74
 8006814:	4614      	mov	r4, r2
 8006816:	4698      	mov	r8, r3
 8006818:	4606      	mov	r6, r0
 800681a:	b118      	cbz	r0, 8006824 <_vfiprintf_r+0x18>
 800681c:	6a03      	ldr	r3, [r0, #32]
 800681e:	b90b      	cbnz	r3, 8006824 <_vfiprintf_r+0x18>
 8006820:	f7fe f8ec 	bl	80049fc <__sinit>
 8006824:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006826:	07d9      	lsls	r1, r3, #31
 8006828:	d405      	bmi.n	8006836 <_vfiprintf_r+0x2a>
 800682a:	89ab      	ldrh	r3, [r5, #12]
 800682c:	059a      	lsls	r2, r3, #22
 800682e:	d402      	bmi.n	8006836 <_vfiprintf_r+0x2a>
 8006830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006832:	f7fe f9fa 	bl	8004c2a <__retarget_lock_acquire_recursive>
 8006836:	89ab      	ldrh	r3, [r5, #12]
 8006838:	071b      	lsls	r3, r3, #28
 800683a:	d501      	bpl.n	8006840 <_vfiprintf_r+0x34>
 800683c:	692b      	ldr	r3, [r5, #16]
 800683e:	b99b      	cbnz	r3, 8006868 <_vfiprintf_r+0x5c>
 8006840:	4629      	mov	r1, r5
 8006842:	4630      	mov	r0, r6
 8006844:	f000 f938 	bl	8006ab8 <__swsetup_r>
 8006848:	b170      	cbz	r0, 8006868 <_vfiprintf_r+0x5c>
 800684a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800684c:	07dc      	lsls	r4, r3, #31
 800684e:	d504      	bpl.n	800685a <_vfiprintf_r+0x4e>
 8006850:	f04f 30ff 	mov.w	r0, #4294967295
 8006854:	b01d      	add	sp, #116	@ 0x74
 8006856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800685a:	89ab      	ldrh	r3, [r5, #12]
 800685c:	0598      	lsls	r0, r3, #22
 800685e:	d4f7      	bmi.n	8006850 <_vfiprintf_r+0x44>
 8006860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006862:	f7fe f9e3 	bl	8004c2c <__retarget_lock_release_recursive>
 8006866:	e7f3      	b.n	8006850 <_vfiprintf_r+0x44>
 8006868:	2300      	movs	r3, #0
 800686a:	f8cd 800c 	str.w	r8, [sp, #12]
 800686e:	f04f 0901 	mov.w	r9, #1
 8006872:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8006a28 <_vfiprintf_r+0x21c>
 8006876:	9309      	str	r3, [sp, #36]	@ 0x24
 8006878:	2320      	movs	r3, #32
 800687a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800687e:	2330      	movs	r3, #48	@ 0x30
 8006880:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006884:	4623      	mov	r3, r4
 8006886:	469a      	mov	sl, r3
 8006888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800688c:	b10a      	cbz	r2, 8006892 <_vfiprintf_r+0x86>
 800688e:	2a25      	cmp	r2, #37	@ 0x25
 8006890:	d1f9      	bne.n	8006886 <_vfiprintf_r+0x7a>
 8006892:	ebba 0b04 	subs.w	fp, sl, r4
 8006896:	d00b      	beq.n	80068b0 <_vfiprintf_r+0xa4>
 8006898:	465b      	mov	r3, fp
 800689a:	4622      	mov	r2, r4
 800689c:	4629      	mov	r1, r5
 800689e:	4630      	mov	r0, r6
 80068a0:	f7ff ffa2 	bl	80067e8 <__sfputs_r>
 80068a4:	3001      	adds	r0, #1
 80068a6:	f000 80a7 	beq.w	80069f8 <_vfiprintf_r+0x1ec>
 80068aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068ac:	445a      	add	r2, fp
 80068ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80068b0:	f89a 3000 	ldrb.w	r3, [sl]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 809f 	beq.w	80069f8 <_vfiprintf_r+0x1ec>
 80068ba:	2300      	movs	r3, #0
 80068bc:	f04f 32ff 	mov.w	r2, #4294967295
 80068c0:	f10a 0a01 	add.w	sl, sl, #1
 80068c4:	9304      	str	r3, [sp, #16]
 80068c6:	9307      	str	r3, [sp, #28]
 80068c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80068ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068d2:	4654      	mov	r4, sl
 80068d4:	2205      	movs	r2, #5
 80068d6:	4854      	ldr	r0, [pc, #336]	@ (8006a28 <_vfiprintf_r+0x21c>)
 80068d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068dc:	f7fe f9a7 	bl	8004c2e <memchr>
 80068e0:	9a04      	ldr	r2, [sp, #16]
 80068e2:	b9d8      	cbnz	r0, 800691c <_vfiprintf_r+0x110>
 80068e4:	06d1      	lsls	r1, r2, #27
 80068e6:	bf44      	itt	mi
 80068e8:	2320      	movmi	r3, #32
 80068ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068ee:	0713      	lsls	r3, r2, #28
 80068f0:	bf44      	itt	mi
 80068f2:	232b      	movmi	r3, #43	@ 0x2b
 80068f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068f8:	f89a 3000 	ldrb.w	r3, [sl]
 80068fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80068fe:	d015      	beq.n	800692c <_vfiprintf_r+0x120>
 8006900:	9a07      	ldr	r2, [sp, #28]
 8006902:	4654      	mov	r4, sl
 8006904:	2000      	movs	r0, #0
 8006906:	f04f 0c0a 	mov.w	ip, #10
 800690a:	4621      	mov	r1, r4
 800690c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006910:	3b30      	subs	r3, #48	@ 0x30
 8006912:	2b09      	cmp	r3, #9
 8006914:	d94b      	bls.n	80069ae <_vfiprintf_r+0x1a2>
 8006916:	b1b0      	cbz	r0, 8006946 <_vfiprintf_r+0x13a>
 8006918:	9207      	str	r2, [sp, #28]
 800691a:	e014      	b.n	8006946 <_vfiprintf_r+0x13a>
 800691c:	eba0 0308 	sub.w	r3, r0, r8
 8006920:	46a2      	mov	sl, r4
 8006922:	fa09 f303 	lsl.w	r3, r9, r3
 8006926:	4313      	orrs	r3, r2
 8006928:	9304      	str	r3, [sp, #16]
 800692a:	e7d2      	b.n	80068d2 <_vfiprintf_r+0xc6>
 800692c:	9b03      	ldr	r3, [sp, #12]
 800692e:	1d19      	adds	r1, r3, #4
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	9103      	str	r1, [sp, #12]
 8006936:	bfbb      	ittet	lt
 8006938:	425b      	neglt	r3, r3
 800693a:	f042 0202 	orrlt.w	r2, r2, #2
 800693e:	9307      	strge	r3, [sp, #28]
 8006940:	9307      	strlt	r3, [sp, #28]
 8006942:	bfb8      	it	lt
 8006944:	9204      	strlt	r2, [sp, #16]
 8006946:	7823      	ldrb	r3, [r4, #0]
 8006948:	2b2e      	cmp	r3, #46	@ 0x2e
 800694a:	d10a      	bne.n	8006962 <_vfiprintf_r+0x156>
 800694c:	7863      	ldrb	r3, [r4, #1]
 800694e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006950:	d132      	bne.n	80069b8 <_vfiprintf_r+0x1ac>
 8006952:	9b03      	ldr	r3, [sp, #12]
 8006954:	3402      	adds	r4, #2
 8006956:	1d1a      	adds	r2, r3, #4
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800695e:	9203      	str	r2, [sp, #12]
 8006960:	9305      	str	r3, [sp, #20]
 8006962:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006a38 <_vfiprintf_r+0x22c>
 8006966:	2203      	movs	r2, #3
 8006968:	7821      	ldrb	r1, [r4, #0]
 800696a:	4650      	mov	r0, sl
 800696c:	f7fe f95f 	bl	8004c2e <memchr>
 8006970:	b138      	cbz	r0, 8006982 <_vfiprintf_r+0x176>
 8006972:	eba0 000a 	sub.w	r0, r0, sl
 8006976:	2240      	movs	r2, #64	@ 0x40
 8006978:	9b04      	ldr	r3, [sp, #16]
 800697a:	3401      	adds	r4, #1
 800697c:	4082      	lsls	r2, r0
 800697e:	4313      	orrs	r3, r2
 8006980:	9304      	str	r3, [sp, #16]
 8006982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006986:	2206      	movs	r2, #6
 8006988:	4828      	ldr	r0, [pc, #160]	@ (8006a2c <_vfiprintf_r+0x220>)
 800698a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800698e:	f7fe f94e 	bl	8004c2e <memchr>
 8006992:	2800      	cmp	r0, #0
 8006994:	d03f      	beq.n	8006a16 <_vfiprintf_r+0x20a>
 8006996:	4b26      	ldr	r3, [pc, #152]	@ (8006a30 <_vfiprintf_r+0x224>)
 8006998:	bb1b      	cbnz	r3, 80069e2 <_vfiprintf_r+0x1d6>
 800699a:	9b03      	ldr	r3, [sp, #12]
 800699c:	3307      	adds	r3, #7
 800699e:	f023 0307 	bic.w	r3, r3, #7
 80069a2:	3308      	adds	r3, #8
 80069a4:	9303      	str	r3, [sp, #12]
 80069a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069a8:	443b      	add	r3, r7
 80069aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80069ac:	e76a      	b.n	8006884 <_vfiprintf_r+0x78>
 80069ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80069b2:	460c      	mov	r4, r1
 80069b4:	2001      	movs	r0, #1
 80069b6:	e7a8      	b.n	800690a <_vfiprintf_r+0xfe>
 80069b8:	2300      	movs	r3, #0
 80069ba:	3401      	adds	r4, #1
 80069bc:	f04f 0c0a 	mov.w	ip, #10
 80069c0:	4619      	mov	r1, r3
 80069c2:	9305      	str	r3, [sp, #20]
 80069c4:	4620      	mov	r0, r4
 80069c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ca:	3a30      	subs	r2, #48	@ 0x30
 80069cc:	2a09      	cmp	r2, #9
 80069ce:	d903      	bls.n	80069d8 <_vfiprintf_r+0x1cc>
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d0c6      	beq.n	8006962 <_vfiprintf_r+0x156>
 80069d4:	9105      	str	r1, [sp, #20]
 80069d6:	e7c4      	b.n	8006962 <_vfiprintf_r+0x156>
 80069d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80069dc:	4604      	mov	r4, r0
 80069de:	2301      	movs	r3, #1
 80069e0:	e7f0      	b.n	80069c4 <_vfiprintf_r+0x1b8>
 80069e2:	ab03      	add	r3, sp, #12
 80069e4:	462a      	mov	r2, r5
 80069e6:	a904      	add	r1, sp, #16
 80069e8:	4630      	mov	r0, r6
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	4b11      	ldr	r3, [pc, #68]	@ (8006a34 <_vfiprintf_r+0x228>)
 80069ee:	f7fd fbbd 	bl	800416c <_printf_float>
 80069f2:	4607      	mov	r7, r0
 80069f4:	1c78      	adds	r0, r7, #1
 80069f6:	d1d6      	bne.n	80069a6 <_vfiprintf_r+0x19a>
 80069f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069fa:	07d9      	lsls	r1, r3, #31
 80069fc:	d405      	bmi.n	8006a0a <_vfiprintf_r+0x1fe>
 80069fe:	89ab      	ldrh	r3, [r5, #12]
 8006a00:	059a      	lsls	r2, r3, #22
 8006a02:	d402      	bmi.n	8006a0a <_vfiprintf_r+0x1fe>
 8006a04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a06:	f7fe f911 	bl	8004c2c <__retarget_lock_release_recursive>
 8006a0a:	89ab      	ldrh	r3, [r5, #12]
 8006a0c:	065b      	lsls	r3, r3, #25
 8006a0e:	f53f af1f 	bmi.w	8006850 <_vfiprintf_r+0x44>
 8006a12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a14:	e71e      	b.n	8006854 <_vfiprintf_r+0x48>
 8006a16:	ab03      	add	r3, sp, #12
 8006a18:	462a      	mov	r2, r5
 8006a1a:	a904      	add	r1, sp, #16
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	4b04      	ldr	r3, [pc, #16]	@ (8006a34 <_vfiprintf_r+0x228>)
 8006a22:	f7fd fe3f 	bl	80046a4 <_printf_i>
 8006a26:	e7e4      	b.n	80069f2 <_vfiprintf_r+0x1e6>
 8006a28:	08006f70 	.word	0x08006f70
 8006a2c:	08006f7a 	.word	0x08006f7a
 8006a30:	0800416d 	.word	0x0800416d
 8006a34:	080067e9 	.word	0x080067e9
 8006a38:	08006f76 	.word	0x08006f76

08006a3c <__swbuf_r>:
 8006a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3e:	460e      	mov	r6, r1
 8006a40:	4614      	mov	r4, r2
 8006a42:	4605      	mov	r5, r0
 8006a44:	b118      	cbz	r0, 8006a4e <__swbuf_r+0x12>
 8006a46:	6a03      	ldr	r3, [r0, #32]
 8006a48:	b90b      	cbnz	r3, 8006a4e <__swbuf_r+0x12>
 8006a4a:	f7fd ffd7 	bl	80049fc <__sinit>
 8006a4e:	69a3      	ldr	r3, [r4, #24]
 8006a50:	60a3      	str	r3, [r4, #8]
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	071a      	lsls	r2, r3, #28
 8006a56:	d501      	bpl.n	8006a5c <__swbuf_r+0x20>
 8006a58:	6923      	ldr	r3, [r4, #16]
 8006a5a:	b943      	cbnz	r3, 8006a6e <__swbuf_r+0x32>
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f000 f82a 	bl	8006ab8 <__swsetup_r>
 8006a64:	b118      	cbz	r0, 8006a6e <__swbuf_r+0x32>
 8006a66:	f04f 37ff 	mov.w	r7, #4294967295
 8006a6a:	4638      	mov	r0, r7
 8006a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	b2f6      	uxtb	r6, r6
 8006a72:	6922      	ldr	r2, [r4, #16]
 8006a74:	4637      	mov	r7, r6
 8006a76:	1a98      	subs	r0, r3, r2
 8006a78:	6963      	ldr	r3, [r4, #20]
 8006a7a:	4283      	cmp	r3, r0
 8006a7c:	dc05      	bgt.n	8006a8a <__swbuf_r+0x4e>
 8006a7e:	4621      	mov	r1, r4
 8006a80:	4628      	mov	r0, r5
 8006a82:	f7ff fd99 	bl	80065b8 <_fflush_r>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d1ed      	bne.n	8006a66 <__swbuf_r+0x2a>
 8006a8a:	68a3      	ldr	r3, [r4, #8]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	60a3      	str	r3, [r4, #8]
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	6022      	str	r2, [r4, #0]
 8006a96:	701e      	strb	r6, [r3, #0]
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	6962      	ldr	r2, [r4, #20]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d004      	beq.n	8006aaa <__swbuf_r+0x6e>
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	07db      	lsls	r3, r3, #31
 8006aa4:	d5e1      	bpl.n	8006a6a <__swbuf_r+0x2e>
 8006aa6:	2e0a      	cmp	r6, #10
 8006aa8:	d1df      	bne.n	8006a6a <__swbuf_r+0x2e>
 8006aaa:	4621      	mov	r1, r4
 8006aac:	4628      	mov	r0, r5
 8006aae:	f7ff fd83 	bl	80065b8 <_fflush_r>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d0d9      	beq.n	8006a6a <__swbuf_r+0x2e>
 8006ab6:	e7d6      	b.n	8006a66 <__swbuf_r+0x2a>

08006ab8 <__swsetup_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	4b29      	ldr	r3, [pc, #164]	@ (8006b60 <__swsetup_r+0xa8>)
 8006abc:	4605      	mov	r5, r0
 8006abe:	460c      	mov	r4, r1
 8006ac0:	6818      	ldr	r0, [r3, #0]
 8006ac2:	b118      	cbz	r0, 8006acc <__swsetup_r+0x14>
 8006ac4:	6a03      	ldr	r3, [r0, #32]
 8006ac6:	b90b      	cbnz	r3, 8006acc <__swsetup_r+0x14>
 8006ac8:	f7fd ff98 	bl	80049fc <__sinit>
 8006acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ad0:	0719      	lsls	r1, r3, #28
 8006ad2:	d422      	bmi.n	8006b1a <__swsetup_r+0x62>
 8006ad4:	06da      	lsls	r2, r3, #27
 8006ad6:	d407      	bmi.n	8006ae8 <__swsetup_r+0x30>
 8006ad8:	2209      	movs	r2, #9
 8006ada:	602a      	str	r2, [r5, #0]
 8006adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae4:	81a3      	strh	r3, [r4, #12]
 8006ae6:	e033      	b.n	8006b50 <__swsetup_r+0x98>
 8006ae8:	0758      	lsls	r0, r3, #29
 8006aea:	d512      	bpl.n	8006b12 <__swsetup_r+0x5a>
 8006aec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006aee:	b141      	cbz	r1, 8006b02 <__swsetup_r+0x4a>
 8006af0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006af4:	4299      	cmp	r1, r3
 8006af6:	d002      	beq.n	8006afe <__swsetup_r+0x46>
 8006af8:	4628      	mov	r0, r5
 8006afa:	f7fe fef9 	bl	80058f0 <_free_r>
 8006afe:	2300      	movs	r3, #0
 8006b00:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b02:	89a3      	ldrh	r3, [r4, #12]
 8006b04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006b08:	81a3      	strh	r3, [r4, #12]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	6063      	str	r3, [r4, #4]
 8006b0e:	6923      	ldr	r3, [r4, #16]
 8006b10:	6023      	str	r3, [r4, #0]
 8006b12:	89a3      	ldrh	r3, [r4, #12]
 8006b14:	f043 0308 	orr.w	r3, r3, #8
 8006b18:	81a3      	strh	r3, [r4, #12]
 8006b1a:	6923      	ldr	r3, [r4, #16]
 8006b1c:	b94b      	cbnz	r3, 8006b32 <__swsetup_r+0x7a>
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b28:	d003      	beq.n	8006b32 <__swsetup_r+0x7a>
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	f000 f882 	bl	8006c36 <__smakebuf_r>
 8006b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b36:	f013 0201 	ands.w	r2, r3, #1
 8006b3a:	d00a      	beq.n	8006b52 <__swsetup_r+0x9a>
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	60a2      	str	r2, [r4, #8]
 8006b40:	6962      	ldr	r2, [r4, #20]
 8006b42:	4252      	negs	r2, r2
 8006b44:	61a2      	str	r2, [r4, #24]
 8006b46:	6922      	ldr	r2, [r4, #16]
 8006b48:	b942      	cbnz	r2, 8006b5c <__swsetup_r+0xa4>
 8006b4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b4e:	d1c5      	bne.n	8006adc <__swsetup_r+0x24>
 8006b50:	bd38      	pop	{r3, r4, r5, pc}
 8006b52:	0799      	lsls	r1, r3, #30
 8006b54:	bf58      	it	pl
 8006b56:	6962      	ldrpl	r2, [r4, #20]
 8006b58:	60a2      	str	r2, [r4, #8]
 8006b5a:	e7f4      	b.n	8006b46 <__swsetup_r+0x8e>
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	e7f7      	b.n	8006b50 <__swsetup_r+0x98>
 8006b60:	20000018 	.word	0x20000018

08006b64 <_raise_r>:
 8006b64:	291f      	cmp	r1, #31
 8006b66:	b538      	push	{r3, r4, r5, lr}
 8006b68:	4605      	mov	r5, r0
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	d904      	bls.n	8006b78 <_raise_r+0x14>
 8006b6e:	2316      	movs	r3, #22
 8006b70:	6003      	str	r3, [r0, #0]
 8006b72:	f04f 30ff 	mov.w	r0, #4294967295
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006b7a:	b112      	cbz	r2, 8006b82 <_raise_r+0x1e>
 8006b7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b80:	b94b      	cbnz	r3, 8006b96 <_raise_r+0x32>
 8006b82:	4628      	mov	r0, r5
 8006b84:	f000 f830 	bl	8006be8 <_getpid_r>
 8006b88:	4622      	mov	r2, r4
 8006b8a:	4601      	mov	r1, r0
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b92:	f000 b817 	b.w	8006bc4 <_kill_r>
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d00a      	beq.n	8006bb0 <_raise_r+0x4c>
 8006b9a:	1c59      	adds	r1, r3, #1
 8006b9c:	d103      	bne.n	8006ba6 <_raise_r+0x42>
 8006b9e:	2316      	movs	r3, #22
 8006ba0:	6003      	str	r3, [r0, #0]
 8006ba2:	2001      	movs	r0, #1
 8006ba4:	e7e7      	b.n	8006b76 <_raise_r+0x12>
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006bae:	4798      	blx	r3
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	e7e0      	b.n	8006b76 <_raise_r+0x12>

08006bb4 <raise>:
 8006bb4:	4b02      	ldr	r3, [pc, #8]	@ (8006bc0 <raise+0xc>)
 8006bb6:	4601      	mov	r1, r0
 8006bb8:	6818      	ldr	r0, [r3, #0]
 8006bba:	f7ff bfd3 	b.w	8006b64 <_raise_r>
 8006bbe:	bf00      	nop
 8006bc0:	20000018 	.word	0x20000018

08006bc4 <_kill_r>:
 8006bc4:	b538      	push	{r3, r4, r5, lr}
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	4d06      	ldr	r5, [pc, #24]	@ (8006be4 <_kill_r+0x20>)
 8006bca:	4604      	mov	r4, r0
 8006bcc:	4608      	mov	r0, r1
 8006bce:	4611      	mov	r1, r2
 8006bd0:	602b      	str	r3, [r5, #0]
 8006bd2:	f7fa fd39 	bl	8001648 <_kill>
 8006bd6:	1c43      	adds	r3, r0, #1
 8006bd8:	d102      	bne.n	8006be0 <_kill_r+0x1c>
 8006bda:	682b      	ldr	r3, [r5, #0]
 8006bdc:	b103      	cbz	r3, 8006be0 <_kill_r+0x1c>
 8006bde:	6023      	str	r3, [r4, #0]
 8006be0:	bd38      	pop	{r3, r4, r5, pc}
 8006be2:	bf00      	nop
 8006be4:	200003f0 	.word	0x200003f0

08006be8 <_getpid_r>:
 8006be8:	f7fa bd26 	b.w	8001638 <_getpid>

08006bec <__swhatbuf_r>:
 8006bec:	b570      	push	{r4, r5, r6, lr}
 8006bee:	460c      	mov	r4, r1
 8006bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bf4:	b096      	sub	sp, #88	@ 0x58
 8006bf6:	4615      	mov	r5, r2
 8006bf8:	2900      	cmp	r1, #0
 8006bfa:	461e      	mov	r6, r3
 8006bfc:	da0c      	bge.n	8006c18 <__swhatbuf_r+0x2c>
 8006bfe:	89a3      	ldrh	r3, [r4, #12]
 8006c00:	2100      	movs	r1, #0
 8006c02:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c06:	bf14      	ite	ne
 8006c08:	2340      	movne	r3, #64	@ 0x40
 8006c0a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c0e:	2000      	movs	r0, #0
 8006c10:	6031      	str	r1, [r6, #0]
 8006c12:	602b      	str	r3, [r5, #0]
 8006c14:	b016      	add	sp, #88	@ 0x58
 8006c16:	bd70      	pop	{r4, r5, r6, pc}
 8006c18:	466a      	mov	r2, sp
 8006c1a:	f000 f849 	bl	8006cb0 <_fstat_r>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	dbed      	blt.n	8006bfe <__swhatbuf_r+0x12>
 8006c22:	9901      	ldr	r1, [sp, #4]
 8006c24:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c28:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c2c:	4259      	negs	r1, r3
 8006c2e:	4159      	adcs	r1, r3
 8006c30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c34:	e7eb      	b.n	8006c0e <__swhatbuf_r+0x22>

08006c36 <__smakebuf_r>:
 8006c36:	898b      	ldrh	r3, [r1, #12]
 8006c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c3a:	079d      	lsls	r5, r3, #30
 8006c3c:	4606      	mov	r6, r0
 8006c3e:	460c      	mov	r4, r1
 8006c40:	d507      	bpl.n	8006c52 <__smakebuf_r+0x1c>
 8006c42:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006c46:	6023      	str	r3, [r4, #0]
 8006c48:	6123      	str	r3, [r4, #16]
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	6163      	str	r3, [r4, #20]
 8006c4e:	b003      	add	sp, #12
 8006c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c52:	ab01      	add	r3, sp, #4
 8006c54:	466a      	mov	r2, sp
 8006c56:	f7ff ffc9 	bl	8006bec <__swhatbuf_r>
 8006c5a:	9f00      	ldr	r7, [sp, #0]
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	4630      	mov	r0, r6
 8006c60:	4639      	mov	r1, r7
 8006c62:	f7fe feb9 	bl	80059d8 <_malloc_r>
 8006c66:	b948      	cbnz	r0, 8006c7c <__smakebuf_r+0x46>
 8006c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c6c:	059a      	lsls	r2, r3, #22
 8006c6e:	d4ee      	bmi.n	8006c4e <__smakebuf_r+0x18>
 8006c70:	f023 0303 	bic.w	r3, r3, #3
 8006c74:	f043 0302 	orr.w	r3, r3, #2
 8006c78:	81a3      	strh	r3, [r4, #12]
 8006c7a:	e7e2      	b.n	8006c42 <__smakebuf_r+0xc>
 8006c7c:	89a3      	ldrh	r3, [r4, #12]
 8006c7e:	6020      	str	r0, [r4, #0]
 8006c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c84:	81a3      	strh	r3, [r4, #12]
 8006c86:	9b01      	ldr	r3, [sp, #4]
 8006c88:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c8c:	b15b      	cbz	r3, 8006ca6 <__smakebuf_r+0x70>
 8006c8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c92:	4630      	mov	r0, r6
 8006c94:	f000 f81e 	bl	8006cd4 <_isatty_r>
 8006c98:	b128      	cbz	r0, 8006ca6 <__smakebuf_r+0x70>
 8006c9a:	89a3      	ldrh	r3, [r4, #12]
 8006c9c:	f023 0303 	bic.w	r3, r3, #3
 8006ca0:	f043 0301 	orr.w	r3, r3, #1
 8006ca4:	81a3      	strh	r3, [r4, #12]
 8006ca6:	89a3      	ldrh	r3, [r4, #12]
 8006ca8:	431d      	orrs	r5, r3
 8006caa:	81a5      	strh	r5, [r4, #12]
 8006cac:	e7cf      	b.n	8006c4e <__smakebuf_r+0x18>
	...

08006cb0 <_fstat_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	4d06      	ldr	r5, [pc, #24]	@ (8006cd0 <_fstat_r+0x20>)
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	4608      	mov	r0, r1
 8006cba:	4611      	mov	r1, r2
 8006cbc:	602b      	str	r3, [r5, #0]
 8006cbe:	f7fa fd23 	bl	8001708 <_fstat>
 8006cc2:	1c43      	adds	r3, r0, #1
 8006cc4:	d102      	bne.n	8006ccc <_fstat_r+0x1c>
 8006cc6:	682b      	ldr	r3, [r5, #0]
 8006cc8:	b103      	cbz	r3, 8006ccc <_fstat_r+0x1c>
 8006cca:	6023      	str	r3, [r4, #0]
 8006ccc:	bd38      	pop	{r3, r4, r5, pc}
 8006cce:	bf00      	nop
 8006cd0:	200003f0 	.word	0x200003f0

08006cd4 <_isatty_r>:
 8006cd4:	b538      	push	{r3, r4, r5, lr}
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	4d05      	ldr	r5, [pc, #20]	@ (8006cf0 <_isatty_r+0x1c>)
 8006cda:	4604      	mov	r4, r0
 8006cdc:	4608      	mov	r0, r1
 8006cde:	602b      	str	r3, [r5, #0]
 8006ce0:	f7fa fd22 	bl	8001728 <_isatty>
 8006ce4:	1c43      	adds	r3, r0, #1
 8006ce6:	d102      	bne.n	8006cee <_isatty_r+0x1a>
 8006ce8:	682b      	ldr	r3, [r5, #0]
 8006cea:	b103      	cbz	r3, 8006cee <_isatty_r+0x1a>
 8006cec:	6023      	str	r3, [r4, #0]
 8006cee:	bd38      	pop	{r3, r4, r5, pc}
 8006cf0:	200003f0 	.word	0x200003f0

08006cf4 <_init>:
 8006cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf6:	bf00      	nop
 8006cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cfa:	bc08      	pop	{r3}
 8006cfc:	469e      	mov	lr, r3
 8006cfe:	4770      	bx	lr

08006d00 <_fini>:
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	bf00      	nop
 8006d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d06:	bc08      	pop	{r3}
 8006d08:	469e      	mov	lr, r3
 8006d0a:	4770      	bx	lr
