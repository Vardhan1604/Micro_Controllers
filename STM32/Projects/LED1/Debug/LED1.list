
LED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000015c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fa8  0800015c  0800015c  0000115c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004104  08004104  00005104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800416c  0800416c  0000603c  2**0
                  CONTENTS
  4 .ARM          00000008  0800416c  0800416c  0000516c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004174  08004174  0000603c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004174  08004174  00005174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004178  08004178  00005178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  0800417c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000003c  080041b8  0000603c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  080041b8  00006174  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d39  00000000  00000000  00006072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002323  00000000  00000000  00018dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0001b0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c95  00000000  00000000  0001c0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021dfe  00000000  00000000  0001cd85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136fe  00000000  00000000  0003eb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da584  00000000  00000000  00052281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c805  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044f4  00000000  00000000  0012c848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00130d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800015c <__do_global_dtors_aux>:
 800015c:	b510      	push	{r4, lr}
 800015e:	4c05      	ldr	r4, [pc, #20]	@ (8000174 <__do_global_dtors_aux+0x18>)
 8000160:	7823      	ldrb	r3, [r4, #0]
 8000162:	b933      	cbnz	r3, 8000172 <__do_global_dtors_aux+0x16>
 8000164:	4b04      	ldr	r3, [pc, #16]	@ (8000178 <__do_global_dtors_aux+0x1c>)
 8000166:	b113      	cbz	r3, 800016e <__do_global_dtors_aux+0x12>
 8000168:	4804      	ldr	r0, [pc, #16]	@ (800017c <__do_global_dtors_aux+0x20>)
 800016a:	f3af 8000 	nop.w
 800016e:	2301      	movs	r3, #1
 8000170:	7023      	strb	r3, [r4, #0]
 8000172:	bd10      	pop	{r4, pc}
 8000174:	2000003c 	.word	0x2000003c
 8000178:	00000000 	.word	0x00000000
 800017c:	080040ec 	.word	0x080040ec

08000180 <frame_dummy>:
 8000180:	b508      	push	{r3, lr}
 8000182:	4b03      	ldr	r3, [pc, #12]	@ (8000190 <frame_dummy+0x10>)
 8000184:	b11b      	cbz	r3, 800018e <frame_dummy+0xe>
 8000186:	4903      	ldr	r1, [pc, #12]	@ (8000194 <frame_dummy+0x14>)
 8000188:	4803      	ldr	r0, [pc, #12]	@ (8000198 <frame_dummy+0x18>)
 800018a:	f3af 8000 	nop.w
 800018e:	bd08      	pop	{r3, pc}
 8000190:	00000000 	.word	0x00000000
 8000194:	20000040 	.word	0x20000040
 8000198:	080040ec 	.word	0x080040ec

0800019c <__aeabi_uldivmod>:
 800019c:	b953      	cbnz	r3, 80001b4 <__aeabi_uldivmod+0x18>
 800019e:	b94a      	cbnz	r2, 80001b4 <__aeabi_uldivmod+0x18>
 80001a0:	2900      	cmp	r1, #0
 80001a2:	bf08      	it	eq
 80001a4:	2800      	cmpeq	r0, #0
 80001a6:	bf1c      	itt	ne
 80001a8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ac:	f04f 30ff 	movne.w	r0, #4294967295
 80001b0:	f000 b97e 	b.w	80004b0 <__aeabi_idiv0>
 80001b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001bc:	f000 f806 	bl	80001cc <__udivmoddi4>
 80001c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c8:	b004      	add	sp, #16
 80001ca:	4770      	bx	lr

080001cc <__udivmoddi4>:
 80001cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001d0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80001d2:	460c      	mov	r4, r1
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d14d      	bne.n	8000274 <__udivmoddi4+0xa8>
 80001d8:	428a      	cmp	r2, r1
 80001da:	460f      	mov	r7, r1
 80001dc:	4684      	mov	ip, r0
 80001de:	4696      	mov	lr, r2
 80001e0:	fab2 f382 	clz	r3, r2
 80001e4:	d960      	bls.n	80002a8 <__udivmoddi4+0xdc>
 80001e6:	b14b      	cbz	r3, 80001fc <__udivmoddi4+0x30>
 80001e8:	fa02 fe03 	lsl.w	lr, r2, r3
 80001ec:	f1c3 0220 	rsb	r2, r3, #32
 80001f0:	409f      	lsls	r7, r3
 80001f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80001f6:	fa20 f202 	lsr.w	r2, r0, r2
 80001fa:	4317      	orrs	r7, r2
 80001fc:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000200:	fa1f f48e 	uxth.w	r4, lr
 8000204:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000208:	fbb7 f1f6 	udiv	r1, r7, r6
 800020c:	fb06 7711 	mls	r7, r6, r1, r7
 8000210:	fb01 f004 	mul.w	r0, r1, r4
 8000214:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000218:	4290      	cmp	r0, r2
 800021a:	d908      	bls.n	800022e <__udivmoddi4+0x62>
 800021c:	eb1e 0202 	adds.w	r2, lr, r2
 8000220:	f101 37ff 	add.w	r7, r1, #4294967295
 8000224:	d202      	bcs.n	800022c <__udivmoddi4+0x60>
 8000226:	4290      	cmp	r0, r2
 8000228:	f200 812d 	bhi.w	8000486 <__udivmoddi4+0x2ba>
 800022c:	4639      	mov	r1, r7
 800022e:	1a12      	subs	r2, r2, r0
 8000230:	fa1f fc8c 	uxth.w	ip, ip
 8000234:	fbb2 f0f6 	udiv	r0, r2, r6
 8000238:	fb06 2210 	mls	r2, r6, r0, r2
 800023c:	fb00 f404 	mul.w	r4, r0, r4
 8000240:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000244:	4564      	cmp	r4, ip
 8000246:	d908      	bls.n	800025a <__udivmoddi4+0x8e>
 8000248:	eb1e 0c0c 	adds.w	ip, lr, ip
 800024c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000250:	d202      	bcs.n	8000258 <__udivmoddi4+0x8c>
 8000252:	4564      	cmp	r4, ip
 8000254:	f200 811a 	bhi.w	800048c <__udivmoddi4+0x2c0>
 8000258:	4610      	mov	r0, r2
 800025a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800025e:	ebac 0c04 	sub.w	ip, ip, r4
 8000262:	2100      	movs	r1, #0
 8000264:	b125      	cbz	r5, 8000270 <__udivmoddi4+0xa4>
 8000266:	fa2c f303 	lsr.w	r3, ip, r3
 800026a:	2200      	movs	r2, #0
 800026c:	e9c5 3200 	strd	r3, r2, [r5]
 8000270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000274:	428b      	cmp	r3, r1
 8000276:	d905      	bls.n	8000284 <__udivmoddi4+0xb8>
 8000278:	b10d      	cbz	r5, 800027e <__udivmoddi4+0xb2>
 800027a:	e9c5 0100 	strd	r0, r1, [r5]
 800027e:	2100      	movs	r1, #0
 8000280:	4608      	mov	r0, r1
 8000282:	e7f5      	b.n	8000270 <__udivmoddi4+0xa4>
 8000284:	fab3 f183 	clz	r1, r3
 8000288:	2900      	cmp	r1, #0
 800028a:	d14d      	bne.n	8000328 <__udivmoddi4+0x15c>
 800028c:	42a3      	cmp	r3, r4
 800028e:	f0c0 80f2 	bcc.w	8000476 <__udivmoddi4+0x2aa>
 8000292:	4290      	cmp	r0, r2
 8000294:	f080 80ef 	bcs.w	8000476 <__udivmoddi4+0x2aa>
 8000298:	4606      	mov	r6, r0
 800029a:	4623      	mov	r3, r4
 800029c:	4608      	mov	r0, r1
 800029e:	2d00      	cmp	r5, #0
 80002a0:	d0e6      	beq.n	8000270 <__udivmoddi4+0xa4>
 80002a2:	e9c5 6300 	strd	r6, r3, [r5]
 80002a6:	e7e3      	b.n	8000270 <__udivmoddi4+0xa4>
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	f040 80a2 	bne.w	80003f2 <__udivmoddi4+0x226>
 80002ae:	1a8a      	subs	r2, r1, r2
 80002b0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80002b4:	fa1f f68e 	uxth.w	r6, lr
 80002b8:	2101      	movs	r1, #1
 80002ba:	fbb2 f4f7 	udiv	r4, r2, r7
 80002be:	fb07 2014 	mls	r0, r7, r4, r2
 80002c2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002ca:	fb06 f004 	mul.w	r0, r6, r4
 80002ce:	4290      	cmp	r0, r2
 80002d0:	d90f      	bls.n	80002f2 <__udivmoddi4+0x126>
 80002d2:	eb1e 0202 	adds.w	r2, lr, r2
 80002d6:	f104 38ff 	add.w	r8, r4, #4294967295
 80002da:	bf2c      	ite	cs
 80002dc:	f04f 0901 	movcs.w	r9, #1
 80002e0:	f04f 0900 	movcc.w	r9, #0
 80002e4:	4290      	cmp	r0, r2
 80002e6:	d903      	bls.n	80002f0 <__udivmoddi4+0x124>
 80002e8:	f1b9 0f00 	cmp.w	r9, #0
 80002ec:	f000 80c8 	beq.w	8000480 <__udivmoddi4+0x2b4>
 80002f0:	4644      	mov	r4, r8
 80002f2:	1a12      	subs	r2, r2, r0
 80002f4:	fa1f fc8c 	uxth.w	ip, ip
 80002f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000300:	fb00 f606 	mul.w	r6, r0, r6
 8000304:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000308:	4566      	cmp	r6, ip
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x152>
 800030c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000310:	f100 32ff 	add.w	r2, r0, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x150>
 8000316:	4566      	cmp	r6, ip
 8000318:	f200 80bb 	bhi.w	8000492 <__udivmoddi4+0x2c6>
 800031c:	4610      	mov	r0, r2
 800031e:	ebac 0c06 	sub.w	ip, ip, r6
 8000322:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000326:	e79d      	b.n	8000264 <__udivmoddi4+0x98>
 8000328:	f1c1 0620 	rsb	r6, r1, #32
 800032c:	408b      	lsls	r3, r1
 800032e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000332:	fa22 f706 	lsr.w	r7, r2, r6
 8000336:	fa20 fc06 	lsr.w	ip, r0, r6
 800033a:	40f4      	lsrs	r4, r6
 800033c:	408a      	lsls	r2, r1
 800033e:	431f      	orrs	r7, r3
 8000340:	ea4e 030c 	orr.w	r3, lr, ip
 8000344:	fa00 fe01 	lsl.w	lr, r0, r1
 8000348:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000350:	fa1f fc87 	uxth.w	ip, r7
 8000354:	fbb4 f0f8 	udiv	r0, r4, r8
 8000358:	fb08 4410 	mls	r4, r8, r0, r4
 800035c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000360:	fb00 f90c 	mul.w	r9, r0, ip
 8000364:	45a1      	cmp	r9, r4
 8000366:	d90e      	bls.n	8000386 <__udivmoddi4+0x1ba>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 3aff 	add.w	sl, r0, #4294967295
 800036e:	bf2c      	ite	cs
 8000370:	f04f 0b01 	movcs.w	fp, #1
 8000374:	f04f 0b00 	movcc.w	fp, #0
 8000378:	45a1      	cmp	r9, r4
 800037a:	d903      	bls.n	8000384 <__udivmoddi4+0x1b8>
 800037c:	f1bb 0f00 	cmp.w	fp, #0
 8000380:	f000 8093 	beq.w	80004aa <__udivmoddi4+0x2de>
 8000384:	4650      	mov	r0, sl
 8000386:	eba4 0409 	sub.w	r4, r4, r9
 800038a:	fa1f f983 	uxth.w	r9, r3
 800038e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000392:	fb08 4413 	mls	r4, r8, r3, r4
 8000396:	fb03 fc0c 	mul.w	ip, r3, ip
 800039a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039e:	45a4      	cmp	ip, r4
 80003a0:	d906      	bls.n	80003b0 <__udivmoddi4+0x1e4>
 80003a2:	193c      	adds	r4, r7, r4
 80003a4:	f103 38ff 	add.w	r8, r3, #4294967295
 80003a8:	d201      	bcs.n	80003ae <__udivmoddi4+0x1e2>
 80003aa:	45a4      	cmp	ip, r4
 80003ac:	d87a      	bhi.n	80004a4 <__udivmoddi4+0x2d8>
 80003ae:	4643      	mov	r3, r8
 80003b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003b4:	eba4 040c 	sub.w	r4, r4, ip
 80003b8:	fba0 9802 	umull	r9, r8, r0, r2
 80003bc:	4544      	cmp	r4, r8
 80003be:	46cc      	mov	ip, r9
 80003c0:	4643      	mov	r3, r8
 80003c2:	d302      	bcc.n	80003ca <__udivmoddi4+0x1fe>
 80003c4:	d106      	bne.n	80003d4 <__udivmoddi4+0x208>
 80003c6:	45ce      	cmp	lr, r9
 80003c8:	d204      	bcs.n	80003d4 <__udivmoddi4+0x208>
 80003ca:	3801      	subs	r0, #1
 80003cc:	ebb9 0c02 	subs.w	ip, r9, r2
 80003d0:	eb68 0307 	sbc.w	r3, r8, r7
 80003d4:	b15d      	cbz	r5, 80003ee <__udivmoddi4+0x222>
 80003d6:	ebbe 020c 	subs.w	r2, lr, ip
 80003da:	eb64 0403 	sbc.w	r4, r4, r3
 80003de:	fa04 f606 	lsl.w	r6, r4, r6
 80003e2:	fa22 f301 	lsr.w	r3, r2, r1
 80003e6:	40cc      	lsrs	r4, r1
 80003e8:	431e      	orrs	r6, r3
 80003ea:	e9c5 6400 	strd	r6, r4, [r5]
 80003ee:	2100      	movs	r1, #0
 80003f0:	e73e      	b.n	8000270 <__udivmoddi4+0xa4>
 80003f2:	fa02 fe03 	lsl.w	lr, r2, r3
 80003f6:	f1c3 0120 	rsb	r1, r3, #32
 80003fa:	fa04 f203 	lsl.w	r2, r4, r3
 80003fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000408:	fa20 f101 	lsr.w	r1, r0, r1
 800040c:	fa1f f68e 	uxth.w	r6, lr
 8000410:	fbb4 f0f7 	udiv	r0, r4, r7
 8000414:	430a      	orrs	r2, r1
 8000416:	fb07 4410 	mls	r4, r7, r0, r4
 800041a:	0c11      	lsrs	r1, r2, #16
 800041c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000420:	fb00 f406 	mul.w	r4, r0, r6
 8000424:	428c      	cmp	r4, r1
 8000426:	d90e      	bls.n	8000446 <__udivmoddi4+0x27a>
 8000428:	eb1e 0101 	adds.w	r1, lr, r1
 800042c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000430:	bf2c      	ite	cs
 8000432:	f04f 0901 	movcs.w	r9, #1
 8000436:	f04f 0900 	movcc.w	r9, #0
 800043a:	428c      	cmp	r4, r1
 800043c:	d902      	bls.n	8000444 <__udivmoddi4+0x278>
 800043e:	f1b9 0f00 	cmp.w	r9, #0
 8000442:	d02c      	beq.n	800049e <__udivmoddi4+0x2d2>
 8000444:	4640      	mov	r0, r8
 8000446:	1b09      	subs	r1, r1, r4
 8000448:	b292      	uxth	r2, r2
 800044a:	fbb1 f4f7 	udiv	r4, r1, r7
 800044e:	fb07 1114 	mls	r1, r7, r4, r1
 8000452:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000456:	fb04 f106 	mul.w	r1, r4, r6
 800045a:	4291      	cmp	r1, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x2a2>
 800045e:	eb1e 0202 	adds.w	r2, lr, r2
 8000462:	f104 38ff 	add.w	r8, r4, #4294967295
 8000466:	d201      	bcs.n	800046c <__udivmoddi4+0x2a0>
 8000468:	4291      	cmp	r1, r2
 800046a:	d815      	bhi.n	8000498 <__udivmoddi4+0x2cc>
 800046c:	4644      	mov	r4, r8
 800046e:	1a52      	subs	r2, r2, r1
 8000470:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000474:	e721      	b.n	80002ba <__udivmoddi4+0xee>
 8000476:	1a86      	subs	r6, r0, r2
 8000478:	eb64 0303 	sbc.w	r3, r4, r3
 800047c:	2001      	movs	r0, #1
 800047e:	e70e      	b.n	800029e <__udivmoddi4+0xd2>
 8000480:	3c02      	subs	r4, #2
 8000482:	4472      	add	r2, lr
 8000484:	e735      	b.n	80002f2 <__udivmoddi4+0x126>
 8000486:	3902      	subs	r1, #2
 8000488:	4472      	add	r2, lr
 800048a:	e6d0      	b.n	800022e <__udivmoddi4+0x62>
 800048c:	44f4      	add	ip, lr
 800048e:	3802      	subs	r0, #2
 8000490:	e6e3      	b.n	800025a <__udivmoddi4+0x8e>
 8000492:	44f4      	add	ip, lr
 8000494:	3802      	subs	r0, #2
 8000496:	e742      	b.n	800031e <__udivmoddi4+0x152>
 8000498:	3c02      	subs	r4, #2
 800049a:	4472      	add	r2, lr
 800049c:	e7e7      	b.n	800046e <__udivmoddi4+0x2a2>
 800049e:	3802      	subs	r0, #2
 80004a0:	4471      	add	r1, lr
 80004a2:	e7d0      	b.n	8000446 <__udivmoddi4+0x27a>
 80004a4:	3b02      	subs	r3, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	e782      	b.n	80003b0 <__udivmoddi4+0x1e4>
 80004aa:	3802      	subs	r0, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	e76a      	b.n	8000386 <__udivmoddi4+0x1ba>

080004b0 <__aeabi_idiv0>:
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop

080004b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b8:	f000 fdb0 	bl	800101c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004bc:	f000 f86e 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c0:	f000 f988 	bl	80007d4 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80004c4:	f000 f8c2 	bl	800064c <MX_ICACHE_Init>
  MX_TIM1_Init();
 80004c8:	f000 f8d4 	bl	8000674 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80004cc:	2108      	movs	r1, #8
 80004ce:	4830      	ldr	r0, [pc, #192]	@ (8000590 <main+0xdc>)
 80004d0:	f002 f936 	bl	8002740 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80004d4:	2000      	movs	r0, #0
 80004d6:	f000 fb7f 	bl	8000bd8 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80004da:	2001      	movs	r0, #1
 80004dc:	f000 fb7c 	bl	8000bd8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80004e0:	2002      	movs	r0, #2
 80004e2:	f000 fb79 	bl	8000bd8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(B1, BUTTON_MODE_EXTI);
 80004e6:	2101      	movs	r1, #1
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 fbdb 	bl	8000ca4 <BSP_PB_Init>
  BSP_PB_Init(B2, BUTTON_MODE_EXTI);
 80004ee:	2101      	movs	r1, #1
 80004f0:	2001      	movs	r0, #1
 80004f2:	f000 fbd7 	bl	8000ca4 <BSP_PB_Init>
  BSP_PB_Init(B3, BUTTON_MODE_EXTI);
 80004f6:	2101      	movs	r1, #1
 80004f8:	2002      	movs	r0, #2
 80004fa:	f000 fbd3 	bl	8000ca4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80004fe:	4b25      	ldr	r3, [pc, #148]	@ (8000594 <main+0xe0>)
 8000500:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000504:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000506:	4b23      	ldr	r3, [pc, #140]	@ (8000594 <main+0xe0>)
 8000508:	2200      	movs	r2, #0
 800050a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800050c:	4b21      	ldr	r3, [pc, #132]	@ (8000594 <main+0xe0>)
 800050e:	2200      	movs	r2, #0
 8000510:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000512:	4b20      	ldr	r3, [pc, #128]	@ (8000594 <main+0xe0>)
 8000514:	2200      	movs	r2, #0
 8000516:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000518:	4b1e      	ldr	r3, [pc, #120]	@ (8000594 <main+0xe0>)
 800051a:	2200      	movs	r2, #0
 800051c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800051e:	491d      	ldr	r1, [pc, #116]	@ (8000594 <main+0xe0>)
 8000520:	2000      	movs	r0, #0
 8000522:	f000 fc9d 	bl	8000e60 <BSP_COM_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <main+0x7c>
  {
    Error_Handler();
 800052c:	f000 f9a8 	bl	8000880 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
          // Gradually increase duty cycle
          for (dutyCycle = 0; dutyCycle < 1000; dutyCycle += 10) {
 8000530:	4b19      	ldr	r3, [pc, #100]	@ (8000598 <main+0xe4>)
 8000532:	2200      	movs	r2, #0
 8000534:	801a      	strh	r2, [r3, #0]
 8000536:	e00d      	b.n	8000554 <main+0xa0>
              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutyCycle); // Set PWM duty cycle
 8000538:	4b17      	ldr	r3, [pc, #92]	@ (8000598 <main+0xe4>)
 800053a:	881a      	ldrh	r2, [r3, #0]
 800053c:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <main+0xdc>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	63da      	str	r2, [r3, #60]	@ 0x3c
              HAL_Delay(50); // Delay for visible effect
 8000542:	2032      	movs	r0, #50	@ 0x32
 8000544:	f000 fe28 	bl	8001198 <HAL_Delay>
          for (dutyCycle = 0; dutyCycle < 1000; dutyCycle += 10) {
 8000548:	4b13      	ldr	r3, [pc, #76]	@ (8000598 <main+0xe4>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	330a      	adds	r3, #10
 800054e:	b29a      	uxth	r2, r3
 8000550:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <main+0xe4>)
 8000552:	801a      	strh	r2, [r3, #0]
 8000554:	4b10      	ldr	r3, [pc, #64]	@ (8000598 <main+0xe4>)
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800055c:	d3ec      	bcc.n	8000538 <main+0x84>
          }

          // Gradually decrease duty cycle
          for (dutyCycle = 1000; dutyCycle > 0; dutyCycle -= 10) {
 800055e:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <main+0xe4>)
 8000560:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000564:	801a      	strh	r2, [r3, #0]
 8000566:	e00d      	b.n	8000584 <main+0xd0>
              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutyCycle); // Set PWM duty cycle
 8000568:	4b0b      	ldr	r3, [pc, #44]	@ (8000598 <main+0xe4>)
 800056a:	881a      	ldrh	r2, [r3, #0]
 800056c:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <main+0xdc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	63da      	str	r2, [r3, #60]	@ 0x3c
              HAL_Delay(50); // Delay for visible effect
 8000572:	2032      	movs	r0, #50	@ 0x32
 8000574:	f000 fe10 	bl	8001198 <HAL_Delay>
          for (dutyCycle = 1000; dutyCycle > 0; dutyCycle -= 10) {
 8000578:	4b07      	ldr	r3, [pc, #28]	@ (8000598 <main+0xe4>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	3b0a      	subs	r3, #10
 800057e:	b29a      	uxth	r2, r3
 8000580:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <main+0xe4>)
 8000582:	801a      	strh	r2, [r3, #0]
 8000584:	4b04      	ldr	r3, [pc, #16]	@ (8000598 <main+0xe4>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1ed      	bne.n	8000568 <main+0xb4>
          for (dutyCycle = 0; dutyCycle < 1000; dutyCycle += 10) {
 800058c:	e7d0      	b.n	8000530 <main+0x7c>
 800058e:	bf00      	nop
 8000590:	20000068 	.word	0x20000068
 8000594:	20000058 	.word	0x20000058
 8000598:	200000b4 	.word	0x200000b4

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b098      	sub	sp, #96	@ 0x60
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2240      	movs	r2, #64	@ 0x40
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 fd71 	bl	8004092 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	463b      	mov	r3, r7
 80005b2:	2220      	movs	r2, #32
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fd6b 	bl	8004092 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005bc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80005c0:	f001 f97c 	bl	80018bc <HAL_PWREx_ControlVoltageScaling>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x32>
  {
    Error_Handler();
 80005ca:	f000 f959 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ce:	2302      	movs	r3, #2
 80005d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
 80005dc:	2302      	movs	r3, #2
 80005de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL1.PLLM = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL1.PLLN = 8;
 80005e8:	2308      	movs	r3, #8
 80005ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL1.PLLP = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL1.PLLQ = 2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLR = 2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f001 f9b9 	bl	8001978 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800060c:	f000 f938 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	233f      	movs	r3, #63	@ 0x3f
 8000612:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK7|RCC_CLOCKTYPE_HCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2303      	movs	r3, #3
 8000616:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB7CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHB5_PLL1_CLKDivider = RCC_SYSCLK_PLL1_DIV2;
 8000628:	2304      	movs	r3, #4
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHB5_HSEHSI_CLKDivider = RCC_SYSCLK_HSEHSI_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	2101      	movs	r1, #1
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fd89 	bl	800214c <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000640:	f000 f91e 	bl	8000880 <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3760      	adds	r7, #96	@ 0x60
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000650:	2000      	movs	r0, #0
 8000652:	f001 f903 	bl	800185c <HAL_ICACHE_ConfigAssociativityMode>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800065c:	f000 f910 	bl	8000880 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000660:	f001 f91c 	bl	800189c <HAL_ICACHE_Enable>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800066a:	f000 f909 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b09c      	sub	sp, #112	@ 0x70
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000688:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000694:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
 80006a4:	615a      	str	r2, [r3, #20]
 80006a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2234      	movs	r2, #52	@ 0x34
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 fcef 	bl	8004092 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006b4:	4b45      	ldr	r3, [pc, #276]	@ (80007cc <MX_TIM1_Init+0x158>)
 80006b6:	4a46      	ldr	r2, [pc, #280]	@ (80007d0 <MX_TIM1_Init+0x15c>)
 80006b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006ba:	4b44      	ldr	r3, [pc, #272]	@ (80007cc <MX_TIM1_Init+0x158>)
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c0:	4b42      	ldr	r3, [pc, #264]	@ (80007cc <MX_TIM1_Init+0x158>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80006c6:	4b41      	ldr	r3, [pc, #260]	@ (80007cc <MX_TIM1_Init+0x158>)
 80006c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ce:	4b3f      	ldr	r3, [pc, #252]	@ (80007cc <MX_TIM1_Init+0x158>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006d4:	4b3d      	ldr	r3, [pc, #244]	@ (80007cc <MX_TIM1_Init+0x158>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006da:	4b3c      	ldr	r3, [pc, #240]	@ (80007cc <MX_TIM1_Init+0x158>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006e0:	483a      	ldr	r0, [pc, #232]	@ (80007cc <MX_TIM1_Init+0x158>)
 80006e2:	f001 ff75 	bl	80025d0 <HAL_TIM_Base_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80006ec:	f000 f8c8 	bl	8000880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006f6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80006fa:	4619      	mov	r1, r3
 80006fc:	4833      	ldr	r0, [pc, #204]	@ (80007cc <MX_TIM1_Init+0x158>)
 80006fe:	f002 fa13 	bl	8002b28 <HAL_TIM_ConfigClockSource>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000708:	f000 f8ba 	bl	8000880 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800070c:	482f      	ldr	r0, [pc, #188]	@ (80007cc <MX_TIM1_Init+0x158>)
 800070e:	f001 ffb6 	bl	800267e <HAL_TIM_PWM_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000718:	f000 f8b2 	bl	8000880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071c:	2300      	movs	r3, #0
 800071e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000720:	2300      	movs	r3, #0
 8000722:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000728:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800072c:	4619      	mov	r1, r3
 800072e:	4827      	ldr	r0, [pc, #156]	@ (80007cc <MX_TIM1_Init+0x158>)
 8000730:	f002 feaa 	bl	8003488 <HAL_TIMEx_MasterConfigSynchronization>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800073a:	f000 f8a1 	bl	8000880 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800073e:	2360      	movs	r3, #96	@ 0x60
 8000740:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000746:	2300      	movs	r3, #0
 8000748:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800074a:	2300      	movs	r3, #0
 800074c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000752:	2300      	movs	r3, #0
 8000754:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000756:	2300      	movs	r3, #0
 8000758:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800075a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800075e:	2208      	movs	r2, #8
 8000760:	4619      	mov	r1, r3
 8000762:	481a      	ldr	r0, [pc, #104]	@ (80007cc <MX_TIM1_Init+0x158>)
 8000764:	f002 f8cc 	bl	8002900 <HAL_TIM_PWM_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800076e:	f000 f887 	bl	8000880 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000786:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800078a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000798:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800079c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4619      	mov	r1, r3
 80007ae:	4807      	ldr	r0, [pc, #28]	@ (80007cc <MX_TIM1_Init+0x158>)
 80007b0:	f002 fed2 	bl	8003558 <HAL_TIMEx_ConfigBreakDeadTime>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80007ba:	f000 f861 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007be:	4803      	ldr	r0, [pc, #12]	@ (80007cc <MX_TIM1_Init+0x158>)
 80007c0:	f000 f8a0 	bl	8000904 <HAL_TIM_MspPostInit>

}
 80007c4:	bf00      	nop
 80007c6:	3770      	adds	r7, #112	@ 0x70
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000068 	.word	0x20000068
 80007d0:	40012c00 	.word	0x40012c00

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	4b23      	ldr	r3, [pc, #140]	@ (8000878 <MX_GPIO_Init+0xa4>)
 80007ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007f0:	4a21      	ldr	r2, [pc, #132]	@ (8000878 <MX_GPIO_Init+0xa4>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <MX_GPIO_Init+0xa4>)
 80007fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000800:	f003 0302 	and.w	r3, r3, #2
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000808:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <MX_GPIO_Init+0xa4>)
 800080a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800080e:	4a1a      	ldr	r2, [pc, #104]	@ (8000878 <MX_GPIO_Init+0xa4>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000818:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <MX_GPIO_Init+0xa4>)
 800081a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_GPIO_Init+0xa4>)
 8000828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800082c:	4a12      	ldr	r2, [pc, #72]	@ (8000878 <MX_GPIO_Init+0xa4>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <MX_GPIO_Init+0xa4>)
 8000838:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800083c:	f003 0301 	and.w	r3, r3, #1
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|output1_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f640 0104 	movw	r1, #2052	@ 0x804
 800084a:	480c      	ldr	r0, [pc, #48]	@ (800087c <MX_GPIO_Init+0xa8>)
 800084c:	f000 ffb2 	bl	80017b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 output1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|output1_Pin;
 8000850:	f640 0304 	movw	r3, #2052	@ 0x804
 8000854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4619      	mov	r1, r3
 8000868:	4804      	ldr	r0, [pc, #16]	@ (800087c <MX_GPIO_Init+0xa8>)
 800086a:	f000 fe57 	bl	800151c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086e:	bf00      	nop
 8000870:	3720      	adds	r7, #32
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	46020c00 	.word	0x46020c00
 800087c:	42020400 	.word	0x42020400

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <Error_Handler+0x8>

0800088c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <HAL_MspInit+0x30>)
 8000894:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000898:	4a08      	ldr	r2, [pc, #32]	@ (80008bc <HAL_MspInit+0x30>)
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <HAL_MspInit+0x30>)
 80008a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80008a8:	f003 0304 	and.w	r3, r3, #4
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	46020c00 	.word	0x46020c00

080008c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a0b      	ldr	r2, [pc, #44]	@ (80008fc <HAL_TIM_Base_MspInit+0x3c>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d10e      	bne.n	80008f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <HAL_TIM_Base_MspInit+0x40>)
 80008d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80008d8:	4a09      	ldr	r2, [pc, #36]	@ (8000900 <HAL_TIM_Base_MspInit+0x40>)
 80008da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008de:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80008e2:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <HAL_TIM_Base_MspInit+0x40>)
 80008e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80008e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	40012c00 	.word	0x40012c00
 8000900:	46020c00 	.word	0x46020c00

08000904 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a12      	ldr	r2, [pc, #72]	@ (800096c <HAL_TIM_MspPostInit+0x68>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d11e      	bne.n	8000964 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <HAL_TIM_MspPostInit+0x6c>)
 8000928:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800092c:	4a10      	ldr	r2, [pc, #64]	@ (8000970 <HAL_TIM_MspPostInit+0x6c>)
 800092e:	f043 0302 	orr.w	r3, r3, #2
 8000932:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <HAL_TIM_MspPostInit+0x6c>)
 8000938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800093c:	f003 0302 	and.w	r3, r3, #2
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB4 (NJTRST)     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000944:	2310      	movs	r3, #16
 8000946:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000954:	2301      	movs	r3, #1
 8000956:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	@ (8000974 <HAL_TIM_MspPostInit+0x70>)
 8000960:	f000 fddc 	bl	800151c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000964:	bf00      	nop
 8000966:	3720      	adds	r7, #32
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40012c00 	.word	0x40012c00
 8000970:	46020c00 	.word	0x46020c00
 8000974:	42020400 	.word	0x42020400

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <NMI_Handler+0x4>

08000980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <MemManage_Handler+0x4>

08000990 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <UsageFault_Handler+0x4>

080009a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ce:	f000 fbc3 	bl	8001158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_PIN);
 80009da:	2040      	movs	r0, #64	@ 0x40
 80009dc:	f000 ff02 	bl	80017e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_PIN);
 80009e8:	2080      	movs	r0, #128	@ 0x80
 80009ea:	f000 fefb 	bl	80017e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_PIN);
 80009f6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009fa:	f000 fef3 	bl	80017e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  __IO uint32_t tmpreg;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <SystemInit+0x20>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a0e:	4a05      	ldr	r2, [pc, #20]	@ (8000a24 <SystemInit+0x20>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  CLEAR_BIT(ADC4->CR, ADC_CR_ADVREGEN);

  /* Disable ADC kernel clock */
  CLEAR_BIT(RCC->AHB4ENR, RCC_AHB4ENR_ADC4EN);
#endif
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b089      	sub	sp, #36	@ 0x24
 8000a2c:	af00      	add	r7, sp, #0
  uint32_t plln;
  float_t fracn;
  float_t pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 8000a2e:	4b4f      	ldr	r3, [pc, #316]	@ (8000b6c <SystemCoreClockUpdate+0x144>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f003 030c 	and.w	r3, r3, #12
 8000a36:	2b08      	cmp	r3, #8
 8000a38:	d002      	beq.n	8000a40 <SystemCoreClockUpdate+0x18>
 8000a3a:	2b0c      	cmp	r3, #12
 8000a3c:	d00b      	beq.n	8000a56 <SystemCoreClockUpdate+0x2e>
 8000a3e:	e07d      	b.n	8000b3c <SystemCoreClockUpdate+0x114>
  {
    case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
      SystemCoreClock = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8000a40:	4b4a      	ldr	r3, [pc, #296]	@ (8000b6c <SystemCoreClockUpdate+0x144>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	0d1b      	lsrs	r3, r3, #20
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	4a49      	ldr	r2, [pc, #292]	@ (8000b70 <SystemCoreClockUpdate+0x148>)
 8000a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a50:	4a48      	ldr	r2, [pc, #288]	@ (8000b74 <SystemCoreClockUpdate+0x14c>)
 8000a52:	6013      	str	r3, [r2, #0]
      break;
 8000a54:	e076      	b.n	8000b44 <SystemCoreClockUpdate+0x11c>

    case (RCC_CFGR1_SWS_0 | RCC_CFGR1_SWS_1):  /* PLL1 used as system clock source */
      /* PLL_VCO = (PLLsource / PLLM) * PLLN * FractionnalPart
          SYSCLK = PLL_VCO / PLLR */
      /* Get PLL1 CFGR and DIVR register values */
      tmp1 = RCC->PLL1CFGR;
 8000a56:	4b45      	ldr	r3, [pc, #276]	@ (8000b6c <SystemCoreClockUpdate+0x144>)
 8000a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a5a:	61fb      	str	r3, [r7, #28]
      tmp2 = RCC->PLL1DIVR;
 8000a5c:	4b43      	ldr	r3, [pc, #268]	@ (8000b6c <SystemCoreClockUpdate+0x144>)
 8000a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a60:	617b      	str	r3, [r7, #20]

      /* Retrieve PLL1 multiplication factor and divider */
      pllm = ((tmp1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	613b      	str	r3, [r7, #16]
      plln = (tmp2 & RCC_PLL1DIVR_PLL1N) + 1U;
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a74:	3301      	adds	r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
      pllr = ((tmp2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	0e1b      	lsrs	r3, r3, #24
 8000a7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a80:	3301      	adds	r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]

      /* Check if fractional part is enable */
      if ((tmp1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d00b      	beq.n	8000aa6 <SystemCoreClockUpdate+0x7e>
      {
        fracn = (float_t)((uint32_t)((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8000a8e:	4b37      	ldr	r3, [pc, #220]	@ (8000b6c <SystemCoreClockUpdate+0x144>)
 8000a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a92:	08db      	lsrs	r3, r3, #3
 8000a94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000a98:	ee07 3a90 	vmov	s15, r3
 8000a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aa0:	edc7 7a06 	vstr	s15, [r7, #24]
 8000aa4:	e002      	b.n	8000aac <SystemCoreClockUpdate+0x84>
      }
      else
      {
        fracn = (float_t)0U;
 8000aa6:	f04f 0300 	mov.w	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
      }

      /* determine PLL source */
      pllsource = (tmp1 & RCC_PLL1CFGR_PLL1SRC);
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	f003 0303 	and.w	r3, r3, #3
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d003      	beq.n	8000ac2 <SystemCoreClockUpdate+0x9a>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b03      	cmp	r3, #3
 8000abe:	d003      	beq.n	8000ac8 <SystemCoreClockUpdate+0xa0>
 8000ac0:	e00c      	b.n	8000adc <SystemCoreClockUpdate+0xb4>
      switch (pllsource)
      {
        /* HSI used as PLL1 clock source */
        case RCC_PLL1CFGR_PLL1SRC_1:
          tmp1 = HSI_VALUE;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b78 <SystemCoreClockUpdate+0x150>)
 8000ac4:	61fb      	str	r3, [r7, #28]
          break;
 8000ac6:	e00c      	b.n	8000ae2 <SystemCoreClockUpdate+0xba>

        /* HSE used as PLL1 clock source */
        case (RCC_PLL1CFGR_PLL1SRC_0 | RCC_PLL1CFGR_PLL1SRC_1):
          tmp1 = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8000ac8:	4b28      	ldr	r3, [pc, #160]	@ (8000b6c <SystemCoreClockUpdate+0x144>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	0d1b      	lsrs	r3, r3, #20
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	4a27      	ldr	r2, [pc, #156]	@ (8000b70 <SystemCoreClockUpdate+0x148>)
 8000ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad8:	61fb      	str	r3, [r7, #28]
          break;
 8000ada:	e002      	b.n	8000ae2 <SystemCoreClockUpdate+0xba>

        default:
          tmp1 = 0U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
          break;
 8000ae0:	bf00      	nop
      }

      /* Compute VCO output frequency */
      pllvco = ((float_t) tmp1 / (float_t)pllm) * (((float_t)plln + (float_t)(fracn / (float_t)0x2000U)));
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	ee07 3a90 	vmov	s15, r3
 8000ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	ee07 3a90 	vmov	s15, r3
 8000af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	ee07 3a90 	vmov	s15, r3
 8000b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000b04:	ed97 6a06 	vldr	s12, [r7, #24]
 8000b08:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8000b7c <SystemCoreClockUpdate+0x154>
 8000b0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000b10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b18:	edc7 7a00 	vstr	s15, [r7]
      SystemCoreClock = (uint32_t)((float_t)(pllvco / (float_t)pllr));
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	ee07 3a90 	vmov	s15, r3
 8000b22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b26:	edd7 6a00 	vldr	s13, [r7]
 8000b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b32:	ee17 2a90 	vmov	r2, s15
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <SystemCoreClockUpdate+0x14c>)
 8000b38:	601a      	str	r2, [r3, #0]
      break;
 8000b3a:	e003      	b.n	8000b44 <SystemCoreClockUpdate+0x11c>

    case 0x00u:  /* HSI used as system clock source */
    default:
      SystemCoreClock = HSI_VALUE;
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b74 <SystemCoreClockUpdate+0x14c>)
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b78 <SystemCoreClockUpdate+0x150>)
 8000b40:	601a      	str	r2, [r3, #0]
      break;
 8000b42:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp1 = AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)];
 8000b44:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <SystemCoreClockUpdate+0x144>)
 8000b46:	6a1b      	ldr	r3, [r3, #32]
 8000b48:	f003 0307 	and.w	r3, r3, #7
 8000b4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b80 <SystemCoreClockUpdate+0x158>)
 8000b4e:	5cd3      	ldrb	r3, [r2, r3]
 8000b50:	61fb      	str	r3, [r7, #28]

  /* HCLK clock frequency */
  SystemCoreClock >>= tmp1;
 8000b52:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <SystemCoreClockUpdate+0x14c>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	fa22 f303 	lsr.w	r3, r2, r3
 8000b5c:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <SystemCoreClockUpdate+0x14c>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	3724      	adds	r7, #36	@ 0x24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	46020c00 	.word	0x46020c00
 8000b70:	01e84800 	.word	0x01e84800
 8000b74:	20000000 	.word	0x20000000
 8000b78:	00f42400 	.word	0x00f42400
 8000b7c:	46000000 	.word	0x46000000
 8000b80:	08004144 	.word	0x08004144

08000b84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000b84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b88:	f7ff ff3c 	bl	8000a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b8e:	e003      	b.n	8000b98 <LoopCopyDataInit>

08000b90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b90:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b96:	3104      	adds	r1, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b98:	480a      	ldr	r0, [pc, #40]	@ (8000bc4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ba0:	d3f6      	bcc.n	8000b90 <CopyDataInit>
	ldr	r2, =_sbss
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ba4:	e002      	b.n	8000bac <LoopFillZerobss>

08000ba6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ba6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ba8:	f842 3b04 	str.w	r3, [r2], #4

08000bac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bac:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <LoopForever+0x16>)
	cmp	r2, r3
 8000bae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bb0:	d3f9      	bcc.n	8000ba6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bb2:	f003 fa77 	bl	80040a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bb6:	f7ff fc7d 	bl	80004b4 <main>

08000bba <LoopForever>:

LoopForever:
    b LoopForever
 8000bba:	e7fe      	b.n	8000bba <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000bbc:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 8000bc0:	0800417c 	.word	0x0800417c
	ldr	r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bc8:	2000003c 	.word	0x2000003c
	ldr	r2, =_sbss
 8000bcc:	2000003c 	.word	0x2000003c
	ldr	r3, = _ebss
 8000bd0:	20000174 	.word	0x20000174

08000bd4 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC4_IRQHandler>
	...

08000bd8 <BSP_LED_Init>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	@ 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LD1)
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d10f      	bne.n	8000c08 <BSP_LED_Init+0x30>
  {
    LD1_GPIO_CLK_ENABLE();
 8000be8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c98 <BSP_LED_Init+0xc0>)
 8000bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bee:	4a2a      	ldr	r2, [pc, #168]	@ (8000c98 <BSP_LED_Init+0xc0>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bf8:	4b27      	ldr	r3, [pc, #156]	@ (8000c98 <BSP_LED_Init+0xc0>)
 8000bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	e021      	b.n	8000c4c <BSP_LED_Init+0x74>
  }
  else if (Led == LD2)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d10f      	bne.n	8000c2e <BSP_LED_Init+0x56>
  {
    LD2_GPIO_CLK_ENABLE();
 8000c0e:	4b22      	ldr	r3, [pc, #136]	@ (8000c98 <BSP_LED_Init+0xc0>)
 8000c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c14:	4a20      	ldr	r2, [pc, #128]	@ (8000c98 <BSP_LED_Init+0xc0>)
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c98 <BSP_LED_Init+0xc0>)
 8000c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c24:	f003 0302 	and.w	r3, r3, #2
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	e00e      	b.n	8000c4c <BSP_LED_Init+0x74>
  }
  else /* Led = LD3 */
  {
    LD3_GPIO_CLK_ENABLE();
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <BSP_LED_Init+0xc0>)
 8000c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c34:	4a18      	ldr	r2, [pc, #96]	@ (8000c98 <BSP_LED_Init+0xc0>)
 8000c36:	f043 0302 	orr.w	r3, r3, #2
 8000c3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c3e:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <BSP_LED_Init+0xc0>)
 8000c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	4a13      	ldr	r2, [pc, #76]	@ (8000c9c <BSP_LED_Init+0xc4>)
 8000c50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca0 <BSP_LED_Init+0xc8>)
 8000c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6a:	f107 0214 	add.w	r2, r7, #20
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fc53 	bl	800151c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	4a09      	ldr	r2, [pc, #36]	@ (8000ca0 <BSP_LED_Init+0xc8>)
 8000c7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	4a06      	ldr	r2, [pc, #24]	@ (8000c9c <BSP_LED_Init+0xc4>)
 8000c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c86:	2201      	movs	r2, #1
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f000 fd93 	bl	80017b4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3728      	adds	r7, #40	@ 0x28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	46020c00 	.word	0x46020c00
 8000c9c:	20000004 	.word	0x20000004
 8000ca0:	2000000c 	.word	0x2000000c

08000ca4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code.
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b094      	sub	sp, #80	@ 0x50
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	460a      	mov	r2, r1
 8000cae:	71fb      	strb	r3, [r7, #7]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	71bb      	strb	r3, [r7, #6]
  int32_t               status = BSP_ERROR_NONE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_B1_IT_PRIORITY,
 8000cb8:	4a5b      	ldr	r2, [pc, #364]	@ (8000e28 <BSP_PB_Init+0x184>)
 8000cba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                                       BSP_B2_IT_PRIORITY,
                                                       BSP_B3_IT_PRIORITY};
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {B1_EXTI_LINE, B2_EXTI_LINE, B3_EXTI_LINE};
 8000cc4:	4a59      	ldr	r2, [pc, #356]	@ (8000e2c <BSP_PB_Init+0x188>)
 8000cc6:	f107 0320 	add.w	r3, r7, #32
 8000cca:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ccc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  BSP_EXTI_LineCallback ButtonCallback[BUTTONn]     = {B1_EXTI_Callback,
 8000cd0:	4a57      	ldr	r2, [pc, #348]	@ (8000e30 <BSP_PB_Init+0x18c>)
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                                       B2_EXTI_Callback,
                                                       B3_EXTI_Callback};

  /* Enable the BUTTON clock */
  if (Button == B1)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10f      	bne.n	8000d02 <BSP_PB_Init+0x5e>
  {
    B1_GPIO_CLK_ENABLE();
 8000ce2:	4b54      	ldr	r3, [pc, #336]	@ (8000e34 <BSP_PB_Init+0x190>)
 8000ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ce8:	4a52      	ldr	r2, [pc, #328]	@ (8000e34 <BSP_PB_Init+0x190>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cf2:	4b50      	ldr	r3, [pc, #320]	@ (8000e34 <BSP_PB_Init+0x190>)
 8000cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	e021      	b.n	8000d46 <BSP_PB_Init+0xa2>
  }
  else if (Button == B2)
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d10f      	bne.n	8000d28 <BSP_PB_Init+0x84>
  {
    B2_GPIO_CLK_ENABLE();
 8000d08:	4b4a      	ldr	r3, [pc, #296]	@ (8000e34 <BSP_PB_Init+0x190>)
 8000d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d0e:	4a49      	ldr	r2, [pc, #292]	@ (8000e34 <BSP_PB_Init+0x190>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d18:	4b46      	ldr	r3, [pc, #280]	@ (8000e34 <BSP_PB_Init+0x190>)
 8000d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	e00e      	b.n	8000d46 <BSP_PB_Init+0xa2>
  }
  else /* B3 */
  {
    B3_GPIO_CLK_ENABLE();
 8000d28:	4b42      	ldr	r3, [pc, #264]	@ (8000e34 <BSP_PB_Init+0x190>)
 8000d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d2e:	4a41      	ldr	r2, [pc, #260]	@ (8000e34 <BSP_PB_Init+0x190>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d38:	4b3e      	ldr	r3, [pc, #248]	@ (8000e34 <BSP_PB_Init+0x190>)
 8000d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  }

  GPIO_Init.Pin   = BUTTON_PIN[Button];
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	4a3b      	ldr	r2, [pc, #236]	@ (8000e38 <BSP_PB_Init+0x194>)
 8000d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_Init.Pull  = GPIO_PULLUP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d54:	2302      	movs	r3, #2
 8000d56:	647b      	str	r3, [r7, #68]	@ 0x44

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000d58:	79bb      	ldrb	r3, [r7, #6]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d10b      	bne.n	8000d76 <BSP_PB_Init+0xd2>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	4a35      	ldr	r2, [pc, #212]	@ (8000e3c <BSP_PB_Init+0x198>)
 8000d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 fbd3 	bl	800151c <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d14f      	bne.n	8000e1c <BSP_PB_Init+0x178>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
 8000d7c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	4a2d      	ldr	r2, [pc, #180]	@ (8000e3c <BSP_PB_Init+0x198>)
 8000d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 fbc3 	bl	800151c <HAL_GPIO_Init>

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 8000d96:	79fa      	ldrb	r2, [r7, #7]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4413      	add	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4a27      	ldr	r2, [pc, #156]	@ (8000e40 <BSP_PB_Init+0x19c>)
 8000da2:	441a      	add	r2, r3
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	3350      	adds	r3, #80	@ 0x50
 8000daa:	443b      	add	r3, r7
 8000dac:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000db0:	4619      	mov	r1, r3
 8000db2:	4610      	mov	r0, r2
 8000db4:	f000 fb9e 	bl	80014f4 <HAL_EXTI_GetHandle>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d12b      	bne.n	8000e16 <BSP_PB_Init+0x172>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_FALLING_CB_ID, ButtonCallback[Button]) == HAL_OK)
 8000dbe:	79fa      	ldrb	r2, [r7, #7]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e40 <BSP_PB_Init+0x19c>)
 8000dca:	1898      	adds	r0, r3, r2
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	3350      	adds	r3, #80	@ 0x50
 8000dd2:	443b      	add	r3, r7
 8000dd4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2102      	movs	r1, #2
 8000ddc:	f000 fb5e 	bl	800149c <HAL_EXTI_RegisterCallback>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d113      	bne.n	8000e0e <BSP_PB_Init+0x16a>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], BSP_BUTTON_IT_PRIO[Button], 0x00);
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	4a16      	ldr	r2, [pc, #88]	@ (8000e44 <BSP_PB_Init+0x1a0>)
 8000dea:	56d0      	ldrsb	r0, [r2, r3]
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	3350      	adds	r3, #80	@ 0x50
 8000df2:	443b      	add	r3, r7
 8000df4:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f000 faa8 	bl	8001350 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	4a10      	ldr	r2, [pc, #64]	@ (8000e44 <BSP_PB_Init+0x1a0>)
 8000e04:	56d3      	ldrsb	r3, [r2, r3]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 fabf 	bl	800138a <HAL_NVIC_EnableIRQ>
 8000e0c:	e006      	b.n	8000e1c <BSP_PB_Init+0x178>
      }
      else
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8000e0e:	f06f 0303 	mvn.w	r3, #3
 8000e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000e14:	e002      	b.n	8000e1c <BSP_PB_Init+0x178>
      }
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8000e16:	f06f 0303 	mvn.w	r3, #3
 8000e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return status;
 8000e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3750      	adds	r7, #80	@ 0x50
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	08004120 	.word	0x08004120
 8000e2c:	0800412c 	.word	0x0800412c
 8000e30:	08004138 	.word	0x08004138
 8000e34:	46020c00 	.word	0x46020c00
 8000e38:	20000018 	.word	0x20000018
 8000e3c:	20000020 	.word	0x20000020
 8000e40:	2000014c 	.word	0x2000014c
 8000e44:	2000002c 	.word	0x2000002c

08000e48 <BSP_PB_Callback>:
  *     @arg B2
  *     @arg B3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code.
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d103      	bne.n	8000e7e <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8000e76:	f06f 0301 	mvn.w	r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	e026      	b.n	8000ecc <BSP_COM_Init+0x6c>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
 8000e7e:	79fa      	ldrb	r2, [r7, #7]
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	4915      	ldr	r1, [pc, #84]	@ (8000ed8 <BSP_COM_Init+0x78>)
 8000e84:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e88:	4914      	ldr	r1, [pc, #80]	@ (8000edc <BSP_COM_Init+0x7c>)
 8000e8a:	2094      	movs	r0, #148	@ 0x94
 8000e8c:	fb00 f303 	mul.w	r3, r0, r3
 8000e90:	440b      	add	r3, r1
 8000e92:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2294      	movs	r2, #148	@ 0x94
 8000e98:	fb02 f303 	mul.w	r3, r2, r3
 8000e9c:	4a0f      	ldr	r2, [pc, #60]	@ (8000edc <BSP_COM_Init+0x7c>)
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f863 	bl	8000f6c <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10f      	bne.n	8000ecc <BSP_COM_Init+0x6c>
    {
      if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2294      	movs	r2, #148	@ 0x94
 8000eb0:	fb02 f303 	mul.w	r3, r2, r3
 8000eb4:	4a09      	ldr	r2, [pc, #36]	@ (8000edc <BSP_COM_Init+0x7c>)
 8000eb6:	4413      	add	r3, r2
 8000eb8:	6839      	ldr	r1, [r7, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f810 	bl	8000ee0 <MX_USART1_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d002      	beq.n	8000ecc <BSP_COM_Init+0x6c>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8000ec6:	f06f 0303 	mvn.w	r3, #3
 8000eca:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return status;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000030 	.word	0x20000030
 8000edc:	200000b8 	.word	0x200000b8

08000ee0 <MX_USART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	891b      	ldrh	r3, [r3, #8]
 8000efe:	461a      	mov	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	895b      	ldrh	r3, [r3, #10]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	220c      	movs	r2, #12
 8000f12:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	899b      	ldrh	r3, [r3, #12]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f24:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f002 fb96 	bl	8003664 <HAL_UART_Init>
 8000f38:	4603      	mov	r3, r0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <B1_EXTI_Callback>:
/**
  * @brief  B1 EXTI line detection callbacks.
  * @retval None.
  */
static void B1_EXTI_Callback(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	af00      	add	r7, sp, #0
  BSP_PB_Callback(B1);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f7ff ff7e 	bl	8000e48 <BSP_PB_Callback>
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <B2_EXTI_Callback>:
/**
  * @brief  B2 EXTI line detection callbacks.
  * @retval None.
  */
static void B2_EXTI_Callback(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  BSP_PB_Callback(B2);
 8000f54:	2001      	movs	r0, #1
 8000f56:	f7ff ff77 	bl	8000e48 <BSP_PB_Callback>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <B3_EXTI_Callback>:
/**
  * @brief  B3 EXTI line detection callbacks.
  * @retval None.
  */
static void B3_EXTI_Callback(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  BSP_PB_Callback(B3);
 8000f62:	2002      	movs	r0, #2
 8000f64:	f7ff ff70 	bl	8000e48 <BSP_PB_Callback>
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	@ 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable COM and GPIO clocks */
  COM1_TX_GPIO_CLK_ENABLE();
 8000f74:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <UART_MspInit+0xa4>)
 8000f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f7a:	4a25      	ldr	r2, [pc, #148]	@ (8001010 <UART_MspInit+0xa4>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f84:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <UART_MspInit+0xa4>)
 8000f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000f92:	4b1f      	ldr	r3, [pc, #124]	@ (8001010 <UART_MspInit+0xa4>)
 8000f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f98:	4a1d      	ldr	r2, [pc, #116]	@ (8001010 <UART_MspInit+0xa4>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <UART_MspInit+0xa4>)
 8000fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
  COM1_CLK_ENABLE();
 8000fb0:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <UART_MspInit+0xa4>)
 8000fb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000fb6:	4a16      	ldr	r2, [pc, #88]	@ (8001010 <UART_MspInit+0xa4>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fbc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000fc0:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <UART_MspInit+0xa4>)
 8000fc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM1_TX_PIN;
 8000fce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Alternate = COM1_TX_AF;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &GPIO_Init);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480a      	ldr	r0, [pc, #40]	@ (8001014 <UART_MspInit+0xa8>)
 8000fec:	f000 fa96 	bl	800151c <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM1_RX_PIN;
 8000ff0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ff4:	617b      	str	r3, [r7, #20]
  GPIO_Init.Alternate = COM1_RX_AF;
 8000ff6:	2307      	movs	r3, #7
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &GPIO_Init);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	@ (8001018 <UART_MspInit+0xac>)
 8001002:	f000 fa8b 	bl	800151c <HAL_GPIO_Init>
}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	@ 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	46020c00 	.word	0x46020c00
 8001014:	42020400 	.word	0x42020400
 8001018:	42020000 	.word	0x42020000

0800101c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001020:	4b0d      	ldr	r3, [pc, #52]	@ (8001058 <HAL_Init+0x3c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0c      	ldr	r2, [pc, #48]	@ (8001058 <HAL_Init+0x3c>)
 8001026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800102a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102c:	2003      	movs	r0, #3
 800102e:	f000 f984 	bl	800133a <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 8001032:	f7ff fcf9 	bl	8000a28 <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001036:	2004      	movs	r0, #4
 8001038:	f000 f9d8 	bl	80013ec <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800103c:	200f      	movs	r0, #15
 800103e:	f000 f80d 	bl	800105c <HAL_InitTick>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_Init+0x30>
  {
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e002      	b.n	8001052 <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f7ff fc1e 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40022000 	.word	0x40022000

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001068:	4b36      	ldr	r3, [pc, #216]	@ (8001144 <HAL_InitTick+0xe8>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e062      	b.n	800113a <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001074:	4b34      	ldr	r3, [pc, #208]	@ (8001148 <HAL_InitTick+0xec>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	2b04      	cmp	r3, #4
 800107e:	d10c      	bne.n	800109a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001080:	4b32      	ldr	r3, [pc, #200]	@ (800114c <HAL_InitTick+0xf0>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b2f      	ldr	r3, [pc, #188]	@ (8001144 <HAL_InitTick+0xe8>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800108e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	e03d      	b.n	8001116 <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 800109a:	4b2d      	ldr	r3, [pc, #180]	@ (8001150 <HAL_InitTick+0xf4>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80010a4:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80010ac:	d025      	beq.n	80010fa <HAL_InitTick+0x9e>
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80010b4:	d82e      	bhi.n	8001114 <HAL_InitTick+0xb8>
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d004      	beq.n	80010c6 <HAL_InitTick+0x6a>
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010c2:	d00d      	beq.n	80010e0 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 80010c4:	e026      	b.n	8001114 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80010c6:	4b21      	ldr	r3, [pc, #132]	@ (800114c <HAL_InitTick+0xf0>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001144 <HAL_InitTick+0xe8>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	4619      	mov	r1, r3
 80010d0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80010d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010dc:	60fb      	str	r3, [r7, #12]
        break;
 80010de:	e01a      	b.n	8001116 <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <HAL_InitTick+0xe8>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80010ee:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	60fb      	str	r3, [r7, #12]
        break;
 80010f8:	e00d      	b.n	8001116 <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80010fa:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <HAL_InitTick+0xe8>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001104:	fbb3 f3f2 	udiv	r3, r3, r2
 8001108:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800110c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001110:	60fb      	str	r3, [r7, #12]
        break;
 8001112:	e000      	b.n	8001116 <HAL_InitTick+0xba>
        break;
 8001114:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f000 f946 	bl	80013a8 <HAL_SYSTICK_Config>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e009      	b.n	800113a <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001126:	2200      	movs	r2, #0
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	f04f 30ff 	mov.w	r0, #4294967295
 800112e:	f000 f90f 	bl	8001350 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001132:	4a08      	ldr	r2, [pc, #32]	@ (8001154 <HAL_InitTick+0xf8>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000038 	.word	0x20000038
 8001148:	e000e010 	.word	0xe000e010
 800114c:	20000000 	.word	0x20000000
 8001150:	46020c00 	.word	0x46020c00
 8001154:	20000034 	.word	0x20000034

08001158 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <HAL_IncTick+0x20>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_IncTick+0x24>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	@ (800117c <HAL_IncTick+0x24>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000038 	.word	0x20000038
 800117c:	20000170 	.word	0x20000170

08001180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b03      	ldr	r3, [pc, #12]	@ (8001194 <HAL_GetTick+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000170 	.word	0x20000170

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff ffee 	bl	8001180 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <HAL_Delay+0x44>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011be:	bf00      	nop
 80011c0:	f7ff ffde 	bl	8001180 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000038 	.word	0x20000038

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db0b      	blt.n	800126e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	4907      	ldr	r1, [pc, #28]	@ (800127c <__NVIC_EnableIRQ+0x38>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	2001      	movs	r0, #1
 8001266:	fa00 f202 	lsl.w	r2, r0, r2
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	@ (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	@ (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	@ 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	@ 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ff4c 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
 800135c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
 800135e:	f7ff ff63 	bl	8001228 <__NVIC_GetPriorityGrouping>
 8001362:	4603      	mov	r3, r0
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	6978      	ldr	r0, [r7, #20]
 8001370:	f7ff ffb0 	bl	80012d4 <NVIC_EncodePriority>
 8001374:	4602      	mov	r2, r0
 8001376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff7f 	bl	8001280 <__NVIC_SetPriority>
}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbaxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff53 	bl	8001244 <__NVIC_EnableIRQ>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013b8:	d301      	bcc.n	80013be <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00d      	b.n	80013da <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <HAL_SYSTICK_Config+0x40>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80013c6:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <HAL_SYSTICK_Config+0x40>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80013cc:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <HAL_SYSTICK_Config+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a05      	ldr	r2, [pc, #20]	@ (80013e8 <HAL_SYSTICK_Config+0x40>)
 80013d2:	f043 0303 	orr.w	r3, r3, #3
 80013d6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010

080013ec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	d844      	bhi.n	8001484 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80013fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001400 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80013fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001400:	08001423 	.word	0x08001423
 8001404:	08001441 	.word	0x08001441
 8001408:	08001463 	.word	0x08001463
 800140c:	08001485 	.word	0x08001485
 8001410:	08001415 	.word	0x08001415
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001414:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a1e      	ldr	r2, [pc, #120]	@ (8001494 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	6013      	str	r3, [r2, #0]
      break;
 8001420:	e031      	b.n	8001486 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001422:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a1b      	ldr	r2, [pc, #108]	@ (8001494 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001428:	f023 0304 	bic.w	r3, r3, #4
 800142c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800142e:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001434:	4a18      	ldr	r2, [pc, #96]	@ (8001498 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001436:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800143a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800143e:	e022      	b.n	8001486 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001440:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a13      	ldr	r2, [pc, #76]	@ (8001494 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001446:	f023 0304 	bic.w	r3, r3, #4
 800144a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001452:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001456:	4a10      	ldr	r2, [pc, #64]	@ (8001498 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001458:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800145c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001460:	e011      	b.n	8001486 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001462:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a0b      	ldr	r2, [pc, #44]	@ (8001494 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001468:	f023 0304 	bic.w	r3, r3, #4
 800146c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800146e:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001474:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001478:	4a07      	ldr	r2, [pc, #28]	@ (8001498 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800147a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800147e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001482:	e000      	b.n	8001486 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001484:	bf00      	nop
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e010 	.word	0xe000e010
 8001498:	46020c00 	.word	0x46020c00

0800149c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800149c:	b480      	push	{r7}
 800149e:	b087      	sub	sp, #28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	460b      	mov	r3, r1
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80014ae:	7afb      	ldrb	r3, [r7, #11]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d011      	beq.n	80014d8 <HAL_EXTI_RegisterCallback+0x3c>
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	dc13      	bgt.n	80014e0 <HAL_EXTI_RegisterCallback+0x44>
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <HAL_EXTI_RegisterCallback+0x26>
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d007      	beq.n	80014d0 <HAL_EXTI_RegisterCallback+0x34>
 80014c0:	e00e      	b.n	80014e0 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	609a      	str	r2, [r3, #8]
      break;
 80014ce:	e00a      	b.n	80014e6 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	605a      	str	r2, [r3, #4]
      break;
 80014d6:	e006      	b.n	80014e6 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	609a      	str	r2, [r3, #8]
      break;
 80014de:	e002      	b.n	80014e6 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	75fb      	strb	r3, [r7, #23]
      break;
 80014e4:	bf00      	nop
  }

  return status;
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	371c      	adds	r7, #28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e003      	b.n	8001510 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800150e:	2300      	movs	r3, #0
  }
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800151c:	b480      	push	{r7}
 800151e:	b087      	sub	sp, #28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800152a:	e130      	b.n	800178e <HAL_GPIO_Init+0x272>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	2101      	movs	r1, #1
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	fa01 f303 	lsl.w	r3, r1, r3
 8001538:	4013      	ands	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 8122 	beq.w	8001788 <HAL_GPIO_Init+0x26c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b01      	cmp	r3, #1
 800154e:	d005      	beq.n	800155c <HAL_GPIO_Init+0x40>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d130      	bne.n	80015be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001592:	2201      	movs	r2, #1
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	091b      	lsrs	r3, r3, #4
 80015a8:	f003 0201 	and.w	r2, r3, #1
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d017      	beq.n	80015fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	2203      	movs	r2, #3
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d123      	bne.n	800164e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	08da      	lsrs	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3208      	adds	r2, #8
 800160e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	220f      	movs	r2, #15
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	08da      	lsrs	r2, r3, #3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3208      	adds	r2, #8
 8001648:	6939      	ldr	r1, [r7, #16]
 800164a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2203      	movs	r2, #3
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0203 	and.w	r2, r3, #3
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d07c      	beq.n	8001788 <HAL_GPIO_Init+0x26c>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800168e:	4a47      	ldr	r2, [pc, #284]	@ (80017ac <HAL_GPIO_Init+0x290>)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	089b      	lsrs	r3, r3, #2
 8001694:	3318      	adds	r3, #24
 8001696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	220f      	movs	r2, #15
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	0a9a      	lsrs	r2, r3, #10
 80016b6:	4b3e      	ldr	r3, [pc, #248]	@ (80017b0 <HAL_GPIO_Init+0x294>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	f002 0203 	and.w	r2, r2, #3
 80016c0:	00d2      	lsls	r2, r2, #3
 80016c2:	4093      	lsls	r3, r2
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80016ca:	4938      	ldr	r1, [pc, #224]	@ (80017ac <HAL_GPIO_Init+0x290>)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	3318      	adds	r3, #24
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016d8:	4b34      	ldr	r3, [pc, #208]	@ (80017ac <HAL_GPIO_Init+0x290>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x1e0>
        {
          temp |= iocurrent;
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016fc:	4a2b      	ldr	r2, [pc, #172]	@ (80017ac <HAL_GPIO_Init+0x290>)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001702:	4b2a      	ldr	r3, [pc, #168]	@ (80017ac <HAL_GPIO_Init+0x290>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x20a>
        {
          temp |= iocurrent;
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001726:	4a21      	ldr	r2, [pc, #132]	@ (80017ac <HAL_GPIO_Init+0x290>)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800172c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ac <HAL_GPIO_Init+0x290>)
 800172e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001752:	4a16      	ldr	r2, [pc, #88]	@ (80017ac <HAL_GPIO_Init+0x290>)
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 800175a:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <HAL_GPIO_Init+0x290>)
 800175c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	43db      	mvns	r3, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001780:	4a0a      	ldr	r2, [pc, #40]	@ (80017ac <HAL_GPIO_Init+0x290>)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3301      	adds	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	fa22 f303 	lsr.w	r3, r2, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	f47f aec7 	bne.w	800152c <HAL_GPIO_Init+0x10>
  }
}
 800179e:	bf00      	nop
 80017a0:	bf00      	nop
 80017a2:	371c      	adds	r7, #28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	46022000 	.word	0x46022000
 80017b0:	002f7f7f 	.word	0x002f7f7f

080017b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	807b      	strh	r3, [r7, #2]
 80017c0:	4613      	mov	r3, r2
 80017c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017c4:	787b      	ldrb	r3, [r7, #1]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017d0:	e002      	b.n	80017d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00U)
 80017ee:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d006      	beq.n	8001808 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80017fa:	4a0c      	ldr	r2, [pc, #48]	@ (800182c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f814 	bl	8001830 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00U)
 8001808:	4b08      	ldr	r3, [pc, #32]	@ (800182c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001814:	4a05      	ldr	r2, [pc, #20]	@ (800182c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	4618      	mov	r0, r3
 800181e:	f000 f812 	bl	8001846 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	46022000 	.word	0x46022000

08001830 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001868:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e007      	b.n	800188a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800187a:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 0204 	bic.w	r2, r3, #4
 8001882:	4905      	ldr	r1, [pc, #20]	@ (8001898 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
  }

  return status;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40030400 	.word	0x40030400

0800189c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80018a0:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <HAL_ICACHE_Enable+0x1c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a04      	ldr	r2, [pc, #16]	@ (80018b8 <HAL_ICACHE_Enable+0x1c>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	40030400 	.word	0x40030400

080018bc <HAL_PWREx_ControlVoltageScaling>:
  *        only take effect after the 2.4 GHz RADIO has entered Sleep or Deepsleep mode.
  * @note  In range 2, the 2.4 GHz RADIO shall not transmit nor receive.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  uint32_t vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80018c4:	4b29      	ldr	r3, [pc, #164]	@ (800196c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80018c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018cc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d101      	bne.n	80018da <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e042      	b.n	8001960 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Set voltage scaling level */
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 80018da:	4b24      	ldr	r3, [pc, #144]	@ (800196c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80018e2:	4922      	ldr	r1, [pc, #136]	@ (800196c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60cb      	str	r3, [r1, #12]


  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 80018ea:	4b21      	ldr	r3, [pc, #132]	@ (8001970 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2232      	movs	r2, #50	@ 0x32
 80018f0:	fb02 f303 	mul.w	r3, r2, r3
 80018f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001974 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	0c9b      	lsrs	r3, r3, #18
 80018fc:	3301      	adds	r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001900:	e002      	b.n	8001908 <HAL_PWREx_ControlVoltageScaling+0x4c>
  {
    timeout--;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3b01      	subs	r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001908:	4b18      	ldr	r3, [pc, #96]	@ (800196c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <HAL_PWREx_ControlVoltageScaling+0x5e>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f3      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x46>
  }

  /* Check time out  */
  if (timeout == 0U)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_PWREx_ControlVoltageScaling+0x68>
  {
    return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e01d      	b.n	8001960 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Wait until ACTVOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8001924:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2232      	movs	r2, #50	@ 0x32
 800192a:	fb02 f303 	mul.w	r3, r2, r3
 800192e:	4a11      	ldr	r2, [pc, #68]	@ (8001974 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8001930:	fba2 2303 	umull	r2, r3, r2, r3
 8001934:	0c9b      	lsrs	r3, r3, #18
 8001936:	3301      	adds	r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800193a:	e002      	b.n	8001942 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3b01      	subs	r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001942:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001946:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d102      	bne.n	8001954 <HAL_PWREx_ControlVoltageScaling+0x98>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f3      	bne.n	800193c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out  */
  if (timeout == 0U)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_PWREx_ControlVoltageScaling+0xa2>
  {
    return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e000      	b.n	8001960 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	46020800 	.word	0x46020800
 8001970:	20000000 	.word	0x20000000
 8001974:	431bde83 	.word	0x431bde83

08001978 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	@ 0x30
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t mask;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e3d9      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800198a:	4b90      	ldr	r3, [pc, #576]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	623b      	str	r3, [r7, #32]
  pllsrc = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001994:	4b8d      	ldr	r3, [pc, #564]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d072      	beq.n	8001a90 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL1 in these cases it is not allowed to be disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_OscConfig+0x44>
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	2b0c      	cmp	r3, #12
 80019b4:	d12a      	bne.n	8001a0c <HAL_RCC_OscConfig+0x94>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSE)))
 80019b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d127      	bne.n	8001a0c <HAL_RCC_OscConfig+0x94>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_OscConfig+0x50>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e3ba      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Otherwise, applying divider is allowed */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d15f      	bne.n	8001a8e <HAL_RCC_OscConfig+0x116>
        {
          assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

          /* Adjust the HSE division factor */
          __HAL_RCC_HSE_CONFIG(RCC_HSE_ON | RCC_OscInitStruct->HSEDiv);
 80019ce:	4b7f      	ldr	r3, [pc, #508]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	4313      	orrs	r3, r2
 80019dc:	4a7b      	ldr	r2, [pc, #492]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 80019de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e2:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSE value */
          SystemCoreClock = (HSE_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSEPRE)) >> RCC_CR_HSEPRE_Pos)));
 80019e4:	4b79      	ldr	r3, [pc, #484]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	0d1b      	lsrs	r3, r3, #20
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	4a78      	ldr	r2, [pc, #480]	@ (8001bd0 <HAL_RCC_OscConfig+0x258>)
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
 80019f4:	4a77      	ldr	r2, [pc, #476]	@ (8001bd4 <HAL_RCC_OscConfig+0x25c>)
 80019f6:	6013      	str	r3, [r2, #0]

          /* Adapt Systick interrupt period */
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019f8:	4b77      	ldr	r3, [pc, #476]	@ (8001bd8 <HAL_RCC_OscConfig+0x260>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fb2d 	bl	800105c <HAL_InitTick>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d042      	beq.n	8001a8e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e398      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d01f      	beq.n	8001a54 <HAL_RCC_OscConfig+0xdc>
      {
        assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG((RCC_OscInitStruct->HSEState | RCC_OscInitStruct->HSEDiv));
 8001a14:	4b6d      	ldr	r3, [pc, #436]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6859      	ldr	r1, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	430b      	orrs	r3, r1
 8001a26:	4969      	ldr	r1, [pc, #420]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fba8 	bl	8001180 <HAL_GetTick>
 8001a30:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fba4 	bl	8001180 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	@ 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e37b      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a46:	4b61      	ldr	r3, [pc, #388]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0xbc>
 8001a52:	e01d      	b.n	8001a90 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a54:	4b5d      	ldr	r3, [pc, #372]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	495a      	ldr	r1, [pc, #360]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a66:	f7ff fb8b 	bl	8001180 <HAL_GetTick>
 8001a6a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6e:	f7ff fb87 	bl	8001180 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b64      	cmp	r3, #100	@ 0x64
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e35e      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a80:	4b52      	ldr	r3, [pc, #328]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f0      	bne.n	8001a6e <HAL_RCC_OscConfig+0xf6>
 8001a8c:	e000      	b.n	8001a90 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001a8e:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d05a      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <HAL_RCC_OscConfig+0x136>
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	2b0c      	cmp	r3, #12
 8001aa6:	d113      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x158>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSI)))
 8001aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d110      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x158>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCC_OscConfig+0x142>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e341      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aba:	4b44      	ldr	r3, [pc, #272]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	041b      	lsls	r3, r3, #16
 8001ac8:	4940      	ldr	r1, [pc, #256]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	610b      	str	r3, [r1, #16]
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ace:	e040      	b.n	8001b52 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d023      	beq.n	8001b20 <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad8:	4b3c      	ldr	r3, [pc, #240]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a3b      	ldr	r2, [pc, #236]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001ade:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fb4c 	bl	8001180 <HAL_GetTick>
 8001ae8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aec:	f7ff fb48 	bl	8001180 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e31f      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001afe:	4b33      	ldr	r3, [pc, #204]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x174>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0a:	4b30      	ldr	r3, [pc, #192]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	041b      	lsls	r3, r3, #16
 8001b18:	492c      	ldr	r1, [pc, #176]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	610b      	str	r3, [r1, #16]
 8001b1e:	e018      	b.n	8001b52 <HAL_RCC_OscConfig+0x1da>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b20:	4b2a      	ldr	r3, [pc, #168]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a29      	ldr	r2, [pc, #164]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001b26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fb28 	bl	8001180 <HAL_GetTick>
 8001b30:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x1ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b34:	f7ff fb24 	bl	8001180 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e2fb      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b46:	4b21      	ldr	r3, [pc, #132]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x1bc>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 80d2 	beq.w	8001d04 <HAL_RCC_OscConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Update LSI1 configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8001b66:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d111      	bne.n	8001b98 <HAL_RCC_OscConfig+0x220>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b74:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b7a:	4a14      	ldr	r2, [pc, #80]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001b7c:	f043 0304 	orr.w	r3, r3, #4
 8001b80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001b84:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <HAL_RCC_OscConfig+0x254>)
 8001b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001b92:	2301      	movs	r3, #1
 8001b94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001b98:	4b10      	ldr	r3, [pc, #64]	@ (8001bdc <HAL_RCC_OscConfig+0x264>)
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d123      	bne.n	8001bec <HAL_RCC_OscConfig+0x274>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8001bdc <HAL_RCC_OscConfig+0x264>)
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8001bdc <HAL_RCC_OscConfig+0x264>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb0:	f7ff fae6 	bl	8001180 <HAL_GetTick>
 8001bb4:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001bb6:	e013      	b.n	8001be0 <HAL_RCC_OscConfig+0x268>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb8:	f7ff fae2 	bl	8001180 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d90c      	bls.n	8001be0 <HAL_RCC_OscConfig+0x268>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e2b9      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
 8001bca:	bf00      	nop
 8001bcc:	46020c00 	.word	0x46020c00
 8001bd0:	01e84800 	.word	0x01e84800
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	20000034 	.word	0x20000034
 8001bdc:	46020800 	.word	0x46020800
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001be0:	4ba4      	ldr	r3, [pc, #656]	@ (8001e74 <HAL_RCC_OscConfig+0x4fc>)
 8001be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0e5      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x240>
        }
      }
    }

    /* Get BDCR1 register value */
    tmpreg1 = RCC->BDCR1;
 8001bec:	4ba2      	ldr	r3, [pc, #648]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bf2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Define mask depending on LSI presence */
    mask = RCC_BDCR1_LSI1ON;
 8001bf4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001bf8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_LSI2_SUPPORT)
    mask |= RCC_BDCR1_LSI2ON;
#endif /* RCC_LSI2_SUPPORT */

    /* Check the LSI1 State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d056      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x338>
    {
      if ((RCC_OscInitStruct->LSIState & RCC_LSI1_ON) != 0x00u)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d030      	beq.n	8001c70 <HAL_RCC_OscConfig+0x2f8>
      {
        /* Check LSI1 division factor */
        assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

        /* Check is LSIDiv is requested to be changed and LSI is already ON */
        if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_BDCR1_LSI1PREDIV)) && ((tmpreg1 & RCC_BDCR1_LSI1RDY) != 0x00u))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69da      	ldr	r2, [r3, #28]
 8001c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d020      	beq.n	8001c5e <HAL_RCC_OscConfig+0x2e6>
 8001c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d01b      	beq.n	8001c5e <HAL_RCC_OscConfig+0x2e6>
        {
          /* Disable LSI1 */
          tmpreg1 &= ~RCC_BDCR1_LSI1ON;
 8001c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c28:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
          RCC->BDCR1 = tmpreg1;
 8001c2e:	4a92      	ldr	r2, [pc, #584]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c36:	f7ff faa3 	bl	8001180 <HAL_GetTick>
 8001c3a:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is disabled */
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x2d8>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3e:	f7ff fa9f 	bl	8001180 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b14      	cmp	r3, #20
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x2d8>
            {
              /* LSI1 may be forced ON by IWDG */
              return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e276      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8001c50:	4b89      	ldr	r3, [pc, #548]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001c52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1ef      	bne.n	8001c3e <HAL_RCC_OscConfig+0x2c6>
          HAL_Delay(1);
#endif
        }

        /* Set LSI1 division factor */
        tmpreg1 &= ~RCC_BDCR1_LSI1PREDIV;
 8001c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Enable Concerned LSI */
      tmpreg1 |= RCC_OscInitStruct->LSIState;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c76:	4313      	orrs	r3, r2
 8001c78:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8001c7a:	4a7f      	ldr	r2, [pc, #508]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7ff fa7d 	bl	8001180 <HAL_GetTick>
 8001c86:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready : LSIRDY bit is position ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x324>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8a:	f7ff fa79 	bl	8001180 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b14      	cmp	r3, #20
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x324>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e250      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8001c9c:	4b76      	ldr	r3, [pc, #472]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001c9e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0ed      	beq.n	8001c8a <HAL_RCC_OscConfig+0x312>
 8001cae:	e01d      	b.n	8001cec <HAL_RCC_OscConfig+0x374>
#endif
    }
    else
    {
      /* Disable the Internal Low Speed oscillator LSI1 and LSI2 is available */
      tmpreg1 &= ~mask;
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8001cba:	4a6f      	ldr	r2, [pc, #444]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cbe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc2:	f7ff fa5d 	bl	8001180 <HAL_GetTick>
 8001cc6:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is disabled : LSIRDY bit position is ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x364>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cca:	f7ff fa59 	bl	8001180 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b14      	cmp	r3, #20
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x364>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e230      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8001cdc:	4b66      	ldr	r3, [pc, #408]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001cde:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1ee      	bne.n	8001cca <HAL_RCC_OscConfig+0x352>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d107      	bne.n	8001d04 <HAL_RCC_OscConfig+0x38c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf4:	4b60      	ldr	r3, [pc, #384]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cfa:	4a5f      	ldr	r2, [pc, #380]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001cfc:	f023 0304 	bic.w	r3, r3, #4
 8001d00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80e2 	beq.w	8001ed6 <HAL_RCC_OscConfig+0x55e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8001d18:	4b57      	ldr	r3, [pc, #348]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d111      	bne.n	8001d4a <HAL_RCC_OscConfig+0x3d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	4b54      	ldr	r3, [pc, #336]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d2c:	4a52      	ldr	r2, [pc, #328]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001d36:	4b50      	ldr	r3, [pc, #320]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d44:	2301      	movs	r3, #1
 8001d46:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d4a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e74 <HAL_RCC_OscConfig+0x4fc>)
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d118      	bne.n	8001d88 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001d56:	4b47      	ldr	r3, [pc, #284]	@ (8001e74 <HAL_RCC_OscConfig+0x4fc>)
 8001d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5a:	4a46      	ldr	r2, [pc, #280]	@ (8001e74 <HAL_RCC_OscConfig+0x4fc>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d62:	f7ff fa0d 	bl	8001180 <HAL_GetTick>
 8001d66:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6a:	f7ff fa09 	bl	8001180 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e1e0      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e74 <HAL_RCC_OscConfig+0x4fc>)
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x3f2>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d051      	beq.n	8001e34 <HAL_RCC_OscConfig+0x4bc>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_LSESYSEN);
 8001d90:	4b39      	ldr	r3, [pc, #228]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001d92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001da2:	4313      	orrs	r3, r2
 8001da4:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8001da6:	4a34      	ldr	r2, [pc, #208]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001daa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dae:	f7ff f9e7 	bl	8001180 <HAL_GetTick>
 8001db2:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 8001db4:	e00a      	b.n	8001dcc <HAL_RCC_OscConfig+0x454>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db6:	f7ff f9e3 	bl	8001180 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x454>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e1b8      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 8001dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001dce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0ed      	beq.n	8001db6 <HAL_RCC_OscConfig+0x43e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR1_LSESYSEN) != 0U)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d01e      	beq.n	8001e24 <HAL_RCC_OscConfig+0x4ac>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_OscConfig+0x486>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de8:	f7ff f9ca 	bl	8001180 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x486>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e19f      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 8001dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0ed      	beq.n	8001de8 <HAL_RCC_OscConfig+0x470>
 8001e0c:	e057      	b.n	8001ebe <HAL_RCC_OscConfig+0x546>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7ff f9b7 	bl	8001180 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e18c      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8001e24:	4b14      	ldr	r3, [pc, #80]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001e26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1ed      	bne.n	8001e0e <HAL_RCC_OscConfig+0x496>
 8001e32:	e044      	b.n	8001ebe <HAL_RCC_OscConfig+0x546>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR1, (RCC_BDCR1_LSEON | RCC_BDCR1_LSESYSEN));
 8001e34:	4b10      	ldr	r3, [pc, #64]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001e36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e3a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001e3c:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8001e40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR1, RCC_BDCR1_LSEBYP);
 8001e44:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001e46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e4a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001e4c:	f023 0304 	bic.w	r3, r3, #4
 8001e50:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e54:	f7ff f994 	bl	8001180 <HAL_GetTick>
 8001e58:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8001e5a:	e00f      	b.n	8001e7c <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5c:	f7ff f990 	bl	8001180 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d906      	bls.n	8001e7c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e165      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
 8001e72:	bf00      	nop
 8001e74:	46020800 	.word	0x46020800
 8001e78:	46020c00 	.word	0x46020c00
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8001e7c:	4b98      	ldr	r3, [pc, #608]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 8001e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1e8      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4e4>
        }
      }

      if (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSEN) != 0U)
 8001e8a:	4b95      	ldr	r3, [pc, #596]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 8001e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d012      	beq.n	8001ebe <HAL_RCC_OscConfig+0x546>
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9a:	f7ff f971 	bl	8001180 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e146      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8001eb0:	4b8b      	ldr	r3, [pc, #556]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 8001eb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ed      	bne.n	8001e9a <HAL_RCC_OscConfig+0x522>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ebe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d107      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec6:	4b86      	ldr	r3, [pc, #536]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 8001ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ecc:	4a84      	ldr	r2, [pc, #528]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 8001ece:	f023 0304 	bic.w	r3, r3, #4
 8001ed2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if ((RCC_OscInitStruct->PLL1.PLLState) != RCC_PLL_NONE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 812e 	beq.w	800213c <HAL_RCC_OscConfig+0x7c4>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	2b0c      	cmp	r3, #12
 8001ee4:	f000 80ba 	beq.w	800205c <HAL_RCC_OscConfig+0x6e4>
    {
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_ON)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	f040 8093 	bne.w	8002018 <HAL_RCC_OscConfig+0x6a0>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL1.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL1.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL1.PLLR));

        /* Disable the main PLL1. */
        tmpreg1 = (RCC->CR & ~RCC_CR_PLL1ON);
 8001ef2:	4b7b      	ldr	r3, [pc, #492]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001efa:	62bb      	str	r3, [r7, #40]	@ 0x28
        RCC->CR = tmpreg1;
 8001efc:	4a78      	ldr	r2, [pc, #480]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 8001efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f02:	f7ff f93d 	bl	8001180 <HAL_GetTick>
 8001f06:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        do
        {
          tmpreg1 = RCC->CR;
 8001f08:	4b75      	ldr	r3, [pc, #468]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7ff f937 	bl	8001180 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e10e      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
          }
        } while ((tmpreg1 & RCC_CR_PLL1RDY) != 0U);
 8001f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1ee      	bne.n	8001f08 <HAL_RCC_OscConfig+0x590>

        /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
        if (RCC_OscInitStruct->PLL1.PLLSource == RCC_PLLSOURCE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d108      	bne.n	8001f44 <HAL_RCC_OscConfig+0x5cc>
        {
          /* Clock source is HSE or HSE/2 */
          pllsrc = HSE_VALUE >> ((tmpreg1 & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos);
 8001f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f34:	0d1b      	lsrs	r3, r3, #20
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	4a6a      	ldr	r2, [pc, #424]	@ (80020e4 <HAL_RCC_OscConfig+0x76c>)
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f42:	e001      	b.n	8001f48 <HAL_RCC_OscConfig+0x5d0>
        }
        else
        {
          /* Clock source is HSI */
          pllsrc = HSI_VALUE;
 8001f44:	4b68      	ldr	r3, [pc, #416]	@ (80020e8 <HAL_RCC_OscConfig+0x770>)
 8001f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Compute VCO input frequency depending on M divider */
        pllsrc = (pllsrc / RCC_OscInitStruct->PLL1.PLLM);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllsrc));

        if (pllsrc > PLL_INPUTRANGE0_FREQMAX)
 8001f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f56:	4a65      	ldr	r2, [pc, #404]	@ (80020ec <HAL_RCC_OscConfig+0x774>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d902      	bls.n	8001f62 <HAL_RCC_OscConfig+0x5ea>
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE1;
 8001f5c:	230c      	movs	r3, #12
 8001f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f60:	e001      	b.n	8001f66 <HAL_RCC_OscConfig+0x5ee>
        }
        else
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Configure PLL1 source, PLLM divider, VCO input range and enable PLL1R output. Clear also FRACEN*/
        tmpreg2 = RCC->PLL1CFGR;
 8001f66:	4b5e      	ldr	r3, [pc, #376]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 8001f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6a:	617b      	str	r3, [r7, #20]
        tmpreg2 &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1RGE | RCC_PLL1CFGR_PLL1FRACEN | RCC_PLL1CFGR_PLL1M);
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f423 63e3 	bic.w	r3, r3, #1816	@ 0x718
 8001f72:	f023 0307 	bic.w	r3, r3, #7
 8001f76:	617b      	str	r3, [r7, #20]
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f7e:	431a      	orrs	r2, r3
                    ((RCC_OscInitStruct->PLL1.PLLM - 1u) << RCC_PLL1CFGR_PLL1M_Pos) | RCC_PLL1CFGR_PLL1REN);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f84:	3b01      	subs	r3, #1
 8001f86:	021b      	lsls	r3, r3, #8
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f92:	617b      	str	r3, [r7, #20]
        RCC->PLL1CFGR = tmpreg2;
 8001f94:	4a52      	ldr	r2, [pc, #328]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLLN multiplication factor and PLLP, PLLQ, PLLR dividers */
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9e:	1e5a      	subs	r2, r3, #1
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	025b      	lsls	r3, r3, #9
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8001fa8:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLQ - 1u) << RCC_PLL1DIVR_PLL1Q_Pos) |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	041b      	lsls	r3, r3, #16
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 8001fb2:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLR - 1u) << RCC_PLL1DIVR_PLL1R_Pos));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	061b      	lsls	r3, r3, #24
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
        RCC->PLL1DIVR = tmpreg2;
 8001fc0:	4a47      	ldr	r2, [pc, #284]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	6353      	str	r3, [r2, #52]	@ 0x34

        if (RCC_OscInitStruct->PLL1.PLLFractional != 0x00u)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00a      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x66c>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd2:	4a43      	ldr	r2, [pc, #268]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	6393      	str	r3, [r2, #56]	@ 0x38

          /* Enable PLL1FRACEN */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 8001fd8:	4b41      	ldr	r3, [pc, #260]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 8001fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fdc:	4a40      	ldr	r2, [pc, #256]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 8001fde:	f043 0310 	orr.w	r3, r3, #16
 8001fe2:	6293      	str	r3, [r2, #40]	@ 0x28
        }

        /* Enable the main PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001fe4:	4b3e      	ldr	r3, [pc, #248]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a3d      	ldr	r2, [pc, #244]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 8001fea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7ff f8c6 	bl	8001180 <HAL_GetTick>
 8001ff4:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x692>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7ff f8c2 	bl	8001180 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e099      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800200a:	4b35      	ldr	r3, [pc, #212]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x680>
 8002016:	e091      	b.n	800213c <HAL_RCC_OscConfig+0x7c4>
        }
      }
      else
      {
        /* Disable the main PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002018:	4b31      	ldr	r3, [pc, #196]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a30      	ldr	r2, [pc, #192]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 800201e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002024:	f7ff f8ac 	bl	8001180 <HAL_GetTick>
 8002028:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x6c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202c:	f7ff f8a8 	bl	8001180 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x6c6>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e07f      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800203e:	4b28      	ldr	r3, [pc, #160]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x6b4>
          }
        }

        /* CLear the PLL1 source and disable outputs to save power when PLL1 is off */
        CLEAR_BIT(RCC->PLL1CFGR, (RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | \
 800204a:	4b25      	ldr	r3, [pc, #148]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 800204c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204e:	4a24      	ldr	r2, [pc, #144]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 8002050:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002054:	f023 0303 	bic.w	r3, r3, #3
 8002058:	6293      	str	r3, [r2, #40]	@ 0x28
 800205a:	e06f      	b.n	800213c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL1 used as System clock source */
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_RCC_OscConfig+0x6f0>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e06a      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        tmpreg1 = RCC->PLL1CFGR;
 8002068:	4b1d      	ldr	r3, [pc, #116]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 800206a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206c:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg2 = RCC->PLL1DIVR;
 800206e:	4b1c      	ldr	r3, [pc, #112]	@ (80020e0 <HAL_RCC_OscConfig+0x768>)
 8002070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002072:	617b      	str	r3, [r7, #20]

        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 8002074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002076:	f003 0203 	and.w	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207e:	429a      	cmp	r2, r3
 8002080:	d12b      	bne.n	80020da <HAL_RCC_OscConfig+0x762>
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 8002082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	f003 0207 	and.w	r2, r3, #7
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208e:	3b01      	subs	r3, #1
        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 8002090:	429a      	cmp	r2, r3
 8002092:	d122      	bne.n	80020da <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209e:	3b01      	subs	r3, #1
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d11a      	bne.n	80020da <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	0a5b      	lsrs	r3, r3, #9
 80020a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b0:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d111      	bne.n	80020da <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	0c1b      	lsrs	r3, r3, #16
 80020ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c2:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d108      	bne.n	80020da <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) != (RCC_OscInitStruct->PLL1.PLLR - 1u)))
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	0e1b      	lsrs	r3, r3, #24
 80020cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d4:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d00a      	beq.n	80020f0 <HAL_RCC_OscConfig+0x778>
        {
          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e02f      	b.n	800213e <HAL_RCC_OscConfig+0x7c6>
 80020de:	bf00      	nop
 80020e0:	46020c00 	.word	0x46020c00
 80020e4:	01e84800 	.word	0x01e84800
 80020e8:	00f42400 	.word	0x00f42400
 80020ec:	007a1200 	.word	0x007a1200
        }
        else
        {
          /* Check if only fractional part needs to be updated  */
          tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 80020f0:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <HAL_RCC_OscConfig+0x7d0>)
 80020f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f4:	08db      	lsrs	r3, r3, #3
 80020f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020fa:	62bb      	str	r3, [r7, #40]	@ 0x28

          if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002100:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002102:	429a      	cmp	r2, r3
 8002104:	d01a      	beq.n	800213c <HAL_RCC_OscConfig+0x7c4>
          {
            assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

            /* Disable PLL1FRACEN */
            __HAL_RCC_PLL1_FRACN_DISABLE();
 8002106:	4b10      	ldr	r3, [pc, #64]	@ (8002148 <HAL_RCC_OscConfig+0x7d0>)
 8002108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210a:	4a0f      	ldr	r2, [pc, #60]	@ (8002148 <HAL_RCC_OscConfig+0x7d0>)
 800210c:	f023 0310 	bic.w	r3, r3, #16
 8002110:	6293      	str	r3, [r2, #40]	@ 0x28

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002112:	f7ff f835 	bl	8001180 <HAL_GetTick>
 8002116:	61f8      	str	r0, [r7, #28]

            /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
            while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002118:	bf00      	nop
 800211a:	f7ff f831 	bl	8001180 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	4293      	cmp	r3, r2
 8002124:	d0f9      	beq.n	800211a <HAL_RCC_OscConfig+0x7a2>
            {
            }

            /* Configure PLL1 PLL1FRACN */
            __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800212a:	4a07      	ldr	r2, [pc, #28]	@ (8002148 <HAL_RCC_OscConfig+0x7d0>)
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	6393      	str	r3, [r2, #56]	@ 0x38

            /* Enable PLL1FRACEN to latch new value. */
            __HAL_RCC_PLL1_FRACN_ENABLE();
 8002130:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <HAL_RCC_OscConfig+0x7d0>)
 8002132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002134:	4a04      	ldr	r2, [pc, #16]	@ (8002148 <HAL_RCC_OscConfig+0x7d0>)
 8002136:	f043 0310 	orr.w	r3, r3, #16
 800213a:	6293      	str	r3, [r2, #40]	@ 0x28
          }
        }
      }
    }
  }
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3730      	adds	r7, #48	@ 0x30
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	46020c00 	.word	0x46020c00

0800214c <HAL_RCC_ClockConfig>:
  *         HCLK5 prescaler is switched automatically by hardware, but configuration shall
  *         always be performed before setting new PLL1 source as Sysclk source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e115      	b.n	800238c <HAL_RCC_ClockConfig+0x240>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002160:	4b8c      	ldr	r3, [pc, #560]	@ (8002394 <HAL_RCC_ClockConfig+0x248>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d910      	bls.n	8002190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b89      	ldr	r3, [pc, #548]	@ (8002394 <HAL_RCC_ClockConfig+0x248>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 020f 	bic.w	r2, r3, #15
 8002176:	4987      	ldr	r1, [pc, #540]	@ (8002394 <HAL_RCC_ClockConfig+0x248>)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b85      	ldr	r3, [pc, #532]	@ (8002394 <HAL_RCC_ClockConfig+0x248>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0fd      	b.n	800238c <HAL_RCC_ClockConfig+0x240>
  }

  /*-------------------------- HCLK5 Configuration --------------------------*/
  /* HCLK5 prescaler is switched automatically by hardware, but configuration shall
    always be performed before setting new PLL1 source as Sysclk source. */
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK5) == RCC_CLOCKTYPE_HCLK5)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00d      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x6c>
  {
    assert_param(IS_RCC_HCLK5_HSEHSI(RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
    assert_param(IS_RCC_HCLK5_PLL1(RCC_ClkInitStruct->AHB5_PLL1_CLKDivider));
    MODIFY_REG(RCC->CFGR4, (RCC_CFGR4_HDIV5 | RCC_CFGR4_HPRE5),
 800219c:	4b7e      	ldr	r3, [pc, #504]	@ (8002398 <HAL_RCC_ClockConfig+0x24c>)
 800219e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021a2:	f023 0217 	bic.w	r2, r3, #23
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6999      	ldr	r1, [r3, #24]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	430b      	orrs	r3, r1
 80021b0:	4979      	ldr	r1, [pc, #484]	@ (8002398 <HAL_RCC_ClockConfig+0x24c>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
               (RCC_ClkInitStruct->AHB5_PLL1_CLKDivider | RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d06f      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 80021c4:	4b74      	ldr	r3, [pc, #464]	@ (8002398 <HAL_RCC_ClockConfig+0x24c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	617b      	str	r3, [r7, #20]

    /* PLL1 is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d118      	bne.n	8002204 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the PLL1 ready flag */
      if ((tmpreg1 & RCC_CR_PLL1RDY) == 0U)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0d5      	b.n	800238c <HAL_RCC_ClockConfig+0x240>
      }
      else
      {
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 80021e0:	4b6d      	ldr	r3, [pc, #436]	@ (8002398 <HAL_RCC_ClockConfig+0x24c>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f003 020c 	and.w	r2, r3, #12
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d01a      	beq.n	8002228 <HAL_RCC_ClockConfig+0xdc>
        {
          /* Whatever is PLL frequency, use step prediv to reach maximum frequency. */
          /* Select pll1r to be prediv with 2-step divider when selected as Sysclk source */
          MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRESTEP, RCC_PLL1CFGR_PLL1RCLKPRE);
 80021f2:	4b69      	ldr	r3, [pc, #420]	@ (8002398 <HAL_RCC_ClockConfig+0x24c>)
 80021f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80021fa:	4a67      	ldr	r2, [pc, #412]	@ (8002398 <HAL_RCC_ClockConfig+0x24c>)
 80021fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002200:	6293      	str	r3, [r2, #40]	@ 0x28
 8002202:	e011      	b.n	8002228 <HAL_RCC_ClockConfig+0xdc>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d106      	bne.n	800221a <HAL_RCC_ClockConfig+0xce>
      {
        /* Check the HSE ready flag */
        if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d108      	bne.n	8002228 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0b8      	b.n	800238c <HAL_RCC_ClockConfig+0x240>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0b1      	b.n	800238c <HAL_RCC_ClockConfig+0x240>
        }
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002228:	4b5b      	ldr	r3, [pc, #364]	@ (8002398 <HAL_RCC_ClockConfig+0x24c>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	f023 0203 	bic.w	r2, r3, #3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4958      	ldr	r1, [pc, #352]	@ (8002398 <HAL_RCC_ClockConfig+0x24c>)
 8002236:	4313      	orrs	r3, r2
 8002238:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800223a:	f7fe ffa1 	bl	8001180 <HAL_GetTick>
 800223e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8002240:	e00a      	b.n	8002258 <HAL_RCC_ClockConfig+0x10c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002242:	f7fe ff9d 	bl	8001180 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002250:	4293      	cmp	r3, r2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e099      	b.n	800238c <HAL_RCC_ClockConfig+0x240>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8002258:	4b4f      	ldr	r3, [pc, #316]	@ (8002398 <HAL_RCC_ClockConfig+0x24c>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	f003 020c 	and.w	r2, r3, #12
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	429a      	cmp	r2, r3
 8002268:	d1eb      	bne.n	8002242 <HAL_RCC_ClockConfig+0xf6>
      }
    }

    /* If PLL1rCLK is asked to be SYSCLK source, clear prediv. */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d118      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x158>
    {
      /* Set PLL1R prediv to not divided */
      CLEAR_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRE);
 8002272:	4b49      	ldr	r3, [pc, #292]	@ (8002398 <HAL_RCC_ClockConfig+0x24c>)
 8002274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002276:	4a48      	ldr	r2, [pc, #288]	@ (8002398 <HAL_RCC_ClockConfig+0x24c>)
 8002278:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800227c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227e:	f7fe ff7f 	bl	8001180 <HAL_GetTick>
 8002282:	60f8      	str	r0, [r7, #12]

      /* Wait until PLL1 not divided is ready */
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8002284:	e008      	b.n	8002298 <HAL_RCC_ClockConfig+0x14c>
      {
        if ((HAL_GetTick() - tickstart) > PLL1_NDIV_TIMEOUT_VALUE)
 8002286:	f7fe ff7b 	bl	8001180 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b0a      	cmp	r3, #10
 8002292:	d901      	bls.n	8002298 <HAL_RCC_ClockConfig+0x14c>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e079      	b.n	800238c <HAL_RCC_ClockConfig+0x240>
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8002298:	4b3f      	ldr	r3, [pc, #252]	@ (8002398 <HAL_RCC_ClockConfig+0x24c>)
 800229a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 80022a4:	4b3c      	ldr	r3, [pc, #240]	@ (8002398 <HAL_RCC_ClockConfig+0x24c>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f023 0307 	bic.w	r3, r3, #7
 80022c0:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80022cc:	2301      	movs	r3, #1
 80022ce:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022e2:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80022ee:	2301      	movs	r3, #1
 80022f0:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_RCC_ClockConfig+0x1ca>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002304:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8002312:	2301      	movs	r3, #1
 8002314:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_RCC_ClockConfig+0x1d6>
  {
    RCC->CFGR2 = tmpreg1;
 800231c:	4a1e      	ldr	r2, [pc, #120]	@ (8002398 <HAL_RCC_ClockConfig+0x24c>)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK7 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK7) == RCC_CLOCKTYPE_PCLK7)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB7CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB7CLKDivider);
 800232e:	4a1a      	ldr	r2, [pc, #104]	@ (8002398 <HAL_RCC_ClockConfig+0x24c>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002336:	4b17      	ldr	r3, [pc, #92]	@ (8002394 <HAL_RCC_ClockConfig+0x248>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d210      	bcs.n	8002366 <HAL_RCC_ClockConfig+0x21a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002344:	4b13      	ldr	r3, [pc, #76]	@ (8002394 <HAL_RCC_ClockConfig+0x248>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 020f 	bic.w	r2, r3, #15
 800234c:	4911      	ldr	r1, [pc, #68]	@ (8002394 <HAL_RCC_ClockConfig+0x248>)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002354:	4b0f      	ldr	r3, [pc, #60]	@ (8002394 <HAL_RCC_ClockConfig+0x248>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 030f 	and.w	r3, r3, #15
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d001      	beq.n	8002366 <HAL_RCC_ClockConfig+0x21a>
    {
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e012      	b.n	800238c <HAL_RCC_ClockConfig+0x240>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002366:	f000 f81f 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 800236a:	4602      	mov	r2, r0
 800236c:	4b0a      	ldr	r3, [pc, #40]	@ (8002398 <HAL_RCC_ClockConfig+0x24c>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	4909      	ldr	r1, [pc, #36]	@ (800239c <HAL_RCC_ClockConfig+0x250>)
 8002376:	5ccb      	ldrb	r3, [r1, r3]
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
 800237c:	4a08      	ldr	r2, [pc, #32]	@ (80023a0 <HAL_RCC_ClockConfig+0x254>)
 800237e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002380:	4b08      	ldr	r3, [pc, #32]	@ (80023a4 <HAL_RCC_ClockConfig+0x258>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe fe69 	bl	800105c <HAL_InitTick>
 800238a:	4603      	mov	r3, r0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40022000 	.word	0x40022000
 8002398:	46020c00 	.word	0x46020c00
 800239c:	08004144 	.word	0x08004144
 80023a0:	20000000 	.word	0x20000000
 80023a4:	20000034 	.word	0x20000034

080023a8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
  uint32_t sysclk;

  /* Get SYSCLK source */
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ae:	4b10      	ldr	r3, [pc, #64]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x48>)
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	607b      	str	r3, [r7, #4]

  if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d102      	bne.n	80023c4 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 80023be:	4b0d      	ldr	r3, [pc, #52]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x4c>)
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	e00f      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d109      	bne.n	80023de <HAL_RCC_GetSysClockFreq+0x36>
  {
    /* HSE used as system clock source. Check if HSE is divided by 2 */
    sysclk = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 80023ca:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x48>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	0d1b      	lsrs	r3, r3, #20
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	4a08      	ldr	r2, [pc, #32]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x50>)
 80023d6:	fa22 f303 	lsr.w	r3, r2, r3
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	e002      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else
  {
    /* PLL1 used as system clock source */
    sysclk = HAL_RCC_GetPLL1RFreq();
 80023de:	f000 f863 	bl	80024a8 <HAL_RCC_GetPLL1RFreq>
 80023e2:	6078      	str	r0, [r7, #4]
  }

  return sysclk;
 80023e4:	687b      	ldr	r3, [r7, #4]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	46020c00 	.word	0x46020c00
 80023f4:	00f42400 	.word	0x00f42400
 80023f8:	01e84800 	.word	0x01e84800

080023fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002400:	f7ff ffd2 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b07      	ldr	r3, [pc, #28]	@ (8002424 <HAL_RCC_GetHCLKFreq+0x28>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	4906      	ldr	r1, [pc, #24]	@ (8002428 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002410:	5ccb      	ldrb	r3, [r1, r3]
 8002412:	fa22 f303 	lsr.w	r3, r2, r3
 8002416:	4a05      	ldr	r2, [pc, #20]	@ (800242c <HAL_RCC_GetHCLKFreq+0x30>)
 8002418:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800241a:	4b04      	ldr	r3, [pc, #16]	@ (800242c <HAL_RCC_GetHCLKFreq+0x30>)
 800241c:	681b      	ldr	r3, [r3, #0]
}
 800241e:	4618      	mov	r0, r3
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	46020c00 	.word	0x46020c00
 8002428:	08004144 	.word	0x08004144
 800242c:	20000000 	.word	0x20000000

08002430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002434:	f7ff ffe2 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 8002438:	4602      	mov	r2, r0
 800243a:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	091b      	lsrs	r3, r3, #4
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	4903      	ldr	r1, [pc, #12]	@ (8002454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002446:	5ccb      	ldrb	r3, [r1, r3]
 8002448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	bd80      	pop	{r7, pc}
 8002450:	46020c00 	.word	0x46020c00
 8002454:	0800414c 	.word	0x0800414c

08002458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800245c:	f7ff ffce 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	0a1b      	lsrs	r3, r3, #8
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4903      	ldr	r1, [pc, #12]	@ (800247c <HAL_RCC_GetPCLK2Freq+0x24>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}
 8002478:	46020c00 	.word	0x46020c00
 800247c:	0800414c 	.word	0x0800414c

08002480 <HAL_RCC_GetPCLK7Freq>:
  * @note   Each time PCLK7 changes, this function must be called to update the
  *         right PCLK7 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK7 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK7Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK7 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE7) >> RCC_CFGR3_PPRE7_Pos]);
 8002484:	f7ff ffba 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <HAL_RCC_GetPCLK7Freq+0x20>)
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	091b      	lsrs	r3, r3, #4
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	4903      	ldr	r1, [pc, #12]	@ (80024a4 <HAL_RCC_GetPCLK7Freq+0x24>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	46020c00 	.word	0x46020c00
 80024a4:	0800414c 	.word	0x0800414c

080024a8 <HAL_RCC_GetPLL1RFreq>:
/**
  * @brief  Return the PLL1R frequency.
  * @retval PLL1R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL1RFreq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL1R divider */
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 80024ae:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <HAL_RCC_GetPLL1RFreq+0x34>)
 80024b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b2:	0e1b      	lsrs	r3, r3, #24
 80024b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024b8:	3301      	adds	r3, #1
 80024ba:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL1R one */
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 80024bc:	f000 f810 	bl	80024e0 <RCC_PLL1_GetVCOOutputFreq>
 80024c0:	eef0 7a40 	vmov.f32	s15, s0
 80024c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024c8:	ee17 2a90 	vmov	r2, s15
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	46020c00 	.word	0x46020c00

080024e0 <RCC_PLL1_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL1 VCO output frequency
  * @retval Value of PLL1 VCO output frequency
  */
static float_t RCC_PLL1_GetVCOOutputFreq(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
  float_t pllm;
  float_t plln;
  float_t pllfracn;

  /* Get PLL1 DIVR register value */
  tmpreg1 = RCC->PLL1DIVR;
 80024e6:	4b36      	ldr	r3, [pc, #216]	@ (80025c0 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 80024e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 multiplication factor */
  tmp = (tmpreg1 & RCC_PLL1DIVR_PLL1N) + 1U;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f2:	3301      	adds	r3, #1
 80024f4:	617b      	str	r3, [r7, #20]
  plln = (float_t) tmp;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	ee07 3a90 	vmov	s15, r3
 80024fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002500:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Get PLL1 CFGR register value */
  tmpreg1 = RCC->PLL1CFGR;
 8002504:	4b2e      	ldr	r3, [pc, #184]	@ (80025c0 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8002506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002508:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 divider */
  tmp = ((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	3301      	adds	r3, #1
 8002514:	617b      	str	r3, [r7, #20]
  pllm = (float_t) tmp;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	ee07 3a90 	vmov	s15, r3
 800251c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002520:	edc7 7a01 	vstr	s15, [r7, #4]

  /* Check if fractional part is enable */
  if ((tmpreg1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b00      	cmp	r3, #0
 800252c:	d006      	beq.n	800253c <RCC_PLL1_GetVCOOutputFreq+0x5c>
  {
    tmp = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 800252e:	4b24      	ldr	r3, [pc, #144]	@ (80025c0 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8002530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002532:	08db      	lsrs	r3, r3, #3
 8002534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	e001      	b.n	8002540 <RCC_PLL1_GetVCOOutputFreq+0x60>
  }
  else
  {
    tmp = 0u;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
  }
  pllfracn = (float_t)tmp;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	ee07 3a90 	vmov	s15, r3
 8002546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800254a:	edc7 7a00 	vstr	s15, [r7]

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLL1CFGR_PLL1SRC)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d002      	beq.n	800255e <RCC_PLL1_GetVCOOutputFreq+0x7e>
 8002558:	2b03      	cmp	r3, #3
 800255a:	d003      	beq.n	8002564 <RCC_PLL1_GetVCOOutputFreq+0x84>
 800255c:	e013      	b.n	8002586 <RCC_PLL1_GetVCOOutputFreq+0xa6>
  {
    /* HSI used as PLL1 clock source */
    case RCC_PLLSOURCE_HSI:
      pllsrc = (float_t)HSI_VALUE;
 800255e:	4b19      	ldr	r3, [pc, #100]	@ (80025c4 <RCC_PLL1_GetVCOOutputFreq+0xe4>)
 8002560:	613b      	str	r3, [r7, #16]
      break;
 8002562:	e014      	b.n	800258e <RCC_PLL1_GetVCOOutputFreq+0xae>

    /* HSE used as PLL1 clock source */
    case RCC_PLLSOURCE_HSE:
      tmp = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8002564:	4b16      	ldr	r3, [pc, #88]	@ (80025c0 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	0d1b      	lsrs	r3, r3, #20
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	4a16      	ldr	r2, [pc, #88]	@ (80025c8 <RCC_PLL1_GetVCOOutputFreq+0xe8>)
 8002570:	fa22 f303 	lsr.w	r3, r2, r3
 8002574:	617b      	str	r3, [r7, #20]
      pllsrc = (float_t)tmp;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	ee07 3a90 	vmov	s15, r3
 800257c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002580:	edc7 7a04 	vstr	s15, [r7, #16]
      break;
 8002584:	e003      	b.n	800258e <RCC_PLL1_GetVCOOutputFreq+0xae>

    default:
      pllsrc = (float_t)0;
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	613b      	str	r3, [r7, #16]
      break;
 800258c:	bf00      	nop
  }

  /* Compute VCO output frequency */
  return ((pllsrc / pllm) * (plln + (pllfracn / (float_t)0x2000u)));
 800258e:	edd7 6a04 	vldr	s13, [r7, #16]
 8002592:	edd7 7a01 	vldr	s15, [r7, #4]
 8002596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800259a:	edd7 7a00 	vldr	s15, [r7]
 800259e:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 80025cc <RCC_PLL1_GetVCOOutputFreq+0xec>
 80025a2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80025a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80025aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ae:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80025b2:	eeb0 0a67 	vmov.f32	s0, s15
 80025b6:	371c      	adds	r7, #28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	46020c00 	.word	0x46020c00
 80025c4:	4b742400 	.word	0x4b742400
 80025c8:	01e84800 	.word	0x01e84800
 80025cc:	46000000 	.word	0x46000000

080025d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e049      	b.n	8002676 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7fe f962 	bl	80008c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3304      	adds	r3, #4
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f000 fb64 	bl	8002cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e049      	b.n	8002724 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d106      	bne.n	80026aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f841 	bl	800272c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2202      	movs	r2, #2
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	4619      	mov	r1, r3
 80026bc:	4610      	mov	r0, r2
 80026be:	f000 fb0d 	bl	8002cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d109      	bne.n	8002764 <HAL_TIM_PWM_Start+0x24>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b01      	cmp	r3, #1
 800275a:	bf14      	ite	ne
 800275c:	2301      	movne	r3, #1
 800275e:	2300      	moveq	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	e03c      	b.n	80027de <HAL_TIM_PWM_Start+0x9e>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b04      	cmp	r3, #4
 8002768:	d109      	bne.n	800277e <HAL_TIM_PWM_Start+0x3e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b01      	cmp	r3, #1
 8002774:	bf14      	ite	ne
 8002776:	2301      	movne	r3, #1
 8002778:	2300      	moveq	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	e02f      	b.n	80027de <HAL_TIM_PWM_Start+0x9e>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b08      	cmp	r3, #8
 8002782:	d109      	bne.n	8002798 <HAL_TIM_PWM_Start+0x58>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	bf14      	ite	ne
 8002790:	2301      	movne	r3, #1
 8002792:	2300      	moveq	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	e022      	b.n	80027de <HAL_TIM_PWM_Start+0x9e>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2b0c      	cmp	r3, #12
 800279c:	d109      	bne.n	80027b2 <HAL_TIM_PWM_Start+0x72>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	bf14      	ite	ne
 80027aa:	2301      	movne	r3, #1
 80027ac:	2300      	moveq	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	e015      	b.n	80027de <HAL_TIM_PWM_Start+0x9e>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b10      	cmp	r3, #16
 80027b6:	d109      	bne.n	80027cc <HAL_TIM_PWM_Start+0x8c>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	bf14      	ite	ne
 80027c4:	2301      	movne	r3, #1
 80027c6:	2300      	moveq	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	e008      	b.n	80027de <HAL_TIM_PWM_Start+0x9e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	bf14      	ite	ne
 80027d8:	2301      	movne	r3, #1
 80027da:	2300      	moveq	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e07e      	b.n	80028e4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d104      	bne.n	80027f6 <HAL_TIM_PWM_Start+0xb6>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027f4:	e023      	b.n	800283e <HAL_TIM_PWM_Start+0xfe>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d104      	bne.n	8002806 <HAL_TIM_PWM_Start+0xc6>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002804:	e01b      	b.n	800283e <HAL_TIM_PWM_Start+0xfe>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b08      	cmp	r3, #8
 800280a:	d104      	bne.n	8002816 <HAL_TIM_PWM_Start+0xd6>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002814:	e013      	b.n	800283e <HAL_TIM_PWM_Start+0xfe>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b0c      	cmp	r3, #12
 800281a:	d104      	bne.n	8002826 <HAL_TIM_PWM_Start+0xe6>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002824:	e00b      	b.n	800283e <HAL_TIM_PWM_Start+0xfe>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b10      	cmp	r3, #16
 800282a:	d104      	bne.n	8002836 <HAL_TIM_PWM_Start+0xf6>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002834:	e003      	b.n	800283e <HAL_TIM_PWM_Start+0xfe>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2202      	movs	r2, #2
 800283a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2201      	movs	r2, #1
 8002844:	6839      	ldr	r1, [r7, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fdf8 	bl	800343c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a26      	ldr	r2, [pc, #152]	@ (80028ec <HAL_TIM_PWM_Start+0x1ac>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d009      	beq.n	800286a <HAL_TIM_PWM_Start+0x12a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a25      	ldr	r2, [pc, #148]	@ (80028f0 <HAL_TIM_PWM_Start+0x1b0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d004      	beq.n	800286a <HAL_TIM_PWM_Start+0x12a>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a23      	ldr	r2, [pc, #140]	@ (80028f4 <HAL_TIM_PWM_Start+0x1b4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d101      	bne.n	800286e <HAL_TIM_PWM_Start+0x12e>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_TIM_PWM_Start+0x130>
 800286e:	2300      	movs	r3, #0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d007      	beq.n	8002884 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002882:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a18      	ldr	r2, [pc, #96]	@ (80028ec <HAL_TIM_PWM_Start+0x1ac>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d009      	beq.n	80028a2 <HAL_TIM_PWM_Start+0x162>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002896:	d004      	beq.n	80028a2 <HAL_TIM_PWM_Start+0x162>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a16      	ldr	r2, [pc, #88]	@ (80028f8 <HAL_TIM_PWM_Start+0x1b8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d115      	bne.n	80028ce <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	4b14      	ldr	r3, [pc, #80]	@ (80028fc <HAL_TIM_PWM_Start+0x1bc>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b06      	cmp	r3, #6
 80028b2:	d015      	beq.n	80028e0 <HAL_TIM_PWM_Start+0x1a0>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028ba:	d011      	beq.n	80028e0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028cc:	e008      	b.n	80028e0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0201 	orr.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	e000      	b.n	80028e2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40012c00 	.word	0x40012c00
 80028f0:	40014400 	.word	0x40014400
 80028f4:	40014800 	.word	0x40014800
 80028f8:	40000400 	.word	0x40000400
 80028fc:	00010007 	.word	0x00010007

08002900 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800291a:	2302      	movs	r3, #2
 800291c:	e0ff      	b.n	8002b1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b14      	cmp	r3, #20
 800292a:	f200 80f0 	bhi.w	8002b0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800292e:	a201      	add	r2, pc, #4	@ (adr r2, 8002934 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002934:	08002989 	.word	0x08002989
 8002938:	08002b0f 	.word	0x08002b0f
 800293c:	08002b0f 	.word	0x08002b0f
 8002940:	08002b0f 	.word	0x08002b0f
 8002944:	080029c9 	.word	0x080029c9
 8002948:	08002b0f 	.word	0x08002b0f
 800294c:	08002b0f 	.word	0x08002b0f
 8002950:	08002b0f 	.word	0x08002b0f
 8002954:	08002a0b 	.word	0x08002a0b
 8002958:	08002b0f 	.word	0x08002b0f
 800295c:	08002b0f 	.word	0x08002b0f
 8002960:	08002b0f 	.word	0x08002b0f
 8002964:	08002a4b 	.word	0x08002a4b
 8002968:	08002b0f 	.word	0x08002b0f
 800296c:	08002b0f 	.word	0x08002b0f
 8002970:	08002b0f 	.word	0x08002b0f
 8002974:	08002a8d 	.word	0x08002a8d
 8002978:	08002b0f 	.word	0x08002b0f
 800297c:	08002b0f 	.word	0x08002b0f
 8002980:	08002b0f 	.word	0x08002b0f
 8002984:	08002acd 	.word	0x08002acd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fa1e 	bl	8002dd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0208 	orr.w	r2, r2, #8
 80029a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0204 	bic.w	r2, r2, #4
 80029b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6999      	ldr	r1, [r3, #24]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	619a      	str	r2, [r3, #24]
      break;
 80029c6:	e0a5      	b.n	8002b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fa7a 	bl	8002ec8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6999      	ldr	r1, [r3, #24]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	021a      	lsls	r2, r3, #8
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	619a      	str	r2, [r3, #24]
      break;
 8002a08:	e084      	b.n	8002b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fad3 	bl	8002fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69da      	ldr	r2, [r3, #28]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0208 	orr.w	r2, r2, #8
 8002a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69da      	ldr	r2, [r3, #28]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0204 	bic.w	r2, r2, #4
 8002a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69d9      	ldr	r1, [r3, #28]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	61da      	str	r2, [r3, #28]
      break;
 8002a48:	e064      	b.n	8002b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 fb2b 	bl	80030ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69da      	ldr	r2, [r3, #28]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69d9      	ldr	r1, [r3, #28]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	021a      	lsls	r2, r3, #8
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	61da      	str	r2, [r3, #28]
      break;
 8002a8a:	e043      	b.n	8002b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fb84 	bl	80031a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0208 	orr.w	r2, r2, #8
 8002aa6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0204 	bic.w	r2, r2, #4
 8002ab6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002aca:	e023      	b.n	8002b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fbbc 	bl	8003250 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ae6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002af6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	021a      	lsls	r2, r3, #8
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002b0c:	e002      	b.n	8002b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	75fb      	strb	r3, [r7, #23]
      break;
 8002b12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop

08002b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_TIM_ConfigClockSource+0x1c>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e0c2      	b.n	8002cca <HAL_TIM_ConfigClockSource+0x1a2>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002b62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a55      	ldr	r2, [pc, #340]	@ (8002cd4 <HAL_TIM_ConfigClockSource+0x1ac>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	f000 808d 	beq.w	8002c9e <HAL_TIM_ConfigClockSource+0x176>
 8002b84:	4a53      	ldr	r2, [pc, #332]	@ (8002cd4 <HAL_TIM_ConfigClockSource+0x1ac>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	f200 8092 	bhi.w	8002cb0 <HAL_TIM_ConfigClockSource+0x188>
 8002b8c:	4a52      	ldr	r2, [pc, #328]	@ (8002cd8 <HAL_TIM_ConfigClockSource+0x1b0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	f000 8085 	beq.w	8002c9e <HAL_TIM_ConfigClockSource+0x176>
 8002b94:	4a50      	ldr	r2, [pc, #320]	@ (8002cd8 <HAL_TIM_ConfigClockSource+0x1b0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	f200 808a 	bhi.w	8002cb0 <HAL_TIM_ConfigClockSource+0x188>
 8002b9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ba0:	d03a      	beq.n	8002c18 <HAL_TIM_ConfigClockSource+0xf0>
 8002ba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ba6:	f200 8083 	bhi.w	8002cb0 <HAL_TIM_ConfigClockSource+0x188>
 8002baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bae:	f000 8082 	beq.w	8002cb6 <HAL_TIM_ConfigClockSource+0x18e>
 8002bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bb6:	d87b      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x188>
 8002bb8:	2b70      	cmp	r3, #112	@ 0x70
 8002bba:	d016      	beq.n	8002bea <HAL_TIM_ConfigClockSource+0xc2>
 8002bbc:	2b70      	cmp	r3, #112	@ 0x70
 8002bbe:	d877      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x188>
 8002bc0:	2b60      	cmp	r3, #96	@ 0x60
 8002bc2:	d04c      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x136>
 8002bc4:	2b60      	cmp	r3, #96	@ 0x60
 8002bc6:	d873      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x188>
 8002bc8:	2b50      	cmp	r3, #80	@ 0x50
 8002bca:	d038      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x116>
 8002bcc:	2b50      	cmp	r3, #80	@ 0x50
 8002bce:	d86f      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x188>
 8002bd0:	2b40      	cmp	r3, #64	@ 0x40
 8002bd2:	d054      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x156>
 8002bd4:	2b40      	cmp	r3, #64	@ 0x40
 8002bd6:	d86b      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x188>
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d060      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x176>
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d867      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x188>
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d05c      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x176>
 8002be4:	2b10      	cmp	r3, #16
 8002be6:	d05a      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x176>
 8002be8:	e062      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x188>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bfa:	f000 fbff 	bl	80033fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	609a      	str	r2, [r3, #8]
      break;
 8002c16:	e04f      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x190>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c28:	f000 fbe8 	bl	80033fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c3a:	609a      	str	r2, [r3, #8]
      break;
 8002c3c:	e03c      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x190>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f000 fb5a 	bl	8003304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2150      	movs	r1, #80	@ 0x50
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fbb3 	bl	80033c2 <TIM_ITRx_SetConfig>
      break;
 8002c5c:	e02c      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x190>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f000 fb79 	bl	8003362 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2160      	movs	r1, #96	@ 0x60
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fba3 	bl	80033c2 <TIM_ITRx_SetConfig>
      break;
 8002c7c:	e01c      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x190>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f000 fb3a 	bl	8003304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2140      	movs	r1, #64	@ 0x40
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fb93 	bl	80033c2 <TIM_ITRx_SetConfig>
      break;
 8002c9c:	e00c      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x190>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4610      	mov	r0, r2
 8002caa:	f000 fb8a 	bl	80033c2 <TIM_ITRx_SetConfig>
      break;
 8002cae:	e003      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x190>
    }

    default:
      status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb4:	e000      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x190>
      break;
 8002cb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	00100040 	.word	0x00100040
 8002cd8:	00100030 	.word	0x00100030

08002cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a34      	ldr	r2, [pc, #208]	@ (8002dc0 <TIM_Base_SetConfig+0xe4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d007      	beq.n	8002d04 <TIM_Base_SetConfig+0x28>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cfa:	d003      	beq.n	8002d04 <TIM_Base_SetConfig+0x28>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a31      	ldr	r2, [pc, #196]	@ (8002dc4 <TIM_Base_SetConfig+0xe8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d108      	bne.n	8002d16 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a29      	ldr	r2, [pc, #164]	@ (8002dc0 <TIM_Base_SetConfig+0xe4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00f      	beq.n	8002d3e <TIM_Base_SetConfig+0x62>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d24:	d00b      	beq.n	8002d3e <TIM_Base_SetConfig+0x62>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a26      	ldr	r2, [pc, #152]	@ (8002dc4 <TIM_Base_SetConfig+0xe8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <TIM_Base_SetConfig+0x62>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a25      	ldr	r2, [pc, #148]	@ (8002dc8 <TIM_Base_SetConfig+0xec>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d003      	beq.n	8002d3e <TIM_Base_SetConfig+0x62>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a24      	ldr	r2, [pc, #144]	@ (8002dcc <TIM_Base_SetConfig+0xf0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d108      	bne.n	8002d50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a12      	ldr	r2, [pc, #72]	@ (8002dc0 <TIM_Base_SetConfig+0xe4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d007      	beq.n	8002d8c <TIM_Base_SetConfig+0xb0>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a12      	ldr	r2, [pc, #72]	@ (8002dc8 <TIM_Base_SetConfig+0xec>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d003      	beq.n	8002d8c <TIM_Base_SetConfig+0xb0>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a11      	ldr	r2, [pc, #68]	@ (8002dcc <TIM_Base_SetConfig+0xf0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d103      	bne.n	8002d94 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d105      	bne.n	8002db2 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f023 0201 	bic.w	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	611a      	str	r2, [r3, #16]
  }
}
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40000400 	.word	0x40000400
 8002dc8:	40014400 	.word	0x40014400
 8002dcc:	40014800 	.word	0x40014800

08002dd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	f023 0201 	bic.w	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0303 	bic.w	r3, r3, #3
 8002e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f023 0302 	bic.w	r3, r3, #2
 8002e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a24      	ldr	r2, [pc, #144]	@ (8002ebc <TIM_OC1_SetConfig+0xec>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d007      	beq.n	8002e40 <TIM_OC1_SetConfig+0x70>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a23      	ldr	r2, [pc, #140]	@ (8002ec0 <TIM_OC1_SetConfig+0xf0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d003      	beq.n	8002e40 <TIM_OC1_SetConfig+0x70>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a22      	ldr	r2, [pc, #136]	@ (8002ec4 <TIM_OC1_SetConfig+0xf4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d10c      	bne.n	8002e5a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f023 0308 	bic.w	r3, r3, #8
 8002e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f023 0304 	bic.w	r3, r3, #4
 8002e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a17      	ldr	r2, [pc, #92]	@ (8002ebc <TIM_OC1_SetConfig+0xec>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d007      	beq.n	8002e72 <TIM_OC1_SetConfig+0xa2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a16      	ldr	r2, [pc, #88]	@ (8002ec0 <TIM_OC1_SetConfig+0xf0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d003      	beq.n	8002e72 <TIM_OC1_SetConfig+0xa2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a15      	ldr	r2, [pc, #84]	@ (8002ec4 <TIM_OC1_SetConfig+0xf4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d111      	bne.n	8002e96 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	621a      	str	r2, [r3, #32]
}
 8002eb0:	bf00      	nop
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	40012c00 	.word	0x40012c00
 8002ec0:	40014400 	.word	0x40014400
 8002ec4:	40014800 	.word	0x40014800

08002ec8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f023 0210 	bic.w	r2, r3, #16
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f023 0320 	bic.w	r3, r3, #32
 8002f16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a22      	ldr	r2, [pc, #136]	@ (8002fb0 <TIM_OC2_SetConfig+0xe8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d10d      	bne.n	8002f48 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a19      	ldr	r2, [pc, #100]	@ (8002fb0 <TIM_OC2_SetConfig+0xe8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d007      	beq.n	8002f60 <TIM_OC2_SetConfig+0x98>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a18      	ldr	r2, [pc, #96]	@ (8002fb4 <TIM_OC2_SetConfig+0xec>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d003      	beq.n	8002f60 <TIM_OC2_SetConfig+0x98>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a17      	ldr	r2, [pc, #92]	@ (8002fb8 <TIM_OC2_SetConfig+0xf0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d113      	bne.n	8002f88 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	621a      	str	r2, [r3, #32]
}
 8002fa2:	bf00      	nop
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40012c00 	.word	0x40012c00
 8002fb4:	40014400 	.word	0x40014400
 8002fb8:	40014800 	.word	0x40014800

08002fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0303 	bic.w	r3, r3, #3
 8002ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a21      	ldr	r2, [pc, #132]	@ (80030a0 <TIM_OC3_SetConfig+0xe4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d10d      	bne.n	800303a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003024:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	021b      	lsls	r3, r3, #8
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a18      	ldr	r2, [pc, #96]	@ (80030a0 <TIM_OC3_SetConfig+0xe4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d007      	beq.n	8003052 <TIM_OC3_SetConfig+0x96>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a17      	ldr	r2, [pc, #92]	@ (80030a4 <TIM_OC3_SetConfig+0xe8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d003      	beq.n	8003052 <TIM_OC3_SetConfig+0x96>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a16      	ldr	r2, [pc, #88]	@ (80030a8 <TIM_OC3_SetConfig+0xec>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d113      	bne.n	800307a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	621a      	str	r2, [r3, #32]
}
 8003094:	bf00      	nop
 8003096:	371c      	adds	r7, #28
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	40012c00 	.word	0x40012c00
 80030a4:	40014400 	.word	0x40014400
 80030a8:	40014800 	.word	0x40014800

080030ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	031b      	lsls	r3, r3, #12
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a22      	ldr	r2, [pc, #136]	@ (8003194 <TIM_OC4_SetConfig+0xe8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d10d      	bne.n	800312c <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	031b      	lsls	r3, r3, #12
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800312a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a19      	ldr	r2, [pc, #100]	@ (8003194 <TIM_OC4_SetConfig+0xe8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d007      	beq.n	8003144 <TIM_OC4_SetConfig+0x98>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a18      	ldr	r2, [pc, #96]	@ (8003198 <TIM_OC4_SetConfig+0xec>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d003      	beq.n	8003144 <TIM_OC4_SetConfig+0x98>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a17      	ldr	r2, [pc, #92]	@ (800319c <TIM_OC4_SetConfig+0xf0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d113      	bne.n	800316c <TIM_OC4_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800314a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003152:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	019b      	lsls	r3, r3, #6
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	019b      	lsls	r3, r3, #6
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	621a      	str	r2, [r3, #32]
}
 8003186:	bf00      	nop
 8003188:	371c      	adds	r7, #28
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40012c00 	.word	0x40012c00
 8003198:	40014400 	.word	0x40014400
 800319c:	40014800 	.word	0x40014800

080031a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80031e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	041b      	lsls	r3, r3, #16
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a13      	ldr	r2, [pc, #76]	@ (8003244 <TIM_OC5_SetConfig+0xa4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d007      	beq.n	800320a <TIM_OC5_SetConfig+0x6a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a12      	ldr	r2, [pc, #72]	@ (8003248 <TIM_OC5_SetConfig+0xa8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d003      	beq.n	800320a <TIM_OC5_SetConfig+0x6a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a11      	ldr	r2, [pc, #68]	@ (800324c <TIM_OC5_SetConfig+0xac>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d109      	bne.n	800321e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003210:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	621a      	str	r2, [r3, #32]
}
 8003238:	bf00      	nop
 800323a:	371c      	adds	r7, #28
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	40012c00 	.word	0x40012c00
 8003248:	40014400 	.word	0x40014400
 800324c:	40014800 	.word	0x40014800

08003250 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800327e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003296:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	051b      	lsls	r3, r3, #20
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a14      	ldr	r2, [pc, #80]	@ (80032f8 <TIM_OC6_SetConfig+0xa8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d007      	beq.n	80032bc <TIM_OC6_SetConfig+0x6c>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a13      	ldr	r2, [pc, #76]	@ (80032fc <TIM_OC6_SetConfig+0xac>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d003      	beq.n	80032bc <TIM_OC6_SetConfig+0x6c>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a12      	ldr	r2, [pc, #72]	@ (8003300 <TIM_OC6_SetConfig+0xb0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d109      	bne.n	80032d0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	029b      	lsls	r3, r3, #10
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	621a      	str	r2, [r3, #32]
}
 80032ea:	bf00      	nop
 80032ec:	371c      	adds	r7, #28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40012c00 	.word	0x40012c00
 80032fc:	40014400 	.word	0x40014400
 8003300:	40014800 	.word	0x40014800

08003304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	f023 0201 	bic.w	r2, r3, #1
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800332e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f023 030a 	bic.w	r3, r3, #10
 8003340:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4313      	orrs	r3, r2
 8003348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	621a      	str	r2, [r3, #32]
}
 8003356:	bf00      	nop
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003362:	b480      	push	{r7}
 8003364:	b087      	sub	sp, #28
 8003366:	af00      	add	r7, sp, #0
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f023 0210 	bic.w	r2, r3, #16
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800338c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	031b      	lsls	r3, r3, #12
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800339e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	621a      	str	r2, [r3, #32]
}
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80033d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f043 0307 	orr.w	r3, r3, #7
 80033e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	609a      	str	r2, [r3, #8]
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003416:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	021a      	lsls	r2, r3, #8
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	431a      	orrs	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4313      	orrs	r3, r2
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	609a      	str	r2, [r3, #8]
}
 8003430:	bf00      	nop
 8003432:	371c      	adds	r7, #28
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	2201      	movs	r2, #1
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a1a      	ldr	r2, [r3, #32]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	43db      	mvns	r3, r3
 800345e:	401a      	ands	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a1a      	ldr	r2, [r3, #32]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f003 031f 	and.w	r3, r3, #31
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	fa01 f303 	lsl.w	r3, r1, r3
 8003474:	431a      	orrs	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	621a      	str	r2, [r3, #32]
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800349c:	2302      	movs	r3, #2
 800349e:	e051      	b.n	8003544 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a22      	ldr	r2, [pc, #136]	@ (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d108      	bne.n	80034dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80034d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80034e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a14      	ldr	r2, [pc, #80]	@ (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d009      	beq.n	8003518 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800350c:	d004      	beq.n	8003518 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a10      	ldr	r2, [pc, #64]	@ (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d10c      	bne.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800351e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	4313      	orrs	r3, r2
 8003528:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	40012c00 	.word	0x40012c00
 8003554:	40000400 	.word	0x40000400

08003558 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003570:	2302      	movs	r3, #2
 8003572:	e06e      	b.n	8003652 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	041b      	lsls	r3, r3, #16
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a17      	ldr	r2, [pc, #92]	@ (8003660 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d11c      	bne.n	8003640 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003610:	051b      	lsls	r3, r3, #20
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40012c00 	.word	0x40012c00

08003664 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e042      	b.n	80036fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367c:	2b00      	cmp	r3, #0
 800367e:	d106      	bne.n	800368e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f83b 	bl	8003704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2224      	movs	r2, #36	@ 0x24
 8003692:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0201 	bic.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fad0 	bl	8003c54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f82f 	bl	8003718 <UART_SetConfig>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e01b      	b.n	80036fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fb4f 	bl	8003d98 <UART_CheckIdleState>
 80036fa:	4603      	mov	r3, r0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800371c:	b08c      	sub	sp, #48	@ 0x30
 800371e:	af00      	add	r7, sp, #0
 8003720:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	431a      	orrs	r2, r3
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	431a      	orrs	r2, r3
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	4313      	orrs	r3, r2
 800373e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4b98      	ldr	r3, [pc, #608]	@ (80039a8 <UART_SetConfig+0x290>)
 8003748:	4013      	ands	r3, r2
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003750:	430b      	orrs	r3, r1
 8003752:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a8d      	ldr	r2, [pc, #564]	@ (80039ac <UART_SetConfig+0x294>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d004      	beq.n	8003784 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003780:	4313      	orrs	r3, r2
 8003782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800378e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003798:	430b      	orrs	r3, r1
 800379a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a2:	f023 010f 	bic.w	r1, r3, #15
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a7e      	ldr	r2, [pc, #504]	@ (80039b0 <UART_SetConfig+0x298>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d125      	bne.n	8003808 <UART_SetConfig+0xf0>
 80037bc:	4b7d      	ldr	r3, [pc, #500]	@ (80039b4 <UART_SetConfig+0x29c>)
 80037be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d81a      	bhi.n	8003800 <UART_SetConfig+0xe8>
 80037ca:	a201      	add	r2, pc, #4	@ (adr r2, 80037d0 <UART_SetConfig+0xb8>)
 80037cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d0:	080037e1 	.word	0x080037e1
 80037d4:	080037f1 	.word	0x080037f1
 80037d8:	080037e9 	.word	0x080037e9
 80037dc:	080037f9 	.word	0x080037f9
 80037e0:	2301      	movs	r3, #1
 80037e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037e6:	e07c      	b.n	80038e2 <UART_SetConfig+0x1ca>
 80037e8:	2304      	movs	r3, #4
 80037ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ee:	e078      	b.n	80038e2 <UART_SetConfig+0x1ca>
 80037f0:	2308      	movs	r3, #8
 80037f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037f6:	e074      	b.n	80038e2 <UART_SetConfig+0x1ca>
 80037f8:	2310      	movs	r3, #16
 80037fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037fe:	e070      	b.n	80038e2 <UART_SetConfig+0x1ca>
 8003800:	2320      	movs	r3, #32
 8003802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003806:	e06c      	b.n	80038e2 <UART_SetConfig+0x1ca>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a6a      	ldr	r2, [pc, #424]	@ (80039b8 <UART_SetConfig+0x2a0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d138      	bne.n	8003884 <UART_SetConfig+0x16c>
 8003812:	4b68      	ldr	r3, [pc, #416]	@ (80039b4 <UART_SetConfig+0x29c>)
 8003814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b0c      	cmp	r3, #12
 800381e:	d82d      	bhi.n	800387c <UART_SetConfig+0x164>
 8003820:	a201      	add	r2, pc, #4	@ (adr r2, 8003828 <UART_SetConfig+0x110>)
 8003822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003826:	bf00      	nop
 8003828:	0800385d 	.word	0x0800385d
 800382c:	0800387d 	.word	0x0800387d
 8003830:	0800387d 	.word	0x0800387d
 8003834:	0800387d 	.word	0x0800387d
 8003838:	0800386d 	.word	0x0800386d
 800383c:	0800387d 	.word	0x0800387d
 8003840:	0800387d 	.word	0x0800387d
 8003844:	0800387d 	.word	0x0800387d
 8003848:	08003865 	.word	0x08003865
 800384c:	0800387d 	.word	0x0800387d
 8003850:	0800387d 	.word	0x0800387d
 8003854:	0800387d 	.word	0x0800387d
 8003858:	08003875 	.word	0x08003875
 800385c:	2300      	movs	r3, #0
 800385e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003862:	e03e      	b.n	80038e2 <UART_SetConfig+0x1ca>
 8003864:	2304      	movs	r3, #4
 8003866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800386a:	e03a      	b.n	80038e2 <UART_SetConfig+0x1ca>
 800386c:	2308      	movs	r3, #8
 800386e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003872:	e036      	b.n	80038e2 <UART_SetConfig+0x1ca>
 8003874:	2310      	movs	r3, #16
 8003876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800387a:	e032      	b.n	80038e2 <UART_SetConfig+0x1ca>
 800387c:	2320      	movs	r3, #32
 800387e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003882:	e02e      	b.n	80038e2 <UART_SetConfig+0x1ca>
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a48      	ldr	r2, [pc, #288]	@ (80039ac <UART_SetConfig+0x294>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d126      	bne.n	80038dc <UART_SetConfig+0x1c4>
 800388e:	4b49      	ldr	r3, [pc, #292]	@ (80039b4 <UART_SetConfig+0x29c>)
 8003890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	2b03      	cmp	r3, #3
 800389a:	d81b      	bhi.n	80038d4 <UART_SetConfig+0x1bc>
 800389c:	a201      	add	r2, pc, #4	@ (adr r2, 80038a4 <UART_SetConfig+0x18c>)
 800389e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a2:	bf00      	nop
 80038a4:	080038b5 	.word	0x080038b5
 80038a8:	080038c5 	.word	0x080038c5
 80038ac:	080038bd 	.word	0x080038bd
 80038b0:	080038cd 	.word	0x080038cd
 80038b4:	2302      	movs	r3, #2
 80038b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ba:	e012      	b.n	80038e2 <UART_SetConfig+0x1ca>
 80038bc:	2304      	movs	r3, #4
 80038be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038c2:	e00e      	b.n	80038e2 <UART_SetConfig+0x1ca>
 80038c4:	2308      	movs	r3, #8
 80038c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ca:	e00a      	b.n	80038e2 <UART_SetConfig+0x1ca>
 80038cc:	2310      	movs	r3, #16
 80038ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038d2:	e006      	b.n	80038e2 <UART_SetConfig+0x1ca>
 80038d4:	2320      	movs	r3, #32
 80038d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038da:	e002      	b.n	80038e2 <UART_SetConfig+0x1ca>
 80038dc:	2320      	movs	r3, #32
 80038de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a31      	ldr	r2, [pc, #196]	@ (80039ac <UART_SetConfig+0x294>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	f040 80b4 	bne.w	8003a56 <UART_SetConfig+0x33e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038f2:	3b02      	subs	r3, #2
 80038f4:	2b0e      	cmp	r3, #14
 80038f6:	d830      	bhi.n	800395a <UART_SetConfig+0x242>
 80038f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003900 <UART_SetConfig+0x1e8>)
 80038fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fe:	bf00      	nop
 8003900:	0800393d 	.word	0x0800393d
 8003904:	0800395b 	.word	0x0800395b
 8003908:	08003945 	.word	0x08003945
 800390c:	0800395b 	.word	0x0800395b
 8003910:	0800395b 	.word	0x0800395b
 8003914:	0800395b 	.word	0x0800395b
 8003918:	0800394b 	.word	0x0800394b
 800391c:	0800395b 	.word	0x0800395b
 8003920:	0800395b 	.word	0x0800395b
 8003924:	0800395b 	.word	0x0800395b
 8003928:	0800395b 	.word	0x0800395b
 800392c:	0800395b 	.word	0x0800395b
 8003930:	0800395b 	.word	0x0800395b
 8003934:	0800395b 	.word	0x0800395b
 8003938:	08003953 	.word	0x08003953
    {
      case UART_CLOCKSOURCE_PCLK7:
        pclk = HAL_RCC_GetPCLK7Freq();
 800393c:	f7fe fda0 	bl	8002480 <HAL_RCC_GetPCLK7Freq>
 8003940:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003942:	e010      	b.n	8003966 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003944:	4b1d      	ldr	r3, [pc, #116]	@ (80039bc <UART_SetConfig+0x2a4>)
 8003946:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003948:	e00d      	b.n	8003966 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800394a:	f7fe fd2d 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 800394e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003950:	e009      	b.n	8003966 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003958:	e005      	b.n	8003966 <UART_SetConfig+0x24e>
      default:
        pclk = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003964:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8159 	beq.w	8003c20 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003972:	4a13      	ldr	r2, [pc, #76]	@ (80039c0 <UART_SetConfig+0x2a8>)
 8003974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003978:	461a      	mov	r2, r3
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003980:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	4413      	add	r3, r2
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	429a      	cmp	r2, r3
 8003990:	d305      	bcc.n	800399e <UART_SetConfig+0x286>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	429a      	cmp	r2, r3
 800399c:	d912      	bls.n	80039c4 <UART_SetConfig+0x2ac>
      {
        ret = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80039a4:	e13c      	b.n	8003c20 <UART_SetConfig+0x508>
 80039a6:	bf00      	nop
 80039a8:	cfff69f3 	.word	0xcfff69f3
 80039ac:	46002400 	.word	0x46002400
 80039b0:	40013800 	.word	0x40013800
 80039b4:	46020c00 	.word	0x46020c00
 80039b8:	40004400 	.word	0x40004400
 80039bc:	00f42400 	.word	0x00f42400
 80039c0:	08004154 	.word	0x08004154
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c6:	2200      	movs	r2, #0
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	60fa      	str	r2, [r7, #12]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	4a9e      	ldr	r2, [pc, #632]	@ (8003c4c <UART_SetConfig+0x534>)
 80039d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	2200      	movs	r2, #0
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039e6:	f7fc fbd9 	bl	800019c <__aeabi_uldivmod>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	4610      	mov	r0, r2
 80039f0:	4619      	mov	r1, r3
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	020b      	lsls	r3, r1, #8
 80039fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a00:	0202      	lsls	r2, r0, #8
 8003a02:	6979      	ldr	r1, [r7, #20]
 8003a04:	6849      	ldr	r1, [r1, #4]
 8003a06:	0849      	lsrs	r1, r1, #1
 8003a08:	2000      	movs	r0, #0
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	4605      	mov	r5, r0
 8003a0e:	eb12 0804 	adds.w	r8, r2, r4
 8003a12:	eb43 0905 	adc.w	r9, r3, r5
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	469a      	mov	sl, r3
 8003a1e:	4693      	mov	fp, r2
 8003a20:	4652      	mov	r2, sl
 8003a22:	465b      	mov	r3, fp
 8003a24:	4640      	mov	r0, r8
 8003a26:	4649      	mov	r1, r9
 8003a28:	f7fc fbb8 	bl	800019c <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4613      	mov	r3, r2
 8003a32:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a3a:	d308      	bcc.n	8003a4e <UART_SetConfig+0x336>
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a42:	d204      	bcs.n	8003a4e <UART_SetConfig+0x336>
        {
          huart->Instance->BRR = usartdiv;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6a3a      	ldr	r2, [r7, #32]
 8003a4a:	60da      	str	r2, [r3, #12]
 8003a4c:	e0e8      	b.n	8003c20 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003a54:	e0e4      	b.n	8003c20 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a5e:	d177      	bne.n	8003b50 <UART_SetConfig+0x438>
  {
    switch (clocksource)
 8003a60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a64:	2b10      	cmp	r3, #16
 8003a66:	d838      	bhi.n	8003ada <UART_SetConfig+0x3c2>
 8003a68:	a201      	add	r2, pc, #4	@ (adr r2, 8003a70 <UART_SetConfig+0x358>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08003ab5 	.word	0x08003ab5
 8003a74:	08003abd 	.word	0x08003abd
 8003a78:	08003adb 	.word	0x08003adb
 8003a7c:	08003adb 	.word	0x08003adb
 8003a80:	08003ac5 	.word	0x08003ac5
 8003a84:	08003adb 	.word	0x08003adb
 8003a88:	08003adb 	.word	0x08003adb
 8003a8c:	08003adb 	.word	0x08003adb
 8003a90:	08003acb 	.word	0x08003acb
 8003a94:	08003adb 	.word	0x08003adb
 8003a98:	08003adb 	.word	0x08003adb
 8003a9c:	08003adb 	.word	0x08003adb
 8003aa0:	08003adb 	.word	0x08003adb
 8003aa4:	08003adb 	.word	0x08003adb
 8003aa8:	08003adb 	.word	0x08003adb
 8003aac:	08003adb 	.word	0x08003adb
 8003ab0:	08003ad3 	.word	0x08003ad3
    {
#if defined(USART2)
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab4:	f7fe fcbc 	bl	8002430 <HAL_RCC_GetPCLK1Freq>
 8003ab8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003aba:	e014      	b.n	8003ae6 <UART_SetConfig+0x3ce>
#endif /* USART2 */
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003abc:	f7fe fccc 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 8003ac0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ac2:	e010      	b.n	8003ae6 <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ac4:	4b62      	ldr	r3, [pc, #392]	@ (8003c50 <UART_SetConfig+0x538>)
 8003ac6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ac8:	e00d      	b.n	8003ae6 <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aca:	f7fe fc6d 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8003ace:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ad0:	e009      	b.n	8003ae6 <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ad6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ad8:	e005      	b.n	8003ae6 <UART_SetConfig+0x3ce>
      default:
        pclk = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003ae4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8099 	beq.w	8003c20 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af2:	4a56      	ldr	r2, [pc, #344]	@ (8003c4c <UART_SetConfig+0x534>)
 8003af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003af8:	461a      	mov	r2, r3
 8003afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b00:	005a      	lsls	r2, r3, #1
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	085b      	lsrs	r3, r3, #1
 8003b08:	441a      	add	r2, r3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	2b0f      	cmp	r3, #15
 8003b18:	d916      	bls.n	8003b48 <UART_SetConfig+0x430>
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b20:	d212      	bcs.n	8003b48 <UART_SetConfig+0x430>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	f023 030f 	bic.w	r3, r3, #15
 8003b2a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	8bfb      	ldrh	r3, [r7, #30]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	8bfa      	ldrh	r2, [r7, #30]
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	e06b      	b.n	8003c20 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003b4e:	e067      	b.n	8003c20 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	d838      	bhi.n	8003bca <UART_SetConfig+0x4b2>
 8003b58:	a201      	add	r2, pc, #4	@ (adr r2, 8003b60 <UART_SetConfig+0x448>)
 8003b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5e:	bf00      	nop
 8003b60:	08003ba5 	.word	0x08003ba5
 8003b64:	08003bad 	.word	0x08003bad
 8003b68:	08003bcb 	.word	0x08003bcb
 8003b6c:	08003bcb 	.word	0x08003bcb
 8003b70:	08003bb5 	.word	0x08003bb5
 8003b74:	08003bcb 	.word	0x08003bcb
 8003b78:	08003bcb 	.word	0x08003bcb
 8003b7c:	08003bcb 	.word	0x08003bcb
 8003b80:	08003bbb 	.word	0x08003bbb
 8003b84:	08003bcb 	.word	0x08003bcb
 8003b88:	08003bcb 	.word	0x08003bcb
 8003b8c:	08003bcb 	.word	0x08003bcb
 8003b90:	08003bcb 	.word	0x08003bcb
 8003b94:	08003bcb 	.word	0x08003bcb
 8003b98:	08003bcb 	.word	0x08003bcb
 8003b9c:	08003bcb 	.word	0x08003bcb
 8003ba0:	08003bc3 	.word	0x08003bc3
    {
#if defined(USART2)
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ba4:	f7fe fc44 	bl	8002430 <HAL_RCC_GetPCLK1Freq>
 8003ba8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003baa:	e014      	b.n	8003bd6 <UART_SetConfig+0x4be>
#endif /* USART2 */
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bac:	f7fe fc54 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 8003bb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bb2:	e010      	b.n	8003bd6 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb4:	4b26      	ldr	r3, [pc, #152]	@ (8003c50 <UART_SetConfig+0x538>)
 8003bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bb8:	e00d      	b.n	8003bd6 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bba:	f7fe fbf5 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8003bbe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bc0:	e009      	b.n	8003bd6 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bc8:	e005      	b.n	8003bd6 <UART_SetConfig+0x4be>
      default:
        pclk = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003bd4:	bf00      	nop
    }

    if (pclk != 0U)
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d021      	beq.n	8003c20 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c4c <UART_SetConfig+0x534>)
 8003be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003be6:	461a      	mov	r2, r3
 8003be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bea:	fbb3 f2f2 	udiv	r2, r3, r2
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	085b      	lsrs	r3, r3, #1
 8003bf4:	441a      	add	r2, r3
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	2b0f      	cmp	r3, #15
 8003c04:	d909      	bls.n	8003c1a <UART_SetConfig+0x502>
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c0c:	d205      	bcs.n	8003c1a <UART_SetConfig+0x502>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60da      	str	r2, [r3, #12]
 8003c18:	e002      	b.n	8003c20 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2200      	movs	r2, #0
 8003c34:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003c3c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3730      	adds	r7, #48	@ 0x30
 8003c44:	46bd      	mov	sp, r7
 8003c46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c4a:	bf00      	nop
 8003c4c:	08004154 	.word	0x08004154
 8003c50:	00f42400 	.word	0x00f42400

08003c54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01a      	beq.n	8003d6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d52:	d10a      	bne.n	8003d6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	605a      	str	r2, [r3, #4]
  }
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b098      	sub	sp, #96	@ 0x60
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003da8:	f7fd f9ea 	bl	8001180 <HAL_GetTick>
 8003dac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d12f      	bne.n	8003e1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f88e 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d022      	beq.n	8003e1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dde:	e853 3f00 	ldrex	r3, [r3]
 8003de2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dea:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003df4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003df6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003dfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e6      	bne.n	8003dd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e063      	b.n	8003ee4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d149      	bne.n	8003ebe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e2a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e32:	2200      	movs	r2, #0
 8003e34:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f857 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d03c      	beq.n	8003ebe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	623b      	str	r3, [r7, #32]
   return(result);
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e62:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e64:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e6a:	e841 2300 	strex	r3, r2, [r1]
 8003e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1e6      	bne.n	8003e44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3308      	adds	r3, #8
 8003e7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3308      	adds	r3, #8
 8003e94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e96:	61fa      	str	r2, [r7, #28]
 8003e98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	69b9      	ldr	r1, [r7, #24]
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	617b      	str	r3, [r7, #20]
   return(result);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e5      	bne.n	8003e76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e012      	b.n	8003ee4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3758      	adds	r7, #88	@ 0x58
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003efc:	e04f      	b.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d04b      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f06:	f7fd f93b 	bl	8001180 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d302      	bcc.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e04e      	b.n	8003fbe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d037      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b80      	cmp	r3, #128	@ 0x80
 8003f32:	d034      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b40      	cmp	r3, #64	@ 0x40
 8003f38:	d031      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d110      	bne.n	8003f6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f838 	bl	8003fc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2208      	movs	r2, #8
 8003f5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e029      	b.n	8003fbe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f78:	d111      	bne.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f81e 	bl	8003fc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e00f      	b.n	8003fbe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69da      	ldr	r2, [r3, #28]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	bf0c      	ite	eq
 8003fae:	2301      	moveq	r3, #1
 8003fb0:	2300      	movne	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d0a0      	beq.n	8003efe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b095      	sub	sp, #84	@ 0x54
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fec:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ff2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e6      	bne.n	8003fce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3308      	adds	r3, #8
 8004006:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3308      	adds	r3, #8
 8004022:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004024:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004026:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800402a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e3      	bne.n	8004000 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800403c:	2b01      	cmp	r3, #1
 800403e:	d118      	bne.n	8004072 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	60bb      	str	r3, [r7, #8]
   return(result);
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f023 0310 	bic.w	r3, r3, #16
 8004054:	647b      	str	r3, [r7, #68]	@ 0x44
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004062:	6979      	ldr	r1, [r7, #20]
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	613b      	str	r3, [r7, #16]
   return(result);
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e6      	bne.n	8004040 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004086:	bf00      	nop
 8004088:	3754      	adds	r7, #84	@ 0x54
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <memset>:
 8004092:	4402      	add	r2, r0
 8004094:	4603      	mov	r3, r0
 8004096:	4293      	cmp	r3, r2
 8004098:	d100      	bne.n	800409c <memset+0xa>
 800409a:	4770      	bx	lr
 800409c:	f803 1b01 	strb.w	r1, [r3], #1
 80040a0:	e7f9      	b.n	8004096 <memset+0x4>
	...

080040a4 <__libc_init_array>:
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	4d0d      	ldr	r5, [pc, #52]	@ (80040dc <__libc_init_array+0x38>)
 80040a8:	2600      	movs	r6, #0
 80040aa:	4c0d      	ldr	r4, [pc, #52]	@ (80040e0 <__libc_init_array+0x3c>)
 80040ac:	1b64      	subs	r4, r4, r5
 80040ae:	10a4      	asrs	r4, r4, #2
 80040b0:	42a6      	cmp	r6, r4
 80040b2:	d109      	bne.n	80040c8 <__libc_init_array+0x24>
 80040b4:	4d0b      	ldr	r5, [pc, #44]	@ (80040e4 <__libc_init_array+0x40>)
 80040b6:	2600      	movs	r6, #0
 80040b8:	4c0b      	ldr	r4, [pc, #44]	@ (80040e8 <__libc_init_array+0x44>)
 80040ba:	f000 f817 	bl	80040ec <_init>
 80040be:	1b64      	subs	r4, r4, r5
 80040c0:	10a4      	asrs	r4, r4, #2
 80040c2:	42a6      	cmp	r6, r4
 80040c4:	d105      	bne.n	80040d2 <__libc_init_array+0x2e>
 80040c6:	bd70      	pop	{r4, r5, r6, pc}
 80040c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040cc:	3601      	adds	r6, #1
 80040ce:	4798      	blx	r3
 80040d0:	e7ee      	b.n	80040b0 <__libc_init_array+0xc>
 80040d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d6:	3601      	adds	r6, #1
 80040d8:	4798      	blx	r3
 80040da:	e7f2      	b.n	80040c2 <__libc_init_array+0x1e>
 80040dc:	08004174 	.word	0x08004174
 80040e0:	08004174 	.word	0x08004174
 80040e4:	08004174 	.word	0x08004174
 80040e8:	08004178 	.word	0x08004178

080040ec <_init>:
 80040ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ee:	bf00      	nop
 80040f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f2:	bc08      	pop	{r3}
 80040f4:	469e      	mov	lr, r3
 80040f6:	4770      	bx	lr

080040f8 <_fini>:
 80040f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fa:	bf00      	nop
 80040fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fe:	bc08      	pop	{r3}
 8004100:	469e      	mov	lr, r3
 8004102:	4770      	bx	lr
