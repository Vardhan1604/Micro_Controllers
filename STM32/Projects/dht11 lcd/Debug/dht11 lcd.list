
dht11 lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000015c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046cc  0800015c  0800015c  0000115c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004828  08004828  00005828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048fc  080048fc  0000604c  2**0
                  CONTENTS
  4 .ARM          00000008  080048fc  080048fc  000058fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004904  08004904  0000604c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004904  08004904  00005904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004908  08004908  00005908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  0800490c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000004c  08004958  0000604c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08004958  000061dc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ad4  00000000  00000000  00006082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d22  00000000  00000000  0001db56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  00020878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001045  00000000  00000000  00021d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023058  00000000  00000000  00022d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a293  00000000  00000000  00045de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deb17  00000000  00000000  00060078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013eb8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005980  00000000  00000000  0013ebd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00144554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800015c <__do_global_dtors_aux>:
 800015c:	b510      	push	{r4, lr}
 800015e:	4c05      	ldr	r4, [pc, #20]	@ (8000174 <__do_global_dtors_aux+0x18>)
 8000160:	7823      	ldrb	r3, [r4, #0]
 8000162:	b933      	cbnz	r3, 8000172 <__do_global_dtors_aux+0x16>
 8000164:	4b04      	ldr	r3, [pc, #16]	@ (8000178 <__do_global_dtors_aux+0x1c>)
 8000166:	b113      	cbz	r3, 800016e <__do_global_dtors_aux+0x12>
 8000168:	4804      	ldr	r0, [pc, #16]	@ (800017c <__do_global_dtors_aux+0x20>)
 800016a:	f3af 8000 	nop.w
 800016e:	2301      	movs	r3, #1
 8000170:	7023      	strb	r3, [r4, #0]
 8000172:	bd10      	pop	{r4, pc}
 8000174:	2000004c 	.word	0x2000004c
 8000178:	00000000 	.word	0x00000000
 800017c:	08004810 	.word	0x08004810

08000180 <frame_dummy>:
 8000180:	b508      	push	{r3, lr}
 8000182:	4b03      	ldr	r3, [pc, #12]	@ (8000190 <frame_dummy+0x10>)
 8000184:	b11b      	cbz	r3, 800018e <frame_dummy+0xe>
 8000186:	4903      	ldr	r1, [pc, #12]	@ (8000194 <frame_dummy+0x14>)
 8000188:	4803      	ldr	r0, [pc, #12]	@ (8000198 <frame_dummy+0x18>)
 800018a:	f3af 8000 	nop.w
 800018e:	bd08      	pop	{r3, pc}
 8000190:	00000000 	.word	0x00000000
 8000194:	20000050 	.word	0x20000050
 8000198:	08004810 	.word	0x08004810

0800019c <__aeabi_uldivmod>:
 800019c:	b953      	cbnz	r3, 80001b4 <__aeabi_uldivmod+0x18>
 800019e:	b94a      	cbnz	r2, 80001b4 <__aeabi_uldivmod+0x18>
 80001a0:	2900      	cmp	r1, #0
 80001a2:	bf08      	it	eq
 80001a4:	2800      	cmpeq	r0, #0
 80001a6:	bf1c      	itt	ne
 80001a8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ac:	f04f 30ff 	movne.w	r0, #4294967295
 80001b0:	f000 b97e 	b.w	80004b0 <__aeabi_idiv0>
 80001b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001bc:	f000 f806 	bl	80001cc <__udivmoddi4>
 80001c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c8:	b004      	add	sp, #16
 80001ca:	4770      	bx	lr

080001cc <__udivmoddi4>:
 80001cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001d0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80001d2:	460c      	mov	r4, r1
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d14d      	bne.n	8000274 <__udivmoddi4+0xa8>
 80001d8:	428a      	cmp	r2, r1
 80001da:	460f      	mov	r7, r1
 80001dc:	4684      	mov	ip, r0
 80001de:	4696      	mov	lr, r2
 80001e0:	fab2 f382 	clz	r3, r2
 80001e4:	d960      	bls.n	80002a8 <__udivmoddi4+0xdc>
 80001e6:	b14b      	cbz	r3, 80001fc <__udivmoddi4+0x30>
 80001e8:	fa02 fe03 	lsl.w	lr, r2, r3
 80001ec:	f1c3 0220 	rsb	r2, r3, #32
 80001f0:	409f      	lsls	r7, r3
 80001f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80001f6:	fa20 f202 	lsr.w	r2, r0, r2
 80001fa:	4317      	orrs	r7, r2
 80001fc:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000200:	fa1f f48e 	uxth.w	r4, lr
 8000204:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000208:	fbb7 f1f6 	udiv	r1, r7, r6
 800020c:	fb06 7711 	mls	r7, r6, r1, r7
 8000210:	fb01 f004 	mul.w	r0, r1, r4
 8000214:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000218:	4290      	cmp	r0, r2
 800021a:	d908      	bls.n	800022e <__udivmoddi4+0x62>
 800021c:	eb1e 0202 	adds.w	r2, lr, r2
 8000220:	f101 37ff 	add.w	r7, r1, #4294967295
 8000224:	d202      	bcs.n	800022c <__udivmoddi4+0x60>
 8000226:	4290      	cmp	r0, r2
 8000228:	f200 812d 	bhi.w	8000486 <__udivmoddi4+0x2ba>
 800022c:	4639      	mov	r1, r7
 800022e:	1a12      	subs	r2, r2, r0
 8000230:	fa1f fc8c 	uxth.w	ip, ip
 8000234:	fbb2 f0f6 	udiv	r0, r2, r6
 8000238:	fb06 2210 	mls	r2, r6, r0, r2
 800023c:	fb00 f404 	mul.w	r4, r0, r4
 8000240:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000244:	4564      	cmp	r4, ip
 8000246:	d908      	bls.n	800025a <__udivmoddi4+0x8e>
 8000248:	eb1e 0c0c 	adds.w	ip, lr, ip
 800024c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000250:	d202      	bcs.n	8000258 <__udivmoddi4+0x8c>
 8000252:	4564      	cmp	r4, ip
 8000254:	f200 811a 	bhi.w	800048c <__udivmoddi4+0x2c0>
 8000258:	4610      	mov	r0, r2
 800025a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800025e:	ebac 0c04 	sub.w	ip, ip, r4
 8000262:	2100      	movs	r1, #0
 8000264:	b125      	cbz	r5, 8000270 <__udivmoddi4+0xa4>
 8000266:	fa2c f303 	lsr.w	r3, ip, r3
 800026a:	2200      	movs	r2, #0
 800026c:	e9c5 3200 	strd	r3, r2, [r5]
 8000270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000274:	428b      	cmp	r3, r1
 8000276:	d905      	bls.n	8000284 <__udivmoddi4+0xb8>
 8000278:	b10d      	cbz	r5, 800027e <__udivmoddi4+0xb2>
 800027a:	e9c5 0100 	strd	r0, r1, [r5]
 800027e:	2100      	movs	r1, #0
 8000280:	4608      	mov	r0, r1
 8000282:	e7f5      	b.n	8000270 <__udivmoddi4+0xa4>
 8000284:	fab3 f183 	clz	r1, r3
 8000288:	2900      	cmp	r1, #0
 800028a:	d14d      	bne.n	8000328 <__udivmoddi4+0x15c>
 800028c:	42a3      	cmp	r3, r4
 800028e:	f0c0 80f2 	bcc.w	8000476 <__udivmoddi4+0x2aa>
 8000292:	4290      	cmp	r0, r2
 8000294:	f080 80ef 	bcs.w	8000476 <__udivmoddi4+0x2aa>
 8000298:	4606      	mov	r6, r0
 800029a:	4623      	mov	r3, r4
 800029c:	4608      	mov	r0, r1
 800029e:	2d00      	cmp	r5, #0
 80002a0:	d0e6      	beq.n	8000270 <__udivmoddi4+0xa4>
 80002a2:	e9c5 6300 	strd	r6, r3, [r5]
 80002a6:	e7e3      	b.n	8000270 <__udivmoddi4+0xa4>
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	f040 80a2 	bne.w	80003f2 <__udivmoddi4+0x226>
 80002ae:	1a8a      	subs	r2, r1, r2
 80002b0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80002b4:	fa1f f68e 	uxth.w	r6, lr
 80002b8:	2101      	movs	r1, #1
 80002ba:	fbb2 f4f7 	udiv	r4, r2, r7
 80002be:	fb07 2014 	mls	r0, r7, r4, r2
 80002c2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002ca:	fb06 f004 	mul.w	r0, r6, r4
 80002ce:	4290      	cmp	r0, r2
 80002d0:	d90f      	bls.n	80002f2 <__udivmoddi4+0x126>
 80002d2:	eb1e 0202 	adds.w	r2, lr, r2
 80002d6:	f104 38ff 	add.w	r8, r4, #4294967295
 80002da:	bf2c      	ite	cs
 80002dc:	f04f 0901 	movcs.w	r9, #1
 80002e0:	f04f 0900 	movcc.w	r9, #0
 80002e4:	4290      	cmp	r0, r2
 80002e6:	d903      	bls.n	80002f0 <__udivmoddi4+0x124>
 80002e8:	f1b9 0f00 	cmp.w	r9, #0
 80002ec:	f000 80c8 	beq.w	8000480 <__udivmoddi4+0x2b4>
 80002f0:	4644      	mov	r4, r8
 80002f2:	1a12      	subs	r2, r2, r0
 80002f4:	fa1f fc8c 	uxth.w	ip, ip
 80002f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000300:	fb00 f606 	mul.w	r6, r0, r6
 8000304:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000308:	4566      	cmp	r6, ip
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x152>
 800030c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000310:	f100 32ff 	add.w	r2, r0, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x150>
 8000316:	4566      	cmp	r6, ip
 8000318:	f200 80bb 	bhi.w	8000492 <__udivmoddi4+0x2c6>
 800031c:	4610      	mov	r0, r2
 800031e:	ebac 0c06 	sub.w	ip, ip, r6
 8000322:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000326:	e79d      	b.n	8000264 <__udivmoddi4+0x98>
 8000328:	f1c1 0620 	rsb	r6, r1, #32
 800032c:	408b      	lsls	r3, r1
 800032e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000332:	fa22 f706 	lsr.w	r7, r2, r6
 8000336:	fa20 fc06 	lsr.w	ip, r0, r6
 800033a:	40f4      	lsrs	r4, r6
 800033c:	408a      	lsls	r2, r1
 800033e:	431f      	orrs	r7, r3
 8000340:	ea4e 030c 	orr.w	r3, lr, ip
 8000344:	fa00 fe01 	lsl.w	lr, r0, r1
 8000348:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000350:	fa1f fc87 	uxth.w	ip, r7
 8000354:	fbb4 f0f8 	udiv	r0, r4, r8
 8000358:	fb08 4410 	mls	r4, r8, r0, r4
 800035c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000360:	fb00 f90c 	mul.w	r9, r0, ip
 8000364:	45a1      	cmp	r9, r4
 8000366:	d90e      	bls.n	8000386 <__udivmoddi4+0x1ba>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 3aff 	add.w	sl, r0, #4294967295
 800036e:	bf2c      	ite	cs
 8000370:	f04f 0b01 	movcs.w	fp, #1
 8000374:	f04f 0b00 	movcc.w	fp, #0
 8000378:	45a1      	cmp	r9, r4
 800037a:	d903      	bls.n	8000384 <__udivmoddi4+0x1b8>
 800037c:	f1bb 0f00 	cmp.w	fp, #0
 8000380:	f000 8093 	beq.w	80004aa <__udivmoddi4+0x2de>
 8000384:	4650      	mov	r0, sl
 8000386:	eba4 0409 	sub.w	r4, r4, r9
 800038a:	fa1f f983 	uxth.w	r9, r3
 800038e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000392:	fb08 4413 	mls	r4, r8, r3, r4
 8000396:	fb03 fc0c 	mul.w	ip, r3, ip
 800039a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039e:	45a4      	cmp	ip, r4
 80003a0:	d906      	bls.n	80003b0 <__udivmoddi4+0x1e4>
 80003a2:	193c      	adds	r4, r7, r4
 80003a4:	f103 38ff 	add.w	r8, r3, #4294967295
 80003a8:	d201      	bcs.n	80003ae <__udivmoddi4+0x1e2>
 80003aa:	45a4      	cmp	ip, r4
 80003ac:	d87a      	bhi.n	80004a4 <__udivmoddi4+0x2d8>
 80003ae:	4643      	mov	r3, r8
 80003b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003b4:	eba4 040c 	sub.w	r4, r4, ip
 80003b8:	fba0 9802 	umull	r9, r8, r0, r2
 80003bc:	4544      	cmp	r4, r8
 80003be:	46cc      	mov	ip, r9
 80003c0:	4643      	mov	r3, r8
 80003c2:	d302      	bcc.n	80003ca <__udivmoddi4+0x1fe>
 80003c4:	d106      	bne.n	80003d4 <__udivmoddi4+0x208>
 80003c6:	45ce      	cmp	lr, r9
 80003c8:	d204      	bcs.n	80003d4 <__udivmoddi4+0x208>
 80003ca:	3801      	subs	r0, #1
 80003cc:	ebb9 0c02 	subs.w	ip, r9, r2
 80003d0:	eb68 0307 	sbc.w	r3, r8, r7
 80003d4:	b15d      	cbz	r5, 80003ee <__udivmoddi4+0x222>
 80003d6:	ebbe 020c 	subs.w	r2, lr, ip
 80003da:	eb64 0403 	sbc.w	r4, r4, r3
 80003de:	fa04 f606 	lsl.w	r6, r4, r6
 80003e2:	fa22 f301 	lsr.w	r3, r2, r1
 80003e6:	40cc      	lsrs	r4, r1
 80003e8:	431e      	orrs	r6, r3
 80003ea:	e9c5 6400 	strd	r6, r4, [r5]
 80003ee:	2100      	movs	r1, #0
 80003f0:	e73e      	b.n	8000270 <__udivmoddi4+0xa4>
 80003f2:	fa02 fe03 	lsl.w	lr, r2, r3
 80003f6:	f1c3 0120 	rsb	r1, r3, #32
 80003fa:	fa04 f203 	lsl.w	r2, r4, r3
 80003fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000408:	fa20 f101 	lsr.w	r1, r0, r1
 800040c:	fa1f f68e 	uxth.w	r6, lr
 8000410:	fbb4 f0f7 	udiv	r0, r4, r7
 8000414:	430a      	orrs	r2, r1
 8000416:	fb07 4410 	mls	r4, r7, r0, r4
 800041a:	0c11      	lsrs	r1, r2, #16
 800041c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000420:	fb00 f406 	mul.w	r4, r0, r6
 8000424:	428c      	cmp	r4, r1
 8000426:	d90e      	bls.n	8000446 <__udivmoddi4+0x27a>
 8000428:	eb1e 0101 	adds.w	r1, lr, r1
 800042c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000430:	bf2c      	ite	cs
 8000432:	f04f 0901 	movcs.w	r9, #1
 8000436:	f04f 0900 	movcc.w	r9, #0
 800043a:	428c      	cmp	r4, r1
 800043c:	d902      	bls.n	8000444 <__udivmoddi4+0x278>
 800043e:	f1b9 0f00 	cmp.w	r9, #0
 8000442:	d02c      	beq.n	800049e <__udivmoddi4+0x2d2>
 8000444:	4640      	mov	r0, r8
 8000446:	1b09      	subs	r1, r1, r4
 8000448:	b292      	uxth	r2, r2
 800044a:	fbb1 f4f7 	udiv	r4, r1, r7
 800044e:	fb07 1114 	mls	r1, r7, r4, r1
 8000452:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000456:	fb04 f106 	mul.w	r1, r4, r6
 800045a:	4291      	cmp	r1, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x2a2>
 800045e:	eb1e 0202 	adds.w	r2, lr, r2
 8000462:	f104 38ff 	add.w	r8, r4, #4294967295
 8000466:	d201      	bcs.n	800046c <__udivmoddi4+0x2a0>
 8000468:	4291      	cmp	r1, r2
 800046a:	d815      	bhi.n	8000498 <__udivmoddi4+0x2cc>
 800046c:	4644      	mov	r4, r8
 800046e:	1a52      	subs	r2, r2, r1
 8000470:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000474:	e721      	b.n	80002ba <__udivmoddi4+0xee>
 8000476:	1a86      	subs	r6, r0, r2
 8000478:	eb64 0303 	sbc.w	r3, r4, r3
 800047c:	2001      	movs	r0, #1
 800047e:	e70e      	b.n	800029e <__udivmoddi4+0xd2>
 8000480:	3c02      	subs	r4, #2
 8000482:	4472      	add	r2, lr
 8000484:	e735      	b.n	80002f2 <__udivmoddi4+0x126>
 8000486:	3902      	subs	r1, #2
 8000488:	4472      	add	r2, lr
 800048a:	e6d0      	b.n	800022e <__udivmoddi4+0x62>
 800048c:	44f4      	add	ip, lr
 800048e:	3802      	subs	r0, #2
 8000490:	e6e3      	b.n	800025a <__udivmoddi4+0x8e>
 8000492:	44f4      	add	ip, lr
 8000494:	3802      	subs	r0, #2
 8000496:	e742      	b.n	800031e <__udivmoddi4+0x152>
 8000498:	3c02      	subs	r4, #2
 800049a:	4472      	add	r2, lr
 800049c:	e7e7      	b.n	800046e <__udivmoddi4+0x2a2>
 800049e:	3802      	subs	r0, #2
 80004a0:	4471      	add	r1, lr
 80004a2:	e7d0      	b.n	8000446 <__udivmoddi4+0x27a>
 80004a4:	3b02      	subs	r3, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	e782      	b.n	80003b0 <__udivmoddi4+0x1e4>
 80004aa:	3802      	subs	r0, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	e76a      	b.n	8000386 <__udivmoddi4+0x1ba>

080004b0 <__aeabi_idiv0>:
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop

080004b4 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80004be:	4a38      	ldr	r2, [pc, #224]	@ (80005a0 <HD44780_Init+0xec>)
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80004c4:	4b37      	ldr	r3, [pc, #220]	@ (80005a4 <HD44780_Init+0xf0>)
 80004c6:	2208      	movs	r2, #8
 80004c8:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80004ca:	4b37      	ldr	r3, [pc, #220]	@ (80005a8 <HD44780_Init+0xf4>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80004d0:	4b33      	ldr	r3, [pc, #204]	@ (80005a0 <HD44780_Init+0xec>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d907      	bls.n	80004e8 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80004d8:	4b33      	ldr	r3, [pc, #204]	@ (80005a8 <HD44780_Init+0xf4>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	f043 0308 	orr.w	r3, r3, #8
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	4b31      	ldr	r3, [pc, #196]	@ (80005a8 <HD44780_Init+0xf4>)
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	e006      	b.n	80004f6 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80004e8:	4b2f      	ldr	r3, [pc, #188]	@ (80005a8 <HD44780_Init+0xf4>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	f043 0304 	orr.w	r3, r3, #4
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	4b2d      	ldr	r3, [pc, #180]	@ (80005a8 <HD44780_Init+0xf4>)
 80004f4:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80004f6:	f000 fa13 	bl	8000920 <DelayInit>
  HAL_Delay(50);
 80004fa:	2032      	movs	r0, #50	@ 0x32
 80004fc:	f001 f936 	bl	800176c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000500:	4b28      	ldr	r3, [pc, #160]	@ (80005a4 <HD44780_Init+0xf0>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	4618      	mov	r0, r3
 8000506:	f000 f9d1 	bl	80008ac <ExpanderWrite>
  HAL_Delay(1000);
 800050a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800050e:	f001 f92d 	bl	800176c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000512:	2030      	movs	r0, #48	@ 0x30
 8000514:	f000 f9b9 	bl	800088a <Write4Bits>
  DelayUS(4500);
 8000518:	f241 1094 	movw	r0, #4500	@ 0x1194
 800051c:	f000 fa2a 	bl	8000974 <DelayUS>

  Write4Bits(0x03 << 4);
 8000520:	2030      	movs	r0, #48	@ 0x30
 8000522:	f000 f9b2 	bl	800088a <Write4Bits>
  DelayUS(4500);
 8000526:	f241 1094 	movw	r0, #4500	@ 0x1194
 800052a:	f000 fa23 	bl	8000974 <DelayUS>

  Write4Bits(0x03 << 4);
 800052e:	2030      	movs	r0, #48	@ 0x30
 8000530:	f000 f9ab 	bl	800088a <Write4Bits>
  DelayUS(4500);
 8000534:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000538:	f000 fa1c 	bl	8000974 <DelayUS>

  Write4Bits(0x02 << 4);
 800053c:	2020      	movs	r0, #32
 800053e:	f000 f9a4 	bl	800088a <Write4Bits>
  DelayUS(100);
 8000542:	2064      	movs	r0, #100	@ 0x64
 8000544:	f000 fa16 	bl	8000974 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000548:	4b17      	ldr	r3, [pc, #92]	@ (80005a8 <HD44780_Init+0xf4>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	f043 0320 	orr.w	r3, r3, #32
 8000550:	b2db      	uxtb	r3, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f95c 	bl	8000810 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000558:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <HD44780_Init+0xf8>)
 800055a:	2204      	movs	r2, #4
 800055c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800055e:	f000 f88b 	bl	8000678 <HD44780_Display>
  HD44780_Clear();
 8000562:	f000 f82b 	bl	80005bc <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000566:	4b12      	ldr	r3, [pc, #72]	@ (80005b0 <HD44780_Init+0xfc>)
 8000568:	2202      	movs	r2, #2
 800056a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800056c:	4b10      	ldr	r3, [pc, #64]	@ (80005b0 <HD44780_Init+0xfc>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	b2db      	uxtb	r3, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f94a 	bl	8000810 <SendCommand>
  DelayUS(4500);
 800057c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000580:	f000 f9f8 	bl	8000974 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000584:	490b      	ldr	r1, [pc, #44]	@ (80005b4 <HD44780_Init+0x100>)
 8000586:	2000      	movs	r0, #0
 8000588:	f000 f8eb 	bl	8000762 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800058c:	490a      	ldr	r1, [pc, #40]	@ (80005b8 <HD44780_Init+0x104>)
 800058e:	2001      	movs	r0, #1
 8000590:	f000 f8e7 	bl	8000762 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000594:	f000 f81d 	bl	80005d2 <HD44780_Home>
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000006b 	.word	0x2000006b
 80005a4:	2000006c 	.word	0x2000006c
 80005a8:	20000068 	.word	0x20000068
 80005ac:	20000069 	.word	0x20000069
 80005b0:	2000006a 	.word	0x2000006a
 80005b4:	20000000 	.word	0x20000000
 80005b8:	20000008 	.word	0x20000008

080005bc <HD44780_Clear>:

void HD44780_Clear()
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f000 f925 	bl	8000810 <SendCommand>
  DelayUS(2000);
 80005c6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005ca:	f000 f9d3 	bl	8000974 <DelayUS>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <HD44780_Home>:

void HD44780_Home()
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80005d6:	2002      	movs	r0, #2
 80005d8:	f000 f91a 	bl	8000810 <SendCommand>
  DelayUS(2000);
 80005dc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005e0:	f000 f9c8 	bl	8000974 <DelayUS>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b087      	sub	sp, #28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	4613      	mov	r3, r2
 80005f6:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80005f8:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <HD44780_SetCursor+0x5c>)
 80005fa:	f107 0408 	add.w	r4, r7, #8
 80005fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000600:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000604:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <HD44780_SetCursor+0x60>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	79ba      	ldrb	r2, [r7, #6]
 800060a:	429a      	cmp	r2, r3
 800060c:	d303      	bcc.n	8000616 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <HD44780_SetCursor+0x60>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	3b01      	subs	r3, #1
 8000614:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000616:	79bb      	ldrb	r3, [r7, #6]
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	3318      	adds	r3, #24
 800061c:	443b      	add	r3, r7
 800061e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000622:	b2da      	uxtb	r2, r3
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	4413      	add	r3, r2
 8000628:	b2db      	uxtb	r3, r3
 800062a:	b25b      	sxtb	r3, r3
 800062c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000630:	b25b      	sxtb	r3, r3
 8000632:	b2db      	uxtb	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	f000 f8eb 	bl	8000810 <SendCommand>
}
 800063a:	bf00      	nop
 800063c:	371c      	adds	r7, #28
 800063e:	46bd      	mov	sp, r7
 8000640:	bd90      	pop	{r4, r7, pc}
 8000642:	bf00      	nop
 8000644:	08004828 	.word	0x08004828
 8000648:	2000006b 	.word	0x2000006b

0800064c <HD44780_NoDisplay>:

void HD44780_NoDisplay()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_DISPLAYON;
 8000650:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <HD44780_NoDisplay+0x28>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	f023 0304 	bic.w	r3, r3, #4
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <HD44780_NoDisplay+0x28>)
 800065c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800065e:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <HD44780_NoDisplay+0x28>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	f043 0308 	orr.w	r3, r3, #8
 8000666:	b2db      	uxtb	r3, r3
 8000668:	4618      	mov	r0, r3
 800066a:	f000 f8d1 	bl	8000810 <SendCommand>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000069 	.word	0x20000069

08000678 <HD44780_Display>:

void HD44780_Display()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800067c:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <HD44780_Display+0x28>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	f043 0304 	orr.w	r3, r3, #4
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <HD44780_Display+0x28>)
 8000688:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800068a:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <HD44780_Display+0x28>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	f043 0308 	orr.w	r3, r3, #8
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4618      	mov	r0, r3
 8000696:	f000 f8bb 	bl	8000810 <SendCommand>
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000069 	.word	0x20000069

080006a4 <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 80006a8:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <HD44780_NoCursor+0x28>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	f023 0302 	bic.w	r3, r3, #2
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <HD44780_NoCursor+0x28>)
 80006b4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006b6:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <HD44780_NoCursor+0x28>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	f043 0308 	orr.w	r3, r3, #8
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 f8a5 	bl	8000810 <SendCommand>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000069 	.word	0x20000069

080006d0 <HD44780_Cursor>:

void HD44780_Cursor()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 80006d4:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <HD44780_Cursor+0x28>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <HD44780_Cursor+0x28>)
 80006e0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006e2:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <HD44780_Cursor+0x28>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	f043 0308 	orr.w	r3, r3, #8
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 f88f 	bl	8000810 <SendCommand>
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000069 	.word	0x20000069

080006fc <HD44780_NoBlink>:

void HD44780_NoBlink()
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 8000700:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <HD44780_NoBlink+0x28>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	f023 0301 	bic.w	r3, r3, #1
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <HD44780_NoBlink+0x28>)
 800070c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800070e:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <HD44780_NoBlink+0x28>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	f043 0308 	orr.w	r3, r3, #8
 8000716:	b2db      	uxtb	r3, r3
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f879 	bl	8000810 <SendCommand>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000069 	.word	0x20000069

08000728 <HD44780_Blink>:

void HD44780_Blink()
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 800072c:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <HD44780_Blink+0x28>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <HD44780_Blink+0x28>)
 8000738:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <HD44780_Blink+0x28>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	f043 0308 	orr.w	r3, r3, #8
 8000742:	b2db      	uxtb	r3, r3
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f863 	bl	8000810 <SendCommand>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000069 	.word	0x20000069

08000754 <HD44780_ScrollDisplayLeft>:

void HD44780_ScrollDisplayLeft(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 8000758:	2018      	movs	r0, #24
 800075a:	f000 f859 	bl	8000810 <SendCommand>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}

08000762 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b084      	sub	sp, #16
 8000766:	af00      	add	r7, sp, #0
 8000768:	4603      	mov	r3, r0
 800076a:	6039      	str	r1, [r7, #0]
 800076c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f003 0307 	and.w	r3, r3, #7
 8000774:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	b25b      	sxtb	r3, r3
 800077c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000780:	b25b      	sxtb	r3, r3
 8000782:	b2db      	uxtb	r3, r3
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f843 	bl	8000810 <SendCommand>
  for (int i=0; i<8; i++)
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	e009      	b.n	80007a4 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	4413      	add	r3, r2
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f847 	bl	800082c <SendChar>
  for (int i=0; i<8; i++)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3301      	adds	r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2b07      	cmp	r3, #7
 80007a8:	ddf2      	ble.n	8000790 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80007bc:	e006      	b.n	80007cc <HD44780_PrintStr+0x18>
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	607a      	str	r2, [r7, #4]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f830 	bl	800082c <SendChar>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f4      	bne.n	80007be <HD44780_PrintStr+0xa>
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 80007e4:	4b03      	ldr	r3, [pc, #12]	@ (80007f4 <HD44780_NoBacklight+0x14>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f000 f85e 	bl	80008ac <ExpanderWrite>
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2000006c 	.word	0x2000006c

080007f8 <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 80007fc:	4b03      	ldr	r3, [pc, #12]	@ (800080c <HD44780_Backlight+0x14>)
 80007fe:	2208      	movs	r2, #8
 8000800:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8000802:	2000      	movs	r0, #0
 8000804:	f000 f852 	bl	80008ac <ExpanderWrite>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2000006c 	.word	0x2000006c

08000810 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f000 f812 	bl	8000848 <Send>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <SendChar>:

static void SendChar(uint8_t ch)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2101      	movs	r1, #1
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f804 	bl	8000848 <Send>
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	460a      	mov	r2, r1
 8000852:	71fb      	strb	r3, [r7, #7]
 8000854:	4613      	mov	r3, r2
 8000856:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	f023 030f 	bic.w	r3, r3, #15
 800085e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	011b      	lsls	r3, r3, #4
 8000864:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000866:	7bfa      	ldrb	r2, [r7, #15]
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	4313      	orrs	r3, r2
 800086c:	b2db      	uxtb	r3, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f80b 	bl	800088a <Write4Bits>
  Write4Bits((lownib)|mode);
 8000874:	7bba      	ldrb	r2, [r7, #14]
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	4313      	orrs	r3, r2
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f804 	bl	800088a <Write4Bits>
}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f808 	bl	80008ac <ExpanderWrite>
  PulseEnable(value);
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f820 	bl	80008e4 <PulseEnable>
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af02      	add	r7, sp, #8
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <ExpanderWrite+0x30>)
 80008b8:	781a      	ldrb	r2, [r3, #0]
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	4313      	orrs	r3, r2
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80008c2:	f107 020f 	add.w	r2, r7, #15
 80008c6:	230a      	movs	r3, #10
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	217e      	movs	r1, #126	@ 0x7e
 80008ce:	4804      	ldr	r0, [pc, #16]	@ (80008e0 <ExpanderWrite+0x34>)
 80008d0:	f001 fb4a 	bl	8001f68 <HAL_I2C_Master_Transmit>
}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2000006c 	.word	0x2000006c
 80008e0:	20000080 	.word	0x20000080

080008e4 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ffd8 	bl	80008ac <ExpanderWrite>
  DelayUS(20);
 80008fc:	2014      	movs	r0, #20
 80008fe:	f000 f839 	bl	8000974 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	f023 0304 	bic.w	r3, r3, #4
 8000908:	b2db      	uxtb	r3, r3
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ffce 	bl	80008ac <ExpanderWrite>
  DelayUS(20);
 8000910:	2014      	movs	r0, #20
 8000912:	f000 f82f 	bl	8000974 <DelayUS>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <DelayInit>:

static void DelayInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000924:	4b11      	ldr	r3, [pc, #68]	@ (800096c <DelayInit+0x4c>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	4a10      	ldr	r2, [pc, #64]	@ (800096c <DelayInit+0x4c>)
 800092a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800092e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000930:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <DelayInit+0x4c>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	4a0d      	ldr	r2, [pc, #52]	@ (800096c <DelayInit+0x4c>)
 8000936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800093a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <DelayInit+0x50>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0b      	ldr	r2, [pc, #44]	@ (8000970 <DelayInit+0x50>)
 8000942:	f023 0301 	bic.w	r3, r3, #1
 8000946:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000948:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <DelayInit+0x50>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <DelayInit+0x50>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <DelayInit+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800095a:	bf00      	nop
  __ASM volatile ("NOP");
 800095c:	bf00      	nop
  __ASM volatile ("NOP");
 800095e:	bf00      	nop
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000edf0 	.word	0xe000edf0
 8000970:	e0001000 	.word	0xe0001000

08000974 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000974:	b480      	push	{r7}
 8000976:	b087      	sub	sp, #28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800097c:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <DelayUS+0x44>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0e      	ldr	r2, [pc, #56]	@ (80009bc <DelayUS+0x48>)
 8000982:	fba2 2303 	umull	r2, r3, r2, r3
 8000986:	0c9a      	lsrs	r2, r3, #18
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	fb02 f303 	mul.w	r3, r2, r3
 800098e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000990:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <DelayUS+0x4c>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <DelayUS+0x4c>)
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d8f6      	bhi.n	8000996 <DelayUS+0x22>
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	371c      	adds	r7, #28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000010 	.word	0x20000010
 80009bc:	431bde83 	.word	0x431bde83
 80009c0:	e0001000 	.word	0xe0001000

080009c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ca:	f000 fe11 	bl	80015f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ce:	f000 f8c7 	bl	8000b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d2:	f000 f9c1 	bl	8000d58 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80009d6:	f000 f95b 	bl	8000c90 <MX_ICACHE_Init>
  MX_TIM3_Init();
 80009da:	f000 f96d 	bl	8000cb8 <MX_TIM3_Init>
  MX_I2C1_Init();
 80009de:	f000 f917 	bl	8000c10 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HD44780_Init(2);
 80009e2:	2002      	movs	r0, #2
 80009e4:	f7ff fd66 	bl	80004b4 <HD44780_Init>
    HD44780_Clear();
 80009e8:	f7ff fde8 	bl	80005bc <HD44780_Clear>
    HD44780_SetCursor(0,0);
 80009ec:	2100      	movs	r1, #0
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff fdfa 	bl	80005e8 <HD44780_SetCursor>
    HD44780_PrintStr("HELLO");
 80009f4:	4856      	ldr	r0, [pc, #344]	@ (8000b50 <main+0x18c>)
 80009f6:	f7ff fedd 	bl	80007b4 <HD44780_PrintStr>
    HD44780_SetCursor(10,1);
 80009fa:	2101      	movs	r1, #1
 80009fc:	200a      	movs	r0, #10
 80009fe:	f7ff fdf3 	bl	80005e8 <HD44780_SetCursor>
    HD44780_PrintStr("WORLD");
 8000a02:	4854      	ldr	r0, [pc, #336]	@ (8000b54 <main+0x190>)
 8000a04:	f7ff fed6 	bl	80007b4 <HD44780_PrintStr>
    HAL_Delay(2000);
 8000a08:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a0c:	f000 feae 	bl	800176c <HAL_Delay>

    HD44780_Clear();
 8000a10:	f7ff fdd4 	bl	80005bc <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000a14:	2100      	movs	r1, #0
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff fde6 	bl	80005e8 <HD44780_SetCursor>
    HD44780_PrintStr("HELLO");
 8000a1c:	484c      	ldr	r0, [pc, #304]	@ (8000b50 <main+0x18c>)
 8000a1e:	f7ff fec9 	bl	80007b4 <HD44780_PrintStr>
    HAL_Delay(2000);
 8000a22:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a26:	f000 fea1 	bl	800176c <HAL_Delay>
    HD44780_NoBacklight();
 8000a2a:	f7ff fed9 	bl	80007e0 <HD44780_NoBacklight>
    HAL_Delay(2000);
 8000a2e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a32:	f000 fe9b 	bl	800176c <HAL_Delay>
    HD44780_Backlight();
 8000a36:	f7ff fedf 	bl	80007f8 <HD44780_Backlight>

    HAL_Delay(2000);
 8000a3a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a3e:	f000 fe95 	bl	800176c <HAL_Delay>
    HD44780_Cursor();
 8000a42:	f7ff fe45 	bl	80006d0 <HD44780_Cursor>
    HAL_Delay(2000);
 8000a46:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a4a:	f000 fe8f 	bl	800176c <HAL_Delay>
    HD44780_Blink();
 8000a4e:	f7ff fe6b 	bl	8000728 <HD44780_Blink>
    HAL_Delay(5000);
 8000a52:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a56:	f000 fe89 	bl	800176c <HAL_Delay>
    HD44780_NoBlink();
 8000a5a:	f7ff fe4f 	bl	80006fc <HD44780_NoBlink>
    HAL_Delay(2000);
 8000a5e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a62:	f000 fe83 	bl	800176c <HAL_Delay>
    HD44780_NoCursor();
 8000a66:	f7ff fe1d 	bl	80006a4 <HD44780_NoCursor>
    HAL_Delay(2000);
 8000a6a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a6e:	f000 fe7d 	bl	800176c <HAL_Delay>

    HD44780_NoDisplay();
 8000a72:	f7ff fdeb 	bl	800064c <HD44780_NoDisplay>
    HAL_Delay(2000);
 8000a76:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a7a:	f000 fe77 	bl	800176c <HAL_Delay>
    HD44780_Display();
 8000a7e:	f7ff fdfb 	bl	8000678 <HD44780_Display>

    HD44780_Clear();
 8000a82:	f7ff fd9b 	bl	80005bc <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000a86:	2100      	movs	r1, #0
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff fdad 	bl	80005e8 <HD44780_SetCursor>
    HD44780_PrintStr("Learning STM32 with LCD is fun :-)");
 8000a8e:	4832      	ldr	r0, [pc, #200]	@ (8000b58 <main+0x194>)
 8000a90:	f7ff fe90 	bl	80007b4 <HD44780_PrintStr>
    int x;
    for(int x=0; x<40; x=x+1)
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	e008      	b.n	8000aac <main+0xe8>
    {
      HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
 8000a9a:	f7ff fe5b 	bl	8000754 <HD44780_ScrollDisplayLeft>
      HAL_Delay(500);
 8000a9e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000aa2:	f000 fe63 	bl	800176c <HAL_Delay>
    for(int x=0; x<40; x=x+1)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2b27      	cmp	r3, #39	@ 0x27
 8000ab0:	ddf3      	ble.n	8000a9a <main+0xd6>
    }

    char snum[5];
    for ( int x = 1; x <= 200 ; x++ )
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	e016      	b.n	8000ae6 <main+0x122>
    {
      itoa(x, snum, 10);
 8000ab8:	463b      	mov	r3, r7
 8000aba:	220a      	movs	r2, #10
 8000abc:	4619      	mov	r1, r3
 8000abe:	68b8      	ldr	r0, [r7, #8]
 8000ac0:	f003 fe35 	bl	800472e <itoa>
      HD44780_Clear();
 8000ac4:	f7ff fd7a 	bl	80005bc <HD44780_Clear>
      HD44780_SetCursor(0,0);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2000      	movs	r0, #0
 8000acc:	f7ff fd8c 	bl	80005e8 <HD44780_SetCursor>
      HD44780_PrintStr(snum);
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fe6e 	bl	80007b4 <HD44780_PrintStr>
      HAL_Delay (1000);
 8000ad8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000adc:	f000 fe46 	bl	800176c <HAL_Delay>
    for ( int x = 1; x <= 200 ; x++ )
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	2bc8      	cmp	r3, #200	@ 0xc8
 8000aea:	dde5      	ble.n	8000ab8 <main+0xf4>
    }
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8000aec:	2000      	movs	r0, #0
 8000aee:	f000 fb5d 	bl	80011ac <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f000 fb5a 	bl	80011ac <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000af8:	2002      	movs	r0, #2
 8000afa:	f000 fb57 	bl	80011ac <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(B1, BUTTON_MODE_EXTI);
 8000afe:	2101      	movs	r1, #1
 8000b00:	2000      	movs	r0, #0
 8000b02:	f000 fbb9 	bl	8001278 <BSP_PB_Init>
  BSP_PB_Init(B2, BUTTON_MODE_EXTI);
 8000b06:	2101      	movs	r1, #1
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f000 fbb5 	bl	8001278 <BSP_PB_Init>
  BSP_PB_Init(B3, BUTTON_MODE_EXTI);
 8000b0e:	2101      	movs	r1, #1
 8000b10:	2002      	movs	r0, #2
 8000b12:	f000 fbb1 	bl	8001278 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <main+0x198>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b1c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <main+0x198>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000b24:	4b0d      	ldr	r3, [pc, #52]	@ (8000b5c <main+0x198>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <main+0x198>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <main+0x198>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000b36:	4909      	ldr	r1, [pc, #36]	@ (8000b5c <main+0x198>)
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f000 fc7b 	bl	8001434 <BSP_COM_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d002      	beq.n	8000b4a <main+0x186>
  {
    Error_Handler();
 8000b44:	f000 f940 	bl	8000dc8 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	e7fd      	b.n	8000b4a <main+0x186>
 8000b4e:	bf00      	nop
 8000b50:	08004838 	.word	0x08004838
 8000b54:	08004840 	.word	0x08004840
 8000b58:	08004848 	.word	0x08004848
 8000b5c:	20000070 	.word	0x20000070

08000b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b098      	sub	sp, #96	@ 0x60
 8000b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	f107 0320 	add.w	r3, r7, #32
 8000b6a:	2240      	movs	r2, #64	@ 0x40
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f003 fe22 	bl	80047b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b74:	463b      	mov	r3, r7
 8000b76:	2220      	movs	r2, #32
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f003 fe1c 	bl	80047b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b80:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000b84:	f001 fdc6 	bl	8002714 <HAL_PWREx_ControlVoltageScaling>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000b8e:	f000 f91b 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b92:	2301      	movs	r3, #1
 8000b94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSE;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL1.PLLM = 2;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL1.PLLN = 8;
 8000bac:	2308      	movs	r3, #8
 8000bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL1.PLLP = 2;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL1.PLLQ = 2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLR = 2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc0:	f107 0320 	add.w	r3, r7, #32
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 fe03 	bl	80027d0 <HAL_RCC_OscConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000bd0:	f000 f8fa 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd4:	233f      	movs	r3, #63	@ 0x3f
 8000bd6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK7|RCC_CLOCKTYPE_HCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB7CLKDivider = RCC_HCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHB5_PLL1_CLKDivider = RCC_SYSCLK_PLL1_DIV2;
 8000bec:	2304      	movs	r3, #4
 8000bee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHB5_HSEHSI_CLKDivider = RCC_SYSCLK_HSEHSI_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f002 f9d3 	bl	8002fa4 <HAL_RCC_ClockConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000c04:	f000 f8e0 	bl	8000dc8 <Error_Handler>
  }
}
 8000c08:	bf00      	nop
 8000c0a:	3760      	adds	r7, #96	@ 0x60
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c16:	4a1c      	ldr	r2, [pc, #112]	@ (8000c88 <MX_I2C1_Init+0x78>)
 8000c18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c8c <MX_I2C1_Init+0x7c>)
 8000c1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c20:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c26:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c32:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c4a:	480e      	ldr	r0, [pc, #56]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c4c:	f001 f8f0 	bl	8001e30 <HAL_I2C_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c56:	f000 f8b7 	bl	8000dc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4809      	ldr	r0, [pc, #36]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c5e:	f001 fc91 	bl	8002584 <HAL_I2CEx_ConfigAnalogFilter>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c68:	f000 f8ae 	bl	8000dc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c70:	f001 fcd3 	bl	800261a <HAL_I2CEx_ConfigDigitalFilter>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c7a:	f000 f8a5 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000080 	.word	0x20000080
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	10707dbc 	.word	0x10707dbc

08000c90 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000c94:	2000      	movs	r0, #0
 8000c96:	f001 fd0d 	bl	80026b4 <HAL_ICACHE_ConfigAssociativityMode>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000ca0:	f000 f892 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000ca4:	f001 fd26 	bl	80026f4 <HAL_ICACHE_Enable>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000cae:	f000 f88b 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cce:	463b      	mov	r3, r7
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d50 <MX_TIM3_Init+0x98>)
 8000cda:	4a1e      	ldr	r2, [pc, #120]	@ (8000d54 <MX_TIM3_Init+0x9c>)
 8000cdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <MX_TIM3_Init+0x98>)
 8000ce0:	223f      	movs	r2, #63	@ 0x3f
 8000ce2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <MX_TIM3_Init+0x98>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cea:	4b19      	ldr	r3, [pc, #100]	@ (8000d50 <MX_TIM3_Init+0x98>)
 8000cec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cf0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <MX_TIM3_Init+0x98>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <MX_TIM3_Init+0x98>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cfe:	4814      	ldr	r0, [pc, #80]	@ (8000d50 <MX_TIM3_Init+0x98>)
 8000d00:	f002 fd44 	bl	800378c <HAL_TIM_Base_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000d0a:	f000 f85d 	bl	8000dc8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000d0e:	2307      	movs	r3, #7
 8000d10:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480c      	ldr	r0, [pc, #48]	@ (8000d50 <MX_TIM3_Init+0x98>)
 8000d1e:	f002 fd8c 	bl	800383a <HAL_TIM_SlaveConfigSynchro>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000d28:	f000 f84e 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d34:	463b      	mov	r3, r7
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <MX_TIM3_Init+0x98>)
 8000d3a:	f002 ff61 	bl	8003c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000d44:	f000 f840 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200000d4 	.word	0x200000d4
 8000d54:	40000400 	.word	0x40000400

08000d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <MX_GPIO_Init+0x6c>)
 8000d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d64:	4a17      	ldr	r2, [pc, #92]	@ (8000dc4 <MX_GPIO_Init+0x6c>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <MX_GPIO_Init+0x6c>)
 8000d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7c:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <MX_GPIO_Init+0x6c>)
 8000d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d82:	4a10      	ldr	r2, [pc, #64]	@ (8000dc4 <MX_GPIO_Init+0x6c>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <MX_GPIO_Init+0x6c>)
 8000d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <MX_GPIO_Init+0x6c>)
 8000d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000da0:	4a08      	ldr	r2, [pc, #32]	@ (8000dc4 <MX_GPIO_Init+0x6c>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <MX_GPIO_Init+0x6c>)
 8000dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	46020c00 	.word	0x46020c00

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <Error_Handler+0x8>

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <HAL_MspInit+0x30>)
 8000ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000de0:	4a08      	ldr	r2, [pc, #32]	@ (8000e04 <HAL_MspInit+0x30>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_MspInit+0x30>)
 8000dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	46020c00 	.word	0x46020c00

08000e08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b09a      	sub	sp, #104	@ 0x68
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2240      	movs	r2, #64	@ 0x40
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 fcc5 	bl	80047b8 <memset>
  if(hi2c->Instance==I2C1)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a31      	ldr	r2, [pc, #196]	@ (8000ef8 <HAL_I2C_MspInit+0xf0>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d15b      	bne.n	8000ef0 <HAL_I2C_MspInit+0xe8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4618      	mov	r0, r3
 8000e46:	f002 faef 	bl	8003428 <HAL_RCCEx_PeriphCLKConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e50:	f7ff ffba 	bl	8000dc8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e54:	4b29      	ldr	r3, [pc, #164]	@ (8000efc <HAL_I2C_MspInit+0xf4>)
 8000e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e5a:	4a28      	ldr	r2, [pc, #160]	@ (8000efc <HAL_I2C_MspInit+0xf4>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e64:	4b25      	ldr	r3, [pc, #148]	@ (8000efc <HAL_I2C_MspInit+0xf4>)
 8000e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b22      	ldr	r3, [pc, #136]	@ (8000efc <HAL_I2C_MspInit+0xf4>)
 8000e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e78:	4a20      	ldr	r2, [pc, #128]	@ (8000efc <HAL_I2C_MspInit+0xf4>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e82:	4b1e      	ldr	r3, [pc, #120]	@ (8000efc <HAL_I2C_MspInit+0xf4>)
 8000e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> I2C1_SDA
    PA15 (JTDI)     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e90:	2308      	movs	r3, #8
 8000e92:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e94:	2312      	movs	r3, #18
 8000e96:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4815      	ldr	r0, [pc, #84]	@ (8000f00 <HAL_I2C_MspInit+0xf8>)
 8000eac:	f000 fe20 	bl	8001af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000eb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000eb4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb6:	2312      	movs	r3, #18
 8000eb8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480d      	ldr	r0, [pc, #52]	@ (8000f04 <HAL_I2C_MspInit+0xfc>)
 8000ece:	f000 fe0f 	bl	8001af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <HAL_I2C_MspInit+0xf4>)
 8000ed4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ed8:	4a08      	ldr	r2, [pc, #32]	@ (8000efc <HAL_I2C_MspInit+0xf4>)
 8000eda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ede:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_I2C_MspInit+0xf4>)
 8000ee4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ee8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ef0:	bf00      	nop
 8000ef2:	3768      	adds	r7, #104	@ 0x68
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40005400 	.word	0x40005400
 8000efc:	46020c00 	.word	0x46020c00
 8000f00:	42020400 	.word	0x42020400
 8000f04:	42020000 	.word	0x42020000

08000f08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0b      	ldr	r2, [pc, #44]	@ (8000f44 <HAL_TIM_Base_MspInit+0x3c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d10e      	bne.n	8000f38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_TIM_Base_MspInit+0x40>)
 8000f1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f20:	4a09      	ldr	r2, [pc, #36]	@ (8000f48 <HAL_TIM_Base_MspInit+0x40>)
 8000f22:	f043 0302 	orr.w	r3, r3, #2
 8000f26:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000f2a:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <HAL_TIM_Base_MspInit+0x40>)
 8000f2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	40000400 	.word	0x40000400
 8000f48:	46020c00 	.word	0x46020c00

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <NMI_Handler+0x4>

08000f54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <MemManage_Handler+0x4>

08000f64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa2:	f000 fbc3 	bl	800172c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_PIN);
 8000fae:	2040      	movs	r0, #64	@ 0x40
 8000fb0:	f000 ff02 	bl	8001db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_PIN);
 8000fbc:	2080      	movs	r0, #128	@ 0x80
 8000fbe:	f000 fefb 	bl	8001db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_PIN);
 8000fca:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fce:	f000 fef3 	bl	8001db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  __IO uint32_t tmpreg;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  CLEAR_BIT(ADC4->CR, ADC_CR_ADVREGEN);

  /* Disable ADC kernel clock */
  CLEAR_BIT(RCC->AHB4ENR, RCC_AHB4ENR_ADC4EN);
#endif
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	@ 0x24
 8001000:	af00      	add	r7, sp, #0
  uint32_t plln;
  float_t fracn;
  float_t pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 8001002:	4b4f      	ldr	r3, [pc, #316]	@ (8001140 <SystemCoreClockUpdate+0x144>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f003 030c 	and.w	r3, r3, #12
 800100a:	2b08      	cmp	r3, #8
 800100c:	d002      	beq.n	8001014 <SystemCoreClockUpdate+0x18>
 800100e:	2b0c      	cmp	r3, #12
 8001010:	d00b      	beq.n	800102a <SystemCoreClockUpdate+0x2e>
 8001012:	e07d      	b.n	8001110 <SystemCoreClockUpdate+0x114>
  {
    case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
      SystemCoreClock = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8001014:	4b4a      	ldr	r3, [pc, #296]	@ (8001140 <SystemCoreClockUpdate+0x144>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	0d1b      	lsrs	r3, r3, #20
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	4a49      	ldr	r2, [pc, #292]	@ (8001144 <SystemCoreClockUpdate+0x148>)
 8001020:	fa22 f303 	lsr.w	r3, r2, r3
 8001024:	4a48      	ldr	r2, [pc, #288]	@ (8001148 <SystemCoreClockUpdate+0x14c>)
 8001026:	6013      	str	r3, [r2, #0]
      break;
 8001028:	e076      	b.n	8001118 <SystemCoreClockUpdate+0x11c>

    case (RCC_CFGR1_SWS_0 | RCC_CFGR1_SWS_1):  /* PLL1 used as system clock source */
      /* PLL_VCO = (PLLsource / PLLM) * PLLN * FractionnalPart
          SYSCLK = PLL_VCO / PLLR */
      /* Get PLL1 CFGR and DIVR register values */
      tmp1 = RCC->PLL1CFGR;
 800102a:	4b45      	ldr	r3, [pc, #276]	@ (8001140 <SystemCoreClockUpdate+0x144>)
 800102c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800102e:	61fb      	str	r3, [r7, #28]
      tmp2 = RCC->PLL1DIVR;
 8001030:	4b43      	ldr	r3, [pc, #268]	@ (8001140 <SystemCoreClockUpdate+0x144>)
 8001032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001034:	617b      	str	r3, [r7, #20]

      /* Retrieve PLL1 multiplication factor and divider */
      pllm = ((tmp1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	3301      	adds	r3, #1
 8001040:	613b      	str	r3, [r7, #16]
      plln = (tmp2 & RCC_PLL1DIVR_PLL1N) + 1U;
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001048:	3301      	adds	r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
      pllr = ((tmp2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	0e1b      	lsrs	r3, r3, #24
 8001050:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001054:	3301      	adds	r3, #1
 8001056:	60bb      	str	r3, [r7, #8]

      /* Check if fractional part is enable */
      if ((tmp1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f003 0310 	and.w	r3, r3, #16
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00b      	beq.n	800107a <SystemCoreClockUpdate+0x7e>
      {
        fracn = (float_t)((uint32_t)((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8001062:	4b37      	ldr	r3, [pc, #220]	@ (8001140 <SystemCoreClockUpdate+0x144>)
 8001064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001066:	08db      	lsrs	r3, r3, #3
 8001068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001074:	edc7 7a06 	vstr	s15, [r7, #24]
 8001078:	e002      	b.n	8001080 <SystemCoreClockUpdate+0x84>
      }
      else
      {
        fracn = (float_t)0U;
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
      }

      /* determine PLL source */
      pllsource = (tmp1 & RCC_PLL1CFGR_PLL1SRC);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d003      	beq.n	8001096 <SystemCoreClockUpdate+0x9a>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b03      	cmp	r3, #3
 8001092:	d003      	beq.n	800109c <SystemCoreClockUpdate+0xa0>
 8001094:	e00c      	b.n	80010b0 <SystemCoreClockUpdate+0xb4>
      switch (pllsource)
      {
        /* HSI used as PLL1 clock source */
        case RCC_PLL1CFGR_PLL1SRC_1:
          tmp1 = HSI_VALUE;
 8001096:	4b2d      	ldr	r3, [pc, #180]	@ (800114c <SystemCoreClockUpdate+0x150>)
 8001098:	61fb      	str	r3, [r7, #28]
          break;
 800109a:	e00c      	b.n	80010b6 <SystemCoreClockUpdate+0xba>

        /* HSE used as PLL1 clock source */
        case (RCC_PLL1CFGR_PLL1SRC_0 | RCC_PLL1CFGR_PLL1SRC_1):
          tmp1 = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 800109c:	4b28      	ldr	r3, [pc, #160]	@ (8001140 <SystemCoreClockUpdate+0x144>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	0d1b      	lsrs	r3, r3, #20
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	4a27      	ldr	r2, [pc, #156]	@ (8001144 <SystemCoreClockUpdate+0x148>)
 80010a8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ac:	61fb      	str	r3, [r7, #28]
          break;
 80010ae:	e002      	b.n	80010b6 <SystemCoreClockUpdate+0xba>

        default:
          tmp1 = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
          break;
 80010b4:	bf00      	nop
      }

      /* Compute VCO output frequency */
      pllvco = ((float_t) tmp1 / (float_t)pllm) * (((float_t)plln + (float_t)(fracn / (float_t)0x2000U)));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	ee07 3a90 	vmov	s15, r3
 80010bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	ee07 3a90 	vmov	s15, r3
 80010d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80010d8:	ed97 6a06 	vldr	s12, [r7, #24]
 80010dc:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8001150 <SystemCoreClockUpdate+0x154>
 80010e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80010e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80010e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ec:	edc7 7a00 	vstr	s15, [r7]
      SystemCoreClock = (uint32_t)((float_t)(pllvco / (float_t)pllr));
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010fa:	edd7 6a00 	vldr	s13, [r7]
 80010fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001106:	ee17 2a90 	vmov	r2, s15
 800110a:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <SystemCoreClockUpdate+0x14c>)
 800110c:	601a      	str	r2, [r3, #0]
      break;
 800110e:	e003      	b.n	8001118 <SystemCoreClockUpdate+0x11c>

    case 0x00u:  /* HSI used as system clock source */
    default:
      SystemCoreClock = HSI_VALUE;
 8001110:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <SystemCoreClockUpdate+0x14c>)
 8001112:	4a0e      	ldr	r2, [pc, #56]	@ (800114c <SystemCoreClockUpdate+0x150>)
 8001114:	601a      	str	r2, [r3, #0]
      break;
 8001116:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp1 = AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)];
 8001118:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <SystemCoreClockUpdate+0x144>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	4a0c      	ldr	r2, [pc, #48]	@ (8001154 <SystemCoreClockUpdate+0x158>)
 8001122:	5cd3      	ldrb	r3, [r2, r3]
 8001124:	61fb      	str	r3, [r7, #28]

  /* HCLK clock frequency */
  SystemCoreClock >>= tmp1;
 8001126:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <SystemCoreClockUpdate+0x14c>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa22 f303 	lsr.w	r3, r2, r3
 8001130:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <SystemCoreClockUpdate+0x14c>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	3724      	adds	r7, #36	@ 0x24
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	46020c00 	.word	0x46020c00
 8001144:	01e84800 	.word	0x01e84800
 8001148:	20000010 	.word	0x20000010
 800114c:	00f42400 	.word	0x00f42400
 8001150:	46000000 	.word	0x46000000
 8001154:	080048ac 	.word	0x080048ac

08001158 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001158:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001190 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800115c:	f7ff ff3c 	bl	8000fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001160:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001162:	e003      	b.n	800116c <LoopCopyDataInit>

08001164 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001164:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001166:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001168:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800116a:	3104      	adds	r1, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800116c:	480a      	ldr	r0, [pc, #40]	@ (8001198 <LoopForever+0xa>)
	ldr	r3, =_edata
 800116e:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001170:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001172:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001174:	d3f6      	bcc.n	8001164 <CopyDataInit>
	ldr	r2, =_sbss
 8001176:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001178:	e002      	b.n	8001180 <LoopFillZerobss>

0800117a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800117a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800117c:	f842 3b04 	str.w	r3, [r2], #4

08001180 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001180:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <LoopForever+0x16>)
	cmp	r2, r3
 8001182:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001184:	d3f9      	bcc.n	800117a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001186:	f003 fb1f 	bl	80047c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800118a:	f7ff fc1b 	bl	80009c4 <main>

0800118e <LoopForever>:

LoopForever:
    b LoopForever
 800118e:	e7fe      	b.n	800118e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001190:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 8001194:	0800490c 	.word	0x0800490c
	ldr	r0, =_sdata
 8001198:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800119c:	2000004c 	.word	0x2000004c
	ldr	r2, =_sbss
 80011a0:	2000004c 	.word	0x2000004c
	ldr	r3, = _ebss
 80011a4:	200001dc 	.word	0x200001dc

080011a8 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC4_IRQHandler>
	...

080011ac <BSP_LED_Init>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LD1)
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10f      	bne.n	80011dc <BSP_LED_Init+0x30>
  {
    LD1_GPIO_CLK_ENABLE();
 80011bc:	4b2b      	ldr	r3, [pc, #172]	@ (800126c <BSP_LED_Init+0xc0>)
 80011be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c2:	4a2a      	ldr	r2, [pc, #168]	@ (800126c <BSP_LED_Init+0xc0>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011cc:	4b27      	ldr	r3, [pc, #156]	@ (800126c <BSP_LED_Init+0xc0>)
 80011ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	e021      	b.n	8001220 <BSP_LED_Init+0x74>
  }
  else if (Led == LD2)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d10f      	bne.n	8001202 <BSP_LED_Init+0x56>
  {
    LD2_GPIO_CLK_ENABLE();
 80011e2:	4b22      	ldr	r3, [pc, #136]	@ (800126c <BSP_LED_Init+0xc0>)
 80011e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011e8:	4a20      	ldr	r2, [pc, #128]	@ (800126c <BSP_LED_Init+0xc0>)
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011f2:	4b1e      	ldr	r3, [pc, #120]	@ (800126c <BSP_LED_Init+0xc0>)
 80011f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	e00e      	b.n	8001220 <BSP_LED_Init+0x74>
  }
  else /* Led = LD3 */
  {
    LD3_GPIO_CLK_ENABLE();
 8001202:	4b1a      	ldr	r3, [pc, #104]	@ (800126c <BSP_LED_Init+0xc0>)
 8001204:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001208:	4a18      	ldr	r2, [pc, #96]	@ (800126c <BSP_LED_Init+0xc0>)
 800120a:	f043 0302 	orr.w	r3, r3, #2
 800120e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001212:	4b16      	ldr	r3, [pc, #88]	@ (800126c <BSP_LED_Init+0xc0>)
 8001214:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	4a13      	ldr	r2, [pc, #76]	@ (8001270 <BSP_LED_Init+0xc4>)
 8001224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001228:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 800122e:	2301      	movs	r3, #1
 8001230:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8001232:	2302      	movs	r3, #2
 8001234:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	4a0e      	ldr	r2, [pc, #56]	@ (8001274 <BSP_LED_Init+0xc8>)
 800123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123e:	f107 0214 	add.w	r2, r7, #20
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fc53 	bl	8001af0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	4a09      	ldr	r2, [pc, #36]	@ (8001274 <BSP_LED_Init+0xc8>)
 800124e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	4a06      	ldr	r2, [pc, #24]	@ (8001270 <BSP_LED_Init+0xc4>)
 8001256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800125a:	2201      	movs	r2, #1
 800125c:	4619      	mov	r1, r3
 800125e:	f000 fd93 	bl	8001d88 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3728      	adds	r7, #40	@ 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	46020c00 	.word	0x46020c00
 8001270:	20000014 	.word	0x20000014
 8001274:	2000001c 	.word	0x2000001c

08001278 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code.
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	@ 0x50
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	460a      	mov	r2, r1
 8001282:	71fb      	strb	r3, [r7, #7]
 8001284:	4613      	mov	r3, r2
 8001286:	71bb      	strb	r3, [r7, #6]
  int32_t               status = BSP_ERROR_NONE;
 8001288:	2300      	movs	r3, #0
 800128a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_B1_IT_PRIORITY,
 800128c:	4a5b      	ldr	r2, [pc, #364]	@ (80013fc <BSP_PB_Init+0x184>)
 800128e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001292:	ca07      	ldmia	r2, {r0, r1, r2}
 8001294:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                                       BSP_B2_IT_PRIORITY,
                                                       BSP_B3_IT_PRIORITY};
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {B1_EXTI_LINE, B2_EXTI_LINE, B3_EXTI_LINE};
 8001298:	4a59      	ldr	r2, [pc, #356]	@ (8001400 <BSP_PB_Init+0x188>)
 800129a:	f107 0320 	add.w	r3, r7, #32
 800129e:	ca07      	ldmia	r2, {r0, r1, r2}
 80012a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  BSP_EXTI_LineCallback ButtonCallback[BUTTONn]     = {B1_EXTI_Callback,
 80012a4:	4a57      	ldr	r2, [pc, #348]	@ (8001404 <BSP_PB_Init+0x18c>)
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80012ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                                       B2_EXTI_Callback,
                                                       B3_EXTI_Callback};

  /* Enable the BUTTON clock */
  if (Button == B1)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10f      	bne.n	80012d6 <BSP_PB_Init+0x5e>
  {
    B1_GPIO_CLK_ENABLE();
 80012b6:	4b54      	ldr	r3, [pc, #336]	@ (8001408 <BSP_PB_Init+0x190>)
 80012b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012bc:	4a52      	ldr	r2, [pc, #328]	@ (8001408 <BSP_PB_Init+0x190>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012c6:	4b50      	ldr	r3, [pc, #320]	@ (8001408 <BSP_PB_Init+0x190>)
 80012c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	e021      	b.n	800131a <BSP_PB_Init+0xa2>
  }
  else if (Button == B2)
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d10f      	bne.n	80012fc <BSP_PB_Init+0x84>
  {
    B2_GPIO_CLK_ENABLE();
 80012dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001408 <BSP_PB_Init+0x190>)
 80012de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012e2:	4a49      	ldr	r2, [pc, #292]	@ (8001408 <BSP_PB_Init+0x190>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012ec:	4b46      	ldr	r3, [pc, #280]	@ (8001408 <BSP_PB_Init+0x190>)
 80012ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	e00e      	b.n	800131a <BSP_PB_Init+0xa2>
  }
  else /* B3 */
  {
    B3_GPIO_CLK_ENABLE();
 80012fc:	4b42      	ldr	r3, [pc, #264]	@ (8001408 <BSP_PB_Init+0x190>)
 80012fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001302:	4a41      	ldr	r2, [pc, #260]	@ (8001408 <BSP_PB_Init+0x190>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800130c:	4b3e      	ldr	r3, [pc, #248]	@ (8001408 <BSP_PB_Init+0x190>)
 800130e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
  }

  GPIO_Init.Pin   = BUTTON_PIN[Button];
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	4a3b      	ldr	r2, [pc, #236]	@ (800140c <BSP_PB_Init+0x194>)
 800131e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001322:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_Init.Pull  = GPIO_PULLUP;
 8001324:	2301      	movs	r3, #1
 8001326:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8001328:	2302      	movs	r3, #2
 800132a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (ButtonMode == BUTTON_MODE_GPIO)
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d10b      	bne.n	800134a <BSP_PB_Init+0xd2>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8001332:	2300      	movs	r3, #0
 8001334:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	4a35      	ldr	r2, [pc, #212]	@ (8001410 <BSP_PB_Init+0x198>)
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f000 fbd3 	bl	8001af0 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 800134a:	79bb      	ldrb	r3, [r7, #6]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d14f      	bne.n	80013f0 <BSP_PB_Init+0x178>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
 8001350:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001354:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4a2d      	ldr	r2, [pc, #180]	@ (8001410 <BSP_PB_Init+0x198>)
 800135a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fbc3 	bl	8001af0 <HAL_GPIO_Init>

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 800136a:	79fa      	ldrb	r2, [r7, #7]
 800136c:	4613      	mov	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4413      	add	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4a27      	ldr	r2, [pc, #156]	@ (8001414 <BSP_PB_Init+0x19c>)
 8001376:	441a      	add	r2, r3
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	3350      	adds	r3, #80	@ 0x50
 800137e:	443b      	add	r3, r7
 8001380:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001384:	4619      	mov	r1, r3
 8001386:	4610      	mov	r0, r2
 8001388:	f000 fb9e 	bl	8001ac8 <HAL_EXTI_GetHandle>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d12b      	bne.n	80013ea <BSP_PB_Init+0x172>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_FALLING_CB_ID, ButtonCallback[Button]) == HAL_OK)
 8001392:	79fa      	ldrb	r2, [r7, #7]
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4a1d      	ldr	r2, [pc, #116]	@ (8001414 <BSP_PB_Init+0x19c>)
 800139e:	1898      	adds	r0, r3, r2
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	3350      	adds	r3, #80	@ 0x50
 80013a6:	443b      	add	r3, r7
 80013a8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80013ac:	461a      	mov	r2, r3
 80013ae:	2102      	movs	r1, #2
 80013b0:	f000 fb5e 	bl	8001a70 <HAL_EXTI_RegisterCallback>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d113      	bne.n	80013e2 <BSP_PB_Init+0x16a>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], BSP_BUTTON_IT_PRIO[Button], 0x00);
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	4a16      	ldr	r2, [pc, #88]	@ (8001418 <BSP_PB_Init+0x1a0>)
 80013be:	56d0      	ldrsb	r0, [r2, r3]
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	3350      	adds	r3, #80	@ 0x50
 80013c6:	443b      	add	r3, r7
 80013c8:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80013cc:	2200      	movs	r2, #0
 80013ce:	4619      	mov	r1, r3
 80013d0:	f000 faa8 	bl	8001924 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	4a10      	ldr	r2, [pc, #64]	@ (8001418 <BSP_PB_Init+0x1a0>)
 80013d8:	56d3      	ldrsb	r3, [r2, r3]
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fabf 	bl	800195e <HAL_NVIC_EnableIRQ>
 80013e0:	e006      	b.n	80013f0 <BSP_PB_Init+0x178>
      }
      else
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 80013e2:	f06f 0303 	mvn.w	r3, #3
 80013e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013e8:	e002      	b.n	80013f0 <BSP_PB_Init+0x178>
      }
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 80013ea:	f06f 0303 	mvn.w	r3, #3
 80013ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return status;
 80013f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3750      	adds	r7, #80	@ 0x50
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	08004888 	.word	0x08004888
 8001400:	08004894 	.word	0x08004894
 8001404:	080048a0 	.word	0x080048a0
 8001408:	46020c00 	.word	0x46020c00
 800140c:	20000028 	.word	0x20000028
 8001410:	20000030 	.word	0x20000030
 8001414:	200001b4 	.word	0x200001b4
 8001418:	2000003c 	.word	0x2000003c

0800141c <BSP_PB_Callback>:
  *     @arg B2
  *     @arg B3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code.
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d103      	bne.n	8001452 <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 800144a:	f06f 0301 	mvn.w	r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	e026      	b.n	80014a0 <BSP_COM_Init+0x6c>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
 8001452:	79fa      	ldrb	r2, [r7, #7]
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4915      	ldr	r1, [pc, #84]	@ (80014ac <BSP_COM_Init+0x78>)
 8001458:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800145c:	4914      	ldr	r1, [pc, #80]	@ (80014b0 <BSP_COM_Init+0x7c>)
 800145e:	2094      	movs	r0, #148	@ 0x94
 8001460:	fb00 f303 	mul.w	r3, r0, r3
 8001464:	440b      	add	r3, r1
 8001466:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	2294      	movs	r2, #148	@ 0x94
 800146c:	fb02 f303 	mul.w	r3, r2, r3
 8001470:	4a0f      	ldr	r2, [pc, #60]	@ (80014b0 <BSP_COM_Init+0x7c>)
 8001472:	4413      	add	r3, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f000 f863 	bl	8001540 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10f      	bne.n	80014a0 <BSP_COM_Init+0x6c>
    {
      if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	2294      	movs	r2, #148	@ 0x94
 8001484:	fb02 f303 	mul.w	r3, r2, r3
 8001488:	4a09      	ldr	r2, [pc, #36]	@ (80014b0 <BSP_COM_Init+0x7c>)
 800148a:	4413      	add	r3, r2
 800148c:	6839      	ldr	r1, [r7, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f810 	bl	80014b4 <MX_USART1_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <BSP_COM_Init+0x6c>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 800149a:	f06f 0303 	mvn.w	r3, #3
 800149e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return status;
 80014a0:	68fb      	ldr	r3, [r7, #12]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000040 	.word	0x20000040
 80014b0:	20000120 	.word	0x20000120

080014b4 <MX_USART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	891b      	ldrh	r3, [r3, #8]
 80014d2:	461a      	mov	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	895b      	ldrh	r3, [r3, #10]
 80014dc:	461a      	mov	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	220c      	movs	r2, #12
 80014e6:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	899b      	ldrh	r3, [r3, #12]
 80014ec:	461a      	mov	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014f8:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f002 fbe2 	bl	8003cd0 <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <B1_EXTI_Callback>:
/**
  * @brief  B1 EXTI line detection callbacks.
  * @retval None.
  */
static void B1_EXTI_Callback(void)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0
  BSP_PB_Callback(B1);
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff ff7e 	bl	800141c <BSP_PB_Callback>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <B2_EXTI_Callback>:
/**
  * @brief  B2 EXTI line detection callbacks.
  * @retval None.
  */
static void B2_EXTI_Callback(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  BSP_PB_Callback(B2);
 8001528:	2001      	movs	r0, #1
 800152a:	f7ff ff77 	bl	800141c <BSP_PB_Callback>
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}

08001532 <B3_EXTI_Callback>:
/**
  * @brief  B3 EXTI line detection callbacks.
  * @retval None.
  */
static void B3_EXTI_Callback(void)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	af00      	add	r7, sp, #0
  BSP_PB_Callback(B3);
 8001536:	2002      	movs	r0, #2
 8001538:	f7ff ff70 	bl	800141c <BSP_PB_Callback>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}

08001540 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable COM and GPIO clocks */
  COM1_TX_GPIO_CLK_ENABLE();
 8001548:	4b26      	ldr	r3, [pc, #152]	@ (80015e4 <UART_MspInit+0xa4>)
 800154a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800154e:	4a25      	ldr	r2, [pc, #148]	@ (80015e4 <UART_MspInit+0xa4>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001558:	4b22      	ldr	r3, [pc, #136]	@ (80015e4 <UART_MspInit+0xa4>)
 800155a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001566:	4b1f      	ldr	r3, [pc, #124]	@ (80015e4 <UART_MspInit+0xa4>)
 8001568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800156c:	4a1d      	ldr	r2, [pc, #116]	@ (80015e4 <UART_MspInit+0xa4>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001576:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <UART_MspInit+0xa4>)
 8001578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
  COM1_CLK_ENABLE();
 8001584:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <UART_MspInit+0xa4>)
 8001586:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800158a:	4a16      	ldr	r2, [pc, #88]	@ (80015e4 <UART_MspInit+0xa4>)
 800158c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001590:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001594:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <UART_MspInit+0xa4>)
 8001596:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800159a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM1_TX_PIN;
 80015a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 80015ac:	2302      	movs	r3, #2
 80015ae:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Alternate = COM1_TX_AF;
 80015b4:	2307      	movs	r3, #7
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &GPIO_Init);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	480a      	ldr	r0, [pc, #40]	@ (80015e8 <UART_MspInit+0xa8>)
 80015c0:	f000 fa96 	bl	8001af0 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM1_RX_PIN;
 80015c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_Init.Alternate = COM1_RX_AF;
 80015ca:	2307      	movs	r3, #7
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &GPIO_Init);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	@ (80015ec <UART_MspInit+0xac>)
 80015d6:	f000 fa8b 	bl	8001af0 <HAL_GPIO_Init>
}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	@ 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	46020c00 	.word	0x46020c00
 80015e8:	42020400 	.word	0x42020400
 80015ec:	42020000 	.word	0x42020000

080015f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f4:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <HAL_Init+0x3c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0c      	ldr	r2, [pc, #48]	@ (800162c <HAL_Init+0x3c>)
 80015fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001600:	2003      	movs	r0, #3
 8001602:	f000 f984 	bl	800190e <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 8001606:	f7ff fcf9 	bl	8000ffc <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800160a:	2004      	movs	r0, #4
 800160c:	f000 f9d8 	bl	80019c0 <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001610:	200f      	movs	r0, #15
 8001612:	f000 f80d 	bl	8001630 <HAL_InitTick>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_Init+0x30>
  {
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e002      	b.n	8001626 <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001620:	f7ff fbd8 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40022000 	.word	0x40022000

08001630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800163c:	4b36      	ldr	r3, [pc, #216]	@ (8001718 <HAL_InitTick+0xe8>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e062      	b.n	800170e <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001648:	4b34      	ldr	r3, [pc, #208]	@ (800171c <HAL_InitTick+0xec>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b04      	cmp	r3, #4
 8001652:	d10c      	bne.n	800166e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001654:	4b32      	ldr	r3, [pc, #200]	@ (8001720 <HAL_InitTick+0xf0>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b2f      	ldr	r3, [pc, #188]	@ (8001718 <HAL_InitTick+0xe8>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001662:	fbb3 f3f1 	udiv	r3, r3, r1
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	e03d      	b.n	80016ea <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 800166e:	4b2d      	ldr	r3, [pc, #180]	@ (8001724 <HAL_InitTick+0xf4>)
 8001670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001674:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001678:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001680:	d025      	beq.n	80016ce <HAL_InitTick+0x9e>
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001688:	d82e      	bhi.n	80016e8 <HAL_InitTick+0xb8>
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d004      	beq.n	800169a <HAL_InitTick+0x6a>
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001696:	d00d      	beq.n	80016b4 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8001698:	e026      	b.n	80016e8 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800169a:	4b21      	ldr	r3, [pc, #132]	@ (8001720 <HAL_InitTick+0xf0>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <HAL_InitTick+0xe8>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	4619      	mov	r1, r3
 80016a4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80016a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b0:	60fb      	str	r3, [r7, #12]
        break;
 80016b2:	e01a      	b.n	80016ea <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80016b4:	4b18      	ldr	r3, [pc, #96]	@ (8001718 <HAL_InitTick+0xe8>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016be:	fbb3 f3f2 	udiv	r3, r3, r2
 80016c2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	60fb      	str	r3, [r7, #12]
        break;
 80016cc:	e00d      	b.n	80016ea <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80016ce:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <HAL_InitTick+0xe8>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80016dc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e4:	60fb      	str	r3, [r7, #12]
        break;
 80016e6:	e000      	b.n	80016ea <HAL_InitTick+0xba>
        break;
 80016e8:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f946 	bl	800197c <HAL_SYSTICK_Config>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e009      	b.n	800170e <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fa:	2200      	movs	r2, #0
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001702:	f000 f90f 	bl	8001924 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001706:	4a08      	ldr	r2, [pc, #32]	@ (8001728 <HAL_InitTick+0xf8>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000048 	.word	0x20000048
 800171c:	e000e010 	.word	0xe000e010
 8001720:	20000010 	.word	0x20000010
 8001724:	46020c00 	.word	0x46020c00
 8001728:	20000044 	.word	0x20000044

0800172c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <HAL_IncTick+0x20>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_IncTick+0x24>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4a04      	ldr	r2, [pc, #16]	@ (8001750 <HAL_IncTick+0x24>)
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000048 	.word	0x20000048
 8001750:	200001d8 	.word	0x200001d8

08001754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return uwTick;
 8001758:	4b03      	ldr	r3, [pc, #12]	@ (8001768 <HAL_GetTick+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	200001d8 	.word	0x200001d8

0800176c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff ffee 	bl	8001754 <HAL_GetTick>
 8001778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001784:	d005      	beq.n	8001792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <HAL_Delay+0x44>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001792:	bf00      	nop
 8001794:	f7ff ffde 	bl	8001754 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d8f7      	bhi.n	8001794 <HAL_Delay+0x28>
  {
  }
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000048 	.word	0x20000048

080017b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c4:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017d0:	4013      	ands	r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e6:	4a04      	ldr	r2, [pc, #16]	@ (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	60d3      	str	r3, [r2, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001800:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <__NVIC_GetPriorityGrouping+0x18>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	f003 0307 	and.w	r3, r3, #7
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	2b00      	cmp	r3, #0
 8001828:	db0b      	blt.n	8001842 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	f003 021f 	and.w	r2, r3, #31
 8001830:	4907      	ldr	r1, [pc, #28]	@ (8001850 <__NVIC_EnableIRQ+0x38>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	2001      	movs	r0, #1
 800183a:	fa00 f202 	lsl.w	r2, r0, r2
 800183e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000e100 	.word	0xe000e100

08001854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	6039      	str	r1, [r7, #0]
 800185e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	2b00      	cmp	r3, #0
 8001866:	db0a      	blt.n	800187e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	490c      	ldr	r1, [pc, #48]	@ (80018a0 <__NVIC_SetPriority+0x4c>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	440b      	add	r3, r1
 8001878:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800187c:	e00a      	b.n	8001894 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4908      	ldr	r1, [pc, #32]	@ (80018a4 <__NVIC_SetPriority+0x50>)
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	3b04      	subs	r3, #4
 800188c:	0112      	lsls	r2, r2, #4
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	440b      	add	r3, r1
 8001892:	761a      	strb	r2, [r3, #24]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000e100 	.word	0xe000e100
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	@ 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f1c3 0307 	rsb	r3, r3, #7
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	bf28      	it	cs
 80018c6:	2304      	movcs	r3, #4
 80018c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3304      	adds	r3, #4
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d902      	bls.n	80018d8 <NVIC_EncodePriority+0x30>
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3b03      	subs	r3, #3
 80018d6:	e000      	b.n	80018da <NVIC_EncodePriority+0x32>
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	f04f 32ff 	mov.w	r2, #4294967295
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	401a      	ands	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43d9      	mvns	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	4313      	orrs	r3, r2
         );
}
 8001902:	4618      	mov	r0, r3
 8001904:	3724      	adds	r7, #36	@ 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ff4c 	bl	80017b4 <__NVIC_SetPriorityGrouping>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
 8001932:	f7ff ff63 	bl	80017fc <__NVIC_GetPriorityGrouping>
 8001936:	4603      	mov	r3, r0
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ffb0 	bl	80018a8 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff7f 	bl	8001854 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbaxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff53 	bl	8001818 <__NVIC_EnableIRQ>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800198c:	d301      	bcc.n	8001992 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800198e:	2301      	movs	r3, #1
 8001990:	e00d      	b.n	80019ae <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001992:	4a0a      	ldr	r2, [pc, #40]	@ (80019bc <HAL_SYSTICK_Config+0x40>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800199a:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <HAL_SYSTICK_Config+0x40>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80019a0:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_SYSTICK_Config+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a05      	ldr	r2, [pc, #20]	@ (80019bc <HAL_SYSTICK_Config+0x40>)
 80019a6:	f043 0303 	orr.w	r3, r3, #3
 80019aa:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d844      	bhi.n	8001a58 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80019ce:	a201      	add	r2, pc, #4	@ (adr r2, 80019d4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80019d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d4:	080019f7 	.word	0x080019f7
 80019d8:	08001a15 	.word	0x08001a15
 80019dc:	08001a37 	.word	0x08001a37
 80019e0:	08001a59 	.word	0x08001a59
 80019e4:	080019e9 	.word	0x080019e9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80019e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001a68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	6013      	str	r3, [r2, #0]
      break;
 80019f4:	e031      	b.n	8001a5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80019f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001a68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80019fc:	f023 0304 	bic.w	r3, r3, #4
 8001a00:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001a02:	4b1a      	ldr	r3, [pc, #104]	@ (8001a6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a08:	4a18      	ldr	r2, [pc, #96]	@ (8001a6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a0a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001a12:	e022      	b.n	8001a5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001a14:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a13      	ldr	r2, [pc, #76]	@ (8001a68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a1a:	f023 0304 	bic.w	r3, r3, #4
 8001a1e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a26:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a2a:	4a10      	ldr	r2, [pc, #64]	@ (8001a6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001a34:	e011      	b.n	8001a5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a3c:	f023 0304 	bic.w	r3, r3, #4
 8001a40:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a48:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a4c:	4a07      	ldr	r2, [pc, #28]	@ (8001a6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a4e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001a56:	e000      	b.n	8001a5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001a58:	bf00      	nop
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000e010 	.word	0xe000e010
 8001a6c:	46020c00 	.word	0x46020c00

08001a70 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001a82:	7afb      	ldrb	r3, [r7, #11]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d011      	beq.n	8001aac <HAL_EXTI_RegisterCallback+0x3c>
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	dc13      	bgt.n	8001ab4 <HAL_EXTI_RegisterCallback+0x44>
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <HAL_EXTI_RegisterCallback+0x26>
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d007      	beq.n	8001aa4 <HAL_EXTI_RegisterCallback+0x34>
 8001a94:	e00e      	b.n	8001ab4 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
      break;
 8001aa2:	e00a      	b.n	8001aba <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	605a      	str	r2, [r3, #4]
      break;
 8001aaa:	e006      	b.n	8001aba <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
      break;
 8001ab2:	e002      	b.n	8001aba <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8001ab8:	bf00      	nop
  }

  return status;
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	371c      	adds	r7, #28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e003      	b.n	8001ae4 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
  }
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001afe:	e130      	b.n	8001d62 <HAL_GPIO_Init+0x272>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	2101      	movs	r1, #1
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 8122 	beq.w	8001d5c <HAL_GPIO_Init+0x26c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d005      	beq.n	8001b30 <HAL_GPIO_Init+0x40>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d130      	bne.n	8001b92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b66:	2201      	movs	r2, #1
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	f003 0201 	and.w	r2, r3, #1
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d017      	beq.n	8001bce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2203      	movs	r2, #3
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d123      	bne.n	8001c22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	08da      	lsrs	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3208      	adds	r2, #8
 8001be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	691a      	ldr	r2, [r3, #16]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	08da      	lsrs	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3208      	adds	r2, #8
 8001c1c:	6939      	ldr	r1, [r7, #16]
 8001c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0203 	and.w	r2, r3, #3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d07c      	beq.n	8001d5c <HAL_GPIO_Init+0x26c>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001c62:	4a47      	ldr	r2, [pc, #284]	@ (8001d80 <HAL_GPIO_Init+0x290>)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3318      	adds	r3, #24
 8001c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	220f      	movs	r2, #15
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	0a9a      	lsrs	r2, r3, #10
 8001c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d84 <HAL_GPIO_Init+0x294>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	f002 0203 	and.w	r2, r2, #3
 8001c94:	00d2      	lsls	r2, r2, #3
 8001c96:	4093      	lsls	r3, r2
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001c9e:	4938      	ldr	r1, [pc, #224]	@ (8001d80 <HAL_GPIO_Init+0x290>)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	3318      	adds	r3, #24
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cac:	4b34      	ldr	r3, [pc, #208]	@ (8001d80 <HAL_GPIO_Init+0x290>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x1e0>
        {
          temp |= iocurrent;
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cd0:	4a2b      	ldr	r2, [pc, #172]	@ (8001d80 <HAL_GPIO_Init+0x290>)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d80 <HAL_GPIO_Init+0x290>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x20a>
        {
          temp |= iocurrent;
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cfa:	4a21      	ldr	r2, [pc, #132]	@ (8001d80 <HAL_GPIO_Init+0x290>)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d00:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <HAL_GPIO_Init+0x290>)
 8001d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d26:	4a16      	ldr	r2, [pc, #88]	@ (8001d80 <HAL_GPIO_Init+0x290>)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8001d2e:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <HAL_GPIO_Init+0x290>)
 8001d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d54:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <HAL_GPIO_Init+0x290>)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f47f aec7 	bne.w	8001b00 <HAL_GPIO_Init+0x10>
  }
}
 8001d72:	bf00      	nop
 8001d74:	bf00      	nop
 8001d76:	371c      	adds	r7, #28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	46022000 	.word	0x46022000
 8001d84:	002f7f7f 	.word	0x002f7f7f

08001d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
 8001d94:	4613      	mov	r3, r2
 8001d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d98:	787b      	ldrb	r3, [r7, #1]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001da4:	e002      	b.n	8001dac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00U)
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001dce:	4a0c      	ldr	r2, [pc, #48]	@ (8001e00 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f814 	bl	8001e04 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00U)
 8001ddc:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d006      	beq.n	8001df6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001de8:	4a05      	ldr	r2, [pc, #20]	@ (8001e00 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 f812 	bl	8001e1a <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	46022000 	.word	0x46022000

08001e04 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e08d      	b.n	8001f5e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe ffd6 	bl	8000e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2224      	movs	r2, #36	@ 0x24
 8001e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d107      	bne.n	8001eaa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	e006      	b.n	8001eb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001eb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d108      	bne.n	8001ed2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	e007      	b.n	8001ee2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ee0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ef0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ef4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691a      	ldr	r2, [r3, #16]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69d9      	ldr	r1, [r3, #28]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1a      	ldr	r2, [r3, #32]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	461a      	mov	r2, r3
 8001f74:	460b      	mov	r3, r1
 8001f76:	817b      	strh	r3, [r7, #10]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	f040 80da 	bne.w	800213e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_I2C_Master_Transmit+0x30>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e0d3      	b.n	8002140 <HAL_I2C_Master_Transmit+0x1d8>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fa0:	f7ff fbd8 	bl	8001754 <HAL_GetTick>
 8001fa4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2319      	movs	r3, #25
 8001fac:	2201      	movs	r2, #1
 8001fae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f8f0 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e0be      	b.n	8002140 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2221      	movs	r2, #33	@ 0x21
 8001fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2210      	movs	r2, #16
 8001fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	893a      	ldrh	r2, [r7, #8]
 8001fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	2bff      	cmp	r3, #255	@ 0xff
 8001ff2:	d90e      	bls.n	8002012 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	22ff      	movs	r2, #255	@ 0xff
 8001ff8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	8979      	ldrh	r1, [r7, #10]
 8002002:	4b51      	ldr	r3, [pc, #324]	@ (8002148 <HAL_I2C_Master_Transmit+0x1e0>)
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 fa88 	bl	8002520 <I2C_TransferConfig>
 8002010:	e06c      	b.n	80020ec <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002020:	b2da      	uxtb	r2, r3
 8002022:	8979      	ldrh	r1, [r7, #10]
 8002024:	4b48      	ldr	r3, [pc, #288]	@ (8002148 <HAL_I2C_Master_Transmit+0x1e0>)
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 fa77 	bl	8002520 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002032:	e05b      	b.n	80020ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	6a39      	ldr	r1, [r7, #32]
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 f906 	bl	800224a <I2C_WaitOnTXISFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e07b      	b.n	8002140 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204c:	781a      	ldrb	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800207c:	b29b      	uxth	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d034      	beq.n	80020ec <HAL_I2C_Master_Transmit+0x184>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002086:	2b00      	cmp	r3, #0
 8002088:	d130      	bne.n	80020ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	2200      	movs	r2, #0
 8002092:	2180      	movs	r1, #128	@ 0x80
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 f87f 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e04d      	b.n	8002140 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2bff      	cmp	r3, #255	@ 0xff
 80020ac:	d90e      	bls.n	80020cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	22ff      	movs	r2, #255	@ 0xff
 80020b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	8979      	ldrh	r1, [r7, #10]
 80020bc:	2300      	movs	r3, #0
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 fa2b 	bl	8002520 <I2C_TransferConfig>
 80020ca:	e00f      	b.n	80020ec <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	8979      	ldrh	r1, [r7, #10]
 80020de:	2300      	movs	r3, #0
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 fa1a 	bl	8002520 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d19e      	bne.n	8002034 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	6a39      	ldr	r1, [r7, #32]
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 f8ec 	bl	80022d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e01a      	b.n	8002140 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2220      	movs	r2, #32
 8002110:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6859      	ldr	r1, [r3, #4]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <HAL_I2C_Master_Transmit+0x1e4>)
 800211e:	400b      	ands	r3, r1
 8002120:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2220      	movs	r2, #32
 8002126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e000      	b.n	8002140 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800213e:	2302      	movs	r3, #2
  }
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	80002000 	.word	0x80002000
 800214c:	fe00e800 	.word	0xfe00e800

08002150 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b02      	cmp	r3, #2
 8002164:	d103      	bne.n	800216e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2200      	movs	r2, #0
 800216c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	d007      	beq.n	800218c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	619a      	str	r2, [r3, #24]
  }
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	4613      	mov	r3, r2
 80021a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021a8:	e03b      	b.n	8002222 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	6839      	ldr	r1, [r7, #0]
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f8d6 	bl	8002360 <I2C_IsErrorOccurred>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e041      	b.n	8002242 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c4:	d02d      	beq.n	8002222 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021c6:	f7ff fac5 	bl	8001754 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d302      	bcc.n	80021dc <I2C_WaitOnFlagUntilTimeout+0x44>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d122      	bne.n	8002222 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	4013      	ands	r3, r2
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	bf0c      	ite	eq
 80021ec:	2301      	moveq	r3, #1
 80021ee:	2300      	movne	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	461a      	mov	r2, r3
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d113      	bne.n	8002222 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	f043 0220 	orr.w	r2, r3, #32
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e00f      	b.n	8002242 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699a      	ldr	r2, [r3, #24]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4013      	ands	r3, r2
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	429a      	cmp	r2, r3
 8002230:	bf0c      	ite	eq
 8002232:	2301      	moveq	r3, #1
 8002234:	2300      	movne	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	461a      	mov	r2, r3
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	429a      	cmp	r2, r3
 800223e:	d0b4      	beq.n	80021aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b084      	sub	sp, #16
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002256:	e033      	b.n	80022c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f87f 	bl	8002360 <I2C_IsErrorOccurred>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e031      	b.n	80022d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002272:	d025      	beq.n	80022c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002274:	f7ff fa6e 	bl	8001754 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	429a      	cmp	r2, r3
 8002282:	d302      	bcc.n	800228a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d11a      	bne.n	80022c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b02      	cmp	r3, #2
 8002296:	d013      	beq.n	80022c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229c:	f043 0220 	orr.w	r2, r3, #32
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e007      	b.n	80022d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d1c4      	bne.n	8002258 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022e4:	e02f      	b.n	8002346 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f838 	bl	8002360 <I2C_IsErrorOccurred>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e02d      	b.n	8002356 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fa:	f7ff fa2b 	bl	8001754 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	429a      	cmp	r2, r3
 8002308:	d302      	bcc.n	8002310 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d11a      	bne.n	8002346 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b20      	cmp	r3, #32
 800231c:	d013      	beq.n	8002346 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	f043 0220 	orr.w	r2, r3, #32
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e007      	b.n	8002356 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b20      	cmp	r3, #32
 8002352:	d1c8      	bne.n	80022e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	@ 0x28
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b00      	cmp	r3, #0
 800238a:	d068      	beq.n	800245e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2210      	movs	r2, #16
 8002392:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002394:	e049      	b.n	800242a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239c:	d045      	beq.n	800242a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800239e:	f7ff f9d9 	bl	8001754 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d302      	bcc.n	80023b4 <I2C_IsErrorOccurred+0x54>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d13a      	bne.n	800242a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023d6:	d121      	bne.n	800241c <I2C_IsErrorOccurred+0xbc>
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023de:	d01d      	beq.n	800241c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	d01a      	beq.n	800241c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023f6:	f7ff f9ad 	bl	8001754 <HAL_GetTick>
 80023fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023fc:	e00e      	b.n	800241c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023fe:	f7ff f9a9 	bl	8001754 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b19      	cmp	r3, #25
 800240a:	d907      	bls.n	800241c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	f043 0320 	orr.w	r3, r3, #32
 8002412:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800241a:	e006      	b.n	800242a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b20      	cmp	r3, #32
 8002428:	d1e9      	bne.n	80023fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f003 0320 	and.w	r3, r3, #32
 8002434:	2b20      	cmp	r3, #32
 8002436:	d003      	beq.n	8002440 <I2C_IsErrorOccurred+0xe0>
 8002438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0aa      	beq.n	8002396 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002440:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002444:	2b00      	cmp	r3, #0
 8002446:	d103      	bne.n	8002450 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2220      	movs	r2, #32
 800244e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00b      	beq.n	8002488 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002480:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00b      	beq.n	80024aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	f043 0308 	orr.w	r3, r3, #8
 8002498:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00b      	beq.n	80024cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	f043 0302 	orr.w	r3, r3, #2
 80024ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80024cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01c      	beq.n	800250e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f7ff fe3b 	bl	8002150 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b0d      	ldr	r3, [pc, #52]	@ (800251c <I2C_IsErrorOccurred+0x1bc>)
 80024e6:	400b      	ands	r3, r1
 80024e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2220      	movs	r2, #32
 80024fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800250e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002512:	4618      	mov	r0, r3
 8002514:	3728      	adds	r7, #40	@ 0x28
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	fe00e800 	.word	0xfe00e800

08002520 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	817b      	strh	r3, [r7, #10]
 800252e:	4613      	mov	r3, r2
 8002530:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002532:	897b      	ldrh	r3, [r7, #10]
 8002534:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002538:	7a7b      	ldrb	r3, [r7, #9]
 800253a:	041b      	lsls	r3, r3, #16
 800253c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002540:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	4313      	orrs	r3, r2
 800254a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800254e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800255e:	4b08      	ldr	r3, [pc, #32]	@ (8002580 <I2C_TransferConfig+0x60>)
 8002560:	430b      	orrs	r3, r1
 8002562:	43db      	mvns	r3, r3
 8002564:	ea02 0103 	and.w	r1, r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	430a      	orrs	r2, r1
 8002570:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002572:	bf00      	nop
 8002574:	371c      	adds	r7, #28
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	03ff63ff 	.word	0x03ff63ff

08002584 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b20      	cmp	r3, #32
 8002598:	d138      	bne.n	800260c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e032      	b.n	800260e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2224      	movs	r2, #36	@ 0x24
 80025b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0201 	bic.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6819      	ldr	r1, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	e000      	b.n	800260e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800260c:	2302      	movs	r3, #2
  }
}
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800261a:	b480      	push	{r7}
 800261c:	b085      	sub	sp, #20
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b20      	cmp	r3, #32
 800262e:	d139      	bne.n	80026a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800263a:	2302      	movs	r3, #2
 800263c:	e033      	b.n	80026a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2224      	movs	r2, #36	@ 0x24
 800264a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800266c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4313      	orrs	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	e000      	b.n	80026a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026a4:	2302      	movs	r3, #2
  }
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80026c0:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	e007      	b.n	80026e2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80026d2:	4b07      	ldr	r3, [pc, #28]	@ (80026f0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 0204 	bic.w	r2, r3, #4
 80026da:	4905      	ldr	r1, [pc, #20]	@ (80026f0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	40030400 	.word	0x40030400

080026f4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80026f8:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <HAL_ICACHE_Enable+0x1c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a04      	ldr	r2, [pc, #16]	@ (8002710 <HAL_ICACHE_Enable+0x1c>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	40030400 	.word	0x40030400

08002714 <HAL_PWREx_ControlVoltageScaling>:
  *        only take effect after the 2.4 GHz RADIO has entered Sleep or Deepsleep mode.
  * @note  In range 2, the 2.4 GHz RADIO shall not transmit nor receive.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  uint32_t vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800271c:	4b29      	ldr	r3, [pc, #164]	@ (80027c4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800271e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002724:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	429a      	cmp	r2, r3
 800272c:	d101      	bne.n	8002732 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	e042      	b.n	80027b8 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Set voltage scaling level */
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 8002732:	4b24      	ldr	r3, [pc, #144]	@ (80027c4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800273a:	4922      	ldr	r1, [pc, #136]	@ (80027c4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4313      	orrs	r3, r2
 8002740:	60cb      	str	r3, [r1, #12]


  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8002742:	4b21      	ldr	r3, [pc, #132]	@ (80027c8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2232      	movs	r2, #50	@ 0x32
 8002748:	fb02 f303 	mul.w	r3, r2, r3
 800274c:	4a1f      	ldr	r2, [pc, #124]	@ (80027cc <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0c9b      	lsrs	r3, r3, #18
 8002754:	3301      	adds	r3, #1
 8002756:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002758:	e002      	b.n	8002760 <HAL_PWREx_ControlVoltageScaling+0x4c>
  {
    timeout--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3b01      	subs	r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002760:	4b18      	ldr	r3, [pc, #96]	@ (80027c4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d102      	bne.n	8002772 <HAL_PWREx_ControlVoltageScaling+0x5e>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f3      	bne.n	800275a <HAL_PWREx_ControlVoltageScaling+0x46>
  }

  /* Check time out  */
  if (timeout == 0U)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_PWREx_ControlVoltageScaling+0x68>
  {
    return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e01d      	b.n	80027b8 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Wait until ACTVOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 800277c:	4b12      	ldr	r3, [pc, #72]	@ (80027c8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2232      	movs	r2, #50	@ 0x32
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	4a11      	ldr	r2, [pc, #68]	@ (80027cc <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002788:	fba2 2303 	umull	r2, r3, r2, r3
 800278c:	0c9b      	lsrs	r3, r3, #18
 800278e:	3301      	adds	r3, #1
 8002790:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002792:	e002      	b.n	800279a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3b01      	subs	r3, #1
 8002798:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800279a:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800279c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800279e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d102      	bne.n	80027ac <HAL_PWREx_ControlVoltageScaling+0x98>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f3      	bne.n	8002794 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out  */
  if (timeout == 0U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_PWREx_ControlVoltageScaling+0xa2>
  {
    return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e000      	b.n	80027b8 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	46020800 	.word	0x46020800
 80027c8:	20000010 	.word	0x20000010
 80027cc:	431bde83 	.word	0x431bde83

080027d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	@ 0x30
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t mask;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e3d9      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e2:	4b90      	ldr	r3, [pc, #576]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	623b      	str	r3, [r7, #32]
  pllsrc = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80027ec:	4b8d      	ldr	r3, [pc, #564]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 80027ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d072      	beq.n	80028e8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL1 in these cases it is not allowed to be disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	2b08      	cmp	r3, #8
 8002806:	d005      	beq.n	8002814 <HAL_RCC_OscConfig+0x44>
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	2b0c      	cmp	r3, #12
 800280c:	d12a      	bne.n	8002864 <HAL_RCC_OscConfig+0x94>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSE)))
 800280e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002810:	2b03      	cmp	r3, #3
 8002812:	d127      	bne.n	8002864 <HAL_RCC_OscConfig+0x94>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_RCC_OscConfig+0x50>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e3ba      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Otherwise, applying divider is allowed */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	2b08      	cmp	r3, #8
 8002824:	d15f      	bne.n	80028e6 <HAL_RCC_OscConfig+0x116>
        {
          assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

          /* Adjust the HSE division factor */
          __HAL_RCC_HSE_CONFIG(RCC_HSE_ON | RCC_OscInitStruct->HSEDiv);
 8002826:	4b7f      	ldr	r3, [pc, #508]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	4313      	orrs	r3, r2
 8002834:	4a7b      	ldr	r2, [pc, #492]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 8002836:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800283a:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSE value */
          SystemCoreClock = (HSE_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSEPRE)) >> RCC_CR_HSEPRE_Pos)));
 800283c:	4b79      	ldr	r3, [pc, #484]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	0d1b      	lsrs	r3, r3, #20
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	4a78      	ldr	r2, [pc, #480]	@ (8002a28 <HAL_RCC_OscConfig+0x258>)
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
 800284c:	4a77      	ldr	r2, [pc, #476]	@ (8002a2c <HAL_RCC_OscConfig+0x25c>)
 800284e:	6013      	str	r3, [r2, #0]

          /* Adapt Systick interrupt period */
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002850:	4b77      	ldr	r3, [pc, #476]	@ (8002a30 <HAL_RCC_OscConfig+0x260>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7fe feeb 	bl	8001630 <HAL_InitTick>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d042      	beq.n	80028e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e398      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d01f      	beq.n	80028ac <HAL_RCC_OscConfig+0xdc>
      {
        assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG((RCC_OscInitStruct->HSEState | RCC_OscInitStruct->HSEDiv));
 800286c:	4b6d      	ldr	r3, [pc, #436]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	430b      	orrs	r3, r1
 800287e:	4969      	ldr	r1, [pc, #420]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe ff66 	bl	8001754 <HAL_GetTick>
 8002888:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0xce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800288c:	f7fe ff62 	bl	8001754 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b64      	cmp	r3, #100	@ 0x64
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e37b      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800289e:	4b61      	ldr	r3, [pc, #388]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0xbc>
 80028aa:	e01d      	b.n	80028e8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ac:	4b5d      	ldr	r3, [pc, #372]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	495a      	ldr	r1, [pc, #360]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028be:	f7fe ff49 	bl	8001754 <HAL_GetTick>
 80028c2:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c6:	f7fe ff45 	bl	8001754 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b64      	cmp	r3, #100	@ 0x64
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e35e      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028d8:	4b52      	ldr	r3, [pc, #328]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCC_OscConfig+0xf6>
 80028e4:	e000      	b.n	80028e8 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80028e6:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d05a      	beq.n	80029aa <HAL_RCC_OscConfig+0x1da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d005      	beq.n	8002906 <HAL_RCC_OscConfig+0x136>
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	2b0c      	cmp	r3, #12
 80028fe:	d113      	bne.n	8002928 <HAL_RCC_OscConfig+0x158>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSI)))
 8002900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002902:	2b02      	cmp	r3, #2
 8002904:	d110      	bne.n	8002928 <HAL_RCC_OscConfig+0x158>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_RCC_OscConfig+0x142>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e341      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002912:	4b44      	ldr	r3, [pc, #272]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	041b      	lsls	r3, r3, #16
 8002920:	4940      	ldr	r1, [pc, #256]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 8002922:	4313      	orrs	r3, r2
 8002924:	610b      	str	r3, [r1, #16]
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002926:	e040      	b.n	80029aa <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d023      	beq.n	8002978 <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002930:	4b3c      	ldr	r3, [pc, #240]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a3b      	ldr	r2, [pc, #236]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 8002936:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800293a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe ff0a 	bl	8001754 <HAL_GetTick>
 8002940:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002944:	f7fe ff06 	bl	8001754 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e31f      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002956:	4b33      	ldr	r3, [pc, #204]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x174>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002962:	4b30      	ldr	r3, [pc, #192]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	492c      	ldr	r1, [pc, #176]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 8002972:	4313      	orrs	r3, r2
 8002974:	610b      	str	r3, [r1, #16]
 8002976:	e018      	b.n	80029aa <HAL_RCC_OscConfig+0x1da>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002978:	4b2a      	ldr	r3, [pc, #168]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a29      	ldr	r2, [pc, #164]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 800297e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7fe fee6 	bl	8001754 <HAL_GetTick>
 8002988:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x1ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298c:	f7fe fee2 	bl	8001754 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e2fb      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800299e:	4b21      	ldr	r3, [pc, #132]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x1bc>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 80d2 	beq.w	8002b5c <HAL_RCC_OscConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Update LSI1 configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 80029be:	4b19      	ldr	r3, [pc, #100]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 80029c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d111      	bne.n	80029f0 <HAL_RCC_OscConfig+0x220>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029cc:	4b15      	ldr	r3, [pc, #84]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 80029ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029d2:	4a14      	ldr	r2, [pc, #80]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80029dc:	4b11      	ldr	r3, [pc, #68]	@ (8002a24 <HAL_RCC_OscConfig+0x254>)
 80029de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80029ea:	2301      	movs	r3, #1
 80029ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80029f0:	4b10      	ldr	r3, [pc, #64]	@ (8002a34 <HAL_RCC_OscConfig+0x264>)
 80029f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d123      	bne.n	8002a44 <HAL_RCC_OscConfig+0x274>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80029fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002a34 <HAL_RCC_OscConfig+0x264>)
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a00:	4a0c      	ldr	r2, [pc, #48]	@ (8002a34 <HAL_RCC_OscConfig+0x264>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a08:	f7fe fea4 	bl	8001754 <HAL_GetTick>
 8002a0c:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a0e:	e013      	b.n	8002a38 <HAL_RCC_OscConfig+0x268>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a10:	f7fe fea0 	bl	8001754 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d90c      	bls.n	8002a38 <HAL_RCC_OscConfig+0x268>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e2b9      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
 8002a22:	bf00      	nop
 8002a24:	46020c00 	.word	0x46020c00
 8002a28:	01e84800 	.word	0x01e84800
 8002a2c:	20000010 	.word	0x20000010
 8002a30:	20000044 	.word	0x20000044
 8002a34:	46020800 	.word	0x46020800
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a38:	4ba4      	ldr	r3, [pc, #656]	@ (8002ccc <HAL_RCC_OscConfig+0x4fc>)
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0e5      	beq.n	8002a10 <HAL_RCC_OscConfig+0x240>
        }
      }
    }

    /* Get BDCR1 register value */
    tmpreg1 = RCC->BDCR1;
 8002a44:	4ba2      	ldr	r3, [pc, #648]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002a46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a4a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Define mask depending on LSI presence */
    mask = RCC_BDCR1_LSI1ON;
 8002a4c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002a50:	61bb      	str	r3, [r7, #24]
#if defined(RCC_LSI2_SUPPORT)
    mask |= RCC_BDCR1_LSI2ON;
#endif /* RCC_LSI2_SUPPORT */

    /* Check the LSI1 State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d056      	beq.n	8002b08 <HAL_RCC_OscConfig+0x338>
    {
      if ((RCC_OscInitStruct->LSIState & RCC_LSI1_ON) != 0x00u)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d030      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x2f8>
      {
        /* Check LSI1 division factor */
        assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

        /* Check is LSIDiv is requested to be changed and LSI is already ON */
        if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_BDCR1_LSI1PREDIV)) && ((tmpreg1 & RCC_BDCR1_LSI1RDY) != 0x00u))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69da      	ldr	r2, [r3, #28]
 8002a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d020      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x2e6>
 8002a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d01b      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x2e6>
        {
          /* Disable LSI1 */
          tmpreg1 &= ~RCC_BDCR1_LSI1ON;
 8002a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a80:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a84:	62bb      	str	r3, [r7, #40]	@ 0x28
          RCC->BDCR1 = tmpreg1;
 8002a86:	4a92      	ldr	r2, [pc, #584]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a8e:	f7fe fe61 	bl	8001754 <HAL_GetTick>
 8002a92:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is disabled */
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2d8>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a96:	f7fe fe5d 	bl	8001754 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b14      	cmp	r3, #20
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x2d8>
            {
              /* LSI1 may be forced ON by IWDG */
              return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e276      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8002aa8:	4b89      	ldr	r3, [pc, #548]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002aae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1ef      	bne.n	8002a96 <HAL_RCC_OscConfig+0x2c6>
          HAL_Delay(1);
#endif
        }

        /* Set LSI1 division factor */
        tmpreg1 &= ~RCC_BDCR1_LSI1PREDIV;
 8002ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002abc:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Enable Concerned LSI */
      tmpreg1 |= RCC_OscInitStruct->LSIState;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8002ad2:	4a7f      	ldr	r2, [pc, #508]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ada:	f7fe fe3b 	bl	8001754 <HAL_GetTick>
 8002ade:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready : LSIRDY bit is position ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x324>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae2:	f7fe fe37 	bl	8001754 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b14      	cmp	r3, #20
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x324>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e250      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8002af4:	4b76      	ldr	r3, [pc, #472]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002af6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0ed      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x312>
 8002b06:	e01d      	b.n	8002b44 <HAL_RCC_OscConfig+0x374>
#endif
    }
    else
    {
      /* Disable the Internal Low Speed oscillator LSI1 and LSI2 is available */
      tmpreg1 &= ~mask;
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b0e:	4013      	ands	r3, r2
 8002b10:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8002b12:	4a6f      	ldr	r2, [pc, #444]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1a:	f7fe fe1b 	bl	8001754 <HAL_GetTick>
 8002b1e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is disabled : LSIRDY bit position is ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x364>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b22:	f7fe fe17 	bl	8001754 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b14      	cmp	r3, #20
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x364>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e230      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8002b34:	4b66      	ldr	r3, [pc, #408]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002b36:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1ee      	bne.n	8002b22 <HAL_RCC_OscConfig+0x352>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d107      	bne.n	8002b5c <HAL_RCC_OscConfig+0x38c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b4c:	4b60      	ldr	r3, [pc, #384]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b52:	4a5f      	ldr	r2, [pc, #380]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002b54:	f023 0304 	bic.w	r3, r3, #4
 8002b58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80e2 	beq.w	8002d2e <HAL_RCC_OscConfig+0x55e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8002b70:	4b57      	ldr	r3, [pc, #348]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d111      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x3d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	4b54      	ldr	r3, [pc, #336]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b84:	4a52      	ldr	r2, [pc, #328]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002b86:	f043 0304 	orr.w	r3, r3, #4
 8002b8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002b8e:	4b50      	ldr	r3, [pc, #320]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ccc <HAL_RCC_OscConfig+0x4fc>)
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d118      	bne.n	8002be0 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002bae:	4b47      	ldr	r3, [pc, #284]	@ (8002ccc <HAL_RCC_OscConfig+0x4fc>)
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	4a46      	ldr	r2, [pc, #280]	@ (8002ccc <HAL_RCC_OscConfig+0x4fc>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bba:	f7fe fdcb 	bl	8001754 <HAL_GetTick>
 8002bbe:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc2:	f7fe fdc7 	bl	8001754 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e1e0      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002bd4:	4b3d      	ldr	r3, [pc, #244]	@ (8002ccc <HAL_RCC_OscConfig+0x4fc>)
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x3f2>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d051      	beq.n	8002c8c <HAL_RCC_OscConfig+0x4bc>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_LSESYSEN);
 8002be8:	4b39      	ldr	r3, [pc, #228]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002bea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8002bfe:	4a34      	ldr	r2, [pc, #208]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c06:	f7fe fda5 	bl	8001754 <HAL_GetTick>
 8002c0a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_OscConfig+0x454>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7fe fda1 	bl	8001754 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x454>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e1b8      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 8002c24:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002c26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0ed      	beq.n	8002c0e <HAL_RCC_OscConfig+0x43e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR1_LSESYSEN) != 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d01e      	beq.n	8002c7c <HAL_RCC_OscConfig+0x4ac>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_OscConfig+0x486>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c40:	f7fe fd88 	bl	8001754 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x486>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e19f      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 8002c56:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0ed      	beq.n	8002c40 <HAL_RCC_OscConfig+0x470>
 8002c64:	e057      	b.n	8002d16 <HAL_RCC_OscConfig+0x546>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c66:	f7fe fd75 	bl	8001754 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e18c      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8002c7c:	4b14      	ldr	r3, [pc, #80]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002c7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1ed      	bne.n	8002c66 <HAL_RCC_OscConfig+0x496>
 8002c8a:	e044      	b.n	8002d16 <HAL_RCC_OscConfig+0x546>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR1, (RCC_BDCR1_LSEON | RCC_BDCR1_LSESYSEN));
 8002c8c:	4b10      	ldr	r3, [pc, #64]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002c8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c92:	4a0f      	ldr	r2, [pc, #60]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002c94:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8002c98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR1, RCC_BDCR1_LSEBYP);
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002c9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8002cd0 <HAL_RCC_OscConfig+0x500>)
 8002ca4:	f023 0304 	bic.w	r3, r3, #4
 8002ca8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cac:	f7fe fd52 	bl	8001754 <HAL_GetTick>
 8002cb0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8002cb2:	e00f      	b.n	8002cd4 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb4:	f7fe fd4e 	bl	8001754 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d906      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e165      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
 8002cca:	bf00      	nop
 8002ccc:	46020800 	.word	0x46020800
 8002cd0:	46020c00 	.word	0x46020c00
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8002cd4:	4b98      	ldr	r3, [pc, #608]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1e8      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x4e4>
        }
      }

      if (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSEN) != 0U)
 8002ce2:	4b95      	ldr	r3, [pc, #596]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d012      	beq.n	8002d16 <HAL_RCC_OscConfig+0x546>
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf2:	f7fe fd2f 	bl	8001754 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e146      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8002d08:	4b8b      	ldr	r3, [pc, #556]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002d0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1ed      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x522>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d107      	bne.n	8002d2e <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1e:	4b86      	ldr	r3, [pc, #536]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d24:	4a84      	ldr	r2, [pc, #528]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002d26:	f023 0304 	bic.w	r3, r3, #4
 8002d2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if ((RCC_OscInitStruct->PLL1.PLLState) != RCC_PLL_NONE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 812e 	beq.w	8002f94 <HAL_RCC_OscConfig+0x7c4>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	2b0c      	cmp	r3, #12
 8002d3c:	f000 80ba 	beq.w	8002eb4 <HAL_RCC_OscConfig+0x6e4>
    {
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_ON)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	f040 8093 	bne.w	8002e70 <HAL_RCC_OscConfig+0x6a0>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL1.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL1.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL1.PLLR));

        /* Disable the main PLL1. */
        tmpreg1 = (RCC->CR & ~RCC_CR_PLL1ON);
 8002d4a:	4b7b      	ldr	r3, [pc, #492]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d52:	62bb      	str	r3, [r7, #40]	@ 0x28
        RCC->CR = tmpreg1;
 8002d54:	4a78      	ldr	r2, [pc, #480]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5a:	f7fe fcfb 	bl	8001754 <HAL_GetTick>
 8002d5e:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        do
        {
          tmpreg1 = RCC->CR;
 8002d60:	4b75      	ldr	r3, [pc, #468]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	62bb      	str	r3, [r7, #40]	@ 0x28
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d66:	f7fe fcf5 	bl	8001754 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e10e      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
          }
        } while ((tmpreg1 & RCC_CR_PLL1RDY) != 0U);
 8002d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ee      	bne.n	8002d60 <HAL_RCC_OscConfig+0x590>

        /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
        if (RCC_OscInitStruct->PLL1.PLLSource == RCC_PLLSOURCE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d108      	bne.n	8002d9c <HAL_RCC_OscConfig+0x5cc>
        {
          /* Clock source is HSE or HSE/2 */
          pllsrc = HSE_VALUE >> ((tmpreg1 & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos);
 8002d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8c:	0d1b      	lsrs	r3, r3, #20
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	4a6a      	ldr	r2, [pc, #424]	@ (8002f3c <HAL_RCC_OscConfig+0x76c>)
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
 8002d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d9a:	e001      	b.n	8002da0 <HAL_RCC_OscConfig+0x5d0>
        }
        else
        {
          /* Clock source is HSI */
          pllsrc = HSI_VALUE;
 8002d9c:	4b68      	ldr	r3, [pc, #416]	@ (8002f40 <HAL_RCC_OscConfig+0x770>)
 8002d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Compute VCO input frequency depending on M divider */
        pllsrc = (pllsrc / RCC_OscInitStruct->PLL1.PLLM);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllsrc));

        if (pllsrc > PLL_INPUTRANGE0_FREQMAX)
 8002dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dae:	4a65      	ldr	r2, [pc, #404]	@ (8002f44 <HAL_RCC_OscConfig+0x774>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d902      	bls.n	8002dba <HAL_RCC_OscConfig+0x5ea>
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE1;
 8002db4:	230c      	movs	r3, #12
 8002db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002db8:	e001      	b.n	8002dbe <HAL_RCC_OscConfig+0x5ee>
        }
        else
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Configure PLL1 source, PLLM divider, VCO input range and enable PLL1R output. Clear also FRACEN*/
        tmpreg2 = RCC->PLL1CFGR;
 8002dbe:	4b5e      	ldr	r3, [pc, #376]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc2:	617b      	str	r3, [r7, #20]
        tmpreg2 &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1RGE | RCC_PLL1CFGR_PLL1FRACEN | RCC_PLL1CFGR_PLL1M);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f423 63e3 	bic.w	r3, r3, #1816	@ 0x718
 8002dca:	f023 0307 	bic.w	r3, r3, #7
 8002dce:	617b      	str	r3, [r7, #20]
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd6:	431a      	orrs	r2, r3
                    ((RCC_OscInitStruct->PLL1.PLLM - 1u) << RCC_PLL1CFGR_PLL1M_Pos) | RCC_PLL1CFGR_PLL1REN);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	021b      	lsls	r3, r3, #8
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8002de0:	431a      	orrs	r2, r3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dea:	617b      	str	r3, [r7, #20]
        RCC->PLL1CFGR = tmpreg2;
 8002dec:	4a52      	ldr	r2, [pc, #328]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLLN multiplication factor and PLLP, PLLQ, PLLR dividers */
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df6:	1e5a      	subs	r2, r3, #1
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	025b      	lsls	r3, r3, #9
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8002e00:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLQ - 1u) << RCC_PLL1DIVR_PLL1Q_Pos) |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e06:	3b01      	subs	r3, #1
 8002e08:	041b      	lsls	r3, r3, #16
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 8002e0a:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLR - 1u) << RCC_PLL1DIVR_PLL1R_Pos));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e10:	3b01      	subs	r3, #1
 8002e12:	061b      	lsls	r3, r3, #24
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
        RCC->PLL1DIVR = tmpreg2;
 8002e18:	4a47      	ldr	r2, [pc, #284]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	6353      	str	r3, [r2, #52]	@ 0x34

        if (RCC_OscInitStruct->PLL1.PLLFractional != 0x00u)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCC_OscConfig+0x66c>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2a:	4a43      	ldr	r2, [pc, #268]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	6393      	str	r3, [r2, #56]	@ 0x38

          /* Enable PLL1FRACEN */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 8002e30:	4b41      	ldr	r3, [pc, #260]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e34:	4a40      	ldr	r2, [pc, #256]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002e36:	f043 0310 	orr.w	r3, r3, #16
 8002e3a:	6293      	str	r3, [r2, #40]	@ 0x28
        }

        /* Enable the main PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002e3c:	4b3e      	ldr	r3, [pc, #248]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a3d      	ldr	r2, [pc, #244]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002e42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe fc84 	bl	8001754 <HAL_GetTick>
 8002e4c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x692>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fe fc80 	bl	8001754 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e099      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002e62:	4b35      	ldr	r3, [pc, #212]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x680>
 8002e6e:	e091      	b.n	8002f94 <HAL_RCC_OscConfig+0x7c4>
        }
      }
      else
      {
        /* Disable the main PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002e70:	4b31      	ldr	r3, [pc, #196]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a30      	ldr	r2, [pc, #192]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002e76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fc6a 	bl	8001754 <HAL_GetTick>
 8002e80:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x6c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe fc66 	bl	8001754 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x6c6>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e07f      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e96:	4b28      	ldr	r3, [pc, #160]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x6b4>
          }
        }

        /* CLear the PLL1 source and disable outputs to save power when PLL1 is off */
        CLEAR_BIT(RCC->PLL1CFGR, (RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | \
 8002ea2:	4b25      	ldr	r3, [pc, #148]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea6:	4a24      	ldr	r2, [pc, #144]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002ea8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002eac:	f023 0303 	bic.w	r3, r3, #3
 8002eb0:	6293      	str	r3, [r2, #40]	@ 0x28
 8002eb2:	e06f      	b.n	8002f94 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL1 used as System clock source */
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x6f0>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e06a      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        tmpreg1 = RCC->PLL1CFGR;
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg2 = RCC->PLL1DIVR;
 8002ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f38 <HAL_RCC_OscConfig+0x768>)
 8002ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eca:	617b      	str	r3, [r7, #20]

        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 8002ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ece:	f003 0203 	and.w	r2, r3, #3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d12b      	bne.n	8002f32 <HAL_RCC_OscConfig+0x762>
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 8002eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	f003 0207 	and.w	r2, r3, #7
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee6:	3b01      	subs	r3, #1
        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d122      	bne.n	8002f32 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef6:	3b01      	subs	r3, #1
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d11a      	bne.n	8002f32 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	0a5b      	lsrs	r3, r3, #9
 8002f00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f08:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d111      	bne.n	8002f32 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	0c1b      	lsrs	r3, r3, #16
 8002f12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f1a:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d108      	bne.n	8002f32 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) != (RCC_OscInitStruct->PLL1.PLLR - 1u)))
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	0e1b      	lsrs	r3, r3, #24
 8002f24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2c:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d00a      	beq.n	8002f48 <HAL_RCC_OscConfig+0x778>
        {
          return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e02f      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c6>
 8002f36:	bf00      	nop
 8002f38:	46020c00 	.word	0x46020c00
 8002f3c:	01e84800 	.word	0x01e84800
 8002f40:	00f42400 	.word	0x00f42400
 8002f44:	007a1200 	.word	0x007a1200
        }
        else
        {
          /* Check if only fractional part needs to be updated  */
          tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 8002f48:	4b15      	ldr	r3, [pc, #84]	@ (8002fa0 <HAL_RCC_OscConfig+0x7d0>)
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4c:	08db      	lsrs	r3, r3, #3
 8002f4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f52:	62bb      	str	r3, [r7, #40]	@ 0x28

          if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d01a      	beq.n	8002f94 <HAL_RCC_OscConfig+0x7c4>
          {
            assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

            /* Disable PLL1FRACEN */
            __HAL_RCC_PLL1_FRACN_DISABLE();
 8002f5e:	4b10      	ldr	r3, [pc, #64]	@ (8002fa0 <HAL_RCC_OscConfig+0x7d0>)
 8002f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f62:	4a0f      	ldr	r2, [pc, #60]	@ (8002fa0 <HAL_RCC_OscConfig+0x7d0>)
 8002f64:	f023 0310 	bic.w	r3, r3, #16
 8002f68:	6293      	str	r3, [r2, #40]	@ 0x28

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f6a:	f7fe fbf3 	bl	8001754 <HAL_GetTick>
 8002f6e:	61f8      	str	r0, [r7, #28]

            /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
            while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002f70:	bf00      	nop
 8002f72:	f7fe fbef 	bl	8001754 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d0f9      	beq.n	8002f72 <HAL_RCC_OscConfig+0x7a2>
            {
            }

            /* Configure PLL1 PLL1FRACN */
            __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f82:	4a07      	ldr	r2, [pc, #28]	@ (8002fa0 <HAL_RCC_OscConfig+0x7d0>)
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	6393      	str	r3, [r2, #56]	@ 0x38

            /* Enable PLL1FRACEN to latch new value. */
            __HAL_RCC_PLL1_FRACN_ENABLE();
 8002f88:	4b05      	ldr	r3, [pc, #20]	@ (8002fa0 <HAL_RCC_OscConfig+0x7d0>)
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8c:	4a04      	ldr	r2, [pc, #16]	@ (8002fa0 <HAL_RCC_OscConfig+0x7d0>)
 8002f8e:	f043 0310 	orr.w	r3, r3, #16
 8002f92:	6293      	str	r3, [r2, #40]	@ 0x28
          }
        }
      }
    }
  }
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3730      	adds	r7, #48	@ 0x30
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	46020c00 	.word	0x46020c00

08002fa4 <HAL_RCC_ClockConfig>:
  *         HCLK5 prescaler is switched automatically by hardware, but configuration shall
  *         always be performed before setting new PLL1 source as Sysclk source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e115      	b.n	80031e4 <HAL_RCC_ClockConfig+0x240>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b8c      	ldr	r3, [pc, #560]	@ (80031ec <HAL_RCC_ClockConfig+0x248>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d910      	bls.n	8002fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b89      	ldr	r3, [pc, #548]	@ (80031ec <HAL_RCC_ClockConfig+0x248>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 020f 	bic.w	r2, r3, #15
 8002fce:	4987      	ldr	r1, [pc, #540]	@ (80031ec <HAL_RCC_ClockConfig+0x248>)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b85      	ldr	r3, [pc, #532]	@ (80031ec <HAL_RCC_ClockConfig+0x248>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0fd      	b.n	80031e4 <HAL_RCC_ClockConfig+0x240>
  }

  /*-------------------------- HCLK5 Configuration --------------------------*/
  /* HCLK5 prescaler is switched automatically by hardware, but configuration shall
    always be performed before setting new PLL1 source as Sysclk source. */
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK5) == RCC_CLOCKTYPE_HCLK5)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00d      	beq.n	8003010 <HAL_RCC_ClockConfig+0x6c>
  {
    assert_param(IS_RCC_HCLK5_HSEHSI(RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
    assert_param(IS_RCC_HCLK5_PLL1(RCC_ClkInitStruct->AHB5_PLL1_CLKDivider));
    MODIFY_REG(RCC->CFGR4, (RCC_CFGR4_HDIV5 | RCC_CFGR4_HPRE5),
 8002ff4:	4b7e      	ldr	r3, [pc, #504]	@ (80031f0 <HAL_RCC_ClockConfig+0x24c>)
 8002ff6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002ffa:	f023 0217 	bic.w	r2, r3, #23
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6999      	ldr	r1, [r3, #24]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	430b      	orrs	r3, r1
 8003008:	4979      	ldr	r1, [pc, #484]	@ (80031f0 <HAL_RCC_ClockConfig+0x24c>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
               (RCC_ClkInitStruct->AHB5_PLL1_CLKDivider | RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d06f      	beq.n	80030fc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 800301c:	4b74      	ldr	r3, [pc, #464]	@ (80031f0 <HAL_RCC_ClockConfig+0x24c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	617b      	str	r3, [r7, #20]

    /* PLL1 is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b03      	cmp	r3, #3
 8003028:	d118      	bne.n	800305c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the PLL1 ready flag */
      if ((tmpreg1 & RCC_CR_PLL1RDY) == 0U)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0d5      	b.n	80031e4 <HAL_RCC_ClockConfig+0x240>
      }
      else
      {
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8003038:	4b6d      	ldr	r3, [pc, #436]	@ (80031f0 <HAL_RCC_ClockConfig+0x24c>)
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	f003 020c 	and.w	r2, r3, #12
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	429a      	cmp	r2, r3
 8003048:	d01a      	beq.n	8003080 <HAL_RCC_ClockConfig+0xdc>
        {
          /* Whatever is PLL frequency, use step prediv to reach maximum frequency. */
          /* Select pll1r to be prediv with 2-step divider when selected as Sysclk source */
          MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRESTEP, RCC_PLL1CFGR_PLL1RCLKPRE);
 800304a:	4b69      	ldr	r3, [pc, #420]	@ (80031f0 <HAL_RCC_ClockConfig+0x24c>)
 800304c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003052:	4a67      	ldr	r2, [pc, #412]	@ (80031f0 <HAL_RCC_ClockConfig+0x24c>)
 8003054:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003058:	6293      	str	r3, [r2, #40]	@ 0x28
 800305a:	e011      	b.n	8003080 <HAL_RCC_ClockConfig+0xdc>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d106      	bne.n	8003072 <HAL_RCC_ClockConfig+0xce>
      {
        /* Check the HSE ready flag */
        if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d108      	bne.n	8003080 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e0b8      	b.n	80031e4 <HAL_RCC_ClockConfig+0x240>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0b1      	b.n	80031e4 <HAL_RCC_ClockConfig+0x240>
        }
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003080:	4b5b      	ldr	r3, [pc, #364]	@ (80031f0 <HAL_RCC_ClockConfig+0x24c>)
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	f023 0203 	bic.w	r2, r3, #3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4958      	ldr	r1, [pc, #352]	@ (80031f0 <HAL_RCC_ClockConfig+0x24c>)
 800308e:	4313      	orrs	r3, r2
 8003090:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003092:	f7fe fb5f 	bl	8001754 <HAL_GetTick>
 8003096:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8003098:	e00a      	b.n	80030b0 <HAL_RCC_ClockConfig+0x10c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800309a:	f7fe fb5b 	bl	8001754 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e099      	b.n	80031e4 <HAL_RCC_ClockConfig+0x240>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 80030b0:	4b4f      	ldr	r3, [pc, #316]	@ (80031f0 <HAL_RCC_ClockConfig+0x24c>)
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	f003 020c 	and.w	r2, r3, #12
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	429a      	cmp	r2, r3
 80030c0:	d1eb      	bne.n	800309a <HAL_RCC_ClockConfig+0xf6>
      }
    }

    /* If PLL1rCLK is asked to be SYSCLK source, clear prediv. */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	d118      	bne.n	80030fc <HAL_RCC_ClockConfig+0x158>
    {
      /* Set PLL1R prediv to not divided */
      CLEAR_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRE);
 80030ca:	4b49      	ldr	r3, [pc, #292]	@ (80031f0 <HAL_RCC_ClockConfig+0x24c>)
 80030cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ce:	4a48      	ldr	r2, [pc, #288]	@ (80031f0 <HAL_RCC_ClockConfig+0x24c>)
 80030d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80030d4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d6:	f7fe fb3d 	bl	8001754 <HAL_GetTick>
 80030da:	60f8      	str	r0, [r7, #12]

      /* Wait until PLL1 not divided is ready */
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_ClockConfig+0x14c>
      {
        if ((HAL_GetTick() - tickstart) > PLL1_NDIV_TIMEOUT_VALUE)
 80030de:	f7fe fb39 	bl	8001754 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b0a      	cmp	r3, #10
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_ClockConfig+0x14c>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e079      	b.n	80031e4 <HAL_RCC_ClockConfig+0x240>
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 80030f0:	4b3f      	ldr	r3, [pc, #252]	@ (80031f0 <HAL_RCC_ClockConfig+0x24c>)
 80030f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 80030fc:	4b3c      	ldr	r3, [pc, #240]	@ (80031f0 <HAL_RCC_ClockConfig+0x24c>)
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f023 0307 	bic.w	r3, r3, #7
 8003118:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8003124:	2301      	movs	r3, #1
 8003126:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800313a:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8003146:	2301      	movs	r3, #1
 8003148:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00b      	beq.n	800316e <HAL_RCC_ClockConfig+0x1ca>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800315c:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 800316a:	2301      	movs	r3, #1
 800316c:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <HAL_RCC_ClockConfig+0x1d6>
  {
    RCC->CFGR2 = tmpreg1;
 8003174:	4a1e      	ldr	r2, [pc, #120]	@ (80031f0 <HAL_RCC_ClockConfig+0x24c>)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK7 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK7) == RCC_CLOCKTYPE_PCLK7)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB7CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB7CLKDivider);
 8003186:	4a1a      	ldr	r2, [pc, #104]	@ (80031f0 <HAL_RCC_ClockConfig+0x24c>)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800318e:	4b17      	ldr	r3, [pc, #92]	@ (80031ec <HAL_RCC_ClockConfig+0x248>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d210      	bcs.n	80031be <HAL_RCC_ClockConfig+0x21a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319c:	4b13      	ldr	r3, [pc, #76]	@ (80031ec <HAL_RCC_ClockConfig+0x248>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f023 020f 	bic.w	r2, r3, #15
 80031a4:	4911      	ldr	r1, [pc, #68]	@ (80031ec <HAL_RCC_ClockConfig+0x248>)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ac:	4b0f      	ldr	r3, [pc, #60]	@ (80031ec <HAL_RCC_ClockConfig+0x248>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d001      	beq.n	80031be <HAL_RCC_ClockConfig+0x21a>
    {
      return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e012      	b.n	80031e4 <HAL_RCC_ClockConfig+0x240>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80031be:	f000 f81f 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 80031c2:	4602      	mov	r2, r0
 80031c4:	4b0a      	ldr	r3, [pc, #40]	@ (80031f0 <HAL_RCC_ClockConfig+0x24c>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4909      	ldr	r1, [pc, #36]	@ (80031f4 <HAL_RCC_ClockConfig+0x250>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
 80031d4:	4a08      	ldr	r2, [pc, #32]	@ (80031f8 <HAL_RCC_ClockConfig+0x254>)
 80031d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80031d8:	4b08      	ldr	r3, [pc, #32]	@ (80031fc <HAL_RCC_ClockConfig+0x258>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fe fa27 	bl	8001630 <HAL_InitTick>
 80031e2:	4603      	mov	r3, r0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40022000 	.word	0x40022000
 80031f0:	46020c00 	.word	0x46020c00
 80031f4:	080048ac 	.word	0x080048ac
 80031f8:	20000010 	.word	0x20000010
 80031fc:	20000044 	.word	0x20000044

08003200 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
  uint32_t sysclk;

  /* Get SYSCLK source */
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003206:	4b10      	ldr	r3, [pc, #64]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x48>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	607b      	str	r3, [r7, #4]

  if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d102      	bne.n	800321c <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 8003216:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <HAL_RCC_GetSysClockFreq+0x4c>)
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	e00f      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b08      	cmp	r3, #8
 8003220:	d109      	bne.n	8003236 <HAL_RCC_GetSysClockFreq+0x36>
  {
    /* HSE used as system clock source. Check if HSE is divided by 2 */
    sysclk = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8003222:	4b09      	ldr	r3, [pc, #36]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x48>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	0d1b      	lsrs	r3, r3, #20
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	4a08      	ldr	r2, [pc, #32]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x50>)
 800322e:	fa22 f303 	lsr.w	r3, r2, r3
 8003232:	607b      	str	r3, [r7, #4]
 8003234:	e002      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else
  {
    /* PLL1 used as system clock source */
    sysclk = HAL_RCC_GetPLL1RFreq();
 8003236:	f000 f863 	bl	8003300 <HAL_RCC_GetPLL1RFreq>
 800323a:	6078      	str	r0, [r7, #4]
  }

  return sysclk;
 800323c:	687b      	ldr	r3, [r7, #4]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	46020c00 	.word	0x46020c00
 800324c:	00f42400 	.word	0x00f42400
 8003250:	01e84800 	.word	0x01e84800

08003254 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003258:	f7ff ffd2 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b07      	ldr	r3, [pc, #28]	@ (800327c <HAL_RCC_GetHCLKFreq+0x28>)
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	4906      	ldr	r1, [pc, #24]	@ (8003280 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003268:	5ccb      	ldrb	r3, [r1, r3]
 800326a:	fa22 f303 	lsr.w	r3, r2, r3
 800326e:	4a05      	ldr	r2, [pc, #20]	@ (8003284 <HAL_RCC_GetHCLKFreq+0x30>)
 8003270:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003272:	4b04      	ldr	r3, [pc, #16]	@ (8003284 <HAL_RCC_GetHCLKFreq+0x30>)
 8003274:	681b      	ldr	r3, [r3, #0]
}
 8003276:	4618      	mov	r0, r3
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	46020c00 	.word	0x46020c00
 8003280:	080048ac 	.word	0x080048ac
 8003284:	20000010 	.word	0x20000010

08003288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800328c:	f7ff ffe2 	bl	8003254 <HAL_RCC_GetHCLKFreq>
 8003290:	4602      	mov	r2, r0
 8003292:	4b05      	ldr	r3, [pc, #20]	@ (80032a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	091b      	lsrs	r3, r3, #4
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	4903      	ldr	r1, [pc, #12]	@ (80032ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800329e:	5ccb      	ldrb	r3, [r1, r3]
 80032a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	46020c00 	.word	0x46020c00
 80032ac:	080048b4 	.word	0x080048b4

080032b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80032b4:	f7ff ffce 	bl	8003254 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	@ (80032d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4903      	ldr	r1, [pc, #12]	@ (80032d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	46020c00 	.word	0x46020c00
 80032d4:	080048b4 	.word	0x080048b4

080032d8 <HAL_RCC_GetPCLK7Freq>:
  * @note   Each time PCLK7 changes, this function must be called to update the
  *         right PCLK7 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK7 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK7Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK7 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE7) >> RCC_CFGR3_PPRE7_Pos]);
 80032dc:	f7ff ffba 	bl	8003254 <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <HAL_RCC_GetPCLK7Freq+0x20>)
 80032e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4903      	ldr	r1, [pc, #12]	@ (80032fc <HAL_RCC_GetPCLK7Freq+0x24>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	46020c00 	.word	0x46020c00
 80032fc:	080048b4 	.word	0x080048b4

08003300 <HAL_RCC_GetPLL1RFreq>:
/**
  * @brief  Return the PLL1R frequency.
  * @retval PLL1R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL1RFreq(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL1R divider */
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8003306:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <HAL_RCC_GetPLL1RFreq+0x34>)
 8003308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330a:	0e1b      	lsrs	r3, r3, #24
 800330c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003310:	3301      	adds	r3, #1
 8003312:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL1R one */
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 8003314:	f000 f810 	bl	8003338 <RCC_PLL1_GetVCOOutputFreq>
 8003318:	eef0 7a40 	vmov.f32	s15, s0
 800331c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003320:	ee17 2a90 	vmov	r2, s15
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	46020c00 	.word	0x46020c00

08003338 <RCC_PLL1_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL1 VCO output frequency
  * @retval Value of PLL1 VCO output frequency
  */
static float_t RCC_PLL1_GetVCOOutputFreq(void)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
  float_t pllm;
  float_t plln;
  float_t pllfracn;

  /* Get PLL1 DIVR register value */
  tmpreg1 = RCC->PLL1DIVR;
 800333e:	4b36      	ldr	r3, [pc, #216]	@ (8003418 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8003340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003342:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 multiplication factor */
  tmp = (tmpreg1 & RCC_PLL1DIVR_PLL1N) + 1U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800334a:	3301      	adds	r3, #1
 800334c:	617b      	str	r3, [r7, #20]
  plln = (float_t) tmp;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	ee07 3a90 	vmov	s15, r3
 8003354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003358:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Get PLL1 CFGR register value */
  tmpreg1 = RCC->PLL1CFGR;
 800335c:	4b2e      	ldr	r3, [pc, #184]	@ (8003418 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 800335e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003360:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 divider */
  tmp = ((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	3301      	adds	r3, #1
 800336c:	617b      	str	r3, [r7, #20]
  pllm = (float_t) tmp;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	ee07 3a90 	vmov	s15, r3
 8003374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003378:	edc7 7a01 	vstr	s15, [r7, #4]

  /* Check if fractional part is enable */
  if ((tmpreg1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <RCC_PLL1_GetVCOOutputFreq+0x5c>
  {
    tmp = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 8003386:	4b24      	ldr	r3, [pc, #144]	@ (8003418 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8003388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338a:	08db      	lsrs	r3, r3, #3
 800338c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e001      	b.n	8003398 <RCC_PLL1_GetVCOOutputFreq+0x60>
  }
  else
  {
    tmp = 0u;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
  }
  pllfracn = (float_t)tmp;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a2:	edc7 7a00 	vstr	s15, [r7]

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLL1CFGR_PLL1SRC)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d002      	beq.n	80033b6 <RCC_PLL1_GetVCOOutputFreq+0x7e>
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d003      	beq.n	80033bc <RCC_PLL1_GetVCOOutputFreq+0x84>
 80033b4:	e013      	b.n	80033de <RCC_PLL1_GetVCOOutputFreq+0xa6>
  {
    /* HSI used as PLL1 clock source */
    case RCC_PLLSOURCE_HSI:
      pllsrc = (float_t)HSI_VALUE;
 80033b6:	4b19      	ldr	r3, [pc, #100]	@ (800341c <RCC_PLL1_GetVCOOutputFreq+0xe4>)
 80033b8:	613b      	str	r3, [r7, #16]
      break;
 80033ba:	e014      	b.n	80033e6 <RCC_PLL1_GetVCOOutputFreq+0xae>

    /* HSE used as PLL1 clock source */
    case RCC_PLLSOURCE_HSE:
      tmp = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 80033bc:	4b16      	ldr	r3, [pc, #88]	@ (8003418 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	0d1b      	lsrs	r3, r3, #20
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	4a16      	ldr	r2, [pc, #88]	@ (8003420 <RCC_PLL1_GetVCOOutputFreq+0xe8>)
 80033c8:	fa22 f303 	lsr.w	r3, r2, r3
 80033cc:	617b      	str	r3, [r7, #20]
      pllsrc = (float_t)tmp;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	ee07 3a90 	vmov	s15, r3
 80033d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d8:	edc7 7a04 	vstr	s15, [r7, #16]
      break;
 80033dc:	e003      	b.n	80033e6 <RCC_PLL1_GetVCOOutputFreq+0xae>

    default:
      pllsrc = (float_t)0;
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	613b      	str	r3, [r7, #16]
      break;
 80033e4:	bf00      	nop
  }

  /* Compute VCO output frequency */
  return ((pllsrc / pllm) * (plln + (pllfracn / (float_t)0x2000u)));
 80033e6:	edd7 6a04 	vldr	s13, [r7, #16]
 80033ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80033ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f2:	edd7 7a00 	vldr	s15, [r7]
 80033f6:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8003424 <RCC_PLL1_GetVCOOutputFreq+0xec>
 80033fa:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80033fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003406:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800340a:	eeb0 0a67 	vmov.f32	s0, s15
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	46020c00 	.word	0x46020c00
 800341c:	4b742400 	.word	0x4b742400
 8003420:	01e84800 	.word	0x01e84800
 8003424:	46000000 	.word	0x46000000

08003428 <HAL_RCCEx_PeriphCLKConfig>:
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800343c:	4b95      	ldr	r3, [pc, #596]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800343e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003442:	f023 0203 	bic.w	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4992      	ldr	r1, [pc, #584]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

#if defined (USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800345e:	4b8d      	ldr	r3, [pc, #564]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003464:	f023 020c 	bic.w	r2, r3, #12
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	4989      	ldr	r1, [pc, #548]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
#endif


#if defined (I2C1)
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003480:	4b84      	ldr	r3, [pc, #528]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003486:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	4981      	ldr	r1, [pc, #516]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0



#if defined (LPTIM2)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034a2:	4b7c      	ldr	r3, [pc, #496]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80034a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	4978      	ldr	r1, [pc, #480]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }
#endif

#if defined (SPI1)
  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 80034c4:	4b73      	ldr	r3, [pc, #460]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80034c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	4970      	ldr	r1, [pc, #448]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }
#endif

  /*-------------------------- SYSTICK clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SYSTICK) == RCC_PERIPHCLK_SYSTICK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SYSTICKCLKSOURCE(PeriphClkInit->SystickClockSelection));

    /* Configure the SYSTICK clock source */
    __HAL_RCC_SYSTICK_CONFIG(PeriphClkInit->SystickClockSelection);
 80034e6:	4b6b      	ldr	r3, [pc, #428]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80034e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034ec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	4967      	ldr	r1, [pc, #412]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- TIMIC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMIC) == RCC_PERIPHCLK_TIMIC)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMICCLKSOURCE(PeriphClkInit->TimIcClockSelection));

    /* Configure the TIMIC clock source */
    __HAL_RCC_TIMIC_CONFIG(PeriphClkInit->TimIcClockSelection);
 8003508:	4b62      	ldr	r3, [pc, #392]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800350a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800350e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	495f      	ldr	r1, [pc, #380]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
    }
  }
#endif

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003526:	2b00      	cmp	r3, #0
 8003528:	d015      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Set the source of RNG clock*/
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800352a:	4b5a      	ldr	r3, [pc, #360]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800352c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003530:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	4956      	ldr	r1, [pc, #344]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL1Q)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003548:	d105      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x12e>
    {
      /* Enable PLL1 QCLK output */
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_QCLK);
 800354a:	4b52      	ldr	r3, [pc, #328]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800354c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354e:	4a51      	ldr	r2, [pc, #324]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003554:	6293      	str	r3, [r2, #40]	@ 0x28
    }
  }
#endif

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003562:	4b4c      	ldr	r3, [pc, #304]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003568:	f023 0203 	bic.w	r2, r3, #3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003570:	4948      	ldr	r1, [pc, #288]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
 8003584:	4b43      	ldr	r3, [pc, #268]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003586:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800358a:	f023 0218 	bic.w	r2, r3, #24
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003592:	4940      	ldr	r1, [pc, #256]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }


  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035ac:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b4:	4937      	ldr	r1, [pc, #220]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035c8:	4b32      	ldr	r3, [pc, #200]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	492f      	ldr	r1, [pc, #188]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d015      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC4 interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035f0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f8:	4926      	ldr	r1, [pc, #152]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

    if (PeriphClkInit->AdcClockSelection == RCC_PERIPHCLK_ADC)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003604:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003608:	d105      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      /* Enable PLL1 PCLK output */
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_PCLK);
 800360a:	4b22      	ldr	r3, [pc, #136]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800360c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360e:	4a21      	ldr	r2, [pc, #132]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003614:	6293      	str	r3, [r2, #40]	@ 0x28
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 808d 	beq.w	800373e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003624:	2300      	movs	r3, #0
 8003626:	77fb      	strb	r3, [r7, #31]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
    tmpreg2 = __HAL_RCC_GET_RTC_SOURCE();
 8003628:	4b1a      	ldr	r3, [pc, #104]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800362a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800362e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003632:	61bb      	str	r3, [r7, #24]

    /* Check if RTC clock source needs to be changed */
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	429a      	cmp	r2, r3
 800363c:	d07f      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      /* Enable Power Clock */
      if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01u)
 800363e:	4b15      	ldr	r3, [pc, #84]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003640:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d110      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x246>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800364c:	4b11      	ldr	r3, [pc, #68]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800364e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003652:	4a10      	ldr	r2, [pc, #64]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003654:	f043 0304 	orr.w	r3, r3, #4
 8003658:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800365c:	4b0d      	ldr	r3, [pc, #52]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800365e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800366a:	2301      	movs	r3, #1
 800366c:	77fb      	strb	r3, [r7, #31]
      }

      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800366e:	4b0a      	ldr	r3, [pc, #40]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003672:	4a09      	ldr	r2, [pc, #36]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800367a:	f7fe f86b 	bl	8001754 <HAL_GetTick>
 800367e:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003680:	e00c      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x274>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003682:	f7fe f867 	bl	8001754 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d905      	bls.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x274>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e071      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003694:	46020c00 	.word	0x46020c00
 8003698:	46020800 	.word	0x46020800
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800369c:	4b38      	ldr	r3, [pc, #224]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800369e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ec      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }

      /* Save BDCR1 content */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_RTCSEL);
 80036a8:	4b36      	ldr	r3, [pc, #216]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b2:	613b      	str	r3, [r7, #16]

      /* Check if a backup domain reset is required */
      if (tmpreg2 != RCC_RTCCLKSOURCE_DISABLE)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00f      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x2b2>
#if defined(RCC_LSI2_SUPPORT)
        /* Save BDCR2 content */
        tmpreg2 = RCC->BDCR2;
#endif /* RCC_LSI2_SUPPORT */
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036ba:	4b32      	ldr	r3, [pc, #200]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036c0:	4a30      	ldr	r2, [pc, #192]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        RCC->BDCR2 = tmpreg2;
#endif /* RCC_LSI2_SUPPORT */
      }

      /* Apply new RTC clock source selection */
      RCC->BDCR1 = (tmpreg1 | PeriphClkInit->RTCClockSelection);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036de:	4929      	ldr	r1, [pc, #164]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0

      /* mask all ON bits */
      tmpreg2 = (RCC_BDCR1_LSEON | RCC_BDCR1_LSI1ON);
 80036e8:	4b27      	ldr	r3, [pc, #156]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80036ea:	61bb      	str	r3, [r7, #24]
#if defined(RCC_LSI2_SUPPORT)
      tmpreg2 |= RCC_BDCR1_LSI2ON;
#endif

      /* Check which oscillators were enable */
      tmpreg2 &= tmpreg1;
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4013      	ands	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]

      if (tmpreg2 != 0x00u)
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d016      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fa:	f7fe f82b 	bl	8001754 <HAL_GetTick>
 80036fe:	6178      	str	r0, [r7, #20]

        /* Wait till all oscillators are enabled : RDY bit position is ON shifted by 1 */
        while (READ_BIT(RCC->BDCR1, (tmpreg2 << 1)) == 0x00u)
 8003700:	e00a      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003702:	f7fe f827 	bl	8001754 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e02f      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x350>
        while (READ_BIT(RCC->BDCR1, (tmpreg2 << 1)) == 0x00u)
 8003718:	4b1a      	ldr	r3, [pc, #104]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800371a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	4013      	ands	r3, r2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0ec      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x2da>
          }
        }
      }
      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003728:	7ffb      	ldrb	r3, [r7, #31]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d107      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800372e:	4b15      	ldr	r3, [pc, #84]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003730:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003734:	4a13      	ldr	r2, [pc, #76]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003736:	f023 0304 	bic.w	r3, r3, #4
 800373a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }
    }
  }

  /*-------------------------- RADIO Sleep Timer clock source configuration --*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RADIOST) == RCC_PERIPHCLK_RADIOST)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d015      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RADIOSLEEPTIMERSOURCE(PeriphClkInit->RadioSlpTimClockSelection));

    /* Configure the RADIO Sleep Timer clock source */
    __HAL_RCC_RADIOSLPTIM_CONFIG(PeriphClkInit->RadioSlpTimClockSelection);
 800374a:	4b0e      	ldr	r3, [pc, #56]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800374c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003750:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003758:	490a      	ldr	r1, [pc, #40]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0

    /* Check configuration validity as under Backup domain access control */
    if (__HAL_RCC_GET_RADIOSLPTIM_SOURCE() != PeriphClkInit->RadioSlpTimClockSelection)
 8003760:	4b08      	ldr	r3, [pc, #32]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003762:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003766:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800376e:	429a      	cmp	r2, r3
 8003770:	d001      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x350>
    }
  }

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3720      	adds	r7, #32
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	46020800 	.word	0x46020800
 8003784:	46020c00 	.word	0x46020c00
 8003788:	04000001 	.word	0x04000001

0800378c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e049      	b.n	8003832 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fd fba8 	bl	8000f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4619      	mov	r1, r3
 80037ca:	4610      	mov	r0, r2
 80037cc:	f000 f878 	bl	80038c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_TIM_SlaveConfigSynchro+0x18>
 800384e:	2302      	movs	r3, #2
 8003850:	e031      	b.n	80038b6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2202      	movs	r2, #2
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003862:	6839      	ldr	r1, [r7, #0]
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f8a5 	bl	80039b4 <TIM_SlaveTimer_SetConfig>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d009      	beq.n	8003884 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e018      	b.n	80038b6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003892:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80038a2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a34      	ldr	r2, [pc, #208]	@ (80039a4 <TIM_Base_SetConfig+0xe4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d007      	beq.n	80038e8 <TIM_Base_SetConfig+0x28>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038de:	d003      	beq.n	80038e8 <TIM_Base_SetConfig+0x28>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a31      	ldr	r2, [pc, #196]	@ (80039a8 <TIM_Base_SetConfig+0xe8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d108      	bne.n	80038fa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a29      	ldr	r2, [pc, #164]	@ (80039a4 <TIM_Base_SetConfig+0xe4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00f      	beq.n	8003922 <TIM_Base_SetConfig+0x62>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003908:	d00b      	beq.n	8003922 <TIM_Base_SetConfig+0x62>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a26      	ldr	r2, [pc, #152]	@ (80039a8 <TIM_Base_SetConfig+0xe8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <TIM_Base_SetConfig+0x62>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a25      	ldr	r2, [pc, #148]	@ (80039ac <TIM_Base_SetConfig+0xec>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d003      	beq.n	8003922 <TIM_Base_SetConfig+0x62>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a24      	ldr	r2, [pc, #144]	@ (80039b0 <TIM_Base_SetConfig+0xf0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d108      	bne.n	8003934 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a12      	ldr	r2, [pc, #72]	@ (80039a4 <TIM_Base_SetConfig+0xe4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d007      	beq.n	8003970 <TIM_Base_SetConfig+0xb0>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a12      	ldr	r2, [pc, #72]	@ (80039ac <TIM_Base_SetConfig+0xec>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d003      	beq.n	8003970 <TIM_Base_SetConfig+0xb0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a11      	ldr	r2, [pc, #68]	@ (80039b0 <TIM_Base_SetConfig+0xf0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d103      	bne.n	8003978 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b01      	cmp	r3, #1
 8003988:	d105      	bne.n	8003996 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f023 0201 	bic.w	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	611a      	str	r2, [r3, #16]
  }
}
 8003996:	bf00      	nop
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40012c00 	.word	0x40012c00
 80039a8:	40000400 	.word	0x40000400
 80039ac:	40014400 	.word	0x40014400
 80039b0:	40014800 	.word	0x40014800

080039b4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80039d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039d4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039e6:	f023 0307 	bic.w	r3, r3, #7
 80039ea:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4a3d      	ldr	r2, [pc, #244]	@ (8003af8 <TIM_SlaveTimer_SetConfig+0x144>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d071      	beq.n	8003aec <TIM_SlaveTimer_SetConfig+0x138>
 8003a08:	4a3b      	ldr	r2, [pc, #236]	@ (8003af8 <TIM_SlaveTimer_SetConfig+0x144>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d86b      	bhi.n	8003ae6 <TIM_SlaveTimer_SetConfig+0x132>
 8003a0e:	4a3b      	ldr	r2, [pc, #236]	@ (8003afc <TIM_SlaveTimer_SetConfig+0x148>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d06b      	beq.n	8003aec <TIM_SlaveTimer_SetConfig+0x138>
 8003a14:	4a39      	ldr	r2, [pc, #228]	@ (8003afc <TIM_SlaveTimer_SetConfig+0x148>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d865      	bhi.n	8003ae6 <TIM_SlaveTimer_SetConfig+0x132>
 8003a1a:	2b70      	cmp	r3, #112	@ 0x70
 8003a1c:	d016      	beq.n	8003a4c <TIM_SlaveTimer_SetConfig+0x98>
 8003a1e:	2b70      	cmp	r3, #112	@ 0x70
 8003a20:	d861      	bhi.n	8003ae6 <TIM_SlaveTimer_SetConfig+0x132>
 8003a22:	2b60      	cmp	r3, #96	@ 0x60
 8003a24:	d055      	beq.n	8003ad2 <TIM_SlaveTimer_SetConfig+0x11e>
 8003a26:	2b60      	cmp	r3, #96	@ 0x60
 8003a28:	d85d      	bhi.n	8003ae6 <TIM_SlaveTimer_SetConfig+0x132>
 8003a2a:	2b50      	cmp	r3, #80	@ 0x50
 8003a2c:	d047      	beq.n	8003abe <TIM_SlaveTimer_SetConfig+0x10a>
 8003a2e:	2b50      	cmp	r3, #80	@ 0x50
 8003a30:	d859      	bhi.n	8003ae6 <TIM_SlaveTimer_SetConfig+0x132>
 8003a32:	2b40      	cmp	r3, #64	@ 0x40
 8003a34:	d015      	beq.n	8003a62 <TIM_SlaveTimer_SetConfig+0xae>
 8003a36:	2b40      	cmp	r3, #64	@ 0x40
 8003a38:	d855      	bhi.n	8003ae6 <TIM_SlaveTimer_SetConfig+0x132>
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d056      	beq.n	8003aec <TIM_SlaveTimer_SetConfig+0x138>
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	d851      	bhi.n	8003ae6 <TIM_SlaveTimer_SetConfig+0x132>
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d052      	beq.n	8003aec <TIM_SlaveTimer_SetConfig+0x138>
 8003a46:	2b10      	cmp	r3, #16
 8003a48:	d050      	beq.n	8003aec <TIM_SlaveTimer_SetConfig+0x138>
 8003a4a:	e04c      	b.n	8003ae6 <TIM_SlaveTimer_SetConfig+0x132>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003a5c:	f000 f8af 	bl	8003bbe <TIM_ETR_SetConfig>
      break;
 8003a60:	e045      	b.n	8003aee <TIM_SlaveTimer_SetConfig+0x13a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b05      	cmp	r3, #5
 8003a68:	d004      	beq.n	8003a74 <TIM_SlaveTimer_SetConfig+0xc0>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8003a6e:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8003a72:	d101      	bne.n	8003a78 <TIM_SlaveTimer_SetConfig+0xc4>
      {
        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e03b      	b.n	8003af0 <TIM_SlaveTimer_SetConfig+0x13c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6a1a      	ldr	r2, [r3, #32]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0201 	bic.w	r2, r2, #1
 8003a8e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a9e:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	621a      	str	r2, [r3, #32]
      break;
 8003abc:	e017      	b.n	8003aee <TIM_SlaveTimer_SetConfig+0x13a>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aca:	461a      	mov	r2, r3
 8003acc:	f000 f818 	bl	8003b00 <TIM_TI1_ConfigInputStage>
      break;
 8003ad0:	e00d      	b.n	8003aee <TIM_SlaveTimer_SetConfig+0x13a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f000 f83d 	bl	8003b5e <TIM_TI2_ConfigInputStage>
      break;
 8003ae4:	e003      	b.n	8003aee <TIM_SlaveTimer_SetConfig+0x13a>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8003aea:	e000      	b.n	8003aee <TIM_SlaveTimer_SetConfig+0x13a>
      break;
 8003aec:	bf00      	nop
  }

  return status;
 8003aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	00100040 	.word	0x00100040
 8003afc:	00100030 	.word	0x00100030

08003b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f023 0201 	bic.w	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 030a 	bic.w	r3, r3, #10
 8003b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	621a      	str	r2, [r3, #32]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b087      	sub	sp, #28
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	f023 0210 	bic.w	r2, r3, #16
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	031b      	lsls	r3, r3, #12
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b087      	sub	sp, #28
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
 8003bca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	021a      	lsls	r2, r3, #8
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	609a      	str	r2, [r3, #8]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e051      	b.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a22      	ldr	r2, [pc, #136]	@ (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d108      	bne.n	8003c54 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003c48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a14      	ldr	r2, [pc, #80]	@ (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d009      	beq.n	8003c90 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c84:	d004      	beq.n	8003c90 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a10      	ldr	r2, [pc, #64]	@ (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d10c      	bne.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	40012c00 	.word	0x40012c00
 8003ccc:	40000400 	.word	0x40000400

08003cd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e042      	b.n	8003d68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d106      	bne.n	8003cfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f83b 	bl	8003d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2224      	movs	r2, #36	@ 0x24
 8003cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0201 	bic.w	r2, r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fad0 	bl	80042c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f82f 	bl	8003d84 <UART_SetConfig>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e01b      	b.n	8003d68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fb4f 	bl	8004404 <UART_CheckIdleState>
 8003d66:	4603      	mov	r3, r0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d88:	b08c      	sub	sp, #48	@ 0x30
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4b98      	ldr	r3, [pc, #608]	@ (8004014 <UART_SetConfig+0x290>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a8d      	ldr	r2, [pc, #564]	@ (8004018 <UART_SetConfig+0x294>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d004      	beq.n	8003df0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dec:	4313      	orrs	r3, r2
 8003dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003dfa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e04:	430b      	orrs	r3, r1
 8003e06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0e:	f023 010f 	bic.w	r1, r3, #15
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a7e      	ldr	r2, [pc, #504]	@ (800401c <UART_SetConfig+0x298>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d125      	bne.n	8003e74 <UART_SetConfig+0xf0>
 8003e28:	4b7d      	ldr	r3, [pc, #500]	@ (8004020 <UART_SetConfig+0x29c>)
 8003e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d81a      	bhi.n	8003e6c <UART_SetConfig+0xe8>
 8003e36:	a201      	add	r2, pc, #4	@ (adr r2, 8003e3c <UART_SetConfig+0xb8>)
 8003e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3c:	08003e4d 	.word	0x08003e4d
 8003e40:	08003e5d 	.word	0x08003e5d
 8003e44:	08003e55 	.word	0x08003e55
 8003e48:	08003e65 	.word	0x08003e65
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e52:	e07c      	b.n	8003f4e <UART_SetConfig+0x1ca>
 8003e54:	2304      	movs	r3, #4
 8003e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e5a:	e078      	b.n	8003f4e <UART_SetConfig+0x1ca>
 8003e5c:	2308      	movs	r3, #8
 8003e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e62:	e074      	b.n	8003f4e <UART_SetConfig+0x1ca>
 8003e64:	2310      	movs	r3, #16
 8003e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e6a:	e070      	b.n	8003f4e <UART_SetConfig+0x1ca>
 8003e6c:	2320      	movs	r3, #32
 8003e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e72:	e06c      	b.n	8003f4e <UART_SetConfig+0x1ca>
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a6a      	ldr	r2, [pc, #424]	@ (8004024 <UART_SetConfig+0x2a0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d138      	bne.n	8003ef0 <UART_SetConfig+0x16c>
 8003e7e:	4b68      	ldr	r3, [pc, #416]	@ (8004020 <UART_SetConfig+0x29c>)
 8003e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e84:	f003 030c 	and.w	r3, r3, #12
 8003e88:	2b0c      	cmp	r3, #12
 8003e8a:	d82d      	bhi.n	8003ee8 <UART_SetConfig+0x164>
 8003e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e94 <UART_SetConfig+0x110>)
 8003e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e92:	bf00      	nop
 8003e94:	08003ec9 	.word	0x08003ec9
 8003e98:	08003ee9 	.word	0x08003ee9
 8003e9c:	08003ee9 	.word	0x08003ee9
 8003ea0:	08003ee9 	.word	0x08003ee9
 8003ea4:	08003ed9 	.word	0x08003ed9
 8003ea8:	08003ee9 	.word	0x08003ee9
 8003eac:	08003ee9 	.word	0x08003ee9
 8003eb0:	08003ee9 	.word	0x08003ee9
 8003eb4:	08003ed1 	.word	0x08003ed1
 8003eb8:	08003ee9 	.word	0x08003ee9
 8003ebc:	08003ee9 	.word	0x08003ee9
 8003ec0:	08003ee9 	.word	0x08003ee9
 8003ec4:	08003ee1 	.word	0x08003ee1
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ece:	e03e      	b.n	8003f4e <UART_SetConfig+0x1ca>
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ed6:	e03a      	b.n	8003f4e <UART_SetConfig+0x1ca>
 8003ed8:	2308      	movs	r3, #8
 8003eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ede:	e036      	b.n	8003f4e <UART_SetConfig+0x1ca>
 8003ee0:	2310      	movs	r3, #16
 8003ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ee6:	e032      	b.n	8003f4e <UART_SetConfig+0x1ca>
 8003ee8:	2320      	movs	r3, #32
 8003eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eee:	e02e      	b.n	8003f4e <UART_SetConfig+0x1ca>
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a48      	ldr	r2, [pc, #288]	@ (8004018 <UART_SetConfig+0x294>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d126      	bne.n	8003f48 <UART_SetConfig+0x1c4>
 8003efa:	4b49      	ldr	r3, [pc, #292]	@ (8004020 <UART_SetConfig+0x29c>)
 8003efc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f00:	f003 0303 	and.w	r3, r3, #3
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d81b      	bhi.n	8003f40 <UART_SetConfig+0x1bc>
 8003f08:	a201      	add	r2, pc, #4	@ (adr r2, 8003f10 <UART_SetConfig+0x18c>)
 8003f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0e:	bf00      	nop
 8003f10:	08003f21 	.word	0x08003f21
 8003f14:	08003f31 	.word	0x08003f31
 8003f18:	08003f29 	.word	0x08003f29
 8003f1c:	08003f39 	.word	0x08003f39
 8003f20:	2302      	movs	r3, #2
 8003f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f26:	e012      	b.n	8003f4e <UART_SetConfig+0x1ca>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f2e:	e00e      	b.n	8003f4e <UART_SetConfig+0x1ca>
 8003f30:	2308      	movs	r3, #8
 8003f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f36:	e00a      	b.n	8003f4e <UART_SetConfig+0x1ca>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f3e:	e006      	b.n	8003f4e <UART_SetConfig+0x1ca>
 8003f40:	2320      	movs	r3, #32
 8003f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f46:	e002      	b.n	8003f4e <UART_SetConfig+0x1ca>
 8003f48:	2320      	movs	r3, #32
 8003f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a31      	ldr	r2, [pc, #196]	@ (8004018 <UART_SetConfig+0x294>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	f040 80b4 	bne.w	80040c2 <UART_SetConfig+0x33e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f5e:	3b02      	subs	r3, #2
 8003f60:	2b0e      	cmp	r3, #14
 8003f62:	d830      	bhi.n	8003fc6 <UART_SetConfig+0x242>
 8003f64:	a201      	add	r2, pc, #4	@ (adr r2, 8003f6c <UART_SetConfig+0x1e8>)
 8003f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6a:	bf00      	nop
 8003f6c:	08003fa9 	.word	0x08003fa9
 8003f70:	08003fc7 	.word	0x08003fc7
 8003f74:	08003fb1 	.word	0x08003fb1
 8003f78:	08003fc7 	.word	0x08003fc7
 8003f7c:	08003fc7 	.word	0x08003fc7
 8003f80:	08003fc7 	.word	0x08003fc7
 8003f84:	08003fb7 	.word	0x08003fb7
 8003f88:	08003fc7 	.word	0x08003fc7
 8003f8c:	08003fc7 	.word	0x08003fc7
 8003f90:	08003fc7 	.word	0x08003fc7
 8003f94:	08003fc7 	.word	0x08003fc7
 8003f98:	08003fc7 	.word	0x08003fc7
 8003f9c:	08003fc7 	.word	0x08003fc7
 8003fa0:	08003fc7 	.word	0x08003fc7
 8003fa4:	08003fbf 	.word	0x08003fbf
    {
      case UART_CLOCKSOURCE_PCLK7:
        pclk = HAL_RCC_GetPCLK7Freq();
 8003fa8:	f7ff f996 	bl	80032d8 <HAL_RCC_GetPCLK7Freq>
 8003fac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fae:	e010      	b.n	8003fd2 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8004028 <UART_SetConfig+0x2a4>)
 8003fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003fb4:	e00d      	b.n	8003fd2 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fb6:	f7ff f923 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 8003fba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fbc:	e009      	b.n	8003fd2 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003fc4:	e005      	b.n	8003fd2 <UART_SetConfig+0x24e>
      default:
        pclk = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003fd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 8159 	beq.w	800428c <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	4a13      	ldr	r2, [pc, #76]	@ (800402c <UART_SetConfig+0x2a8>)
 8003fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	4413      	add	r3, r2
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d305      	bcc.n	800400a <UART_SetConfig+0x286>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	429a      	cmp	r2, r3
 8004008:	d912      	bls.n	8004030 <UART_SetConfig+0x2ac>
      {
        ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004010:	e13c      	b.n	800428c <UART_SetConfig+0x508>
 8004012:	bf00      	nop
 8004014:	cfff69f3 	.word	0xcfff69f3
 8004018:	46002400 	.word	0x46002400
 800401c:	40013800 	.word	0x40013800
 8004020:	46020c00 	.word	0x46020c00
 8004024:	40004400 	.word	0x40004400
 8004028:	00f42400 	.word	0x00f42400
 800402c:	080048bc 	.word	0x080048bc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	2200      	movs	r2, #0
 8004034:	60bb      	str	r3, [r7, #8]
 8004036:	60fa      	str	r2, [r7, #12]
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	4a9e      	ldr	r2, [pc, #632]	@ (80042b8 <UART_SetConfig+0x534>)
 800403e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004042:	b29b      	uxth	r3, r3
 8004044:	2200      	movs	r2, #0
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	607a      	str	r2, [r7, #4]
 800404a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800404e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004052:	f7fc f8a3 	bl	800019c <__aeabi_uldivmod>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4610      	mov	r0, r2
 800405c:	4619      	mov	r1, r3
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	020b      	lsls	r3, r1, #8
 8004068:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800406c:	0202      	lsls	r2, r0, #8
 800406e:	6979      	ldr	r1, [r7, #20]
 8004070:	6849      	ldr	r1, [r1, #4]
 8004072:	0849      	lsrs	r1, r1, #1
 8004074:	2000      	movs	r0, #0
 8004076:	460c      	mov	r4, r1
 8004078:	4605      	mov	r5, r0
 800407a:	eb12 0804 	adds.w	r8, r2, r4
 800407e:	eb43 0905 	adc.w	r9, r3, r5
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	469a      	mov	sl, r3
 800408a:	4693      	mov	fp, r2
 800408c:	4652      	mov	r2, sl
 800408e:	465b      	mov	r3, fp
 8004090:	4640      	mov	r0, r8
 8004092:	4649      	mov	r1, r9
 8004094:	f7fc f882 	bl	800019c <__aeabi_uldivmod>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4613      	mov	r3, r2
 800409e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040a6:	d308      	bcc.n	80040ba <UART_SetConfig+0x336>
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040ae:	d204      	bcs.n	80040ba <UART_SetConfig+0x336>
        {
          huart->Instance->BRR = usartdiv;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6a3a      	ldr	r2, [r7, #32]
 80040b6:	60da      	str	r2, [r3, #12]
 80040b8:	e0e8      	b.n	800428c <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80040c0:	e0e4      	b.n	800428c <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ca:	d177      	bne.n	80041bc <UART_SetConfig+0x438>
  {
    switch (clocksource)
 80040cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80040d0:	2b10      	cmp	r3, #16
 80040d2:	d838      	bhi.n	8004146 <UART_SetConfig+0x3c2>
 80040d4:	a201      	add	r2, pc, #4	@ (adr r2, 80040dc <UART_SetConfig+0x358>)
 80040d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040da:	bf00      	nop
 80040dc:	08004121 	.word	0x08004121
 80040e0:	08004129 	.word	0x08004129
 80040e4:	08004147 	.word	0x08004147
 80040e8:	08004147 	.word	0x08004147
 80040ec:	08004131 	.word	0x08004131
 80040f0:	08004147 	.word	0x08004147
 80040f4:	08004147 	.word	0x08004147
 80040f8:	08004147 	.word	0x08004147
 80040fc:	08004137 	.word	0x08004137
 8004100:	08004147 	.word	0x08004147
 8004104:	08004147 	.word	0x08004147
 8004108:	08004147 	.word	0x08004147
 800410c:	08004147 	.word	0x08004147
 8004110:	08004147 	.word	0x08004147
 8004114:	08004147 	.word	0x08004147
 8004118:	08004147 	.word	0x08004147
 800411c:	0800413f 	.word	0x0800413f
    {
#if defined(USART2)
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004120:	f7ff f8b2 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 8004124:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004126:	e014      	b.n	8004152 <UART_SetConfig+0x3ce>
#endif /* USART2 */
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004128:	f7ff f8c2 	bl	80032b0 <HAL_RCC_GetPCLK2Freq>
 800412c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800412e:	e010      	b.n	8004152 <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004130:	4b62      	ldr	r3, [pc, #392]	@ (80042bc <UART_SetConfig+0x538>)
 8004132:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004134:	e00d      	b.n	8004152 <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004136:	f7ff f863 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 800413a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800413c:	e009      	b.n	8004152 <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800413e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004142:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004144:	e005      	b.n	8004152 <UART_SetConfig+0x3ce>
      default:
        pclk = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004150:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 8099 	beq.w	800428c <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	4a56      	ldr	r2, [pc, #344]	@ (80042b8 <UART_SetConfig+0x534>)
 8004160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004164:	461a      	mov	r2, r3
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	fbb3 f3f2 	udiv	r3, r3, r2
 800416c:	005a      	lsls	r2, r3, #1
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	085b      	lsrs	r3, r3, #1
 8004174:	441a      	add	r2, r3
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	fbb2 f3f3 	udiv	r3, r2, r3
 800417e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	2b0f      	cmp	r3, #15
 8004184:	d916      	bls.n	80041b4 <UART_SetConfig+0x430>
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800418c:	d212      	bcs.n	80041b4 <UART_SetConfig+0x430>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	b29b      	uxth	r3, r3
 8004192:	f023 030f 	bic.w	r3, r3, #15
 8004196:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	085b      	lsrs	r3, r3, #1
 800419c:	b29b      	uxth	r3, r3
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	8bfb      	ldrh	r3, [r7, #30]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	8bfa      	ldrh	r2, [r7, #30]
 80041b0:	60da      	str	r2, [r3, #12]
 80041b2:	e06b      	b.n	800428c <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80041ba:	e067      	b.n	800428c <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d838      	bhi.n	8004236 <UART_SetConfig+0x4b2>
 80041c4:	a201      	add	r2, pc, #4	@ (adr r2, 80041cc <UART_SetConfig+0x448>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	08004211 	.word	0x08004211
 80041d0:	08004219 	.word	0x08004219
 80041d4:	08004237 	.word	0x08004237
 80041d8:	08004237 	.word	0x08004237
 80041dc:	08004221 	.word	0x08004221
 80041e0:	08004237 	.word	0x08004237
 80041e4:	08004237 	.word	0x08004237
 80041e8:	08004237 	.word	0x08004237
 80041ec:	08004227 	.word	0x08004227
 80041f0:	08004237 	.word	0x08004237
 80041f4:	08004237 	.word	0x08004237
 80041f8:	08004237 	.word	0x08004237
 80041fc:	08004237 	.word	0x08004237
 8004200:	08004237 	.word	0x08004237
 8004204:	08004237 	.word	0x08004237
 8004208:	08004237 	.word	0x08004237
 800420c:	0800422f 	.word	0x0800422f
    {
#if defined(USART2)
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004210:	f7ff f83a 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 8004214:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004216:	e014      	b.n	8004242 <UART_SetConfig+0x4be>
#endif /* USART2 */
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004218:	f7ff f84a 	bl	80032b0 <HAL_RCC_GetPCLK2Freq>
 800421c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800421e:	e010      	b.n	8004242 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004220:	4b26      	ldr	r3, [pc, #152]	@ (80042bc <UART_SetConfig+0x538>)
 8004222:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004224:	e00d      	b.n	8004242 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004226:	f7fe ffeb 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 800422a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800422c:	e009      	b.n	8004242 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800422e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004232:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004234:	e005      	b.n	8004242 <UART_SetConfig+0x4be>
      default:
        pclk = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004240:	bf00      	nop
    }

    if (pclk != 0U)
 8004242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004244:	2b00      	cmp	r3, #0
 8004246:	d021      	beq.n	800428c <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	4a1a      	ldr	r2, [pc, #104]	@ (80042b8 <UART_SetConfig+0x534>)
 800424e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004252:	461a      	mov	r2, r3
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	fbb3 f2f2 	udiv	r2, r3, r2
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	085b      	lsrs	r3, r3, #1
 8004260:	441a      	add	r2, r3
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	2b0f      	cmp	r3, #15
 8004270:	d909      	bls.n	8004286 <UART_SetConfig+0x502>
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004278:	d205      	bcs.n	8004286 <UART_SetConfig+0x502>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	b29a      	uxth	r2, r3
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60da      	str	r2, [r3, #12]
 8004284:	e002      	b.n	800428c <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2201      	movs	r2, #1
 8004290:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2201      	movs	r2, #1
 8004298:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2200      	movs	r2, #0
 80042a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2200      	movs	r2, #0
 80042a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80042a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3730      	adds	r7, #48	@ 0x30
 80042b0:	46bd      	mov	sp, r7
 80042b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042b6:	bf00      	nop
 80042b8:	080048bc 	.word	0x080048bc
 80042bc:	00f42400 	.word	0x00f42400

080042c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00a      	beq.n	800432e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01a      	beq.n	80043d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043be:	d10a      	bne.n	80043d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	605a      	str	r2, [r3, #4]
  }
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b098      	sub	sp, #96	@ 0x60
 8004408:	af02      	add	r7, sp, #8
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004414:	f7fd f99e 	bl	8001754 <HAL_GetTick>
 8004418:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	2b08      	cmp	r3, #8
 8004426:	d12f      	bne.n	8004488 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004428:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004430:	2200      	movs	r2, #0
 8004432:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f88e 	bl	8004558 <UART_WaitOnFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d022      	beq.n	8004488 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004452:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004456:	653b      	str	r3, [r7, #80]	@ 0x50
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004460:	647b      	str	r3, [r7, #68]	@ 0x44
 8004462:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004466:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800446e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e6      	bne.n	8004442 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e063      	b.n	8004550 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b04      	cmp	r3, #4
 8004494:	d149      	bne.n	800452a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004496:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800449e:	2200      	movs	r2, #0
 80044a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f857 	bl	8004558 <UART_WaitOnFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d03c      	beq.n	800452a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b8:	e853 3f00 	ldrex	r3, [r3]
 80044bc:	623b      	str	r3, [r7, #32]
   return(result);
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80044d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044d6:	e841 2300 	strex	r3, r2, [r1]
 80044da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e6      	bne.n	80044b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3308      	adds	r3, #8
 80044e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f023 0301 	bic.w	r3, r3, #1
 80044f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3308      	adds	r3, #8
 8004500:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004502:	61fa      	str	r2, [r7, #28]
 8004504:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	69b9      	ldr	r1, [r7, #24]
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	617b      	str	r3, [r7, #20]
   return(result);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e5      	bne.n	80044e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e012      	b.n	8004550 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3758      	adds	r7, #88	@ 0x58
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	4613      	mov	r3, r2
 8004566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004568:	e04f      	b.n	800460a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004570:	d04b      	beq.n	800460a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004572:	f7fd f8ef 	bl	8001754 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	429a      	cmp	r2, r3
 8004580:	d302      	bcc.n	8004588 <UART_WaitOnFlagUntilTimeout+0x30>
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e04e      	b.n	800462a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b00      	cmp	r3, #0
 8004598:	d037      	beq.n	800460a <UART_WaitOnFlagUntilTimeout+0xb2>
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b80      	cmp	r3, #128	@ 0x80
 800459e:	d034      	beq.n	800460a <UART_WaitOnFlagUntilTimeout+0xb2>
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b40      	cmp	r3, #64	@ 0x40
 80045a4:	d031      	beq.n	800460a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d110      	bne.n	80045d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2208      	movs	r2, #8
 80045ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f838 	bl	8004632 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2208      	movs	r2, #8
 80045c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e029      	b.n	800462a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045e4:	d111      	bne.n	800460a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f81e 	bl	8004632 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e00f      	b.n	800462a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69da      	ldr	r2, [r3, #28]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4013      	ands	r3, r2
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	429a      	cmp	r2, r3
 8004618:	bf0c      	ite	eq
 800461a:	2301      	moveq	r3, #1
 800461c:	2300      	movne	r3, #0
 800461e:	b2db      	uxtb	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	429a      	cmp	r2, r3
 8004626:	d0a0      	beq.n	800456a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004632:	b480      	push	{r7}
 8004634:	b095      	sub	sp, #84	@ 0x54
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800464e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004658:	643b      	str	r3, [r7, #64]	@ 0x40
 800465a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800465e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e6      	bne.n	800463a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3308      	adds	r3, #8
 8004672:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	61fb      	str	r3, [r7, #28]
   return(result);
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004682:	f023 0301 	bic.w	r3, r3, #1
 8004686:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3308      	adds	r3, #8
 800468e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004690:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004692:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e3      	bne.n	800466c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d118      	bne.n	80046de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f023 0310 	bic.w	r3, r3, #16
 80046c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ca:	61bb      	str	r3, [r7, #24]
 80046cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	6979      	ldr	r1, [r7, #20]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	613b      	str	r3, [r7, #16]
   return(result);
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e6      	bne.n	80046ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80046f2:	bf00      	nop
 80046f4:	3754      	adds	r7, #84	@ 0x54
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <__itoa>:
 80046fe:	1e93      	subs	r3, r2, #2
 8004700:	2b22      	cmp	r3, #34	@ 0x22
 8004702:	b510      	push	{r4, lr}
 8004704:	460c      	mov	r4, r1
 8004706:	d904      	bls.n	8004712 <__itoa+0x14>
 8004708:	2300      	movs	r3, #0
 800470a:	461c      	mov	r4, r3
 800470c:	700b      	strb	r3, [r1, #0]
 800470e:	4620      	mov	r0, r4
 8004710:	bd10      	pop	{r4, pc}
 8004712:	2a0a      	cmp	r2, #10
 8004714:	d109      	bne.n	800472a <__itoa+0x2c>
 8004716:	2800      	cmp	r0, #0
 8004718:	da07      	bge.n	800472a <__itoa+0x2c>
 800471a:	232d      	movs	r3, #45	@ 0x2d
 800471c:	4240      	negs	r0, r0
 800471e:	700b      	strb	r3, [r1, #0]
 8004720:	2101      	movs	r1, #1
 8004722:	4421      	add	r1, r4
 8004724:	f000 f806 	bl	8004734 <__utoa>
 8004728:	e7f1      	b.n	800470e <__itoa+0x10>
 800472a:	2100      	movs	r1, #0
 800472c:	e7f9      	b.n	8004722 <__itoa+0x24>

0800472e <itoa>:
 800472e:	f7ff bfe6 	b.w	80046fe <__itoa>
	...

08004734 <__utoa>:
 8004734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004736:	4c1f      	ldr	r4, [pc, #124]	@ (80047b4 <__utoa+0x80>)
 8004738:	b08b      	sub	sp, #44	@ 0x2c
 800473a:	4605      	mov	r5, r0
 800473c:	460b      	mov	r3, r1
 800473e:	466e      	mov	r6, sp
 8004740:	f104 0c20 	add.w	ip, r4, #32
 8004744:	6820      	ldr	r0, [r4, #0]
 8004746:	3408      	adds	r4, #8
 8004748:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800474c:	4637      	mov	r7, r6
 800474e:	4564      	cmp	r4, ip
 8004750:	c703      	stmia	r7!, {r0, r1}
 8004752:	463e      	mov	r6, r7
 8004754:	d1f6      	bne.n	8004744 <__utoa+0x10>
 8004756:	7921      	ldrb	r1, [r4, #4]
 8004758:	6820      	ldr	r0, [r4, #0]
 800475a:	7139      	strb	r1, [r7, #4]
 800475c:	1e91      	subs	r1, r2, #2
 800475e:	6038      	str	r0, [r7, #0]
 8004760:	2922      	cmp	r1, #34	@ 0x22
 8004762:	f04f 0100 	mov.w	r1, #0
 8004766:	d904      	bls.n	8004772 <__utoa+0x3e>
 8004768:	7019      	strb	r1, [r3, #0]
 800476a:	460b      	mov	r3, r1
 800476c:	4618      	mov	r0, r3
 800476e:	b00b      	add	sp, #44	@ 0x2c
 8004770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004772:	1e58      	subs	r0, r3, #1
 8004774:	4684      	mov	ip, r0
 8004776:	460c      	mov	r4, r1
 8004778:	3101      	adds	r1, #1
 800477a:	fbb5 f7f2 	udiv	r7, r5, r2
 800477e:	fb02 5617 	mls	r6, r2, r7, r5
 8004782:	3628      	adds	r6, #40	@ 0x28
 8004784:	446e      	add	r6, sp
 8004786:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800478a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800478e:	462e      	mov	r6, r5
 8004790:	463d      	mov	r5, r7
 8004792:	42b2      	cmp	r2, r6
 8004794:	d9ef      	bls.n	8004776 <__utoa+0x42>
 8004796:	2200      	movs	r2, #0
 8004798:	545a      	strb	r2, [r3, r1]
 800479a:	1919      	adds	r1, r3, r4
 800479c:	1aa5      	subs	r5, r4, r2
 800479e:	42aa      	cmp	r2, r5
 80047a0:	dae4      	bge.n	800476c <__utoa+0x38>
 80047a2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80047a6:	3201      	adds	r2, #1
 80047a8:	780e      	ldrb	r6, [r1, #0]
 80047aa:	7006      	strb	r6, [r0, #0]
 80047ac:	f801 5901 	strb.w	r5, [r1], #-1
 80047b0:	e7f4      	b.n	800479c <__utoa+0x68>
 80047b2:	bf00      	nop
 80047b4:	080048d4 	.word	0x080048d4

080047b8 <memset>:
 80047b8:	4402      	add	r2, r0
 80047ba:	4603      	mov	r3, r0
 80047bc:	4293      	cmp	r3, r2
 80047be:	d100      	bne.n	80047c2 <memset+0xa>
 80047c0:	4770      	bx	lr
 80047c2:	f803 1b01 	strb.w	r1, [r3], #1
 80047c6:	e7f9      	b.n	80047bc <memset+0x4>

080047c8 <__libc_init_array>:
 80047c8:	b570      	push	{r4, r5, r6, lr}
 80047ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004800 <__libc_init_array+0x38>)
 80047cc:	2600      	movs	r6, #0
 80047ce:	4c0d      	ldr	r4, [pc, #52]	@ (8004804 <__libc_init_array+0x3c>)
 80047d0:	1b64      	subs	r4, r4, r5
 80047d2:	10a4      	asrs	r4, r4, #2
 80047d4:	42a6      	cmp	r6, r4
 80047d6:	d109      	bne.n	80047ec <__libc_init_array+0x24>
 80047d8:	4d0b      	ldr	r5, [pc, #44]	@ (8004808 <__libc_init_array+0x40>)
 80047da:	2600      	movs	r6, #0
 80047dc:	4c0b      	ldr	r4, [pc, #44]	@ (800480c <__libc_init_array+0x44>)
 80047de:	f000 f817 	bl	8004810 <_init>
 80047e2:	1b64      	subs	r4, r4, r5
 80047e4:	10a4      	asrs	r4, r4, #2
 80047e6:	42a6      	cmp	r6, r4
 80047e8:	d105      	bne.n	80047f6 <__libc_init_array+0x2e>
 80047ea:	bd70      	pop	{r4, r5, r6, pc}
 80047ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f0:	3601      	adds	r6, #1
 80047f2:	4798      	blx	r3
 80047f4:	e7ee      	b.n	80047d4 <__libc_init_array+0xc>
 80047f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047fa:	3601      	adds	r6, #1
 80047fc:	4798      	blx	r3
 80047fe:	e7f2      	b.n	80047e6 <__libc_init_array+0x1e>
 8004800:	08004904 	.word	0x08004904
 8004804:	08004904 	.word	0x08004904
 8004808:	08004904 	.word	0x08004904
 800480c:	08004908 	.word	0x08004908

08004810 <_init>:
 8004810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004812:	bf00      	nop
 8004814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004816:	bc08      	pop	{r3}
 8004818:	469e      	mov	lr, r3
 800481a:	4770      	bx	lr

0800481c <_fini>:
 800481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481e:	bf00      	nop
 8004820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004822:	bc08      	pop	{r3}
 8004824:	469e      	mov	lr, r3
 8004826:	4770      	bx	lr
