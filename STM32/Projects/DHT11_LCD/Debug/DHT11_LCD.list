
DHT11_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000015c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b74  08000160  08000160  00001160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08006cd8  08006cd8  00007cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007088  08007088  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007088  08007088  00008088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007090  08007090  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007090  08007090  00008090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007094  08007094  00008094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007098  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  200001d4  0800726c  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  0800726c  000093ec  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011610  00000000  00000000  0000920a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a1  00000000  00000000  0001a81a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  0001d0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7e  00000000  00000000  0001e230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d58  00000000  00000000  0001efae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b26  00000000  00000000  00041d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d995a  00000000  00000000  0005782c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131186  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b04  00000000  00000000  001311cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00136cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000160 <__do_global_dtors_aux>:
 8000160:	b510      	push	{r4, lr}
 8000162:	4c05      	ldr	r4, [pc, #20]	@ (8000178 <__do_global_dtors_aux+0x18>)
 8000164:	7823      	ldrb	r3, [r4, #0]
 8000166:	b933      	cbnz	r3, 8000176 <__do_global_dtors_aux+0x16>
 8000168:	4b04      	ldr	r3, [pc, #16]	@ (800017c <__do_global_dtors_aux+0x1c>)
 800016a:	b113      	cbz	r3, 8000172 <__do_global_dtors_aux+0x12>
 800016c:	4804      	ldr	r0, [pc, #16]	@ (8000180 <__do_global_dtors_aux+0x20>)
 800016e:	f3af 8000 	nop.w
 8000172:	2301      	movs	r3, #1
 8000174:	7023      	strb	r3, [r4, #0]
 8000176:	bd10      	pop	{r4, pc}
 8000178:	200001d4 	.word	0x200001d4
 800017c:	00000000 	.word	0x00000000
 8000180:	08006cbc 	.word	0x08006cbc

08000184 <frame_dummy>:
 8000184:	b508      	push	{r3, lr}
 8000186:	4b03      	ldr	r3, [pc, #12]	@ (8000194 <frame_dummy+0x10>)
 8000188:	b11b      	cbz	r3, 8000192 <frame_dummy+0xe>
 800018a:	4903      	ldr	r1, [pc, #12]	@ (8000198 <frame_dummy+0x14>)
 800018c:	4803      	ldr	r0, [pc, #12]	@ (800019c <frame_dummy+0x18>)
 800018e:	f3af 8000 	nop.w
 8000192:	bd08      	pop	{r3, pc}
 8000194:	00000000 	.word	0x00000000
 8000198:	200001d8 	.word	0x200001d8
 800019c:	08006cbc 	.word	0x08006cbc

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <__aeabi_drsub>:
 80001b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001b4:	e002      	b.n	80001bc <__adddf3>
 80001b6:	bf00      	nop

080001b8 <__aeabi_dsub>:
 80001b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001bc <__adddf3>:
 80001bc:	b530      	push	{r4, r5, lr}
 80001be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001c6:	ea94 0f05 	teq	r4, r5
 80001ca:	bf08      	it	eq
 80001cc:	ea90 0f02 	teqeq	r0, r2
 80001d0:	bf1f      	itttt	ne
 80001d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001e2:	f000 80e2 	beq.w	80003aa <__adddf3+0x1ee>
 80001e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ee:	bfb8      	it	lt
 80001f0:	426d      	neglt	r5, r5
 80001f2:	dd0c      	ble.n	800020e <__adddf3+0x52>
 80001f4:	442c      	add	r4, r5
 80001f6:	ea80 0202 	eor.w	r2, r0, r2
 80001fa:	ea81 0303 	eor.w	r3, r1, r3
 80001fe:	ea82 0000 	eor.w	r0, r2, r0
 8000202:	ea83 0101 	eor.w	r1, r3, r1
 8000206:	ea80 0202 	eor.w	r2, r0, r2
 800020a:	ea81 0303 	eor.w	r3, r1, r3
 800020e:	2d36      	cmp	r5, #54	@ 0x36
 8000210:	bf88      	it	hi
 8000212:	bd30      	pophi	{r4, r5, pc}
 8000214:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000218:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800021c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000220:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000224:	d002      	beq.n	800022c <__adddf3+0x70>
 8000226:	4240      	negs	r0, r0
 8000228:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800022c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000230:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000234:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000238:	d002      	beq.n	8000240 <__adddf3+0x84>
 800023a:	4252      	negs	r2, r2
 800023c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000240:	ea94 0f05 	teq	r4, r5
 8000244:	f000 80a7 	beq.w	8000396 <__adddf3+0x1da>
 8000248:	f1a4 0401 	sub.w	r4, r4, #1
 800024c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000250:	db0d      	blt.n	800026e <__adddf3+0xb2>
 8000252:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000256:	fa22 f205 	lsr.w	r2, r2, r5
 800025a:	1880      	adds	r0, r0, r2
 800025c:	f141 0100 	adc.w	r1, r1, #0
 8000260:	fa03 f20e 	lsl.w	r2, r3, lr
 8000264:	1880      	adds	r0, r0, r2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	4159      	adcs	r1, r3
 800026c:	e00e      	b.n	800028c <__adddf3+0xd0>
 800026e:	f1a5 0520 	sub.w	r5, r5, #32
 8000272:	f10e 0e20 	add.w	lr, lr, #32
 8000276:	2a01      	cmp	r2, #1
 8000278:	fa03 fc0e 	lsl.w	ip, r3, lr
 800027c:	bf28      	it	cs
 800027e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	18c0      	adds	r0, r0, r3
 8000288:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800028c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000290:	d507      	bpl.n	80002a2 <__adddf3+0xe6>
 8000292:	f04f 0e00 	mov.w	lr, #0
 8000296:	f1dc 0c00 	rsbs	ip, ip, #0
 800029a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800029e:	eb6e 0101 	sbc.w	r1, lr, r1
 80002a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002a6:	d31b      	bcc.n	80002e0 <__adddf3+0x124>
 80002a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ac:	d30c      	bcc.n	80002c8 <__adddf3+0x10c>
 80002ae:	0849      	lsrs	r1, r1, #1
 80002b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002b8:	f104 0401 	add.w	r4, r4, #1
 80002bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002c4:	f080 809a 	bcs.w	80003fc <__adddf3+0x240>
 80002c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	ea41 0105 	orr.w	r1, r1, r5
 80002de:	bd30      	pop	{r4, r5, pc}
 80002e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002e4:	4140      	adcs	r0, r0
 80002e6:	eb41 0101 	adc.w	r1, r1, r1
 80002ea:	3c01      	subs	r4, #1
 80002ec:	bf28      	it	cs
 80002ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002f2:	d2e9      	bcs.n	80002c8 <__adddf3+0x10c>
 80002f4:	f091 0f00 	teq	r1, #0
 80002f8:	bf04      	itt	eq
 80002fa:	4601      	moveq	r1, r0
 80002fc:	2000      	moveq	r0, #0
 80002fe:	fab1 f381 	clz	r3, r1
 8000302:	bf08      	it	eq
 8000304:	3320      	addeq	r3, #32
 8000306:	f1a3 030b 	sub.w	r3, r3, #11
 800030a:	f1b3 0220 	subs.w	r2, r3, #32
 800030e:	da0c      	bge.n	800032a <__adddf3+0x16e>
 8000310:	320c      	adds	r2, #12
 8000312:	dd08      	ble.n	8000326 <__adddf3+0x16a>
 8000314:	f102 0c14 	add.w	ip, r2, #20
 8000318:	f1c2 020c 	rsb	r2, r2, #12
 800031c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000320:	fa21 f102 	lsr.w	r1, r1, r2
 8000324:	e00c      	b.n	8000340 <__adddf3+0x184>
 8000326:	f102 0214 	add.w	r2, r2, #20
 800032a:	bfd8      	it	le
 800032c:	f1c2 0c20 	rsble	ip, r2, #32
 8000330:	fa01 f102 	lsl.w	r1, r1, r2
 8000334:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000338:	bfdc      	itt	le
 800033a:	ea41 010c 	orrle.w	r1, r1, ip
 800033e:	4090      	lslle	r0, r2
 8000340:	1ae4      	subs	r4, r4, r3
 8000342:	bfa2      	ittt	ge
 8000344:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000348:	4329      	orrge	r1, r5
 800034a:	bd30      	popge	{r4, r5, pc}
 800034c:	ea6f 0404 	mvn.w	r4, r4
 8000350:	3c1f      	subs	r4, #31
 8000352:	da1c      	bge.n	800038e <__adddf3+0x1d2>
 8000354:	340c      	adds	r4, #12
 8000356:	dc0e      	bgt.n	8000376 <__adddf3+0x1ba>
 8000358:	f104 0414 	add.w	r4, r4, #20
 800035c:	f1c4 0220 	rsb	r2, r4, #32
 8000360:	fa20 f004 	lsr.w	r0, r0, r4
 8000364:	fa01 f302 	lsl.w	r3, r1, r2
 8000368:	ea40 0003 	orr.w	r0, r0, r3
 800036c:	fa21 f304 	lsr.w	r3, r1, r4
 8000370:	ea45 0103 	orr.w	r1, r5, r3
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f1c4 040c 	rsb	r4, r4, #12
 800037a:	f1c4 0220 	rsb	r2, r4, #32
 800037e:	fa20 f002 	lsr.w	r0, r0, r2
 8000382:	fa01 f304 	lsl.w	r3, r1, r4
 8000386:	ea40 0003 	orr.w	r0, r0, r3
 800038a:	4629      	mov	r1, r5
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	fa21 f004 	lsr.w	r0, r1, r4
 8000392:	4629      	mov	r1, r5
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f094 0f00 	teq	r4, #0
 800039a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800039e:	bf06      	itte	eq
 80003a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003a4:	3401      	addeq	r4, #1
 80003a6:	3d01      	subne	r5, #1
 80003a8:	e74e      	b.n	8000248 <__adddf3+0x8c>
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf18      	it	ne
 80003b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b4:	d029      	beq.n	800040a <__adddf3+0x24e>
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	d005      	beq.n	80003ce <__adddf3+0x212>
 80003c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003c6:	bf04      	itt	eq
 80003c8:	4619      	moveq	r1, r3
 80003ca:	4610      	moveq	r0, r2
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea91 0f03 	teq	r1, r3
 80003d2:	bf1e      	ittt	ne
 80003d4:	2100      	movne	r1, #0
 80003d6:	2000      	movne	r0, #0
 80003d8:	bd30      	popne	{r4, r5, pc}
 80003da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003de:	d105      	bne.n	80003ec <__adddf3+0x230>
 80003e0:	0040      	lsls	r0, r0, #1
 80003e2:	4149      	adcs	r1, r1
 80003e4:	bf28      	it	cs
 80003e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ea:	bd30      	pop	{r4, r5, pc}
 80003ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003f0:	bf3c      	itt	cc
 80003f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003f6:	bd30      	popcc	{r4, r5, pc}
 80003f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000400:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000404:	f04f 0000 	mov.w	r0, #0
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf1a      	itte	ne
 8000410:	4619      	movne	r1, r3
 8000412:	4610      	movne	r0, r2
 8000414:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000418:	bf1c      	itt	ne
 800041a:	460b      	movne	r3, r1
 800041c:	4602      	movne	r2, r0
 800041e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000422:	bf06      	itte	eq
 8000424:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000428:	ea91 0f03 	teqeq	r1, r3
 800042c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	bf00      	nop

08000434 <__aeabi_ui2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f04f 0500 	mov.w	r5, #0
 800044c:	f04f 0100 	mov.w	r1, #0
 8000450:	e750      	b.n	80002f4 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_i2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800046c:	bf48      	it	mi
 800046e:	4240      	negmi	r0, r0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e73e      	b.n	80002f4 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_f2d>:
 8000478:	0042      	lsls	r2, r0, #1
 800047a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800047e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000482:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000486:	bf1f      	itttt	ne
 8000488:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800048c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000490:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000494:	4770      	bxne	lr
 8000496:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800049a:	bf08      	it	eq
 800049c:	4770      	bxeq	lr
 800049e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004a2:	bf04      	itt	eq
 80004a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004b8:	e71c      	b.n	80002f4 <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_ul2d>:
 80004bc:	ea50 0201 	orrs.w	r2, r0, r1
 80004c0:	bf08      	it	eq
 80004c2:	4770      	bxeq	lr
 80004c4:	b530      	push	{r4, r5, lr}
 80004c6:	f04f 0500 	mov.w	r5, #0
 80004ca:	e00a      	b.n	80004e2 <__aeabi_l2d+0x16>

080004cc <__aeabi_l2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004da:	d502      	bpl.n	80004e2 <__aeabi_l2d+0x16>
 80004dc:	4240      	negs	r0, r0
 80004de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ee:	f43f aed8 	beq.w	80002a2 <__adddf3+0xe6>
 80004f2:	f04f 0203 	mov.w	r2, #3
 80004f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004fa:	bf18      	it	ne
 80004fc:	3203      	addne	r2, #3
 80004fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000502:	bf18      	it	ne
 8000504:	3203      	addne	r2, #3
 8000506:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000512:	fa20 f002 	lsr.w	r0, r0, r2
 8000516:	fa01 fe03 	lsl.w	lr, r1, r3
 800051a:	ea40 000e 	orr.w	r0, r0, lr
 800051e:	fa21 f102 	lsr.w	r1, r1, r2
 8000522:	4414      	add	r4, r2
 8000524:	e6bd      	b.n	80002a2 <__adddf3+0xe6>
 8000526:	bf00      	nop

08000528 <__aeabi_dmul>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800052e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000532:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000536:	bf1d      	ittte	ne
 8000538:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800053c:	ea94 0f0c 	teqne	r4, ip
 8000540:	ea95 0f0c 	teqne	r5, ip
 8000544:	f000 f8de 	bleq	8000704 <__aeabi_dmul+0x1dc>
 8000548:	442c      	add	r4, r5
 800054a:	ea81 0603 	eor.w	r6, r1, r3
 800054e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000552:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000556:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800055a:	bf18      	it	ne
 800055c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000560:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000564:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000568:	d038      	beq.n	80005dc <__aeabi_dmul+0xb4>
 800056a:	fba0 ce02 	umull	ip, lr, r0, r2
 800056e:	f04f 0500 	mov.w	r5, #0
 8000572:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000576:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800057a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800057e:	f04f 0600 	mov.w	r6, #0
 8000582:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000586:	f09c 0f00 	teq	ip, #0
 800058a:	bf18      	it	ne
 800058c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000590:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000594:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000598:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800059c:	d204      	bcs.n	80005a8 <__aeabi_dmul+0x80>
 800059e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005a2:	416d      	adcs	r5, r5
 80005a4:	eb46 0606 	adc.w	r6, r6, r6
 80005a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005c0:	bf88      	it	hi
 80005c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005c6:	d81e      	bhi.n	8000606 <__aeabi_dmul+0xde>
 80005c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005cc:	bf08      	it	eq
 80005ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005d2:	f150 0000 	adcs.w	r0, r0, #0
 80005d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005e0:	ea46 0101 	orr.w	r1, r6, r1
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	ea81 0103 	eor.w	r1, r1, r3
 80005ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005f0:	bfc2      	ittt	gt
 80005f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	popgt	{r4, r5, r6, pc}
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000600:	f04f 0e00 	mov.w	lr, #0
 8000604:	3c01      	subs	r4, #1
 8000606:	f300 80ab 	bgt.w	8000760 <__aeabi_dmul+0x238>
 800060a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800060e:	bfde      	ittt	le
 8000610:	2000      	movle	r0, #0
 8000612:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000616:	bd70      	pople	{r4, r5, r6, pc}
 8000618:	f1c4 0400 	rsb	r4, r4, #0
 800061c:	3c20      	subs	r4, #32
 800061e:	da35      	bge.n	800068c <__aeabi_dmul+0x164>
 8000620:	340c      	adds	r4, #12
 8000622:	dc1b      	bgt.n	800065c <__aeabi_dmul+0x134>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f305 	lsl.w	r3, r0, r5
 8000630:	fa20 f004 	lsr.w	r0, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000640:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000644:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000648:	fa21 f604 	lsr.w	r6, r1, r4
 800064c:	eb42 0106 	adc.w	r1, r2, r6
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 040c 	rsb	r4, r4, #12
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f304 	lsl.w	r3, r0, r4
 8000668:	fa20 f005 	lsr.w	r0, r0, r5
 800066c:	fa01 f204 	lsl.w	r2, r1, r4
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	f141 0100 	adc.w	r1, r1, #0
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f205 	lsl.w	r2, r0, r5
 8000694:	ea4e 0e02 	orr.w	lr, lr, r2
 8000698:	fa20 f304 	lsr.w	r3, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea43 0302 	orr.w	r3, r3, r2
 80006a4:	fa21 f004 	lsr.w	r0, r1, r4
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	fa21 f204 	lsr.w	r2, r1, r4
 80006b0:	ea20 0002 	bic.w	r0, r0, r2
 80006b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f094 0f00 	teq	r4, #0
 80006c8:	d10f      	bne.n	80006ea <__aeabi_dmul+0x1c2>
 80006ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ce:	0040      	lsls	r0, r0, #1
 80006d0:	eb41 0101 	adc.w	r1, r1, r1
 80006d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3c01      	subeq	r4, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1a6>
 80006de:	ea41 0106 	orr.w	r1, r1, r6
 80006e2:	f095 0f00 	teq	r5, #0
 80006e6:	bf18      	it	ne
 80006e8:	4770      	bxne	lr
 80006ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ee:	0052      	lsls	r2, r2, #1
 80006f0:	eb43 0303 	adc.w	r3, r3, r3
 80006f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3d01      	subeq	r5, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1c6>
 80006fe:	ea43 0306 	orr.w	r3, r3, r6
 8000702:	4770      	bx	lr
 8000704:	ea94 0f0c 	teq	r4, ip
 8000708:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800070c:	bf18      	it	ne
 800070e:	ea95 0f0c 	teqne	r5, ip
 8000712:	d00c      	beq.n	800072e <__aeabi_dmul+0x206>
 8000714:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000718:	bf18      	it	ne
 800071a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071e:	d1d1      	bne.n	80006c4 <__aeabi_dmul+0x19c>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd70      	pop	{r4, r5, r6, pc}
 800072e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000732:	bf06      	itte	eq
 8000734:	4610      	moveq	r0, r2
 8000736:	4619      	moveq	r1, r3
 8000738:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073c:	d019      	beq.n	8000772 <__aeabi_dmul+0x24a>
 800073e:	ea94 0f0c 	teq	r4, ip
 8000742:	d102      	bne.n	800074a <__aeabi_dmul+0x222>
 8000744:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000748:	d113      	bne.n	8000772 <__aeabi_dmul+0x24a>
 800074a:	ea95 0f0c 	teq	r5, ip
 800074e:	d105      	bne.n	800075c <__aeabi_dmul+0x234>
 8000750:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000754:	bf1c      	itt	ne
 8000756:	4610      	movne	r0, r2
 8000758:	4619      	movne	r1, r3
 800075a:	d10a      	bne.n	8000772 <__aeabi_dmul+0x24a>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000768:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800076c:	f04f 0000 	mov.w	r0, #0
 8000770:	bd70      	pop	{r4, r5, r6, pc}
 8000772:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000776:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800077a:	bd70      	pop	{r4, r5, r6, pc}

0800077c <__aeabi_ddiv>:
 800077c:	b570      	push	{r4, r5, r6, lr}
 800077e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000782:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000786:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800078a:	bf1d      	ittte	ne
 800078c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000790:	ea94 0f0c 	teqne	r4, ip
 8000794:	ea95 0f0c 	teqne	r5, ip
 8000798:	f000 f8a7 	bleq	80008ea <__aeabi_ddiv+0x16e>
 800079c:	eba4 0405 	sub.w	r4, r4, r5
 80007a0:	ea81 0e03 	eor.w	lr, r1, r3
 80007a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ac:	f000 8088 	beq.w	80008c0 <__aeabi_ddiv+0x144>
 80007b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007d4:	429d      	cmp	r5, r3
 80007d6:	bf08      	it	eq
 80007d8:	4296      	cmpeq	r6, r2
 80007da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007e2:	d202      	bcs.n	80007ea <__aeabi_ddiv+0x6e>
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	1ab6      	subs	r6, r6, r2
 80007ec:	eb65 0503 	sbc.w	r5, r5, r3
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000858:	ea55 0e06 	orrs.w	lr, r5, r6
 800085c:	d018      	beq.n	8000890 <__aeabi_ddiv+0x114>
 800085e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000862:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000866:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800086a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800086e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000872:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000876:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800087a:	d1c0      	bne.n	80007fe <__aeabi_ddiv+0x82>
 800087c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000880:	d10b      	bne.n	800089a <__aeabi_ddiv+0x11e>
 8000882:	ea41 0100 	orr.w	r1, r1, r0
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800088e:	e7b6      	b.n	80007fe <__aeabi_ddiv+0x82>
 8000890:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000894:	bf04      	itt	eq
 8000896:	4301      	orreq	r1, r0
 8000898:	2000      	moveq	r0, #0
 800089a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800089e:	bf88      	it	hi
 80008a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008a4:	f63f aeaf 	bhi.w	8000606 <__aeabi_dmul+0xde>
 80008a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ac:	bf04      	itt	eq
 80008ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008b6:	f150 0000 	adcs.w	r0, r0, #0
 80008ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008be:	bd70      	pop	{r4, r5, r6, pc}
 80008c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008cc:	bfc2      	ittt	gt
 80008ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	popgt	{r4, r5, r6, pc}
 80008d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008dc:	f04f 0e00 	mov.w	lr, #0
 80008e0:	3c01      	subs	r4, #1
 80008e2:	e690      	b.n	8000606 <__aeabi_dmul+0xde>
 80008e4:	ea45 0e06 	orr.w	lr, r5, r6
 80008e8:	e68d      	b.n	8000606 <__aeabi_dmul+0xde>
 80008ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ee:	ea94 0f0c 	teq	r4, ip
 80008f2:	bf08      	it	eq
 80008f4:	ea95 0f0c 	teqeq	r5, ip
 80008f8:	f43f af3b 	beq.w	8000772 <__aeabi_dmul+0x24a>
 80008fc:	ea94 0f0c 	teq	r4, ip
 8000900:	d10a      	bne.n	8000918 <__aeabi_ddiv+0x19c>
 8000902:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000906:	f47f af34 	bne.w	8000772 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	f47f af25 	bne.w	800075c <__aeabi_dmul+0x234>
 8000912:	4610      	mov	r0, r2
 8000914:	4619      	mov	r1, r3
 8000916:	e72c      	b.n	8000772 <__aeabi_dmul+0x24a>
 8000918:	ea95 0f0c 	teq	r5, ip
 800091c:	d106      	bne.n	800092c <__aeabi_ddiv+0x1b0>
 800091e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000922:	f43f aefd 	beq.w	8000720 <__aeabi_dmul+0x1f8>
 8000926:	4610      	mov	r0, r2
 8000928:	4619      	mov	r1, r3
 800092a:	e722      	b.n	8000772 <__aeabi_dmul+0x24a>
 800092c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000936:	f47f aec5 	bne.w	80006c4 <__aeabi_dmul+0x19c>
 800093a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800093e:	f47f af0d 	bne.w	800075c <__aeabi_dmul+0x234>
 8000942:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000946:	f47f aeeb 	bne.w	8000720 <__aeabi_dmul+0x1f8>
 800094a:	e712      	b.n	8000772 <__aeabi_dmul+0x24a>

0800094c <__gedf2>:
 800094c:	f04f 3cff 	mov.w	ip, #4294967295
 8000950:	e006      	b.n	8000960 <__cmpdf2+0x4>
 8000952:	bf00      	nop

08000954 <__ledf2>:
 8000954:	f04f 0c01 	mov.w	ip, #1
 8000958:	e002      	b.n	8000960 <__cmpdf2+0x4>
 800095a:	bf00      	nop

0800095c <__cmpdf2>:
 800095c:	f04f 0c01 	mov.w	ip, #1
 8000960:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000964:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800096c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000976:	d01b      	beq.n	80009b0 <__cmpdf2+0x54>
 8000978:	b001      	add	sp, #4
 800097a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800097e:	bf0c      	ite	eq
 8000980:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000984:	ea91 0f03 	teqne	r1, r3
 8000988:	bf02      	ittt	eq
 800098a:	ea90 0f02 	teqeq	r0, r2
 800098e:	2000      	moveq	r0, #0
 8000990:	4770      	bxeq	lr
 8000992:	f110 0f00 	cmn.w	r0, #0
 8000996:	ea91 0f03 	teq	r1, r3
 800099a:	bf58      	it	pl
 800099c:	4299      	cmppl	r1, r3
 800099e:	bf08      	it	eq
 80009a0:	4290      	cmpeq	r0, r2
 80009a2:	bf2c      	ite	cs
 80009a4:	17d8      	asrcs	r0, r3, #31
 80009a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009aa:	f040 0001 	orr.w	r0, r0, #1
 80009ae:	4770      	bx	lr
 80009b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b8:	d102      	bne.n	80009c0 <__cmpdf2+0x64>
 80009ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009be:	d107      	bne.n	80009d0 <__cmpdf2+0x74>
 80009c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d1d6      	bne.n	8000978 <__cmpdf2+0x1c>
 80009ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ce:	d0d3      	beq.n	8000978 <__cmpdf2+0x1c>
 80009d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <__aeabi_cdrcmple>:
 80009d8:	4684      	mov	ip, r0
 80009da:	4610      	mov	r0, r2
 80009dc:	4662      	mov	r2, ip
 80009de:	468c      	mov	ip, r1
 80009e0:	4619      	mov	r1, r3
 80009e2:	4663      	mov	r3, ip
 80009e4:	e000      	b.n	80009e8 <__aeabi_cdcmpeq>
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdcmpeq>:
 80009e8:	b501      	push	{r0, lr}
 80009ea:	f7ff ffb7 	bl	800095c <__cmpdf2>
 80009ee:	2800      	cmp	r0, #0
 80009f0:	bf48      	it	mi
 80009f2:	f110 0f00 	cmnmi.w	r0, #0
 80009f6:	bd01      	pop	{r0, pc}

080009f8 <__aeabi_dcmpeq>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff fff4 	bl	80009e8 <__aeabi_cdcmpeq>
 8000a00:	bf0c      	ite	eq
 8000a02:	2001      	moveq	r0, #1
 8000a04:	2000      	movne	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmplt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffea 	bl	80009e8 <__aeabi_cdcmpeq>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmple>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffe0 	bl	80009e8 <__aeabi_cdcmpeq>
 8000a28:	bf94      	ite	ls
 8000a2a:	2001      	movls	r0, #1
 8000a2c:	2000      	movhi	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmpge>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffce 	bl	80009d8 <__aeabi_cdrcmple>
 8000a3c:	bf94      	ite	ls
 8000a3e:	2001      	movls	r0, #1
 8000a40:	2000      	movhi	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmpgt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffc4 	bl	80009d8 <__aeabi_cdrcmple>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpun>:
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d102      	bne.n	8000a6c <__aeabi_dcmpun+0x10>
 8000a66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a6a:	d10a      	bne.n	8000a82 <__aeabi_dcmpun+0x26>
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x20>
 8000a76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a7a:	d102      	bne.n	8000a82 <__aeabi_dcmpun+0x26>
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	f04f 0001 	mov.w	r0, #1
 8000a86:	4770      	bx	lr

08000a88 <__aeabi_d2iz>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d215      	bcs.n	8000abe <__aeabi_d2iz+0x36>
 8000a92:	d511      	bpl.n	8000ab8 <__aeabi_d2iz+0x30>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d912      	bls.n	8000ac4 <__aeabi_d2iz+0x3c>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	bf18      	it	ne
 8000ab4:	4240      	negne	r0, r0
 8000ab6:	4770      	bx	lr
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac2:	d105      	bne.n	8000ad0 <__aeabi_d2iz+0x48>
 8000ac4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	bf08      	it	eq
 8000aca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_d2f>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae0:	bf24      	itt	cs
 8000ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aea:	d90d      	bls.n	8000b08 <__aeabi_d2f+0x30>
 8000aec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b0c:	d121      	bne.n	8000b52 <__aeabi_d2f+0x7a>
 8000b0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b12:	bfbc      	itt	lt
 8000b14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	4770      	bxlt	lr
 8000b1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b22:	f1c2 0218 	rsb	r2, r2, #24
 8000b26:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b32:	bf18      	it	ne
 8000b34:	f040 0001 	orrne.w	r0, r0, #1
 8000b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b44:	ea40 000c 	orr.w	r0, r0, ip
 8000b48:	fa23 f302 	lsr.w	r3, r3, r2
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	e7cc      	b.n	8000aec <__aeabi_d2f+0x14>
 8000b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b56:	d107      	bne.n	8000b68 <__aeabi_d2f+0x90>
 8000b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b66:	4770      	bxne	lr
 8000b68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <DHT11_Start>:
float tFahrenheit = 0;
float RH = 0;



uint8_t DHT11_Start(void) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
    uint8_t Response = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	75fb      	strb	r3, [r7, #23]
    GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000b82:	463b      	mov	r3, r7
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
    GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000b90:	2380      	movs	r3, #128	@ 0x80
 8000b92:	603b      	str	r3, [r7, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	482a      	ldr	r0, [pc, #168]	@ (8000c50 <DHT11_Start+0xd8>)
 8000ba6:	f001 f91d 	bl	8001de4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000baa:	2200      	movs	r2, #0
 8000bac:	2180      	movs	r1, #128	@ 0x80
 8000bae:	4828      	ldr	r0, [pc, #160]	@ (8000c50 <DHT11_Start+0xd8>)
 8000bb0:	f001 fa7c 	bl	80020ac <HAL_GPIO_WritePin>
    HAL_Delay(20);   // wait for 20ms
 8000bb4:	2014      	movs	r0, #20
 8000bb6:	f000 ff93 	bl	8001ae0 <HAL_Delay>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2180      	movs	r1, #128	@ 0x80
 8000bbe:	4824      	ldr	r0, [pc, #144]	@ (8000c50 <DHT11_Start+0xd8>)
 8000bc0:	f001 fa74 	bl	80020ac <HAL_GPIO_WritePin>
    microDelay(30);   // wait for 30us
 8000bc4:	201e      	movs	r0, #30
 8000bc6:	f000 fa11 	bl	8000fec <microDelay>
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	481e      	ldr	r0, [pc, #120]	@ (8000c50 <DHT11_Start+0xd8>)
 8000bd8:	f001 f904 	bl	8001de4 <HAL_GPIO_Init>
    microDelay(40);
 8000bdc:	2028      	movs	r0, #40	@ 0x28
 8000bde:	f000 fa05 	bl	8000fec <microDelay>

    if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 8000be2:	2180      	movs	r1, #128	@ 0x80
 8000be4:	481a      	ldr	r0, [pc, #104]	@ (8000c50 <DHT11_Start+0xd8>)
 8000be6:	f001 fa49 	bl	800207c <HAL_GPIO_ReadPin>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d10b      	bne.n	8000c08 <DHT11_Start+0x90>
        microDelay(80);
 8000bf0:	2050      	movs	r0, #80	@ 0x50
 8000bf2:	f000 f9fb 	bl	8000fec <microDelay>
        if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) Response = 1;
 8000bf6:	2180      	movs	r1, #128	@ 0x80
 8000bf8:	4815      	ldr	r0, [pc, #84]	@ (8000c50 <DHT11_Start+0xd8>)
 8000bfa:	f001 fa3f 	bl	800207c <HAL_GPIO_ReadPin>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <DHT11_Start+0x90>
 8000c04:	2301      	movs	r3, #1
 8000c06:	75fb      	strb	r3, [r7, #23]
    }

    pMillis = HAL_GetTick();
 8000c08:	f000 ff5e 	bl	8001ac8 <HAL_GetTick>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4a11      	ldr	r2, [pc, #68]	@ (8000c54 <DHT11_Start+0xdc>)
 8000c10:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000c12:	f000 ff59 	bl	8001ac8 <HAL_GetTick>
 8000c16:	4603      	mov	r3, r0
 8000c18:	4a0f      	ldr	r2, [pc, #60]	@ (8000c58 <DHT11_Start+0xe0>)
 8000c1a:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && (pMillis + 2 > cMillis)) {
 8000c1c:	e004      	b.n	8000c28 <DHT11_Start+0xb0>
        cMillis = HAL_GetTick();
 8000c1e:	f000 ff53 	bl	8001ac8 <HAL_GetTick>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4a0c      	ldr	r2, [pc, #48]	@ (8000c58 <DHT11_Start+0xe0>)
 8000c26:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && (pMillis + 2 > cMillis)) {
 8000c28:	2180      	movs	r1, #128	@ 0x80
 8000c2a:	4809      	ldr	r0, [pc, #36]	@ (8000c50 <DHT11_Start+0xd8>)
 8000c2c:	f001 fa26 	bl	800207c <HAL_GPIO_ReadPin>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d006      	beq.n	8000c44 <DHT11_Start+0xcc>
 8000c36:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <DHT11_Start+0xdc>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	1c9a      	adds	r2, r3, #2
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <DHT11_Start+0xe0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d8ec      	bhi.n	8000c1e <DHT11_Start+0xa6>
    }
    return Response;
 8000c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	42020400 	.word	0x42020400
 8000c54:	200001f0 	.word	0x200001f0
 8000c58:	200001f4 	.word	0x200001f4

08000c5c <DHT11_Read>:

uint8_t DHT11_Read(void) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
    uint8_t a, b = 0; // Initialize b
 8000c62:	2300      	movs	r3, #0
 8000c64:	71bb      	strb	r3, [r7, #6]
    for (a = 0; a < 8; a++) {
 8000c66:	2300      	movs	r3, #0
 8000c68:	71fb      	strb	r3, [r7, #7]
 8000c6a:	e063      	b.n	8000d34 <DHT11_Read+0xd8>
        pMillis = HAL_GetTick();
 8000c6c:	f000 ff2c 	bl	8001ac8 <HAL_GetTick>
 8000c70:	4603      	mov	r3, r0
 8000c72:	4a34      	ldr	r2, [pc, #208]	@ (8000d44 <DHT11_Read+0xe8>)
 8000c74:	6013      	str	r3, [r2, #0]
        cMillis = HAL_GetTick();
 8000c76:	f000 ff27 	bl	8001ac8 <HAL_GetTick>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4a32      	ldr	r2, [pc, #200]	@ (8000d48 <DHT11_Read+0xec>)
 8000c7e:	6013      	str	r3, [r2, #0]
        while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && (pMillis + 2 > cMillis)) {
 8000c80:	e004      	b.n	8000c8c <DHT11_Read+0x30>
            cMillis = HAL_GetTick();
 8000c82:	f000 ff21 	bl	8001ac8 <HAL_GetTick>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4a2f      	ldr	r2, [pc, #188]	@ (8000d48 <DHT11_Read+0xec>)
 8000c8a:	6013      	str	r3, [r2, #0]
        while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && (pMillis + 2 > cMillis)) {
 8000c8c:	2180      	movs	r1, #128	@ 0x80
 8000c8e:	482f      	ldr	r0, [pc, #188]	@ (8000d4c <DHT11_Read+0xf0>)
 8000c90:	f001 f9f4 	bl	800207c <HAL_GPIO_ReadPin>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d106      	bne.n	8000ca8 <DHT11_Read+0x4c>
 8000c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d44 <DHT11_Read+0xe8>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	1c9a      	adds	r2, r3, #2
 8000ca0:	4b29      	ldr	r3, [pc, #164]	@ (8000d48 <DHT11_Read+0xec>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d8ec      	bhi.n	8000c82 <DHT11_Read+0x26>
        }
        microDelay(40);   // wait for 40 us
 8000ca8:	2028      	movs	r0, #40	@ 0x28
 8000caa:	f000 f99f 	bl	8000fec <microDelay>
        if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 8000cae:	2180      	movs	r1, #128	@ 0x80
 8000cb0:	4826      	ldr	r0, [pc, #152]	@ (8000d4c <DHT11_Read+0xf0>)
 8000cb2:	f001 f9e3 	bl	800207c <HAL_GPIO_ReadPin>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10e      	bne.n	8000cda <DHT11_Read+0x7e>
            b &= ~(1 << (7 - a));
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	b25a      	sxtb	r2, r3
 8000cce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	b25b      	sxtb	r3, r3
 8000cd6:	71bb      	strb	r3, [r7, #6]
 8000cd8:	e00b      	b.n	8000cf2 <DHT11_Read+0x96>
        } else {
            b |= (1 << (7 - a));
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f1c3 0307 	rsb	r3, r3, #7
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	b25a      	sxtb	r2, r3
 8000ce8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	71bb      	strb	r3, [r7, #6]
        }
        pMillis = HAL_GetTick();
 8000cf2:	f000 fee9 	bl	8001ac8 <HAL_GetTick>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4a12      	ldr	r2, [pc, #72]	@ (8000d44 <DHT11_Read+0xe8>)
 8000cfa:	6013      	str	r3, [r2, #0]
        cMillis = HAL_GetTick();
 8000cfc:	f000 fee4 	bl	8001ac8 <HAL_GetTick>
 8000d00:	4603      	mov	r3, r0
 8000d02:	4a11      	ldr	r2, [pc, #68]	@ (8000d48 <DHT11_Read+0xec>)
 8000d04:	6013      	str	r3, [r2, #0]
        while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && (pMillis + 2 > cMillis)) {
 8000d06:	e004      	b.n	8000d12 <DHT11_Read+0xb6>
            cMillis = HAL_GetTick();
 8000d08:	f000 fede 	bl	8001ac8 <HAL_GetTick>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d48 <DHT11_Read+0xec>)
 8000d10:	6013      	str	r3, [r2, #0]
        while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && (pMillis + 2 > cMillis)) {
 8000d12:	2180      	movs	r1, #128	@ 0x80
 8000d14:	480d      	ldr	r0, [pc, #52]	@ (8000d4c <DHT11_Read+0xf0>)
 8000d16:	f001 f9b1 	bl	800207c <HAL_GPIO_ReadPin>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d006      	beq.n	8000d2e <DHT11_Read+0xd2>
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <DHT11_Read+0xe8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	1c9a      	adds	r2, r3, #2
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <DHT11_Read+0xec>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d8ec      	bhi.n	8000d08 <DHT11_Read+0xac>
    for (a = 0; a < 8; a++) {
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	3301      	adds	r3, #1
 8000d32:	71fb      	strb	r3, [r7, #7]
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2b07      	cmp	r3, #7
 8000d38:	d998      	bls.n	8000c6c <DHT11_Read+0x10>
        }
    }
    return b;
 8000d3a:	79bb      	ldrb	r3, [r7, #6]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200001f0 	.word	0x200001f0
 8000d48:	200001f4 	.word	0x200001f4
 8000d4c:	42020400 	.word	0x42020400

08000d50 <DHT_SCAN>:
void DHT_SCAN(float *tCelsius, float *RH) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	ed2d 8b02 	vpush	{d8}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
    if (DHT11_Start()) {
 8000d5e:	f7ff ff0b 	bl	8000b78 <DHT11_Start>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d05b      	beq.n	8000e20 <DHT_SCAN+0xd0>
        uint8_t RHI = DHT11_Read(); // Relative humidity integral
 8000d68:	f7ff ff78 	bl	8000c5c <DHT11_Read>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	73fb      	strb	r3, [r7, #15]
        uint8_t RHD = DHT11_Read(); // Relative humidity decimal
 8000d70:	f7ff ff74 	bl	8000c5c <DHT11_Read>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73bb      	strb	r3, [r7, #14]
        uint8_t TCI = DHT11_Read(); // Celsius integral
 8000d78:	f7ff ff70 	bl	8000c5c <DHT11_Read>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	737b      	strb	r3, [r7, #13]
        uint8_t TCD = DHT11_Read(); // Celsius decimal
 8000d80:	f7ff ff6c 	bl	8000c5c <DHT11_Read>
 8000d84:	4603      	mov	r3, r0
 8000d86:	733b      	strb	r3, [r7, #12]
        uint8_t SUM = DHT11_Read(); // Check sum
 8000d88:	f7ff ff68 	bl	8000c5c <DHT11_Read>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	72fb      	strb	r3, [r7, #11]

        if (RHI + RHD + TCI + TCD == SUM) {
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	441a      	add	r2, r3
 8000d96:	7b7b      	ldrb	r3, [r7, #13]
 8000d98:	441a      	add	r2, r3
 8000d9a:	7b3b      	ldrb	r3, [r7, #12]
 8000d9c:	441a      	add	r2, r3
 8000d9e:	7afb      	ldrb	r3, [r7, #11]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d136      	bne.n	8000e12 <DHT_SCAN+0xc2>
            *tCelsius = (float)TCI + (float)(TCD / 10.0);
 8000da4:	7b7b      	ldrb	r3, [r7, #13]
 8000da6:	ee07 3a90 	vmov	s15, r3
 8000daa:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000dae:	7b3b      	ldrb	r3, [r7, #12]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fb4f 	bl	8000454 <__aeabi_i2d>
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	4b1c      	ldr	r3, [pc, #112]	@ (8000e2c <DHT_SCAN+0xdc>)
 8000dbc:	f7ff fcde 	bl	800077c <__aeabi_ddiv>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f7ff fe86 	bl	8000ad8 <__aeabi_d2f>
 8000dcc:	ee07 0a90 	vmov	s15, r0
 8000dd0:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	edc3 7a00 	vstr	s15, [r3]
            *RH = (float)RHI + (float)(RHD / 10.0);
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	ee07 3a90 	vmov	s15, r3
 8000de0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000de4:	7bbb      	ldrb	r3, [r7, #14]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fb34 	bl	8000454 <__aeabi_i2d>
 8000dec:	f04f 0200 	mov.w	r2, #0
 8000df0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <DHT_SCAN+0xdc>)
 8000df2:	f7ff fcc3 	bl	800077c <__aeabi_ddiv>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f7ff fe6b 	bl	8000ad8 <__aeabi_d2f>
 8000e02:	ee07 0a90 	vmov	s15, r0
 8000e06:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	edc3 7a00 	vstr	s15, [r3]
        } else {
            lcd_put_cur(0, 0);
            lcd_send_string("error");
        }
    }
}
 8000e10:	e006      	b.n	8000e20 <DHT_SCAN+0xd0>
            lcd_put_cur(0, 0);
 8000e12:	2100      	movs	r1, #0
 8000e14:	2000      	movs	r0, #0
 8000e16:	f000 f877 	bl	8000f08 <lcd_put_cur>
            lcd_send_string("error");
 8000e1a:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <DHT_SCAN+0xe0>)
 8000e1c:	f000 f8d0 	bl	8000fc0 <lcd_send_string>
}
 8000e20:	bf00      	nop
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	ecbd 8b02 	vpop	{d8}
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40240000 	.word	0x40240000
 8000e30:	08006cd8 	.word	0x08006cd8

08000e34 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to your setup

void lcd_send_cmd (char cmd)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af02      	add	r7, sp, #8
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f023 030f 	bic.w	r3, r3, #15
 8000e44:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	011b      	lsls	r3, r3, #4
 8000e4a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	f043 030c 	orr.w	r3, r3, #12
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e60:	7bbb      	ldrb	r3, [r7, #14]
 8000e62:	f043 030c 	orr.w	r3, r3, #12
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e6a:	7bbb      	ldrb	r3, [r7, #14]
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e74:	f107 0208 	add.w	r2, r7, #8
 8000e78:	2364      	movs	r3, #100	@ 0x64
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	214e      	movs	r1, #78	@ 0x4e
 8000e80:	4803      	ldr	r0, [pc, #12]	@ (8000e90 <lcd_send_cmd+0x5c>)
 8000e82:	f001 fa03 	bl	800228c <HAL_I2C_Master_Transmit>
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200001f8 	.word	0x200001f8

08000e94 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f023 030f 	bic.w	r3, r3, #15
 8000ea4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	011b      	lsls	r3, r3, #4
 8000eaa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	f043 030d 	orr.w	r3, r3, #13
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	f043 0309 	orr.w	r3, r3, #9
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000ec0:	7bbb      	ldrb	r3, [r7, #14]
 8000ec2:	f043 030d 	orr.w	r3, r3, #13
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000eca:	7bbb      	ldrb	r3, [r7, #14]
 8000ecc:	f043 0309 	orr.w	r3, r3, #9
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ed4:	f107 0208 	add.w	r2, r7, #8
 8000ed8:	2364      	movs	r3, #100	@ 0x64
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2304      	movs	r3, #4
 8000ede:	214e      	movs	r1, #78	@ 0x4e
 8000ee0:	4803      	ldr	r0, [pc, #12]	@ (8000ef0 <lcd_send_data+0x5c>)
 8000ee2:	f001 f9d3 	bl	800228c <HAL_I2C_Master_Transmit>
}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200001f8 	.word	0x200001f8

08000ef4 <lcd_clear>:

void lcd_clear (void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000ef8:	2001      	movs	r0, #1
 8000efa:	f7ff ff9b 	bl	8000e34 <lcd_send_cmd>
	HAL_Delay(10);
 8000efe:	200a      	movs	r0, #10
 8000f00:	f000 fdee 	bl	8001ae0 <HAL_Delay>
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
    switch (row)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d003      	beq.n	8000f20 <lcd_put_cur+0x18>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d005      	beq.n	8000f2a <lcd_put_cur+0x22>
 8000f1e:	e009      	b.n	8000f34 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f26:	603b      	str	r3, [r7, #0]
            break;
 8000f28:	e004      	b.n	8000f34 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000f30:	603b      	str	r3, [r7, #0]
            break;
 8000f32:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff7b 	bl	8000e34 <lcd_send_cmd>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <lcd_init>:


void lcd_init (void)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000f4a:	2032      	movs	r0, #50	@ 0x32
 8000f4c:	f000 fdc8 	bl	8001ae0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f50:	2030      	movs	r0, #48	@ 0x30
 8000f52:	f7ff ff6f 	bl	8000e34 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000f56:	2005      	movs	r0, #5
 8000f58:	f000 fdc2 	bl	8001ae0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f5c:	2030      	movs	r0, #48	@ 0x30
 8000f5e:	f7ff ff69 	bl	8000e34 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000f62:	2001      	movs	r0, #1
 8000f64:	f000 fdbc 	bl	8001ae0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f68:	2030      	movs	r0, #48	@ 0x30
 8000f6a:	f7ff ff63 	bl	8000e34 <lcd_send_cmd>
	HAL_Delay(10);
 8000f6e:	200a      	movs	r0, #10
 8000f70:	f000 fdb6 	bl	8001ae0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000f74:	2020      	movs	r0, #32
 8000f76:	f7ff ff5d 	bl	8000e34 <lcd_send_cmd>
	HAL_Delay(10);
 8000f7a:	200a      	movs	r0, #10
 8000f7c:	f000 fdb0 	bl	8001ae0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000f80:	2028      	movs	r0, #40	@ 0x28
 8000f82:	f7ff ff57 	bl	8000e34 <lcd_send_cmd>
	HAL_Delay(1);
 8000f86:	2001      	movs	r0, #1
 8000f88:	f000 fdaa 	bl	8001ae0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000f8c:	2008      	movs	r0, #8
 8000f8e:	f7ff ff51 	bl	8000e34 <lcd_send_cmd>
	HAL_Delay(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f000 fda4 	bl	8001ae0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f7ff ff4b 	bl	8000e34 <lcd_send_cmd>
	HAL_Delay(1);
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f000 fd9e 	bl	8001ae0 <HAL_Delay>
	HAL_Delay(1);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f000 fd9b 	bl	8001ae0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000faa:	2006      	movs	r0, #6
 8000fac:	f7ff ff42 	bl	8000e34 <lcd_send_cmd>
	HAL_Delay(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f000 fd95 	bl	8001ae0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000fb6:	200c      	movs	r0, #12
 8000fb8:	f7ff ff3c 	bl	8000e34 <lcd_send_cmd>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000fc8:	e006      	b.n	8000fd8 <lcd_send_string+0x18>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	1c5a      	adds	r2, r3, #1
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff5e 	bl	8000e94 <lcd_send_data>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f4      	bne.n	8000fca <lcd_send_string+0xa>
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <microDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void microDelay (uint16_t delay)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <microDelay+0x30>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim3) < delay);
 8000ffe:	bf00      	nop
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <microDelay+0x30>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	429a      	cmp	r2, r3
 800100a:	d3f9      	bcc.n	8001000 <microDelay+0x14>
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2000024c 	.word	0x2000024c

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f000 fc9d 	bl	8001964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f85d 	bl	80010e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 f957 	bl	80012e0 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8001032:	f000 f8f3 	bl	800121c <MX_ICACHE_Init>
  MX_I2C1_Init();
 8001036:	f000 f8b1 	bl	800119c <MX_I2C1_Init>
  MX_TIM3_Init();
 800103a:	f000 f903 	bl	8001244 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 800103e:	4826      	ldr	r0, [pc, #152]	@ (80010d8 <main+0xb8>)
 8001040:	f002 fd38 	bl	8003ab4 <HAL_TIM_Base_Start>

  lcd_init();
 8001044:	f7ff ff7f 	bl	8000f46 <lcd_init>
  lcd_put_cur(0, 0);
 8001048:	2100      	movs	r1, #0
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff ff5c 	bl	8000f08 <lcd_put_cur>
  lcd_send_string("installizing...");
 8001050:	4822      	ldr	r0, [pc, #136]	@ (80010dc <main+0xbc>)
 8001052:	f7ff ffb5 	bl	8000fc0 <lcd_send_string>
  HAL_Delay(2000);
 8001056:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800105a:	f000 fd41 	bl	8001ae0 <HAL_Delay>
  lcd_clear();
 800105e:	f7ff ff49 	bl	8000ef4 <lcd_clear>

      float tCelsius = 0.0;
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
      float RH = 0.0;
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	623b      	str	r3, [r7, #32]

      while (1) {
          DHT_SCAN(&tCelsius, &RH);
 800106e:	f107 0220 	add.w	r2, r7, #32
 8001072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fe69 	bl	8000d50 <DHT_SCAN>

          char str1[16];
          char str2[16];

          lcd_put_cur(0, 0);
 800107e:	2100      	movs	r1, #0
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff ff41 	bl	8000f08 <lcd_put_cur>
          sprintf(str1, "TEMP: %.2f C", tCelsius);
 8001086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f9f5 	bl	8000478 <__aeabi_f2d>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	f107 0010 	add.w	r0, r7, #16
 8001096:	4912      	ldr	r1, [pc, #72]	@ (80010e0 <main+0xc0>)
 8001098:	f003 fccc 	bl	8004a34 <siprintf>
          lcd_send_string(str1);
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff8d 	bl	8000fc0 <lcd_send_string>

          lcd_put_cur(1, 0);
 80010a6:	2100      	movs	r1, #0
 80010a8:	2001      	movs	r0, #1
 80010aa:	f7ff ff2d 	bl	8000f08 <lcd_put_cur>
          sprintf(str2, "HUMI: %.2f %%", RH);
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f9e1 	bl	8000478 <__aeabi_f2d>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4638      	mov	r0, r7
 80010bc:	4909      	ldr	r1, [pc, #36]	@ (80010e4 <main+0xc4>)
 80010be:	f003 fcb9 	bl	8004a34 <siprintf>
          lcd_send_string(str2);
 80010c2:	463b      	mov	r3, r7
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff7b 	bl	8000fc0 <lcd_send_string>

          // Read every 2 seconds
          // Assuming a function delay exists
          HAL_Delay(1000);
 80010ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010ce:	f000 fd07 	bl	8001ae0 <HAL_Delay>
      while (1) {
 80010d2:	bf00      	nop
 80010d4:	e7cb      	b.n	800106e <main+0x4e>
 80010d6:	bf00      	nop
 80010d8:	2000024c 	.word	0x2000024c
 80010dc:	08006ce0 	.word	0x08006ce0
 80010e0:	08006cf0 	.word	0x08006cf0
 80010e4:	08006d00 	.word	0x08006d00

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b098      	sub	sp, #96	@ 0x60
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	2240      	movs	r2, #64	@ 0x40
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f003 fcff 	bl	8004afa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	463b      	mov	r3, r7
 80010fe:	2220      	movs	r2, #32
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f003 fcf9 	bl	8004afa <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001108:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800110c:	f001 fc94 	bl	8002a38 <HAL_PWREx_ControlVoltageScaling>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001116:	f000 f997 	bl	8001448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800111a:	2302      	movs	r3, #2
 800111c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001122:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001124:	2310      	movs	r3, #16
 8001126:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
 8001128:	2302      	movs	r3, #2
 800112a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
 800112c:	2302      	movs	r3, #2
 800112e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL1.PLLM = 1;
 8001130:	2301      	movs	r3, #1
 8001132:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL1.PLLN = 9;
 8001134:	2309      	movs	r3, #9
 8001136:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL1.PLLP = 2;
 8001138:	2302      	movs	r3, #2
 800113a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL1.PLLQ = 2;
 800113c:	2302      	movs	r3, #2
 800113e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLR = 3;
 8001140:	2303      	movs	r3, #3
 8001142:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL1.PLLFractional = 3072;
 8001144:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001148:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	f107 0320 	add.w	r3, r7, #32
 800114e:	4618      	mov	r0, r3
 8001150:	f001 fcd0 	bl	8002af4 <HAL_RCC_OscConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800115a:	f000 f975 	bl	8001448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115e:	233f      	movs	r3, #63	@ 0x3f
 8001160:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK7|RCC_CLOCKTYPE_HCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001162:	2303      	movs	r3, #3
 8001164:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB7CLKDivider = RCC_HCLK_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHB5_PLL1_CLKDivider = RCC_SYSCLK_PLL1_DIV2;
 8001176:	2304      	movs	r3, #4
 8001178:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHB5_HSEHSI_CLKDivider = RCC_SYSCLK_HSEHSI_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	2101      	movs	r1, #1
 8001182:	4618      	mov	r0, r3
 8001184:	f002 f8a0 	bl	80032c8 <HAL_RCC_ClockConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800118e:	f000 f95b 	bl	8001448 <Error_Handler>
  }
}
 8001192:	bf00      	nop
 8001194:	3760      	adds	r7, #96	@ 0x60
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001210 <MX_I2C1_Init+0x74>)
 80011a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001214 <MX_I2C1_Init+0x78>)
 80011a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <MX_I2C1_Init+0x74>)
 80011a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001218 <MX_I2C1_Init+0x7c>)
 80011aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011ac:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <MX_I2C1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b2:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <MX_I2C1_Init+0x74>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b8:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <MX_I2C1_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011be:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <MX_I2C1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <MX_I2C1_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <MX_I2C1_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <MX_I2C1_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011d6:	480e      	ldr	r0, [pc, #56]	@ (8001210 <MX_I2C1_Init+0x74>)
 80011d8:	f000 ffbc 	bl	8002154 <HAL_I2C_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011e2:	f000 f931 	bl	8001448 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011e6:	2100      	movs	r1, #0
 80011e8:	4809      	ldr	r0, [pc, #36]	@ (8001210 <MX_I2C1_Init+0x74>)
 80011ea:	f001 fb5d 	bl	80028a8 <HAL_I2CEx_ConfigAnalogFilter>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011f4:	f000 f928 	bl	8001448 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011f8:	2100      	movs	r1, #0
 80011fa:	4805      	ldr	r0, [pc, #20]	@ (8001210 <MX_I2C1_Init+0x74>)
 80011fc:	f001 fb9f 	bl	800293e <HAL_I2CEx_ConfigDigitalFilter>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001206:	f000 f91f 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200001f8 	.word	0x200001f8
 8001214:	40005400 	.word	0x40005400
 8001218:	00c0eaff 	.word	0x00c0eaff

0800121c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001220:	2000      	movs	r0, #0
 8001222:	f001 fbd9 	bl	80029d8 <HAL_ICACHE_ConfigAssociativityMode>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800122c:	f000 f90c 	bl	8001448 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001230:	f001 fbf2 	bl	8002a18 <HAL_ICACHE_Enable>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800123a:	f000 f905 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001262:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <MX_TIM3_Init+0x94>)
 8001264:	4a1d      	ldr	r2, [pc, #116]	@ (80012dc <MX_TIM3_Init+0x98>)
 8001266:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50-1;
 8001268:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <MX_TIM3_Init+0x94>)
 800126a:	2231      	movs	r2, #49	@ 0x31
 800126c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <MX_TIM3_Init+0x94>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001274:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <MX_TIM3_Init+0x94>)
 8001276:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800127a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <MX_TIM3_Init+0x94>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <MX_TIM3_Init+0x94>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001288:	4813      	ldr	r0, [pc, #76]	@ (80012d8 <MX_TIM3_Init+0x94>)
 800128a:	f002 fbbb 	bl	8003a04 <HAL_TIM_Base_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001294:	f000 f8d8 	bl	8001448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001298:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800129c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800129e:	f107 0310 	add.w	r3, r7, #16
 80012a2:	4619      	mov	r1, r3
 80012a4:	480c      	ldr	r0, [pc, #48]	@ (80012d8 <MX_TIM3_Init+0x94>)
 80012a6:	f002 fc51 	bl	8003b4c <HAL_TIM_ConfigClockSource>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012b0:	f000 f8ca 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <MX_TIM3_Init+0x94>)
 80012c2:	f002 fe33 	bl	8003f2c <HAL_TIMEx_MasterConfigSynchronization>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012cc:	f000 f8bc 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000024c 	.word	0x2000024c
 80012dc:	40000400 	.word	0x40000400

080012e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	4b50      	ldr	r3, [pc, #320]	@ (8001438 <MX_GPIO_Init+0x158>)
 80012f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001438 <MX_GPIO_Init+0x158>)
 80012fe:	f043 0302 	orr.w	r3, r3, #2
 8001302:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001306:	4b4c      	ldr	r3, [pc, #304]	@ (8001438 <MX_GPIO_Init+0x158>)
 8001308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b48      	ldr	r3, [pc, #288]	@ (8001438 <MX_GPIO_Init+0x158>)
 8001316:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800131a:	4a47      	ldr	r2, [pc, #284]	@ (8001438 <MX_GPIO_Init+0x158>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001324:	4b44      	ldr	r3, [pc, #272]	@ (8001438 <MX_GPIO_Init+0x158>)
 8001326:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001332:	4b41      	ldr	r3, [pc, #260]	@ (8001438 <MX_GPIO_Init+0x158>)
 8001334:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001338:	4a3f      	ldr	r2, [pc, #252]	@ (8001438 <MX_GPIO_Init+0x158>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001342:	4b3d      	ldr	r3, [pc, #244]	@ (8001438 <MX_GPIO_Init+0x158>)
 8001344:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|GPIO_PIN_7|LD1_Pin, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 6119 	mov.w	r1, #2448	@ 0x990
 8001356:	4839      	ldr	r0, [pc, #228]	@ (800143c <MX_GPIO_Init+0x15c>)
 8001358:	f000 fea8 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USART1_TX_Pin */
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 800135c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800136e:	2307      	movs	r3, #7
 8001370:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	4619      	mov	r1, r3
 8001378:	4830      	ldr	r0, [pc, #192]	@ (800143c <MX_GPIO_Init+0x15c>)
 800137a:	f000 fd33 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800137e:	f44f 6311 	mov.w	r3, #2320	@ 0x910
 8001382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138c:	2302      	movs	r3, #2
 800138e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	4619      	mov	r1, r3
 8001396:	4829      	ldr	r0, [pc, #164]	@ (800143c <MX_GPIO_Init+0x15c>)
 8001398:	f000 fd24 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART1_RX_Pin */
  GPIO_InitStruct.Pin = USART1_RX_Pin;
 800139c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013ae:	2307      	movs	r3, #7
 80013b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART1_RX_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	4619      	mov	r1, r3
 80013b8:	4821      	ldr	r0, [pc, #132]	@ (8001440 <MX_GPIO_Init+0x160>)
 80013ba:	f000 fd13 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	4619      	mov	r1, r3
 80013d4:	481b      	ldr	r0, [pc, #108]	@ (8001444 <MX_GPIO_Init+0x164>)
 80013d6:	f000 fd05 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013da:	2380      	movs	r3, #128	@ 0x80
 80013dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	4619      	mov	r1, r3
 80013f0:	4812      	ldr	r0, [pc, #72]	@ (800143c <MX_GPIO_Init+0x15c>)
 80013f2:	f000 fcf7 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 80013f6:	2340      	movs	r3, #64	@ 0x40
 80013f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001400:	2301      	movs	r3, #1
 8001402:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4619      	mov	r1, r3
 800140a:	480c      	ldr	r0, [pc, #48]	@ (800143c <MX_GPIO_Init+0x15c>)
 800140c:	f000 fcea 	bl	8001de4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI6_IRQn, 0, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	2011      	movs	r0, #17
 8001416:	f000 fc3f 	bl	8001c98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 800141a:	2011      	movs	r0, #17
 800141c:	f000 fc59 	bl	8001cd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	2018      	movs	r0, #24
 8001426:	f000 fc37 	bl	8001c98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 800142a:	2018      	movs	r0, #24
 800142c:	f000 fc51 	bl	8001cd2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001430:	bf00      	nop
 8001432:	3720      	adds	r7, #32
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	46020c00 	.word	0x46020c00
 800143c:	42020400 	.word	0x42020400
 8001440:	42020000 	.word	0x42020000
 8001444:	42020800 	.word	0x42020800

08001448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144c:	b672      	cpsid	i
}
 800144e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <Error_Handler+0x8>

08001454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <HAL_MspInit+0x30>)
 800145c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001460:	4a08      	ldr	r2, [pc, #32]	@ (8001484 <HAL_MspInit+0x30>)
 8001462:	f043 0304 	orr.w	r3, r3, #4
 8001466:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800146a:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <HAL_MspInit+0x30>)
 800146c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	46020c00 	.word	0x46020c00

08001488 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b09a      	sub	sp, #104	@ 0x68
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2240      	movs	r2, #64	@ 0x40
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 fb26 	bl	8004afa <memset>
  if(hi2c->Instance==I2C1)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a21      	ldr	r2, [pc, #132]	@ (8001538 <HAL_I2C_MspInit+0xb0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d13b      	bne.n	8001530 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014b8:	2304      	movs	r3, #4
 80014ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4618      	mov	r0, r3
 80014c6:	f002 f8eb 	bl	80036a0 <HAL_RCCEx_PeriphCLKConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014d0:	f7ff ffba 	bl	8001448 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	4b19      	ldr	r3, [pc, #100]	@ (800153c <HAL_I2C_MspInit+0xb4>)
 80014d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014da:	4a18      	ldr	r2, [pc, #96]	@ (800153c <HAL_I2C_MspInit+0xb4>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014e4:	4b15      	ldr	r3, [pc, #84]	@ (800153c <HAL_I2C_MspInit+0xb4>)
 80014e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB2     ------> I2C1_SCL
    PB1     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 80014f2:	2306      	movs	r3, #6
 80014f4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f6:	2312      	movs	r3, #18
 80014f8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001502:	2304      	movs	r3, #4
 8001504:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800150a:	4619      	mov	r1, r3
 800150c:	480c      	ldr	r0, [pc, #48]	@ (8001540 <HAL_I2C_MspInit+0xb8>)
 800150e:	f000 fc69 	bl	8001de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001512:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <HAL_I2C_MspInit+0xb4>)
 8001514:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001518:	4a08      	ldr	r2, [pc, #32]	@ (800153c <HAL_I2C_MspInit+0xb4>)
 800151a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800151e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_I2C_MspInit+0xb4>)
 8001524:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001530:	bf00      	nop
 8001532:	3768      	adds	r7, #104	@ 0x68
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40005400 	.word	0x40005400
 800153c:	46020c00 	.word	0x46020c00
 8001540:	42020400 	.word	0x42020400

08001544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0b      	ldr	r2, [pc, #44]	@ (8001580 <HAL_TIM_Base_MspInit+0x3c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d10e      	bne.n	8001574 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <HAL_TIM_Base_MspInit+0x40>)
 8001558:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800155c:	4a09      	ldr	r2, [pc, #36]	@ (8001584 <HAL_TIM_Base_MspInit+0x40>)
 800155e:	f043 0302 	orr.w	r3, r3, #2
 8001562:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001566:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <HAL_TIM_Base_MspInit+0x40>)
 8001568:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	40000400 	.word	0x40000400
 8001584:	46020c00 	.word	0x46020c00

08001588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <NMI_Handler+0x4>

08001590 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <MemManage_Handler+0x4>

080015a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <BusFault_Handler+0x4>

080015a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <UsageFault_Handler+0x4>

080015b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015de:	f000 fa5f 	bl	8001aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 80015ea:	2040      	movs	r0, #64	@ 0x40
 80015ec:	f000 fd76 	bl	80020dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015f8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015fc:	f000 fd6e 	bl	80020dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return 1;
 8001608:	2301      	movs	r3, #1
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_kill>:

int _kill(int pid, int sig)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800161e:	f003 fabf 	bl	8004ba0 <__errno>
 8001622:	4603      	mov	r3, r0
 8001624:	2216      	movs	r2, #22
 8001626:	601a      	str	r2, [r3, #0]
  return -1;
 8001628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <_exit>:

void _exit (int status)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ffe7 	bl	8001614 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001646:	bf00      	nop
 8001648:	e7fd      	b.n	8001646 <_exit+0x12>

0800164a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e00a      	b.n	8001672 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800165c:	f3af 8000 	nop.w
 8001660:	4601      	mov	r1, r0
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	60ba      	str	r2, [r7, #8]
 8001668:	b2ca      	uxtb	r2, r1
 800166a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	3301      	adds	r3, #1
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	429a      	cmp	r2, r3
 8001678:	dbf0      	blt.n	800165c <_read+0x12>
  }

  return len;
 800167a:	687b      	ldr	r3, [r7, #4]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	e009      	b.n	80016aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	60ba      	str	r2, [r7, #8]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3301      	adds	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	dbf1      	blt.n	8001696 <_write+0x12>
  }
  return len;
 80016b2:	687b      	ldr	r3, [r7, #4]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <_close>:

int _close(int file)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016e4:	605a      	str	r2, [r3, #4]
  return 0;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <_isatty>:

int _isatty(int file)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016fc:	2301      	movs	r3, #1
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800170a:	b480      	push	{r7}
 800170c:	b085      	sub	sp, #20
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800172c:	4a14      	ldr	r2, [pc, #80]	@ (8001780 <_sbrk+0x5c>)
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <_sbrk+0x60>)
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001738:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <_sbrk+0x64>)
 8001742:	4a12      	ldr	r2, [pc, #72]	@ (800178c <_sbrk+0x68>)
 8001744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001746:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	429a      	cmp	r2, r3
 8001752:	d207      	bcs.n	8001764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001754:	f003 fa24 	bl	8004ba0 <__errno>
 8001758:	4603      	mov	r3, r0
 800175a:	220c      	movs	r2, #12
 800175c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	e009      	b.n	8001778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001764:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176a:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	4a05      	ldr	r2, [pc, #20]	@ (8001788 <_sbrk+0x64>)
 8001774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20020000 	.word	0x20020000
 8001784:	00000400 	.word	0x00000400
 8001788:	20000298 	.word	0x20000298
 800178c:	200003f0 	.word	0x200003f0

08001790 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  __IO uint32_t tmpreg;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <SystemInit+0x20>)
 8001796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800179a:	4a05      	ldr	r2, [pc, #20]	@ (80017b0 <SystemInit+0x20>)
 800179c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  CLEAR_BIT(ADC4->CR, ADC_CR_ADVREGEN);

  /* Disable ADC kernel clock */
  CLEAR_BIT(RCC->AHB4ENR, RCC_AHB4ENR_ADC4EN);
#endif
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	@ 0x24
 80017b8:	af00      	add	r7, sp, #0
  uint32_t plln;
  float_t fracn;
  float_t pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 80017ba:	4b4f      	ldr	r3, [pc, #316]	@ (80018f8 <SystemCoreClockUpdate+0x144>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d002      	beq.n	80017cc <SystemCoreClockUpdate+0x18>
 80017c6:	2b0c      	cmp	r3, #12
 80017c8:	d00b      	beq.n	80017e2 <SystemCoreClockUpdate+0x2e>
 80017ca:	e07d      	b.n	80018c8 <SystemCoreClockUpdate+0x114>
  {
    case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
      SystemCoreClock = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 80017cc:	4b4a      	ldr	r3, [pc, #296]	@ (80018f8 <SystemCoreClockUpdate+0x144>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	0d1b      	lsrs	r3, r3, #20
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	4a49      	ldr	r2, [pc, #292]	@ (80018fc <SystemCoreClockUpdate+0x148>)
 80017d8:	fa22 f303 	lsr.w	r3, r2, r3
 80017dc:	4a48      	ldr	r2, [pc, #288]	@ (8001900 <SystemCoreClockUpdate+0x14c>)
 80017de:	6013      	str	r3, [r2, #0]
      break;
 80017e0:	e076      	b.n	80018d0 <SystemCoreClockUpdate+0x11c>

    case (RCC_CFGR1_SWS_0 | RCC_CFGR1_SWS_1):  /* PLL1 used as system clock source */
      /* PLL_VCO = (PLLsource / PLLM) * PLLN * FractionnalPart
          SYSCLK = PLL_VCO / PLLR */
      /* Get PLL1 CFGR and DIVR register values */
      tmp1 = RCC->PLL1CFGR;
 80017e2:	4b45      	ldr	r3, [pc, #276]	@ (80018f8 <SystemCoreClockUpdate+0x144>)
 80017e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e6:	61fb      	str	r3, [r7, #28]
      tmp2 = RCC->PLL1DIVR;
 80017e8:	4b43      	ldr	r3, [pc, #268]	@ (80018f8 <SystemCoreClockUpdate+0x144>)
 80017ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ec:	617b      	str	r3, [r7, #20]

      /* Retrieve PLL1 multiplication factor and divider */
      pllm = ((tmp1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	3301      	adds	r3, #1
 80017f8:	613b      	str	r3, [r7, #16]
      plln = (tmp2 & RCC_PLL1DIVR_PLL1N) + 1U;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001800:	3301      	adds	r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
      pllr = ((tmp2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	0e1b      	lsrs	r3, r3, #24
 8001808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800180c:	3301      	adds	r3, #1
 800180e:	60bb      	str	r3, [r7, #8]

      /* Check if fractional part is enable */
      if ((tmp1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00b      	beq.n	8001832 <SystemCoreClockUpdate+0x7e>
      {
        fracn = (float_t)((uint32_t)((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800181a:	4b37      	ldr	r3, [pc, #220]	@ (80018f8 <SystemCoreClockUpdate+0x144>)
 800181c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800181e:	08db      	lsrs	r3, r3, #3
 8001820:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800182c:	edc7 7a06 	vstr	s15, [r7, #24]
 8001830:	e002      	b.n	8001838 <SystemCoreClockUpdate+0x84>
      }
      else
      {
        fracn = (float_t)0U;
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	61bb      	str	r3, [r7, #24]
      }

      /* determine PLL source */
      pllsource = (tmp1 & RCC_PLL1CFGR_PLL1SRC);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d003      	beq.n	800184e <SystemCoreClockUpdate+0x9a>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d003      	beq.n	8001854 <SystemCoreClockUpdate+0xa0>
 800184c:	e00c      	b.n	8001868 <SystemCoreClockUpdate+0xb4>
      switch (pllsource)
      {
        /* HSI used as PLL1 clock source */
        case RCC_PLL1CFGR_PLL1SRC_1:
          tmp1 = HSI_VALUE;
 800184e:	4b2d      	ldr	r3, [pc, #180]	@ (8001904 <SystemCoreClockUpdate+0x150>)
 8001850:	61fb      	str	r3, [r7, #28]
          break;
 8001852:	e00c      	b.n	800186e <SystemCoreClockUpdate+0xba>

        /* HSE used as PLL1 clock source */
        case (RCC_PLL1CFGR_PLL1SRC_0 | RCC_PLL1CFGR_PLL1SRC_1):
          tmp1 = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8001854:	4b28      	ldr	r3, [pc, #160]	@ (80018f8 <SystemCoreClockUpdate+0x144>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0d1b      	lsrs	r3, r3, #20
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	4a27      	ldr	r2, [pc, #156]	@ (80018fc <SystemCoreClockUpdate+0x148>)
 8001860:	fa22 f303 	lsr.w	r3, r2, r3
 8001864:	61fb      	str	r3, [r7, #28]
          break;
 8001866:	e002      	b.n	800186e <SystemCoreClockUpdate+0xba>

        default:
          tmp1 = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
          break;
 800186c:	bf00      	nop
      }

      /* Compute VCO output frequency */
      pllvco = ((float_t) tmp1 / (float_t)pllm) * (((float_t)plln + (float_t)(fracn / (float_t)0x2000U)));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	ee07 3a90 	vmov	s15, r3
 8001874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001890:	ed97 6a06 	vldr	s12, [r7, #24]
 8001894:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8001908 <SystemCoreClockUpdate+0x154>
 8001898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800189c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a4:	edc7 7a00 	vstr	s15, [r7]
      SystemCoreClock = (uint32_t)((float_t)(pllvco / (float_t)pllr));
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	ee07 3a90 	vmov	s15, r3
 80018ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018b2:	edd7 6a00 	vldr	s13, [r7]
 80018b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018be:	ee17 2a90 	vmov	r2, s15
 80018c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <SystemCoreClockUpdate+0x14c>)
 80018c4:	601a      	str	r2, [r3, #0]
      break;
 80018c6:	e003      	b.n	80018d0 <SystemCoreClockUpdate+0x11c>

    case 0x00u:  /* HSI used as system clock source */
    default:
      SystemCoreClock = HSI_VALUE;
 80018c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001900 <SystemCoreClockUpdate+0x14c>)
 80018ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001904 <SystemCoreClockUpdate+0x150>)
 80018cc:	601a      	str	r2, [r3, #0]
      break;
 80018ce:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp1 = AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)];
 80018d0:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <SystemCoreClockUpdate+0x144>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	4a0c      	ldr	r2, [pc, #48]	@ (800190c <SystemCoreClockUpdate+0x158>)
 80018da:	5cd3      	ldrb	r3, [r2, r3]
 80018dc:	61fb      	str	r3, [r7, #28]

  /* HCLK clock frequency */
  SystemCoreClock >>= tmp1;
 80018de:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <SystemCoreClockUpdate+0x14c>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
 80018e8:	4a05      	ldr	r2, [pc, #20]	@ (8001900 <SystemCoreClockUpdate+0x14c>)
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	3724      	adds	r7, #36	@ 0x24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	46020c00 	.word	0x46020c00
 80018fc:	01e84800 	.word	0x01e84800
 8001900:	20000000 	.word	0x20000000
 8001904:	00f42400 	.word	0x00f42400
 8001908:	46000000 	.word	0x46000000
 800190c:	08006d10 	.word	0x08006d10

08001910 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001910:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001948 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001914:	f7ff ff3c 	bl	8001790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001918:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800191a:	e003      	b.n	8001924 <LoopCopyDataInit>

0800191c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800191c:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800191e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001920:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001922:	3104      	adds	r1, #4

08001924 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001924:	480a      	ldr	r0, [pc, #40]	@ (8001950 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001926:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001928:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800192a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800192c:	d3f6      	bcc.n	800191c <CopyDataInit>
	ldr	r2, =_sbss
 800192e:	4a0a      	ldr	r2, [pc, #40]	@ (8001958 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001930:	e002      	b.n	8001938 <LoopFillZerobss>

08001932 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001932:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001934:	f842 3b04 	str.w	r3, [r2], #4

08001938 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001938:	4b08      	ldr	r3, [pc, #32]	@ (800195c <LoopForever+0x16>)
	cmp	r2, r3
 800193a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800193c:	d3f9      	bcc.n	8001932 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800193e:	f003 f935 	bl	8004bac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001942:	f7ff fb6d 	bl	8001020 <main>

08001946 <LoopForever>:

LoopForever:
    b LoopForever
 8001946:	e7fe      	b.n	8001946 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001948:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 800194c:	08007098 	.word	0x08007098
	ldr	r0, =_sdata
 8001950:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001954:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8001958:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 800195c:	200003ec 	.word	0x200003ec

08001960 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001960:	e7fe      	b.n	8001960 <ADC4_IRQHandler>
	...

08001964 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001968:	4b0d      	ldr	r3, [pc, #52]	@ (80019a0 <HAL_Init+0x3c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0c      	ldr	r2, [pc, #48]	@ (80019a0 <HAL_Init+0x3c>)
 800196e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001974:	2003      	movs	r0, #3
 8001976:	f000 f984 	bl	8001c82 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 800197a:	f7ff ff1b 	bl	80017b4 <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800197e:	2004      	movs	r0, #4
 8001980:	f000 f9d8 	bl	8001d34 <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001984:	200f      	movs	r0, #15
 8001986:	f000 f80d 	bl	80019a4 <HAL_InitTick>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_Init+0x30>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e002      	b.n	800199a <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001994:	f7ff fd5e 	bl	8001454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40022000 	.word	0x40022000

080019a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80019b0:	4b36      	ldr	r3, [pc, #216]	@ (8001a8c <HAL_InitTick+0xe8>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e062      	b.n	8001a82 <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80019bc:	4b34      	ldr	r3, [pc, #208]	@ (8001a90 <HAL_InitTick+0xec>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d10c      	bne.n	80019e2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80019c8:	4b32      	ldr	r3, [pc, #200]	@ (8001a94 <HAL_InitTick+0xf0>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b2f      	ldr	r3, [pc, #188]	@ (8001a8c <HAL_InitTick+0xe8>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	e03d      	b.n	8001a5e <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 80019e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a98 <HAL_InitTick+0xf4>)
 80019e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019e8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80019ec:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80019f4:	d025      	beq.n	8001a42 <HAL_InitTick+0x9e>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80019fc:	d82e      	bhi.n	8001a5c <HAL_InitTick+0xb8>
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <HAL_InitTick+0x6a>
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a0a:	d00d      	beq.n	8001a28 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8001a0c:	e026      	b.n	8001a5c <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001a0e:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <HAL_InitTick+0xf0>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4b1e      	ldr	r3, [pc, #120]	@ (8001a8c <HAL_InitTick+0xe8>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	4619      	mov	r1, r3
 8001a18:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001a1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a24:	60fb      	str	r3, [r7, #12]
        break;
 8001a26:	e01a      	b.n	8001a5e <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001a28:	4b18      	ldr	r3, [pc, #96]	@ (8001a8c <HAL_InitTick+0xe8>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a36:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3e:	60fb      	str	r3, [r7, #12]
        break;
 8001a40:	e00d      	b.n	8001a5e <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001a42:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <HAL_InitTick+0xe8>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a50:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	60fb      	str	r3, [r7, #12]
        break;
 8001a5a:	e000      	b.n	8001a5e <HAL_InitTick+0xba>
        break;
 8001a5c:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 f946 	bl	8001cf0 <HAL_SYSTICK_Config>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e009      	b.n	8001a82 <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	f04f 30ff 	mov.w	r0, #4294967295
 8001a76:	f000 f90f 	bl	8001c98 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001a7a:	4a08      	ldr	r2, [pc, #32]	@ (8001a9c <HAL_InitTick+0xf8>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000008 	.word	0x20000008
 8001a90:	e000e010 	.word	0xe000e010
 8001a94:	20000000 	.word	0x20000000
 8001a98:	46020c00 	.word	0x46020c00
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_IncTick+0x20>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_IncTick+0x24>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a04      	ldr	r2, [pc, #16]	@ (8001ac4 <HAL_IncTick+0x24>)
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000008 	.word	0x20000008
 8001ac4:	2000029c 	.word	0x2000029c

08001ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return uwTick;
 8001acc:	4b03      	ldr	r3, [pc, #12]	@ (8001adc <HAL_GetTick+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	2000029c 	.word	0x2000029c

08001ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff ffee 	bl	8001ac8 <HAL_GetTick>
 8001aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d005      	beq.n	8001b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <HAL_Delay+0x44>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b06:	bf00      	nop
 8001b08:	f7ff ffde 	bl	8001ac8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d8f7      	bhi.n	8001b08 <HAL_Delay+0x28>
  {
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000008 	.word	0x20000008

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	@ (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4907      	ldr	r1, [pc, #28]	@ (8001bc4 <__NVIC_EnableIRQ+0x38>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	@ (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	@ (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	@ 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ff4c 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
 8001ca6:	f7ff ff63 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f7ff ffb0 	bl	8001c1c <NVIC_EncodePriority>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff7f 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbaxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff53 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d00:	d301      	bcc.n	8001d06 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00d      	b.n	8001d22 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001d06:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <HAL_SYSTICK_Config+0x40>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001d0e:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <HAL_SYSTICK_Config+0x40>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001d14:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_SYSTICK_Config+0x40>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a05      	ldr	r2, [pc, #20]	@ (8001d30 <HAL_SYSTICK_Config+0x40>)
 8001d1a:	f043 0303 	orr.w	r3, r3, #3
 8001d1e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000e010 	.word	0xe000e010

08001d34 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d844      	bhi.n	8001dcc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001d42:	a201      	add	r2, pc, #4	@ (adr r2, 8001d48 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d48:	08001d6b 	.word	0x08001d6b
 8001d4c:	08001d89 	.word	0x08001d89
 8001d50:	08001dab 	.word	0x08001dab
 8001d54:	08001dcd 	.word	0x08001dcd
 8001d58:	08001d5d 	.word	0x08001d5d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1e      	ldr	r2, [pc, #120]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	6013      	str	r3, [r2, #0]
      break;
 8001d68:	e031      	b.n	8001dce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d70:	f023 0304 	bic.w	r3, r3, #4
 8001d74:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001d76:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d7c:	4a18      	ldr	r2, [pc, #96]	@ (8001de0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d7e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001d82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001d86:	e022      	b.n	8001dce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d88:	4b14      	ldr	r3, [pc, #80]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a13      	ldr	r2, [pc, #76]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d8e:	f023 0304 	bic.w	r3, r3, #4
 8001d92:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001d94:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d9a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001d9e:	4a10      	ldr	r2, [pc, #64]	@ (8001de0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001da0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001da4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001da8:	e011      	b.n	8001dce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001daa:	4b0c      	ldr	r3, [pc, #48]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a0b      	ldr	r2, [pc, #44]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001db0:	f023 0304 	bic.w	r3, r3, #4
 8001db4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001db6:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dbc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001dc0:	4a07      	ldr	r2, [pc, #28]	@ (8001de0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001dc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001dca:	e000      	b.n	8001dce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001dcc:	bf00      	nop
  }
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010
 8001de0:	46020c00 	.word	0x46020c00

08001de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001df2:	e130      	b.n	8002056 <HAL_GPIO_Init+0x272>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2101      	movs	r1, #1
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	4013      	ands	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8122 	beq.w	8002050 <HAL_GPIO_Init+0x26c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d005      	beq.n	8001e24 <HAL_GPIO_Init+0x40>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d130      	bne.n	8001e86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	f003 0201 	and.w	r2, r3, #1
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d017      	beq.n	8001ec2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d123      	bne.n	8001f16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	08da      	lsrs	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3208      	adds	r2, #8
 8001ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	08da      	lsrs	r2, r3, #3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3208      	adds	r2, #8
 8001f10:	6939      	ldr	r1, [r7, #16]
 8001f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	2203      	movs	r2, #3
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0203 	and.w	r2, r3, #3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d07c      	beq.n	8002050 <HAL_GPIO_Init+0x26c>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001f56:	4a47      	ldr	r2, [pc, #284]	@ (8002074 <HAL_GPIO_Init+0x290>)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	3318      	adds	r3, #24
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	0a9a      	lsrs	r2, r3, #10
 8001f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002078 <HAL_GPIO_Init+0x294>)
 8001f80:	4013      	ands	r3, r2
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	f002 0203 	and.w	r2, r2, #3
 8001f88:	00d2      	lsls	r2, r2, #3
 8001f8a:	4093      	lsls	r3, r2
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001f92:	4938      	ldr	r1, [pc, #224]	@ (8002074 <HAL_GPIO_Init+0x290>)
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	3318      	adds	r3, #24
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fa0:	4b34      	ldr	r3, [pc, #208]	@ (8002074 <HAL_GPIO_Init+0x290>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x1e0>
        {
          temp |= iocurrent;
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fc4:	4a2b      	ldr	r2, [pc, #172]	@ (8002074 <HAL_GPIO_Init+0x290>)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fca:	4b2a      	ldr	r3, [pc, #168]	@ (8002074 <HAL_GPIO_Init+0x290>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x20a>
        {
          temp |= iocurrent;
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fee:	4a21      	ldr	r2, [pc, #132]	@ (8002074 <HAL_GPIO_Init+0x290>)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8002074 <HAL_GPIO_Init+0x290>)
 8001ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800201a:	4a16      	ldr	r2, [pc, #88]	@ (8002074 <HAL_GPIO_Init+0x290>)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8002022:	4b14      	ldr	r3, [pc, #80]	@ (8002074 <HAL_GPIO_Init+0x290>)
 8002024:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	43db      	mvns	r3, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002048:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <HAL_GPIO_Init+0x290>)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	3301      	adds	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	f47f aec7 	bne.w	8001df4 <HAL_GPIO_Init+0x10>
  }
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	371c      	adds	r7, #28
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	46022000 	.word	0x46022000
 8002078:	002f7f7f 	.word	0x002f7f7f

0800207c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	887b      	ldrh	r3, [r7, #2]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	e001      	b.n	800209e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800209e:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]
 80020b8:	4613      	mov	r3, r2
 80020ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020bc:	787b      	ldrb	r3, [r7, #1]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020c8:	e002      	b.n	80020d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ca:	887a      	ldrh	r2, [r7, #2]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00U)
 80020e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002124 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80020f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002124 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f814 	bl	8002128 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00U)
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d006      	beq.n	800211a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800210c:	4a05      	ldr	r2, [pc, #20]	@ (8002124 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	4618      	mov	r0, r3
 8002116:	f000 f812 	bl	800213e <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	46022000 	.word	0x46022000

08002128 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e08d      	b.n	8002282 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff f984 	bl	8001488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2224      	movs	r2, #36	@ 0x24
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d107      	bne.n	80021ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	e006      	b.n	80021dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80021da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d108      	bne.n	80021f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	e007      	b.n	8002206 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002204:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002214:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002218:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002228:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69d9      	ldr	r1, [r3, #28]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1a      	ldr	r2, [r3, #32]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af02      	add	r7, sp, #8
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	461a      	mov	r2, r3
 8002298:	460b      	mov	r3, r1
 800229a:	817b      	strh	r3, [r7, #10]
 800229c:	4613      	mov	r3, r2
 800229e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	f040 80da 	bne.w	8002462 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_I2C_Master_Transmit+0x30>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e0d3      	b.n	8002464 <HAL_I2C_Master_Transmit+0x1d8>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022c4:	f7ff fc00 	bl	8001ac8 <HAL_GetTick>
 80022c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2319      	movs	r3, #25
 80022d0:	2201      	movs	r2, #1
 80022d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f8f0 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e0be      	b.n	8002464 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2221      	movs	r2, #33	@ 0x21
 80022ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2210      	movs	r2, #16
 80022f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	893a      	ldrh	r2, [r7, #8]
 8002306:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002312:	b29b      	uxth	r3, r3
 8002314:	2bff      	cmp	r3, #255	@ 0xff
 8002316:	d90e      	bls.n	8002336 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	22ff      	movs	r2, #255	@ 0xff
 800231c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002322:	b2da      	uxtb	r2, r3
 8002324:	8979      	ldrh	r1, [r7, #10]
 8002326:	4b51      	ldr	r3, [pc, #324]	@ (800246c <HAL_I2C_Master_Transmit+0x1e0>)
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 fa88 	bl	8002844 <I2C_TransferConfig>
 8002334:	e06c      	b.n	8002410 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002344:	b2da      	uxtb	r2, r3
 8002346:	8979      	ldrh	r1, [r7, #10]
 8002348:	4b48      	ldr	r3, [pc, #288]	@ (800246c <HAL_I2C_Master_Transmit+0x1e0>)
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 fa77 	bl	8002844 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002356:	e05b      	b.n	8002410 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	6a39      	ldr	r1, [r7, #32]
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 f906 	bl	800256e <I2C_WaitOnTXISFlagUntilTimeout>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e07b      	b.n	8002464 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002370:	781a      	ldrb	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d034      	beq.n	8002410 <HAL_I2C_Master_Transmit+0x184>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d130      	bne.n	8002410 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	2200      	movs	r2, #0
 80023b6:	2180      	movs	r1, #128	@ 0x80
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f87f 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e04d      	b.n	8002464 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2bff      	cmp	r3, #255	@ 0xff
 80023d0:	d90e      	bls.n	80023f0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	22ff      	movs	r2, #255	@ 0xff
 80023d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	8979      	ldrh	r1, [r7, #10]
 80023e0:	2300      	movs	r3, #0
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 fa2b 	bl	8002844 <I2C_TransferConfig>
 80023ee:	e00f      	b.n	8002410 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	8979      	ldrh	r1, [r7, #10]
 8002402:	2300      	movs	r3, #0
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 fa1a 	bl	8002844 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002414:	b29b      	uxth	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d19e      	bne.n	8002358 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	6a39      	ldr	r1, [r7, #32]
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f8ec 	bl	80025fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e01a      	b.n	8002464 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2220      	movs	r2, #32
 8002434:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b0b      	ldr	r3, [pc, #44]	@ (8002470 <HAL_I2C_Master_Transmit+0x1e4>)
 8002442:	400b      	ands	r3, r1
 8002444:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	e000      	b.n	8002464 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002462:	2302      	movs	r3, #2
  }
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	80002000 	.word	0x80002000
 8002470:	fe00e800 	.word	0xfe00e800

08002474 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b02      	cmp	r3, #2
 8002488:	d103      	bne.n	8002492 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2200      	movs	r2, #0
 8002490:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d007      	beq.n	80024b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	619a      	str	r2, [r3, #24]
  }
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	4613      	mov	r3, r2
 80024ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024cc:	e03b      	b.n	8002546 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	6839      	ldr	r1, [r7, #0]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f8d6 	bl	8002684 <I2C_IsErrorOccurred>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e041      	b.n	8002566 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d02d      	beq.n	8002546 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ea:	f7ff faed 	bl	8001ac8 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d302      	bcc.n	8002500 <I2C_WaitOnFlagUntilTimeout+0x44>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d122      	bne.n	8002546 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	4013      	ands	r3, r2
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	429a      	cmp	r2, r3
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	429a      	cmp	r2, r3
 800251c:	d113      	bne.n	8002546 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	f043 0220 	orr.w	r2, r3, #32
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e00f      	b.n	8002566 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699a      	ldr	r2, [r3, #24]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4013      	ands	r3, r2
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	429a      	cmp	r2, r3
 8002554:	bf0c      	ite	eq
 8002556:	2301      	moveq	r3, #1
 8002558:	2300      	movne	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	429a      	cmp	r2, r3
 8002562:	d0b4      	beq.n	80024ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800257a:	e033      	b.n	80025e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	68b9      	ldr	r1, [r7, #8]
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f87f 	bl	8002684 <I2C_IsErrorOccurred>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e031      	b.n	80025f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002596:	d025      	beq.n	80025e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002598:	f7ff fa96 	bl	8001ac8 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d302      	bcc.n	80025ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d11a      	bne.n	80025e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d013      	beq.n	80025e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c0:	f043 0220 	orr.w	r2, r3, #32
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e007      	b.n	80025f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d1c4      	bne.n	800257c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002608:	e02f      	b.n	800266a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f838 	bl	8002684 <I2C_IsErrorOccurred>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e02d      	b.n	800267a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261e:	f7ff fa53 	bl	8001ac8 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	429a      	cmp	r2, r3
 800262c:	d302      	bcc.n	8002634 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d11a      	bne.n	800266a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	2b20      	cmp	r3, #32
 8002640:	d013      	beq.n	800266a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002646:	f043 0220 	orr.w	r2, r3, #32
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e007      	b.n	800267a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b20      	cmp	r3, #32
 8002676:	d1c8      	bne.n	800260a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	@ 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d068      	beq.n	8002782 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2210      	movs	r2, #16
 80026b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026b8:	e049      	b.n	800274e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c0:	d045      	beq.n	800274e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026c2:	f7ff fa01 	bl	8001ac8 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d302      	bcc.n	80026d8 <I2C_IsErrorOccurred+0x54>
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d13a      	bne.n	800274e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026fa:	d121      	bne.n	8002740 <I2C_IsErrorOccurred+0xbc>
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002702:	d01d      	beq.n	8002740 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	2b20      	cmp	r3, #32
 8002708:	d01a      	beq.n	8002740 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002718:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800271a:	f7ff f9d5 	bl	8001ac8 <HAL_GetTick>
 800271e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002720:	e00e      	b.n	8002740 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002722:	f7ff f9d1 	bl	8001ac8 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b19      	cmp	r3, #25
 800272e:	d907      	bls.n	8002740 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	f043 0320 	orr.w	r3, r3, #32
 8002736:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800273e:	e006      	b.n	800274e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	2b20      	cmp	r3, #32
 800274c:	d1e9      	bne.n	8002722 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b20      	cmp	r3, #32
 800275a:	d003      	beq.n	8002764 <I2C_IsErrorOccurred+0xe0>
 800275c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0aa      	beq.n	80026ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002764:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002768:	2b00      	cmp	r3, #0
 800276a:	d103      	bne.n	8002774 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2220      	movs	r2, #32
 8002772:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	f043 0304 	orr.w	r3, r3, #4
 800277a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00b      	beq.n	80027ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00b      	beq.n	80027ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	f043 0308 	orr.w	r3, r3, #8
 80027bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00b      	beq.n	80027f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	f043 0302 	orr.w	r3, r3, #2
 80027de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80027f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01c      	beq.n	8002832 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f7ff fe3b 	bl	8002474 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b0d      	ldr	r3, [pc, #52]	@ (8002840 <I2C_IsErrorOccurred+0x1bc>)
 800280a:	400b      	ands	r3, r1
 800280c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	431a      	orrs	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002832:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002836:	4618      	mov	r0, r3
 8002838:	3728      	adds	r7, #40	@ 0x28
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	fe00e800 	.word	0xfe00e800

08002844 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	817b      	strh	r3, [r7, #10]
 8002852:	4613      	mov	r3, r2
 8002854:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002856:	897b      	ldrh	r3, [r7, #10]
 8002858:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800285c:	7a7b      	ldrb	r3, [r7, #9]
 800285e:	041b      	lsls	r3, r3, #16
 8002860:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002864:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	4313      	orrs	r3, r2
 800286e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002872:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	0d5b      	lsrs	r3, r3, #21
 800287e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002882:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <I2C_TransferConfig+0x60>)
 8002884:	430b      	orrs	r3, r1
 8002886:	43db      	mvns	r3, r3
 8002888:	ea02 0103 	and.w	r1, r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002896:	bf00      	nop
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	03ff63ff 	.word	0x03ff63ff

080028a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	d138      	bne.n	8002930 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e032      	b.n	8002932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2224      	movs	r2, #36	@ 0x24
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80028fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6819      	ldr	r1, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	e000      	b.n	8002932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002930:	2302      	movs	r3, #2
  }
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b20      	cmp	r3, #32
 8002952:	d139      	bne.n	80029c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800295e:	2302      	movs	r3, #2
 8002960:	e033      	b.n	80029ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2224      	movs	r2, #36	@ 0x24
 800296e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0201 	bic.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002990:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e000      	b.n	80029ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029c8:	2302      	movs	r3, #2
  }
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80029e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
 80029f4:	e007      	b.n	8002a06 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80029f6:	4b07      	ldr	r3, [pc, #28]	@ (8002a14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 0204 	bic.w	r2, r3, #4
 80029fe:	4905      	ldr	r1, [pc, #20]	@ (8002a14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	40030400 	.word	0x40030400

08002a18 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002a1c:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <HAL_ICACHE_Enable+0x1c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a04      	ldr	r2, [pc, #16]	@ (8002a34 <HAL_ICACHE_Enable+0x1c>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40030400 	.word	0x40030400

08002a38 <HAL_PWREx_ControlVoltageScaling>:
  *        only take effect after the 2.4 GHz RADIO has entered Sleep or Deepsleep mode.
  * @note  In range 2, the 2.4 GHz RADIO shall not transmit nor receive.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  uint32_t vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002a40:	4b29      	ldr	r3, [pc, #164]	@ (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a48:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d101      	bne.n	8002a56 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	e042      	b.n	8002adc <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Set voltage scaling level */
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 8002a56:	4b24      	ldr	r3, [pc, #144]	@ (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002a5e:	4922      	ldr	r1, [pc, #136]	@ (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60cb      	str	r3, [r1, #12]


  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8002a66:	4b21      	ldr	r3, [pc, #132]	@ (8002aec <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2232      	movs	r2, #50	@ 0x32
 8002a6c:	fb02 f303 	mul.w	r3, r2, r3
 8002a70:	4a1f      	ldr	r2, [pc, #124]	@ (8002af0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	0c9b      	lsrs	r3, r3, #18
 8002a78:	3301      	adds	r3, #1
 8002a7a:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002a7c:	e002      	b.n	8002a84 <HAL_PWREx_ControlVoltageScaling+0x4c>
  {
    timeout--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002a84:	4b18      	ldr	r3, [pc, #96]	@ (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d102      	bne.n	8002a96 <HAL_PWREx_ControlVoltageScaling+0x5e>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f3      	bne.n	8002a7e <HAL_PWREx_ControlVoltageScaling+0x46>
  }

  /* Check time out  */
  if (timeout == 0U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_PWREx_ControlVoltageScaling+0x68>
  {
    return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e01d      	b.n	8002adc <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Wait until ACTVOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8002aa0:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2232      	movs	r2, #50	@ 0x32
 8002aa6:	fb02 f303 	mul.w	r3, r2, r3
 8002aaa:	4a11      	ldr	r2, [pc, #68]	@ (8002af0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002aac:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab0:	0c9b      	lsrs	r3, r3, #18
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002ab6:	e002      	b.n	8002abe <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002abe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d102      	bne.n	8002ad0 <HAL_PWREx_ControlVoltageScaling+0x98>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f3      	bne.n	8002ab8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out  */
  if (timeout == 0U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_PWREx_ControlVoltageScaling+0xa2>
  {
    return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e000      	b.n	8002adc <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	46020800 	.word	0x46020800
 8002aec:	20000000 	.word	0x20000000
 8002af0:	431bde83 	.word	0x431bde83

08002af4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08c      	sub	sp, #48	@ 0x30
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t mask;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e3d9      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b06:	4b90      	ldr	r3, [pc, #576]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	623b      	str	r3, [r7, #32]
  pllsrc = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002b10:	4b8d      	ldr	r3, [pc, #564]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d072      	beq.n	8002c0c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL1 in these cases it is not allowed to be disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_OscConfig+0x44>
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	2b0c      	cmp	r3, #12
 8002b30:	d12a      	bne.n	8002b88 <HAL_RCC_OscConfig+0x94>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSE)))
 8002b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d127      	bne.n	8002b88 <HAL_RCC_OscConfig+0x94>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCC_OscConfig+0x50>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e3ba      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Otherwise, applying divider is allowed */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d15f      	bne.n	8002c0a <HAL_RCC_OscConfig+0x116>
        {
          assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

          /* Adjust the HSE division factor */
          __HAL_RCC_HSE_CONFIG(RCC_HSE_ON | RCC_OscInitStruct->HSEDiv);
 8002b4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	4a7b      	ldr	r2, [pc, #492]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b5e:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSE value */
          SystemCoreClock = (HSE_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSEPRE)) >> RCC_CR_HSEPRE_Pos)));
 8002b60:	4b79      	ldr	r3, [pc, #484]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	0d1b      	lsrs	r3, r3, #20
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	4a78      	ldr	r2, [pc, #480]	@ (8002d4c <HAL_RCC_OscConfig+0x258>)
 8002b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b70:	4a77      	ldr	r2, [pc, #476]	@ (8002d50 <HAL_RCC_OscConfig+0x25c>)
 8002b72:	6013      	str	r3, [r2, #0]

          /* Adapt Systick interrupt period */
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b74:	4b77      	ldr	r3, [pc, #476]	@ (8002d54 <HAL_RCC_OscConfig+0x260>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fe ff13 	bl	80019a4 <HAL_InitTick>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d042      	beq.n	8002c0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e398      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01f      	beq.n	8002bd0 <HAL_RCC_OscConfig+0xdc>
      {
        assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG((RCC_OscInitStruct->HSEState | RCC_OscInitStruct->HSEDiv));
 8002b90:	4b6d      	ldr	r3, [pc, #436]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6859      	ldr	r1, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	4969      	ldr	r1, [pc, #420]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe ff8e 	bl	8001ac8 <HAL_GetTick>
 8002bac:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0xce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb0:	f7fe ff8a 	bl	8001ac8 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	@ 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e37b      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bc2:	4b61      	ldr	r3, [pc, #388]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0xbc>
 8002bce:	e01d      	b.n	8002c0c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd0:	4b5d      	ldr	r3, [pc, #372]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	495a      	ldr	r1, [pc, #360]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fe ff71 	bl	8001ac8 <HAL_GetTick>
 8002be6:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bea:	f7fe ff6d 	bl	8001ac8 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b64      	cmp	r3, #100	@ 0x64
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e35e      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bfc:	4b52      	ldr	r3, [pc, #328]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f0      	bne.n	8002bea <HAL_RCC_OscConfig+0xf6>
 8002c08:	e000      	b.n	8002c0c <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002c0a:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d05a      	beq.n	8002cce <HAL_RCC_OscConfig+0x1da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_RCC_OscConfig+0x136>
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	2b0c      	cmp	r3, #12
 8002c22:	d113      	bne.n	8002c4c <HAL_RCC_OscConfig+0x158>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSI)))
 8002c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d110      	bne.n	8002c4c <HAL_RCC_OscConfig+0x158>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_OscConfig+0x142>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e341      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c36:	4b44      	ldr	r3, [pc, #272]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	041b      	lsls	r3, r3, #16
 8002c44:	4940      	ldr	r1, [pc, #256]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	610b      	str	r3, [r1, #16]
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c4a:	e040      	b.n	8002cce <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d023      	beq.n	8002c9c <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c54:	4b3c      	ldr	r3, [pc, #240]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a3b      	ldr	r2, [pc, #236]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe ff32 	bl	8001ac8 <HAL_GetTick>
 8002c64:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c68:	f7fe ff2e 	bl	8001ac8 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e31f      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c7a:	4b33      	ldr	r3, [pc, #204]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x174>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c86:	4b30      	ldr	r3, [pc, #192]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	041b      	lsls	r3, r3, #16
 8002c94:	492c      	ldr	r1, [pc, #176]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	610b      	str	r3, [r1, #16]
 8002c9a:	e018      	b.n	8002cce <HAL_RCC_OscConfig+0x1da>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a29      	ldr	r2, [pc, #164]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002ca2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fe ff0e 	bl	8001ac8 <HAL_GetTick>
 8002cac:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x1ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb0:	f7fe ff0a 	bl	8001ac8 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e2fb      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cc2:	4b21      	ldr	r3, [pc, #132]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x1bc>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80d2 	beq.w	8002e80 <HAL_RCC_OscConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Update LSI1 configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8002ce2:	4b19      	ldr	r3, [pc, #100]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d111      	bne.n	8002d14 <HAL_RCC_OscConfig+0x220>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf0:	4b15      	ldr	r3, [pc, #84]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cf6:	4a14      	ldr	r2, [pc, #80]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002cf8:	f043 0304 	orr.w	r3, r3, #4
 8002cfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002d00:	4b11      	ldr	r3, [pc, #68]	@ (8002d48 <HAL_RCC_OscConfig+0x254>)
 8002d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d14:	4b10      	ldr	r3, [pc, #64]	@ (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d123      	bne.n	8002d68 <HAL_RCC_OscConfig+0x274>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002d20:	4b0d      	ldr	r3, [pc, #52]	@ (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d24:	4a0c      	ldr	r2, [pc, #48]	@ (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d2c:	f7fe fecc 	bl	8001ac8 <HAL_GetTick>
 8002d30:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d32:	e013      	b.n	8002d5c <HAL_RCC_OscConfig+0x268>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d34:	f7fe fec8 	bl	8001ac8 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d90c      	bls.n	8002d5c <HAL_RCC_OscConfig+0x268>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e2b9      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
 8002d46:	bf00      	nop
 8002d48:	46020c00 	.word	0x46020c00
 8002d4c:	01e84800 	.word	0x01e84800
 8002d50:	20000000 	.word	0x20000000
 8002d54:	20000004 	.word	0x20000004
 8002d58:	46020800 	.word	0x46020800
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d5c:	4ba4      	ldr	r3, [pc, #656]	@ (8002ff0 <HAL_RCC_OscConfig+0x4fc>)
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0e5      	beq.n	8002d34 <HAL_RCC_OscConfig+0x240>
        }
      }
    }

    /* Get BDCR1 register value */
    tmpreg1 = RCC->BDCR1;
 8002d68:	4ba2      	ldr	r3, [pc, #648]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d6e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Define mask depending on LSI presence */
    mask = RCC_BDCR1_LSI1ON;
 8002d70:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002d74:	61bb      	str	r3, [r7, #24]
#if defined(RCC_LSI2_SUPPORT)
    mask |= RCC_BDCR1_LSI2ON;
#endif /* RCC_LSI2_SUPPORT */

    /* Check the LSI1 State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d056      	beq.n	8002e2c <HAL_RCC_OscConfig+0x338>
    {
      if ((RCC_OscInitStruct->LSIState & RCC_LSI1_ON) != 0x00u)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d030      	beq.n	8002dec <HAL_RCC_OscConfig+0x2f8>
      {
        /* Check LSI1 division factor */
        assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

        /* Check is LSIDiv is requested to be changed and LSI is already ON */
        if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_BDCR1_LSI1PREDIV)) && ((tmpreg1 & RCC_BDCR1_LSI1RDY) != 0x00u))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d020      	beq.n	8002dda <HAL_RCC_OscConfig+0x2e6>
 8002d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d01b      	beq.n	8002dda <HAL_RCC_OscConfig+0x2e6>
        {
          /* Disable LSI1 */
          tmpreg1 &= ~RCC_BDCR1_LSI1ON;
 8002da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002da8:	62bb      	str	r3, [r7, #40]	@ 0x28
          RCC->BDCR1 = tmpreg1;
 8002daa:	4a92      	ldr	r2, [pc, #584]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002db2:	f7fe fe89 	bl	8001ac8 <HAL_GetTick>
 8002db6:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is disabled */
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x2d8>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dba:	f7fe fe85 	bl	8001ac8 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b14      	cmp	r3, #20
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x2d8>
            {
              /* LSI1 may be forced ON by IWDG */
              return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e276      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8002dcc:	4b89      	ldr	r3, [pc, #548]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002dce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1ef      	bne.n	8002dba <HAL_RCC_OscConfig+0x2c6>
          HAL_Delay(1);
#endif
        }

        /* Set LSI1 division factor */
        tmpreg1 &= ~RCC_BDCR1_LSI1PREDIV;
 8002dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ddc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002de0:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002de8:	4313      	orrs	r3, r2
 8002dea:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Enable Concerned LSI */
      tmpreg1 |= RCC_OscInitStruct->LSIState;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002df2:	4313      	orrs	r3, r2
 8002df4:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8002df6:	4a7f      	ldr	r2, [pc, #508]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfe:	f7fe fe63 	bl	8001ac8 <HAL_GetTick>
 8002e02:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready : LSIRDY bit is position ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x324>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e06:	f7fe fe5f 	bl	8001ac8 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b14      	cmp	r3, #20
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x324>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e250      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8002e18:	4b76      	ldr	r3, [pc, #472]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002e1a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0ed      	beq.n	8002e06 <HAL_RCC_OscConfig+0x312>
 8002e2a:	e01d      	b.n	8002e68 <HAL_RCC_OscConfig+0x374>
#endif
    }
    else
    {
      /* Disable the Internal Low Speed oscillator LSI1 and LSI2 is available */
      tmpreg1 &= ~mask;
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e32:	4013      	ands	r3, r2
 8002e34:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8002e36:	4a6f      	ldr	r2, [pc, #444]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3e:	f7fe fe43 	bl	8001ac8 <HAL_GetTick>
 8002e42:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is disabled : LSIRDY bit position is ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x364>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e46:	f7fe fe3f 	bl	8001ac8 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b14      	cmp	r3, #20
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x364>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e230      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8002e58:	4b66      	ldr	r3, [pc, #408]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002e5a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1ee      	bne.n	8002e46 <HAL_RCC_OscConfig+0x352>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_OscConfig+0x38c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e70:	4b60      	ldr	r3, [pc, #384]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e76:	4a5f      	ldr	r2, [pc, #380]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002e78:	f023 0304 	bic.w	r3, r3, #4
 8002e7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80e2 	beq.w	8003052 <HAL_RCC_OscConfig+0x55e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8002e94:	4b57      	ldr	r3, [pc, #348]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d111      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x3d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea2:	4b54      	ldr	r3, [pc, #336]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ea8:	4a52      	ldr	r2, [pc, #328]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002eaa:	f043 0304 	orr.w	r3, r3, #4
 8002eae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002eb2:	4b50      	ldr	r3, [pc, #320]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8002ff0 <HAL_RCC_OscConfig+0x4fc>)
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d118      	bne.n	8002f04 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002ed2:	4b47      	ldr	r3, [pc, #284]	@ (8002ff0 <HAL_RCC_OscConfig+0x4fc>)
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed6:	4a46      	ldr	r2, [pc, #280]	@ (8002ff0 <HAL_RCC_OscConfig+0x4fc>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ede:	f7fe fdf3 	bl	8001ac8 <HAL_GetTick>
 8002ee2:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee6:	f7fe fdef 	bl	8001ac8 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e1e0      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002ef8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ff0 <HAL_RCC_OscConfig+0x4fc>)
 8002efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x3f2>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d051      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x4bc>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_LSESYSEN);
 8002f0c:	4b39      	ldr	r3, [pc, #228]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f16:	62bb      	str	r3, [r7, #40]	@ 0x28
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8002f22:	4a34      	ldr	r2, [pc, #208]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f26:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2a:	f7fe fdcd 	bl	8001ac8 <HAL_GetTick>
 8002f2e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_OscConfig+0x454>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7fe fdc9 	bl	8001ac8 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x454>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e1b8      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 8002f48:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002f4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0ed      	beq.n	8002f32 <HAL_RCC_OscConfig+0x43e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR1_LSESYSEN) != 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d01e      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x4ac>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_OscConfig+0x486>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f64:	f7fe fdb0 	bl	8001ac8 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x486>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e19f      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 8002f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ed      	beq.n	8002f64 <HAL_RCC_OscConfig+0x470>
 8002f88:	e057      	b.n	800303a <HAL_RCC_OscConfig+0x546>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fe fd9d 	bl	8001ac8 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e18c      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8002fa0:	4b14      	ldr	r3, [pc, #80]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002fa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1ed      	bne.n	8002f8a <HAL_RCC_OscConfig+0x496>
 8002fae:	e044      	b.n	800303a <HAL_RCC_OscConfig+0x546>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR1, (RCC_BDCR1_LSEON | RCC_BDCR1_LSESYSEN));
 8002fb0:	4b10      	ldr	r3, [pc, #64]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002fb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002fb8:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8002fbc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR1, RCC_BDCR1_LSEBYP);
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002fc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fc6:	4a0b      	ldr	r2, [pc, #44]	@ (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002fc8:	f023 0304 	bic.w	r3, r3, #4
 8002fcc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fe fd7a 	bl	8001ac8 <HAL_GetTick>
 8002fd4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8002fd6:	e00f      	b.n	8002ff8 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd8:	f7fe fd76 	bl	8001ac8 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d906      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e165      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
 8002fee:	bf00      	nop
 8002ff0:	46020800 	.word	0x46020800
 8002ff4:	46020c00 	.word	0x46020c00
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8002ff8:	4b98      	ldr	r3, [pc, #608]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 8002ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1e8      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x4e4>
        }
      }

      if (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSEN) != 0U)
 8003006:	4b95      	ldr	r3, [pc, #596]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 8003008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800300c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003010:	2b00      	cmp	r3, #0
 8003012:	d012      	beq.n	800303a <HAL_RCC_OscConfig+0x546>
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8003014:	e00a      	b.n	800302c <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe fd57 	bl	8001ac8 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e146      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 800302c:	4b8b      	ldr	r3, [pc, #556]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 800302e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003032:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1ed      	bne.n	8003016 <HAL_RCC_OscConfig+0x522>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800303a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800303e:	2b01      	cmp	r3, #1
 8003040:	d107      	bne.n	8003052 <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003042:	4b86      	ldr	r3, [pc, #536]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 8003044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003048:	4a84      	ldr	r2, [pc, #528]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 800304a:	f023 0304 	bic.w	r3, r3, #4
 800304e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if ((RCC_OscInitStruct->PLL1.PLLState) != RCC_PLL_NONE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 812e 	beq.w	80032b8 <HAL_RCC_OscConfig+0x7c4>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	2b0c      	cmp	r3, #12
 8003060:	f000 80ba 	beq.w	80031d8 <HAL_RCC_OscConfig+0x6e4>
    {
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_ON)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	2b02      	cmp	r3, #2
 800306a:	f040 8093 	bne.w	8003194 <HAL_RCC_OscConfig+0x6a0>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL1.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL1.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL1.PLLR));

        /* Disable the main PLL1. */
        tmpreg1 = (RCC->CR & ~RCC_CR_PLL1ON);
 800306e:	4b7b      	ldr	r3, [pc, #492]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003076:	62bb      	str	r3, [r7, #40]	@ 0x28
        RCC->CR = tmpreg1;
 8003078:	4a78      	ldr	r2, [pc, #480]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 800307a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7fe fd23 	bl	8001ac8 <HAL_GetTick>
 8003082:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        do
        {
          tmpreg1 = RCC->CR;
 8003084:	4b75      	ldr	r3, [pc, #468]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	62bb      	str	r3, [r7, #40]	@ 0x28
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308a:	f7fe fd1d 	bl	8001ac8 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e10e      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
          }
        } while ((tmpreg1 & RCC_CR_PLL1RDY) != 0U);
 800309c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1ee      	bne.n	8003084 <HAL_RCC_OscConfig+0x590>

        /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
        if (RCC_OscInitStruct->PLL1.PLLSource == RCC_PLLSOURCE_HSE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d108      	bne.n	80030c0 <HAL_RCC_OscConfig+0x5cc>
        {
          /* Clock source is HSE or HSE/2 */
          pllsrc = HSE_VALUE >> ((tmpreg1 & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos);
 80030ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b0:	0d1b      	lsrs	r3, r3, #20
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	4a6a      	ldr	r2, [pc, #424]	@ (8003260 <HAL_RCC_OscConfig+0x76c>)
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
 80030bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030be:	e001      	b.n	80030c4 <HAL_RCC_OscConfig+0x5d0>
        }
        else
        {
          /* Clock source is HSI */
          pllsrc = HSI_VALUE;
 80030c0:	4b68      	ldr	r3, [pc, #416]	@ (8003264 <HAL_RCC_OscConfig+0x770>)
 80030c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Compute VCO input frequency depending on M divider */
        pllsrc = (pllsrc / RCC_OscInitStruct->PLL1.PLLM);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllsrc));

        if (pllsrc > PLL_INPUTRANGE0_FREQMAX)
 80030d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d2:	4a65      	ldr	r2, [pc, #404]	@ (8003268 <HAL_RCC_OscConfig+0x774>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d902      	bls.n	80030de <HAL_RCC_OscConfig+0x5ea>
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE1;
 80030d8:	230c      	movs	r3, #12
 80030da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030dc:	e001      	b.n	80030e2 <HAL_RCC_OscConfig+0x5ee>
        }
        else
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE0;
 80030de:	2300      	movs	r3, #0
 80030e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Configure PLL1 source, PLLM divider, VCO input range and enable PLL1R output. Clear also FRACEN*/
        tmpreg2 = RCC->PLL1CFGR;
 80030e2:	4b5e      	ldr	r3, [pc, #376]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 80030e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e6:	617b      	str	r3, [r7, #20]
        tmpreg2 &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1RGE | RCC_PLL1CFGR_PLL1FRACEN | RCC_PLL1CFGR_PLL1M);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f423 63e3 	bic.w	r3, r3, #1816	@ 0x718
 80030ee:	f023 0307 	bic.w	r3, r3, #7
 80030f2:	617b      	str	r3, [r7, #20]
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030fa:	431a      	orrs	r2, r3
                    ((RCC_OscInitStruct->PLL1.PLLM - 1u) << RCC_PLL1CFGR_PLL1M_Pos) | RCC_PLL1CFGR_PLL1REN);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003100:	3b01      	subs	r3, #1
 8003102:	021b      	lsls	r3, r3, #8
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8003104:	431a      	orrs	r2, r3
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800310e:	617b      	str	r3, [r7, #20]
        RCC->PLL1CFGR = tmpreg2;
 8003110:	4a52      	ldr	r2, [pc, #328]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLLN multiplication factor and PLLP, PLLQ, PLLR dividers */
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311a:	1e5a      	subs	r2, r3, #1
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003120:	3b01      	subs	r3, #1
 8003122:	025b      	lsls	r3, r3, #9
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8003124:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLQ - 1u) << RCC_PLL1DIVR_PLL1Q_Pos) |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800312a:	3b01      	subs	r3, #1
 800312c:	041b      	lsls	r3, r3, #16
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 800312e:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLR - 1u) << RCC_PLL1DIVR_PLL1R_Pos));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003134:	3b01      	subs	r3, #1
 8003136:	061b      	lsls	r3, r3, #24
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]
        RCC->PLL1DIVR = tmpreg2;
 800313c:	4a47      	ldr	r2, [pc, #284]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	6353      	str	r3, [r2, #52]	@ 0x34

        if (RCC_OscInitStruct->PLL1.PLLFractional != 0x00u)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_RCC_OscConfig+0x66c>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314e:	4a43      	ldr	r2, [pc, #268]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	6393      	str	r3, [r2, #56]	@ 0x38

          /* Enable PLL1FRACEN */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 8003154:	4b41      	ldr	r3, [pc, #260]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 8003156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003158:	4a40      	ldr	r2, [pc, #256]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 800315a:	f043 0310 	orr.w	r3, r3, #16
 800315e:	6293      	str	r3, [r2, #40]	@ 0x28
        }

        /* Enable the main PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003160:	4b3e      	ldr	r3, [pc, #248]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a3d      	ldr	r2, [pc, #244]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 8003166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800316a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fe fcac 	bl	8001ac8 <HAL_GetTick>
 8003170:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x692>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003174:	f7fe fca8 	bl	8001ac8 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e099      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003186:	4b35      	ldr	r3, [pc, #212]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x680>
 8003192:	e091      	b.n	80032b8 <HAL_RCC_OscConfig+0x7c4>
        }
      }
      else
      {
        /* Disable the main PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003194:	4b31      	ldr	r3, [pc, #196]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a30      	ldr	r2, [pc, #192]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 800319a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800319e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fe fc92 	bl	8001ac8 <HAL_GetTick>
 80031a4:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x6c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a8:	f7fe fc8e 	bl	8001ac8 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x6c6>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e07f      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80031ba:	4b28      	ldr	r3, [pc, #160]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x6b4>
          }
        }

        /* CLear the PLL1 source and disable outputs to save power when PLL1 is off */
        CLEAR_BIT(RCC->PLL1CFGR, (RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | \
 80031c6:	4b25      	ldr	r3, [pc, #148]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 80031c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ca:	4a24      	ldr	r2, [pc, #144]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 80031cc:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80031d0:	f023 0303 	bic.w	r3, r3, #3
 80031d4:	6293      	str	r3, [r2, #40]	@ 0x28
 80031d6:	e06f      	b.n	80032b8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL1 used as System clock source */
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_OscConfig+0x6f0>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e06a      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        tmpreg1 = RCC->PLL1CFGR;
 80031e4:	4b1d      	ldr	r3, [pc, #116]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 80031e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e8:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg2 = RCC->PLL1DIVR;
 80031ea:	4b1c      	ldr	r3, [pc, #112]	@ (800325c <HAL_RCC_OscConfig+0x768>)
 80031ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ee:	617b      	str	r3, [r7, #20]

        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 80031f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f2:	f003 0203 	and.w	r2, r3, #3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d12b      	bne.n	8003256 <HAL_RCC_OscConfig+0x762>
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 80031fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	f003 0207 	and.w	r2, r3, #7
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320a:	3b01      	subs	r3, #1
        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d122      	bne.n	8003256 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321a:	3b01      	subs	r3, #1
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d11a      	bne.n	8003256 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	0a5b      	lsrs	r3, r3, #9
 8003224:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322c:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d111      	bne.n	8003256 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	0c1b      	lsrs	r3, r3, #16
 8003236:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800323e:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d108      	bne.n	8003256 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) != (RCC_OscInitStruct->PLL1.PLLR - 1u)))
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	0e1b      	lsrs	r3, r3, #24
 8003248:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003250:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d00a      	beq.n	800326c <HAL_RCC_OscConfig+0x778>
        {
          return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e02f      	b.n	80032ba <HAL_RCC_OscConfig+0x7c6>
 800325a:	bf00      	nop
 800325c:	46020c00 	.word	0x46020c00
 8003260:	01e84800 	.word	0x01e84800
 8003264:	00f42400 	.word	0x00f42400
 8003268:	007a1200 	.word	0x007a1200
        }
        else
        {
          /* Check if only fractional part needs to be updated  */
          tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 800326c:	4b15      	ldr	r3, [pc, #84]	@ (80032c4 <HAL_RCC_OscConfig+0x7d0>)
 800326e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003270:	08db      	lsrs	r3, r3, #3
 8003272:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003276:	62bb      	str	r3, [r7, #40]	@ 0x28

          if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800327e:	429a      	cmp	r2, r3
 8003280:	d01a      	beq.n	80032b8 <HAL_RCC_OscConfig+0x7c4>
          {
            assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

            /* Disable PLL1FRACEN */
            __HAL_RCC_PLL1_FRACN_DISABLE();
 8003282:	4b10      	ldr	r3, [pc, #64]	@ (80032c4 <HAL_RCC_OscConfig+0x7d0>)
 8003284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003286:	4a0f      	ldr	r2, [pc, #60]	@ (80032c4 <HAL_RCC_OscConfig+0x7d0>)
 8003288:	f023 0310 	bic.w	r3, r3, #16
 800328c:	6293      	str	r3, [r2, #40]	@ 0x28

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800328e:	f7fe fc1b 	bl	8001ac8 <HAL_GetTick>
 8003292:	61f8      	str	r0, [r7, #28]

            /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
            while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003294:	bf00      	nop
 8003296:	f7fe fc17 	bl	8001ac8 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	4293      	cmp	r3, r2
 80032a0:	d0f9      	beq.n	8003296 <HAL_RCC_OscConfig+0x7a2>
            {
            }

            /* Configure PLL1 PLL1FRACN */
            __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a6:	4a07      	ldr	r2, [pc, #28]	@ (80032c4 <HAL_RCC_OscConfig+0x7d0>)
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	6393      	str	r3, [r2, #56]	@ 0x38

            /* Enable PLL1FRACEN to latch new value. */
            __HAL_RCC_PLL1_FRACN_ENABLE();
 80032ac:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <HAL_RCC_OscConfig+0x7d0>)
 80032ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b0:	4a04      	ldr	r2, [pc, #16]	@ (80032c4 <HAL_RCC_OscConfig+0x7d0>)
 80032b2:	f043 0310 	orr.w	r3, r3, #16
 80032b6:	6293      	str	r3, [r2, #40]	@ 0x28
          }
        }
      }
    }
  }
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3730      	adds	r7, #48	@ 0x30
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	46020c00 	.word	0x46020c00

080032c8 <HAL_RCC_ClockConfig>:
  *         HCLK5 prescaler is switched automatically by hardware, but configuration shall
  *         always be performed before setting new PLL1 source as Sysclk source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e115      	b.n	8003508 <HAL_RCC_ClockConfig+0x240>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032dc:	4b8c      	ldr	r3, [pc, #560]	@ (8003510 <HAL_RCC_ClockConfig+0x248>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d910      	bls.n	800330c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b89      	ldr	r3, [pc, #548]	@ (8003510 <HAL_RCC_ClockConfig+0x248>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 020f 	bic.w	r2, r3, #15
 80032f2:	4987      	ldr	r1, [pc, #540]	@ (8003510 <HAL_RCC_ClockConfig+0x248>)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b85      	ldr	r3, [pc, #532]	@ (8003510 <HAL_RCC_ClockConfig+0x248>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0fd      	b.n	8003508 <HAL_RCC_ClockConfig+0x240>
  }

  /*-------------------------- HCLK5 Configuration --------------------------*/
  /* HCLK5 prescaler is switched automatically by hardware, but configuration shall
    always be performed before setting new PLL1 source as Sysclk source. */
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK5) == RCC_CLOCKTYPE_HCLK5)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00d      	beq.n	8003334 <HAL_RCC_ClockConfig+0x6c>
  {
    assert_param(IS_RCC_HCLK5_HSEHSI(RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
    assert_param(IS_RCC_HCLK5_PLL1(RCC_ClkInitStruct->AHB5_PLL1_CLKDivider));
    MODIFY_REG(RCC->CFGR4, (RCC_CFGR4_HDIV5 | RCC_CFGR4_HPRE5),
 8003318:	4b7e      	ldr	r3, [pc, #504]	@ (8003514 <HAL_RCC_ClockConfig+0x24c>)
 800331a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800331e:	f023 0217 	bic.w	r2, r3, #23
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6999      	ldr	r1, [r3, #24]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	430b      	orrs	r3, r1
 800332c:	4979      	ldr	r1, [pc, #484]	@ (8003514 <HAL_RCC_ClockConfig+0x24c>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
               (RCC_ClkInitStruct->AHB5_PLL1_CLKDivider | RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d06f      	beq.n	8003420 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 8003340:	4b74      	ldr	r3, [pc, #464]	@ (8003514 <HAL_RCC_ClockConfig+0x24c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	617b      	str	r3, [r7, #20]

    /* PLL1 is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b03      	cmp	r3, #3
 800334c:	d118      	bne.n	8003380 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the PLL1 ready flag */
      if ((tmpreg1 & RCC_CR_PLL1RDY) == 0U)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0d5      	b.n	8003508 <HAL_RCC_ClockConfig+0x240>
      }
      else
      {
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 800335c:	4b6d      	ldr	r3, [pc, #436]	@ (8003514 <HAL_RCC_ClockConfig+0x24c>)
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	f003 020c 	and.w	r2, r3, #12
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	429a      	cmp	r2, r3
 800336c:	d01a      	beq.n	80033a4 <HAL_RCC_ClockConfig+0xdc>
        {
          /* Whatever is PLL frequency, use step prediv to reach maximum frequency. */
          /* Select pll1r to be prediv with 2-step divider when selected as Sysclk source */
          MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRESTEP, RCC_PLL1CFGR_PLL1RCLKPRE);
 800336e:	4b69      	ldr	r3, [pc, #420]	@ (8003514 <HAL_RCC_ClockConfig+0x24c>)
 8003370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003372:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003376:	4a67      	ldr	r2, [pc, #412]	@ (8003514 <HAL_RCC_ClockConfig+0x24c>)
 8003378:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800337c:	6293      	str	r3, [r2, #40]	@ 0x28
 800337e:	e011      	b.n	80033a4 <HAL_RCC_ClockConfig+0xdc>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d106      	bne.n	8003396 <HAL_RCC_ClockConfig+0xce>
      {
        /* Check the HSE ready flag */
        if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d108      	bne.n	80033a4 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e0b8      	b.n	8003508 <HAL_RCC_ClockConfig+0x240>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0b1      	b.n	8003508 <HAL_RCC_ClockConfig+0x240>
        }
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033a4:	4b5b      	ldr	r3, [pc, #364]	@ (8003514 <HAL_RCC_ClockConfig+0x24c>)
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	f023 0203 	bic.w	r2, r3, #3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4958      	ldr	r1, [pc, #352]	@ (8003514 <HAL_RCC_ClockConfig+0x24c>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b6:	f7fe fb87 	bl	8001ac8 <HAL_GetTick>
 80033ba:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_ClockConfig+0x10c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033be:	f7fe fb83 	bl	8001ac8 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e099      	b.n	8003508 <HAL_RCC_ClockConfig+0x240>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 80033d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003514 <HAL_RCC_ClockConfig+0x24c>)
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f003 020c 	and.w	r2, r3, #12
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d1eb      	bne.n	80033be <HAL_RCC_ClockConfig+0xf6>
      }
    }

    /* If PLL1rCLK is asked to be SYSCLK source, clear prediv. */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d118      	bne.n	8003420 <HAL_RCC_ClockConfig+0x158>
    {
      /* Set PLL1R prediv to not divided */
      CLEAR_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRE);
 80033ee:	4b49      	ldr	r3, [pc, #292]	@ (8003514 <HAL_RCC_ClockConfig+0x24c>)
 80033f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f2:	4a48      	ldr	r2, [pc, #288]	@ (8003514 <HAL_RCC_ClockConfig+0x24c>)
 80033f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80033f8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fe fb65 	bl	8001ac8 <HAL_GetTick>
 80033fe:	60f8      	str	r0, [r7, #12]

      /* Wait until PLL1 not divided is ready */
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8003400:	e008      	b.n	8003414 <HAL_RCC_ClockConfig+0x14c>
      {
        if ((HAL_GetTick() - tickstart) > PLL1_NDIV_TIMEOUT_VALUE)
 8003402:	f7fe fb61 	bl	8001ac8 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b0a      	cmp	r3, #10
 800340e:	d901      	bls.n	8003414 <HAL_RCC_ClockConfig+0x14c>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e079      	b.n	8003508 <HAL_RCC_ClockConfig+0x240>
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8003414:	4b3f      	ldr	r3, [pc, #252]	@ (8003514 <HAL_RCC_ClockConfig+0x24c>)
 8003416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003418:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 8003420:	4b3c      	ldr	r3, [pc, #240]	@ (8003514 <HAL_RCC_ClockConfig+0x24c>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f023 0307 	bic.w	r3, r3, #7
 800343c:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	4313      	orrs	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8003448:	2301      	movs	r3, #1
 800344a:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800345e:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 800346a:	2301      	movs	r3, #1
 800346c:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00b      	beq.n	8003492 <HAL_RCC_ClockConfig+0x1ca>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003480:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 800348e:	2301      	movs	r3, #1
 8003490:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <HAL_RCC_ClockConfig+0x1d6>
  {
    RCC->CFGR2 = tmpreg1;
 8003498:	4a1e      	ldr	r2, [pc, #120]	@ (8003514 <HAL_RCC_ClockConfig+0x24c>)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK7 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK7) == RCC_CLOCKTYPE_PCLK7)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB7CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB7CLKDivider);
 80034aa:	4a1a      	ldr	r2, [pc, #104]	@ (8003514 <HAL_RCC_ClockConfig+0x24c>)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034b2:	4b17      	ldr	r3, [pc, #92]	@ (8003510 <HAL_RCC_ClockConfig+0x248>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d210      	bcs.n	80034e2 <HAL_RCC_ClockConfig+0x21a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c0:	4b13      	ldr	r3, [pc, #76]	@ (8003510 <HAL_RCC_ClockConfig+0x248>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f023 020f 	bic.w	r2, r3, #15
 80034c8:	4911      	ldr	r1, [pc, #68]	@ (8003510 <HAL_RCC_ClockConfig+0x248>)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003510 <HAL_RCC_ClockConfig+0x248>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d001      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x21a>
    {
      return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e012      	b.n	8003508 <HAL_RCC_ClockConfig+0x240>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80034e2:	f000 f81f 	bl	8003524 <HAL_RCC_GetSysClockFreq>
 80034e6:	4602      	mov	r2, r0
 80034e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003514 <HAL_RCC_ClockConfig+0x24c>)
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	4909      	ldr	r1, [pc, #36]	@ (8003518 <HAL_RCC_ClockConfig+0x250>)
 80034f2:	5ccb      	ldrb	r3, [r1, r3]
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
 80034f8:	4a08      	ldr	r2, [pc, #32]	@ (800351c <HAL_RCC_ClockConfig+0x254>)
 80034fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80034fc:	4b08      	ldr	r3, [pc, #32]	@ (8003520 <HAL_RCC_ClockConfig+0x258>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f7fe fa4f 	bl	80019a4 <HAL_InitTick>
 8003506:	4603      	mov	r3, r0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40022000 	.word	0x40022000
 8003514:	46020c00 	.word	0x46020c00
 8003518:	08006d10 	.word	0x08006d10
 800351c:	20000000 	.word	0x20000000
 8003520:	20000004 	.word	0x20000004

08003524 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
  uint32_t sysclk;

  /* Get SYSCLK source */
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 800352a:	4b10      	ldr	r3, [pc, #64]	@ (800356c <HAL_RCC_GetSysClockFreq+0x48>)
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	607b      	str	r3, [r7, #4]

  if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d102      	bne.n	8003540 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 800353a:	4b0d      	ldr	r3, [pc, #52]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x4c>)
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	e00f      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b08      	cmp	r3, #8
 8003544:	d109      	bne.n	800355a <HAL_RCC_GetSysClockFreq+0x36>
  {
    /* HSE used as system clock source. Check if HSE is divided by 2 */
    sysclk = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8003546:	4b09      	ldr	r3, [pc, #36]	@ (800356c <HAL_RCC_GetSysClockFreq+0x48>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	0d1b      	lsrs	r3, r3, #20
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	4a08      	ldr	r2, [pc, #32]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x50>)
 8003552:	fa22 f303 	lsr.w	r3, r2, r3
 8003556:	607b      	str	r3, [r7, #4]
 8003558:	e002      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else
  {
    /* PLL1 used as system clock source */
    sysclk = HAL_RCC_GetPLL1RFreq();
 800355a:	f000 f80d 	bl	8003578 <HAL_RCC_GetPLL1RFreq>
 800355e:	6078      	str	r0, [r7, #4]
  }

  return sysclk;
 8003560:	687b      	ldr	r3, [r7, #4]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	46020c00 	.word	0x46020c00
 8003570:	00f42400 	.word	0x00f42400
 8003574:	01e84800 	.word	0x01e84800

08003578 <HAL_RCC_GetPLL1RFreq>:
/**
  * @brief  Return the PLL1R frequency.
  * @retval PLL1R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL1RFreq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL1R divider */
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 800357e:	4b0b      	ldr	r3, [pc, #44]	@ (80035ac <HAL_RCC_GetPLL1RFreq+0x34>)
 8003580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003582:	0e1b      	lsrs	r3, r3, #24
 8003584:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003588:	3301      	adds	r3, #1
 800358a:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL1R one */
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 800358c:	f000 f810 	bl	80035b0 <RCC_PLL1_GetVCOOutputFreq>
 8003590:	eef0 7a40 	vmov.f32	s15, s0
 8003594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003598:	ee17 2a90 	vmov	r2, s15
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	46020c00 	.word	0x46020c00

080035b0 <RCC_PLL1_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL1 VCO output frequency
  * @retval Value of PLL1 VCO output frequency
  */
static float_t RCC_PLL1_GetVCOOutputFreq(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
  float_t pllm;
  float_t plln;
  float_t pllfracn;

  /* Get PLL1 DIVR register value */
  tmpreg1 = RCC->PLL1DIVR;
 80035b6:	4b36      	ldr	r3, [pc, #216]	@ (8003690 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 80035b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 multiplication factor */
  tmp = (tmpreg1 & RCC_PLL1DIVR_PLL1N) + 1U;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c2:	3301      	adds	r3, #1
 80035c4:	617b      	str	r3, [r7, #20]
  plln = (float_t) tmp;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	ee07 3a90 	vmov	s15, r3
 80035cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d0:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Get PLL1 CFGR register value */
  tmpreg1 = RCC->PLL1CFGR;
 80035d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003690 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 80035d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 divider */
  tmp = ((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	0a1b      	lsrs	r3, r3, #8
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	3301      	adds	r3, #1
 80035e4:	617b      	str	r3, [r7, #20]
  pllm = (float_t) tmp;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	ee07 3a90 	vmov	s15, r3
 80035ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f0:	edc7 7a01 	vstr	s15, [r7, #4]

  /* Check if fractional part is enable */
  if ((tmpreg1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d006      	beq.n	800360c <RCC_PLL1_GetVCOOutputFreq+0x5c>
  {
    tmp = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 80035fe:	4b24      	ldr	r3, [pc, #144]	@ (8003690 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8003600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003602:	08db      	lsrs	r3, r3, #3
 8003604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	e001      	b.n	8003610 <RCC_PLL1_GetVCOOutputFreq+0x60>
  }
  else
  {
    tmp = 0u;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
  }
  pllfracn = (float_t)tmp;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361a:	edc7 7a00 	vstr	s15, [r7]

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLL1CFGR_PLL1SRC)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d002      	beq.n	800362e <RCC_PLL1_GetVCOOutputFreq+0x7e>
 8003628:	2b03      	cmp	r3, #3
 800362a:	d003      	beq.n	8003634 <RCC_PLL1_GetVCOOutputFreq+0x84>
 800362c:	e013      	b.n	8003656 <RCC_PLL1_GetVCOOutputFreq+0xa6>
  {
    /* HSI used as PLL1 clock source */
    case RCC_PLLSOURCE_HSI:
      pllsrc = (float_t)HSI_VALUE;
 800362e:	4b19      	ldr	r3, [pc, #100]	@ (8003694 <RCC_PLL1_GetVCOOutputFreq+0xe4>)
 8003630:	613b      	str	r3, [r7, #16]
      break;
 8003632:	e014      	b.n	800365e <RCC_PLL1_GetVCOOutputFreq+0xae>

    /* HSE used as PLL1 clock source */
    case RCC_PLLSOURCE_HSE:
      tmp = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8003634:	4b16      	ldr	r3, [pc, #88]	@ (8003690 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	0d1b      	lsrs	r3, r3, #20
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	4a16      	ldr	r2, [pc, #88]	@ (8003698 <RCC_PLL1_GetVCOOutputFreq+0xe8>)
 8003640:	fa22 f303 	lsr.w	r3, r2, r3
 8003644:	617b      	str	r3, [r7, #20]
      pllsrc = (float_t)tmp;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	ee07 3a90 	vmov	s15, r3
 800364c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003650:	edc7 7a04 	vstr	s15, [r7, #16]
      break;
 8003654:	e003      	b.n	800365e <RCC_PLL1_GetVCOOutputFreq+0xae>

    default:
      pllsrc = (float_t)0;
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	613b      	str	r3, [r7, #16]
      break;
 800365c:	bf00      	nop
  }

  /* Compute VCO output frequency */
  return ((pllsrc / pllm) * (plln + (pllfracn / (float_t)0x2000u)));
 800365e:	edd7 6a04 	vldr	s13, [r7, #16]
 8003662:	edd7 7a01 	vldr	s15, [r7, #4]
 8003666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800366a:	edd7 7a00 	vldr	s15, [r7]
 800366e:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 800369c <RCC_PLL1_GetVCOOutputFreq+0xec>
 8003672:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8003676:	edd7 7a02 	vldr	s15, [r7, #8]
 800367a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800367e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8003682:	eeb0 0a67 	vmov.f32	s0, s15
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	46020c00 	.word	0x46020c00
 8003694:	4b742400 	.word	0x4b742400
 8003698:	01e84800 	.word	0x01e84800
 800369c:	46000000 	.word	0x46000000

080036a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036b4:	4b95      	ldr	r3, [pc, #596]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80036b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036ba:	f023 0203 	bic.w	r2, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4992      	ldr	r1, [pc, #584]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

#if defined (USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036d6:	4b8d      	ldr	r3, [pc, #564]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80036d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036dc:	f023 020c 	bic.w	r2, r3, #12
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4989      	ldr	r1, [pc, #548]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
#endif


#if defined (I2C1)
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036f8:	4b84      	ldr	r3, [pc, #528]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80036fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	4981      	ldr	r1, [pc, #516]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0



#if defined (LPTIM2)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800371a:	4b7c      	ldr	r3, [pc, #496]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800371c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003720:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	4978      	ldr	r1, [pc, #480]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }
#endif

#if defined (SPI1)
  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 800373c:	4b73      	ldr	r3, [pc, #460]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800373e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003742:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	4970      	ldr	r1, [pc, #448]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }
#endif

  /*-------------------------- SYSTICK clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SYSTICK) == RCC_PERIPHCLK_SYSTICK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SYSTICKCLKSOURCE(PeriphClkInit->SystickClockSelection));

    /* Configure the SYSTICK clock source */
    __HAL_RCC_SYSTICK_CONFIG(PeriphClkInit->SystickClockSelection);
 800375e:	4b6b      	ldr	r3, [pc, #428]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003764:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	4967      	ldr	r1, [pc, #412]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- TIMIC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMIC) == RCC_PERIPHCLK_TIMIC)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMICCLKSOURCE(PeriphClkInit->TimIcClockSelection));

    /* Configure the TIMIC clock source */
    __HAL_RCC_TIMIC_CONFIG(PeriphClkInit->TimIcClockSelection);
 8003780:	4b62      	ldr	r3, [pc, #392]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003786:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	495f      	ldr	r1, [pc, #380]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
    }
  }
#endif

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d015      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Set the source of RNG clock*/
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037a2:	4b5a      	ldr	r3, [pc, #360]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80037a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	4956      	ldr	r1, [pc, #344]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL1Q)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037c0:	d105      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x12e>
    {
      /* Enable PLL1 QCLK output */
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_QCLK);
 80037c2:	4b52      	ldr	r3, [pc, #328]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c6:	4a51      	ldr	r2, [pc, #324]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037cc:	6293      	str	r3, [r2, #40]	@ 0x28
    }
  }
#endif

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037da:	4b4c      	ldr	r3, [pc, #304]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037e0:	f023 0203 	bic.w	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e8:	4948      	ldr	r1, [pc, #288]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
 80037fc:	4b43      	ldr	r3, [pc, #268]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003802:	f023 0218 	bic.w	r2, r3, #24
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380a:	4940      	ldr	r1, [pc, #256]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }


  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800381e:	4b3b      	ldr	r3, [pc, #236]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003820:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003824:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382c:	4937      	ldr	r1, [pc, #220]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003840:	4b32      	ldr	r3, [pc, #200]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003842:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003846:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384e:	492f      	ldr	r1, [pc, #188]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d015      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC4 interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003862:	4b2a      	ldr	r3, [pc, #168]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003864:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003868:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003870:	4926      	ldr	r1, [pc, #152]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

    if (PeriphClkInit->AdcClockSelection == RCC_PERIPHCLK_ADC)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800387c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003880:	d105      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      /* Enable PLL1 PCLK output */
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_PCLK);
 8003882:	4b22      	ldr	r3, [pc, #136]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003886:	4a21      	ldr	r2, [pc, #132]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800388c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 808d 	beq.w	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    FlagStatus       pwrclkchanged = RESET;
 800389c:	2300      	movs	r3, #0
 800389e:	77fb      	strb	r3, [r7, #31]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
    tmpreg2 = __HAL_RCC_GET_RTC_SOURCE();
 80038a0:	4b1a      	ldr	r3, [pc, #104]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038aa:	61bb      	str	r3, [r7, #24]

    /* Check if RTC clock source needs to be changed */
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d07f      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      /* Enable Power Clock */
      if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01u)
 80038b6:	4b15      	ldr	r3, [pc, #84]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d110      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x246>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80038c4:	4b11      	ldr	r3, [pc, #68]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038ca:	4a10      	ldr	r2, [pc, #64]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038cc:	f043 0304 	orr.w	r3, r3, #4
 80038d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80038d4:	4b0d      	ldr	r3, [pc, #52]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80038e2:	2301      	movs	r3, #1
 80038e4:	77fb      	strb	r3, [r7, #31]
      }

      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80038e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80038e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ea:	4a09      	ldr	r2, [pc, #36]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f2:	f7fe f8e9 	bl	8001ac8 <HAL_GetTick>
 80038f6:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80038f8:	e00c      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x274>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fa:	f7fe f8e5 	bl	8001ac8 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d905      	bls.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x274>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e071      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800390c:	46020c00 	.word	0x46020c00
 8003910:	46020800 	.word	0x46020800
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003914:	4b38      	ldr	r3, [pc, #224]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0ec      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }

      /* Save BDCR1 content */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_RTCSEL);
 8003920:	4b36      	ldr	r3, [pc, #216]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003926:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800392a:	613b      	str	r3, [r7, #16]

      /* Check if a backup domain reset is required */
      if (tmpreg2 != RCC_RTCCLKSOURCE_DISABLE)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00f      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
#if defined(RCC_LSI2_SUPPORT)
        /* Save BDCR2 content */
        tmpreg2 = RCC->BDCR2;
#endif /* RCC_LSI2_SUPPORT */
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003932:	4b32      	ldr	r3, [pc, #200]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003938:	4a30      	ldr	r2, [pc, #192]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800393a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800393e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003942:	4b2e      	ldr	r3, [pc, #184]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003948:	4a2c      	ldr	r2, [pc, #176]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800394a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800394e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        RCC->BDCR2 = tmpreg2;
#endif /* RCC_LSI2_SUPPORT */
      }

      /* Apply new RTC clock source selection */
      RCC->BDCR1 = (tmpreg1 | PeriphClkInit->RTCClockSelection);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003956:	4929      	ldr	r1, [pc, #164]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0

      /* mask all ON bits */
      tmpreg2 = (RCC_BDCR1_LSEON | RCC_BDCR1_LSI1ON);
 8003960:	4b27      	ldr	r3, [pc, #156]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003962:	61bb      	str	r3, [r7, #24]
#if defined(RCC_LSI2_SUPPORT)
      tmpreg2 |= RCC_BDCR1_LSI2ON;
#endif

      /* Check which oscillators were enable */
      tmpreg2 &= tmpreg1;
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]

      if (tmpreg2 != 0x00u)
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d016      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x300>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003972:	f7fe f8a9 	bl	8001ac8 <HAL_GetTick>
 8003976:	6178      	str	r0, [r7, #20]

        /* Wait till all oscillators are enabled : RDY bit position is ON shifted by 1 */
        while (READ_BIT(RCC->BDCR1, (tmpreg2 << 1)) == 0x00u)
 8003978:	e00a      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397a:	f7fe f8a5 	bl	8001ac8 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003988:	4293      	cmp	r3, r2
 800398a:	d901      	bls.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e02f      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
        while (READ_BIT(RCC->BDCR1, (tmpreg2 << 1)) == 0x00u)
 8003990:	4b1a      	ldr	r3, [pc, #104]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003992:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4013      	ands	r3, r2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0ec      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x2da>
          }
        }
      }
      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80039a0:	7ffb      	ldrb	r3, [r7, #31]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d107      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80039a6:	4b15      	ldr	r3, [pc, #84]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039ac:	4a13      	ldr	r2, [pc, #76]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039ae:	f023 0304 	bic.w	r3, r3, #4
 80039b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }
    }
  }

  /*-------------------------- RADIO Sleep Timer clock source configuration --*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RADIOST) == RCC_PERIPHCLK_RADIOST)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d015      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RADIOSLEEPTIMERSOURCE(PeriphClkInit->RadioSlpTimClockSelection));

    /* Configure the RADIO Sleep Timer clock source */
    __HAL_RCC_RADIOSLPTIM_CONFIG(PeriphClkInit->RadioSlpTimClockSelection);
 80039c2:	4b0e      	ldr	r3, [pc, #56]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d0:	490a      	ldr	r1, [pc, #40]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0

    /* Check configuration validity as under Backup domain access control */
    if (__HAL_RCC_GET_RADIOSLPTIM_SOURCE() != PeriphClkInit->RadioSlpTimClockSelection)
 80039d8:	4b08      	ldr	r3, [pc, #32]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039de:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d001      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    }
  }

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3720      	adds	r7, #32
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	46020800 	.word	0x46020800
 80039fc:	46020c00 	.word	0x46020c00
 8003a00:	04000001 	.word	0x04000001

08003a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e049      	b.n	8003aaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fd fd8a 	bl	8001544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f000 f95c 	bl	8003d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d001      	beq.n	8003acc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e033      	b.n	8003b34 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a19      	ldr	r2, [pc, #100]	@ (8003b40 <HAL_TIM_Base_Start+0x8c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d009      	beq.n	8003af2 <HAL_TIM_Base_Start+0x3e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae6:	d004      	beq.n	8003af2 <HAL_TIM_Base_Start+0x3e>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a15      	ldr	r2, [pc, #84]	@ (8003b44 <HAL_TIM_Base_Start+0x90>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d115      	bne.n	8003b1e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	4b13      	ldr	r3, [pc, #76]	@ (8003b48 <HAL_TIM_Base_Start+0x94>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b06      	cmp	r3, #6
 8003b02:	d015      	beq.n	8003b30 <HAL_TIM_Base_Start+0x7c>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b0a:	d011      	beq.n	8003b30 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1c:	e008      	b.n	8003b30 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0201 	orr.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	e000      	b.n	8003b32 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	40000400 	.word	0x40000400
 8003b48:	00010007 	.word	0x00010007

08003b4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_TIM_ConfigClockSource+0x1c>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e0c2      	b.n	8003cee <HAL_TIM_ConfigClockSource+0x1a2>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003b86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a55      	ldr	r2, [pc, #340]	@ (8003cf8 <HAL_TIM_ConfigClockSource+0x1ac>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	f000 808d 	beq.w	8003cc2 <HAL_TIM_ConfigClockSource+0x176>
 8003ba8:	4a53      	ldr	r2, [pc, #332]	@ (8003cf8 <HAL_TIM_ConfigClockSource+0x1ac>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	f200 8092 	bhi.w	8003cd4 <HAL_TIM_ConfigClockSource+0x188>
 8003bb0:	4a52      	ldr	r2, [pc, #328]	@ (8003cfc <HAL_TIM_ConfigClockSource+0x1b0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	f000 8085 	beq.w	8003cc2 <HAL_TIM_ConfigClockSource+0x176>
 8003bb8:	4a50      	ldr	r2, [pc, #320]	@ (8003cfc <HAL_TIM_ConfigClockSource+0x1b0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	f200 808a 	bhi.w	8003cd4 <HAL_TIM_ConfigClockSource+0x188>
 8003bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bc4:	d03a      	beq.n	8003c3c <HAL_TIM_ConfigClockSource+0xf0>
 8003bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bca:	f200 8083 	bhi.w	8003cd4 <HAL_TIM_ConfigClockSource+0x188>
 8003bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bd2:	f000 8082 	beq.w	8003cda <HAL_TIM_ConfigClockSource+0x18e>
 8003bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bda:	d87b      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x188>
 8003bdc:	2b70      	cmp	r3, #112	@ 0x70
 8003bde:	d016      	beq.n	8003c0e <HAL_TIM_ConfigClockSource+0xc2>
 8003be0:	2b70      	cmp	r3, #112	@ 0x70
 8003be2:	d877      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x188>
 8003be4:	2b60      	cmp	r3, #96	@ 0x60
 8003be6:	d04c      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x136>
 8003be8:	2b60      	cmp	r3, #96	@ 0x60
 8003bea:	d873      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x188>
 8003bec:	2b50      	cmp	r3, #80	@ 0x50
 8003bee:	d038      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x116>
 8003bf0:	2b50      	cmp	r3, #80	@ 0x50
 8003bf2:	d86f      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x188>
 8003bf4:	2b40      	cmp	r3, #64	@ 0x40
 8003bf6:	d054      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x156>
 8003bf8:	2b40      	cmp	r3, #64	@ 0x40
 8003bfa:	d86b      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x188>
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d060      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x176>
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d867      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x188>
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d05c      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x176>
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d05a      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x176>
 8003c0c:	e062      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x188>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c1e:	f000 f965 	bl	8003eec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	609a      	str	r2, [r3, #8]
      break;
 8003c3a:	e04f      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x190>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c4c:	f000 f94e 	bl	8003eec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c5e:	609a      	str	r2, [r3, #8]
      break;
 8003c60:	e03c      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x190>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f000 f8c0 	bl	8003df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2150      	movs	r1, #80	@ 0x50
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f919 	bl	8003eb2 <TIM_ITRx_SetConfig>
      break;
 8003c80:	e02c      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x190>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f000 f8df 	bl	8003e52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2160      	movs	r1, #96	@ 0x60
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f909 	bl	8003eb2 <TIM_ITRx_SetConfig>
      break;
 8003ca0:	e01c      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x190>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f000 f8a0 	bl	8003df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2140      	movs	r1, #64	@ 0x40
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 f8f9 	bl	8003eb2 <TIM_ITRx_SetConfig>
      break;
 8003cc0:	e00c      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x190>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4610      	mov	r0, r2
 8003cce:	f000 f8f0 	bl	8003eb2 <TIM_ITRx_SetConfig>
      break;
 8003cd2:	e003      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x190>
    }

    default:
      status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd8:	e000      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x190>
      break;
 8003cda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	00100040 	.word	0x00100040
 8003cfc:	00100030 	.word	0x00100030

08003d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a34      	ldr	r2, [pc, #208]	@ (8003de4 <TIM_Base_SetConfig+0xe4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d007      	beq.n	8003d28 <TIM_Base_SetConfig+0x28>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d1e:	d003      	beq.n	8003d28 <TIM_Base_SetConfig+0x28>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a31      	ldr	r2, [pc, #196]	@ (8003de8 <TIM_Base_SetConfig+0xe8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d108      	bne.n	8003d3a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a29      	ldr	r2, [pc, #164]	@ (8003de4 <TIM_Base_SetConfig+0xe4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00f      	beq.n	8003d62 <TIM_Base_SetConfig+0x62>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d48:	d00b      	beq.n	8003d62 <TIM_Base_SetConfig+0x62>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a26      	ldr	r2, [pc, #152]	@ (8003de8 <TIM_Base_SetConfig+0xe8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d007      	beq.n	8003d62 <TIM_Base_SetConfig+0x62>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a25      	ldr	r2, [pc, #148]	@ (8003dec <TIM_Base_SetConfig+0xec>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d003      	beq.n	8003d62 <TIM_Base_SetConfig+0x62>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a24      	ldr	r2, [pc, #144]	@ (8003df0 <TIM_Base_SetConfig+0xf0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d108      	bne.n	8003d74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a12      	ldr	r2, [pc, #72]	@ (8003de4 <TIM_Base_SetConfig+0xe4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d007      	beq.n	8003db0 <TIM_Base_SetConfig+0xb0>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a12      	ldr	r2, [pc, #72]	@ (8003dec <TIM_Base_SetConfig+0xec>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <TIM_Base_SetConfig+0xb0>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a11      	ldr	r2, [pc, #68]	@ (8003df0 <TIM_Base_SetConfig+0xf0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d103      	bne.n	8003db8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d105      	bne.n	8003dd6 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f023 0201 	bic.w	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	611a      	str	r2, [r3, #16]
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40000400 	.word	0x40000400
 8003dec:	40014400 	.word	0x40014400
 8003df0:	40014800 	.word	0x40014800

08003df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	f023 0201 	bic.w	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f023 030a 	bic.w	r3, r3, #10
 8003e30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	621a      	str	r2, [r3, #32]
}
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b087      	sub	sp, #28
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	f023 0210 	bic.w	r2, r3, #16
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	031b      	lsls	r3, r3, #12
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	621a      	str	r2, [r3, #32]
}
 8003ea6:	bf00      	nop
 8003ea8:	371c      	adds	r7, #28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b085      	sub	sp, #20
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003ec8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ecc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f043 0307 	orr.w	r3, r3, #7
 8003ed8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	609a      	str	r2, [r3, #8]
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	021a      	lsls	r2, r3, #8
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	609a      	str	r2, [r3, #8]
}
 8003f20:	bf00      	nop
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e051      	b.n	8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a22      	ldr	r2, [pc, #136]	@ (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d108      	bne.n	8003f80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003f74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a14      	ldr	r2, [pc, #80]	@ (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d009      	beq.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fb0:	d004      	beq.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a10      	ldr	r2, [pc, #64]	@ (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d10c      	bne.n	8003fd6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	40012c00 	.word	0x40012c00
 8003ff8:	40000400 	.word	0x40000400

08003ffc <__cvt>:
 8003ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004000:	ec57 6b10 	vmov	r6, r7, d0
 8004004:	2f00      	cmp	r7, #0
 8004006:	460c      	mov	r4, r1
 8004008:	4619      	mov	r1, r3
 800400a:	463b      	mov	r3, r7
 800400c:	bfb4      	ite	lt
 800400e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004012:	2300      	movge	r3, #0
 8004014:	4691      	mov	r9, r2
 8004016:	bfbf      	itttt	lt
 8004018:	4632      	movlt	r2, r6
 800401a:	461f      	movlt	r7, r3
 800401c:	232d      	movlt	r3, #45	@ 0x2d
 800401e:	4616      	movlt	r6, r2
 8004020:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004024:	700b      	strb	r3, [r1, #0]
 8004026:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004028:	f023 0820 	bic.w	r8, r3, #32
 800402c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004030:	d005      	beq.n	800403e <__cvt+0x42>
 8004032:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004036:	d100      	bne.n	800403a <__cvt+0x3e>
 8004038:	3401      	adds	r4, #1
 800403a:	2102      	movs	r1, #2
 800403c:	e000      	b.n	8004040 <__cvt+0x44>
 800403e:	2103      	movs	r1, #3
 8004040:	ab03      	add	r3, sp, #12
 8004042:	4622      	mov	r2, r4
 8004044:	9301      	str	r3, [sp, #4]
 8004046:	ab02      	add	r3, sp, #8
 8004048:	ec47 6b10 	vmov	d0, r6, r7
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	4653      	mov	r3, sl
 8004050:	f000 fe6e 	bl	8004d30 <_dtoa_r>
 8004054:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004058:	4605      	mov	r5, r0
 800405a:	d119      	bne.n	8004090 <__cvt+0x94>
 800405c:	f019 0f01 	tst.w	r9, #1
 8004060:	d00e      	beq.n	8004080 <__cvt+0x84>
 8004062:	eb00 0904 	add.w	r9, r0, r4
 8004066:	2200      	movs	r2, #0
 8004068:	2300      	movs	r3, #0
 800406a:	4630      	mov	r0, r6
 800406c:	4639      	mov	r1, r7
 800406e:	f7fc fcc3 	bl	80009f8 <__aeabi_dcmpeq>
 8004072:	b108      	cbz	r0, 8004078 <__cvt+0x7c>
 8004074:	f8cd 900c 	str.w	r9, [sp, #12]
 8004078:	2230      	movs	r2, #48	@ 0x30
 800407a:	9b03      	ldr	r3, [sp, #12]
 800407c:	454b      	cmp	r3, r9
 800407e:	d31e      	bcc.n	80040be <__cvt+0xc2>
 8004080:	9b03      	ldr	r3, [sp, #12]
 8004082:	4628      	mov	r0, r5
 8004084:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004086:	1b5b      	subs	r3, r3, r5
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	b004      	add	sp, #16
 800408c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004090:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004094:	eb00 0904 	add.w	r9, r0, r4
 8004098:	d1e5      	bne.n	8004066 <__cvt+0x6a>
 800409a:	7803      	ldrb	r3, [r0, #0]
 800409c:	2b30      	cmp	r3, #48	@ 0x30
 800409e:	d10a      	bne.n	80040b6 <__cvt+0xba>
 80040a0:	2200      	movs	r2, #0
 80040a2:	2300      	movs	r3, #0
 80040a4:	4630      	mov	r0, r6
 80040a6:	4639      	mov	r1, r7
 80040a8:	f7fc fca6 	bl	80009f8 <__aeabi_dcmpeq>
 80040ac:	b918      	cbnz	r0, 80040b6 <__cvt+0xba>
 80040ae:	f1c4 0401 	rsb	r4, r4, #1
 80040b2:	f8ca 4000 	str.w	r4, [sl]
 80040b6:	f8da 3000 	ldr.w	r3, [sl]
 80040ba:	4499      	add	r9, r3
 80040bc:	e7d3      	b.n	8004066 <__cvt+0x6a>
 80040be:	1c59      	adds	r1, r3, #1
 80040c0:	9103      	str	r1, [sp, #12]
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	e7d9      	b.n	800407a <__cvt+0x7e>

080040c6 <__exponent>:
 80040c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040c8:	2900      	cmp	r1, #0
 80040ca:	7002      	strb	r2, [r0, #0]
 80040cc:	bfba      	itte	lt
 80040ce:	4249      	neglt	r1, r1
 80040d0:	232d      	movlt	r3, #45	@ 0x2d
 80040d2:	232b      	movge	r3, #43	@ 0x2b
 80040d4:	2909      	cmp	r1, #9
 80040d6:	7043      	strb	r3, [r0, #1]
 80040d8:	dd28      	ble.n	800412c <__exponent+0x66>
 80040da:	f10d 0307 	add.w	r3, sp, #7
 80040de:	270a      	movs	r7, #10
 80040e0:	461d      	mov	r5, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	fbb1 f6f7 	udiv	r6, r1, r7
 80040ea:	fb07 1416 	mls	r4, r7, r6, r1
 80040ee:	3430      	adds	r4, #48	@ 0x30
 80040f0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80040f4:	460c      	mov	r4, r1
 80040f6:	4631      	mov	r1, r6
 80040f8:	2c63      	cmp	r4, #99	@ 0x63
 80040fa:	dcf2      	bgt.n	80040e2 <__exponent+0x1c>
 80040fc:	3130      	adds	r1, #48	@ 0x30
 80040fe:	1e94      	subs	r4, r2, #2
 8004100:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004104:	1c41      	adds	r1, r0, #1
 8004106:	4623      	mov	r3, r4
 8004108:	42ab      	cmp	r3, r5
 800410a:	d30a      	bcc.n	8004122 <__exponent+0x5c>
 800410c:	f10d 0309 	add.w	r3, sp, #9
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	42ac      	cmp	r4, r5
 8004114:	bf88      	it	hi
 8004116:	2300      	movhi	r3, #0
 8004118:	3302      	adds	r3, #2
 800411a:	4403      	add	r3, r0
 800411c:	1a18      	subs	r0, r3, r0
 800411e:	b003      	add	sp, #12
 8004120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004122:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004126:	f801 6f01 	strb.w	r6, [r1, #1]!
 800412a:	e7ed      	b.n	8004108 <__exponent+0x42>
 800412c:	2330      	movs	r3, #48	@ 0x30
 800412e:	3130      	adds	r1, #48	@ 0x30
 8004130:	7083      	strb	r3, [r0, #2]
 8004132:	1d03      	adds	r3, r0, #4
 8004134:	70c1      	strb	r1, [r0, #3]
 8004136:	e7f1      	b.n	800411c <__exponent+0x56>

08004138 <_printf_float>:
 8004138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800413c:	b08d      	sub	sp, #52	@ 0x34
 800413e:	460c      	mov	r4, r1
 8004140:	4616      	mov	r6, r2
 8004142:	461f      	mov	r7, r3
 8004144:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004148:	4605      	mov	r5, r0
 800414a:	f000 fcdf 	bl	8004b0c <_localeconv_r>
 800414e:	6803      	ldr	r3, [r0, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	9304      	str	r3, [sp, #16]
 8004154:	f7fc f824 	bl	80001a0 <strlen>
 8004158:	2300      	movs	r3, #0
 800415a:	9005      	str	r0, [sp, #20]
 800415c:	930a      	str	r3, [sp, #40]	@ 0x28
 800415e:	f8d8 3000 	ldr.w	r3, [r8]
 8004162:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004166:	3307      	adds	r3, #7
 8004168:	f8d4 b000 	ldr.w	fp, [r4]
 800416c:	f023 0307 	bic.w	r3, r3, #7
 8004170:	f103 0208 	add.w	r2, r3, #8
 8004174:	f8c8 2000 	str.w	r2, [r8]
 8004178:	f04f 32ff 	mov.w	r2, #4294967295
 800417c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004180:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004184:	f8cd 8018 	str.w	r8, [sp, #24]
 8004188:	9307      	str	r3, [sp, #28]
 800418a:	4b9d      	ldr	r3, [pc, #628]	@ (8004400 <_printf_float+0x2c8>)
 800418c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004190:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004194:	f7fc fc62 	bl	8000a5c <__aeabi_dcmpun>
 8004198:	bb70      	cbnz	r0, 80041f8 <_printf_float+0xc0>
 800419a:	f04f 32ff 	mov.w	r2, #4294967295
 800419e:	4b98      	ldr	r3, [pc, #608]	@ (8004400 <_printf_float+0x2c8>)
 80041a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041a4:	f7fc fc3c 	bl	8000a20 <__aeabi_dcmple>
 80041a8:	bb30      	cbnz	r0, 80041f8 <_printf_float+0xc0>
 80041aa:	2200      	movs	r2, #0
 80041ac:	2300      	movs	r3, #0
 80041ae:	4640      	mov	r0, r8
 80041b0:	4649      	mov	r1, r9
 80041b2:	f7fc fc2b 	bl	8000a0c <__aeabi_dcmplt>
 80041b6:	b110      	cbz	r0, 80041be <_printf_float+0x86>
 80041b8:	232d      	movs	r3, #45	@ 0x2d
 80041ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041be:	4a91      	ldr	r2, [pc, #580]	@ (8004404 <_printf_float+0x2cc>)
 80041c0:	4b91      	ldr	r3, [pc, #580]	@ (8004408 <_printf_float+0x2d0>)
 80041c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80041c6:	bf94      	ite	ls
 80041c8:	4690      	movls	r8, r2
 80041ca:	4698      	movhi	r8, r3
 80041cc:	2303      	movs	r3, #3
 80041ce:	f04f 0900 	mov.w	r9, #0
 80041d2:	6123      	str	r3, [r4, #16]
 80041d4:	f02b 0304 	bic.w	r3, fp, #4
 80041d8:	6023      	str	r3, [r4, #0]
 80041da:	4633      	mov	r3, r6
 80041dc:	aa0b      	add	r2, sp, #44	@ 0x2c
 80041de:	4621      	mov	r1, r4
 80041e0:	4628      	mov	r0, r5
 80041e2:	9700      	str	r7, [sp, #0]
 80041e4:	f000 f9d2 	bl	800458c <_printf_common>
 80041e8:	3001      	adds	r0, #1
 80041ea:	f040 808d 	bne.w	8004308 <_printf_float+0x1d0>
 80041ee:	f04f 30ff 	mov.w	r0, #4294967295
 80041f2:	b00d      	add	sp, #52	@ 0x34
 80041f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f8:	4642      	mov	r2, r8
 80041fa:	464b      	mov	r3, r9
 80041fc:	4640      	mov	r0, r8
 80041fe:	4649      	mov	r1, r9
 8004200:	f7fc fc2c 	bl	8000a5c <__aeabi_dcmpun>
 8004204:	b140      	cbz	r0, 8004218 <_printf_float+0xe0>
 8004206:	464b      	mov	r3, r9
 8004208:	4a80      	ldr	r2, [pc, #512]	@ (800440c <_printf_float+0x2d4>)
 800420a:	2b00      	cmp	r3, #0
 800420c:	bfbc      	itt	lt
 800420e:	232d      	movlt	r3, #45	@ 0x2d
 8004210:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004214:	4b7e      	ldr	r3, [pc, #504]	@ (8004410 <_printf_float+0x2d8>)
 8004216:	e7d4      	b.n	80041c2 <_printf_float+0x8a>
 8004218:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800421c:	6863      	ldr	r3, [r4, #4]
 800421e:	9206      	str	r2, [sp, #24]
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	d13b      	bne.n	800429c <_printf_float+0x164>
 8004224:	2306      	movs	r3, #6
 8004226:	6063      	str	r3, [r4, #4]
 8004228:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800422c:	2300      	movs	r3, #0
 800422e:	4628      	mov	r0, r5
 8004230:	6022      	str	r2, [r4, #0]
 8004232:	9303      	str	r3, [sp, #12]
 8004234:	ab0a      	add	r3, sp, #40	@ 0x28
 8004236:	e9cd a301 	strd	sl, r3, [sp, #4]
 800423a:	ab09      	add	r3, sp, #36	@ 0x24
 800423c:	ec49 8b10 	vmov	d0, r8, r9
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004246:	6861      	ldr	r1, [r4, #4]
 8004248:	f7ff fed8 	bl	8003ffc <__cvt>
 800424c:	9b06      	ldr	r3, [sp, #24]
 800424e:	4680      	mov	r8, r0
 8004250:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004252:	2b47      	cmp	r3, #71	@ 0x47
 8004254:	d129      	bne.n	80042aa <_printf_float+0x172>
 8004256:	1cc8      	adds	r0, r1, #3
 8004258:	db02      	blt.n	8004260 <_printf_float+0x128>
 800425a:	6863      	ldr	r3, [r4, #4]
 800425c:	4299      	cmp	r1, r3
 800425e:	dd41      	ble.n	80042e4 <_printf_float+0x1ac>
 8004260:	f1aa 0a02 	sub.w	sl, sl, #2
 8004264:	fa5f fa8a 	uxtb.w	sl, sl
 8004268:	3901      	subs	r1, #1
 800426a:	4652      	mov	r2, sl
 800426c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004270:	9109      	str	r1, [sp, #36]	@ 0x24
 8004272:	f7ff ff28 	bl	80040c6 <__exponent>
 8004276:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004278:	4681      	mov	r9, r0
 800427a:	1813      	adds	r3, r2, r0
 800427c:	2a01      	cmp	r2, #1
 800427e:	6123      	str	r3, [r4, #16]
 8004280:	dc02      	bgt.n	8004288 <_printf_float+0x150>
 8004282:	6822      	ldr	r2, [r4, #0]
 8004284:	07d2      	lsls	r2, r2, #31
 8004286:	d501      	bpl.n	800428c <_printf_float+0x154>
 8004288:	3301      	adds	r3, #1
 800428a:	6123      	str	r3, [r4, #16]
 800428c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0a2      	beq.n	80041da <_printf_float+0xa2>
 8004294:	232d      	movs	r3, #45	@ 0x2d
 8004296:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800429a:	e79e      	b.n	80041da <_printf_float+0xa2>
 800429c:	9a06      	ldr	r2, [sp, #24]
 800429e:	2a47      	cmp	r2, #71	@ 0x47
 80042a0:	d1c2      	bne.n	8004228 <_printf_float+0xf0>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1c0      	bne.n	8004228 <_printf_float+0xf0>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e7bd      	b.n	8004226 <_printf_float+0xee>
 80042aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80042ae:	d9db      	bls.n	8004268 <_printf_float+0x130>
 80042b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80042b4:	d118      	bne.n	80042e8 <_printf_float+0x1b0>
 80042b6:	2900      	cmp	r1, #0
 80042b8:	6863      	ldr	r3, [r4, #4]
 80042ba:	dd0b      	ble.n	80042d4 <_printf_float+0x19c>
 80042bc:	6121      	str	r1, [r4, #16]
 80042be:	b913      	cbnz	r3, 80042c6 <_printf_float+0x18e>
 80042c0:	6822      	ldr	r2, [r4, #0]
 80042c2:	07d0      	lsls	r0, r2, #31
 80042c4:	d502      	bpl.n	80042cc <_printf_float+0x194>
 80042c6:	3301      	adds	r3, #1
 80042c8:	440b      	add	r3, r1
 80042ca:	6123      	str	r3, [r4, #16]
 80042cc:	f04f 0900 	mov.w	r9, #0
 80042d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80042d2:	e7db      	b.n	800428c <_printf_float+0x154>
 80042d4:	b913      	cbnz	r3, 80042dc <_printf_float+0x1a4>
 80042d6:	6822      	ldr	r2, [r4, #0]
 80042d8:	07d2      	lsls	r2, r2, #31
 80042da:	d501      	bpl.n	80042e0 <_printf_float+0x1a8>
 80042dc:	3302      	adds	r3, #2
 80042de:	e7f4      	b.n	80042ca <_printf_float+0x192>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e7f2      	b.n	80042ca <_printf_float+0x192>
 80042e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80042e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042ea:	4299      	cmp	r1, r3
 80042ec:	db05      	blt.n	80042fa <_printf_float+0x1c2>
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	6121      	str	r1, [r4, #16]
 80042f2:	07d8      	lsls	r0, r3, #31
 80042f4:	d5ea      	bpl.n	80042cc <_printf_float+0x194>
 80042f6:	1c4b      	adds	r3, r1, #1
 80042f8:	e7e7      	b.n	80042ca <_printf_float+0x192>
 80042fa:	2900      	cmp	r1, #0
 80042fc:	bfd4      	ite	le
 80042fe:	f1c1 0202 	rsble	r2, r1, #2
 8004302:	2201      	movgt	r2, #1
 8004304:	4413      	add	r3, r2
 8004306:	e7e0      	b.n	80042ca <_printf_float+0x192>
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	055a      	lsls	r2, r3, #21
 800430c:	d407      	bmi.n	800431e <_printf_float+0x1e6>
 800430e:	6923      	ldr	r3, [r4, #16]
 8004310:	4642      	mov	r2, r8
 8004312:	4631      	mov	r1, r6
 8004314:	4628      	mov	r0, r5
 8004316:	47b8      	blx	r7
 8004318:	3001      	adds	r0, #1
 800431a:	d12b      	bne.n	8004374 <_printf_float+0x23c>
 800431c:	e767      	b.n	80041ee <_printf_float+0xb6>
 800431e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004322:	f240 80dd 	bls.w	80044e0 <_printf_float+0x3a8>
 8004326:	2200      	movs	r2, #0
 8004328:	2300      	movs	r3, #0
 800432a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800432e:	f7fc fb63 	bl	80009f8 <__aeabi_dcmpeq>
 8004332:	2800      	cmp	r0, #0
 8004334:	d033      	beq.n	800439e <_printf_float+0x266>
 8004336:	2301      	movs	r3, #1
 8004338:	4a36      	ldr	r2, [pc, #216]	@ (8004414 <_printf_float+0x2dc>)
 800433a:	4631      	mov	r1, r6
 800433c:	4628      	mov	r0, r5
 800433e:	47b8      	blx	r7
 8004340:	3001      	adds	r0, #1
 8004342:	f43f af54 	beq.w	80041ee <_printf_float+0xb6>
 8004346:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800434a:	4543      	cmp	r3, r8
 800434c:	db02      	blt.n	8004354 <_printf_float+0x21c>
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	07d8      	lsls	r0, r3, #31
 8004352:	d50f      	bpl.n	8004374 <_printf_float+0x23c>
 8004354:	4631      	mov	r1, r6
 8004356:	4628      	mov	r0, r5
 8004358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800435c:	47b8      	blx	r7
 800435e:	3001      	adds	r0, #1
 8004360:	f43f af45 	beq.w	80041ee <_printf_float+0xb6>
 8004364:	f04f 0900 	mov.w	r9, #0
 8004368:	f108 38ff 	add.w	r8, r8, #4294967295
 800436c:	f104 0a1a 	add.w	sl, r4, #26
 8004370:	45c8      	cmp	r8, r9
 8004372:	dc09      	bgt.n	8004388 <_printf_float+0x250>
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	079b      	lsls	r3, r3, #30
 8004378:	f100 8103 	bmi.w	8004582 <_printf_float+0x44a>
 800437c:	68e0      	ldr	r0, [r4, #12]
 800437e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004380:	4298      	cmp	r0, r3
 8004382:	bfb8      	it	lt
 8004384:	4618      	movlt	r0, r3
 8004386:	e734      	b.n	80041f2 <_printf_float+0xba>
 8004388:	2301      	movs	r3, #1
 800438a:	4652      	mov	r2, sl
 800438c:	4631      	mov	r1, r6
 800438e:	4628      	mov	r0, r5
 8004390:	47b8      	blx	r7
 8004392:	3001      	adds	r0, #1
 8004394:	f43f af2b 	beq.w	80041ee <_printf_float+0xb6>
 8004398:	f109 0901 	add.w	r9, r9, #1
 800439c:	e7e8      	b.n	8004370 <_printf_float+0x238>
 800439e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	dc39      	bgt.n	8004418 <_printf_float+0x2e0>
 80043a4:	2301      	movs	r3, #1
 80043a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004414 <_printf_float+0x2dc>)
 80043a8:	4631      	mov	r1, r6
 80043aa:	4628      	mov	r0, r5
 80043ac:	47b8      	blx	r7
 80043ae:	3001      	adds	r0, #1
 80043b0:	f43f af1d 	beq.w	80041ee <_printf_float+0xb6>
 80043b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80043b8:	ea59 0303 	orrs.w	r3, r9, r3
 80043bc:	d102      	bne.n	80043c4 <_printf_float+0x28c>
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	07d9      	lsls	r1, r3, #31
 80043c2:	d5d7      	bpl.n	8004374 <_printf_float+0x23c>
 80043c4:	4631      	mov	r1, r6
 80043c6:	4628      	mov	r0, r5
 80043c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043cc:	47b8      	blx	r7
 80043ce:	3001      	adds	r0, #1
 80043d0:	f43f af0d 	beq.w	80041ee <_printf_float+0xb6>
 80043d4:	f04f 0a00 	mov.w	sl, #0
 80043d8:	f104 0b1a 	add.w	fp, r4, #26
 80043dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043de:	425b      	negs	r3, r3
 80043e0:	4553      	cmp	r3, sl
 80043e2:	dc01      	bgt.n	80043e8 <_printf_float+0x2b0>
 80043e4:	464b      	mov	r3, r9
 80043e6:	e793      	b.n	8004310 <_printf_float+0x1d8>
 80043e8:	2301      	movs	r3, #1
 80043ea:	465a      	mov	r2, fp
 80043ec:	4631      	mov	r1, r6
 80043ee:	4628      	mov	r0, r5
 80043f0:	47b8      	blx	r7
 80043f2:	3001      	adds	r0, #1
 80043f4:	f43f aefb 	beq.w	80041ee <_printf_float+0xb6>
 80043f8:	f10a 0a01 	add.w	sl, sl, #1
 80043fc:	e7ee      	b.n	80043dc <_printf_float+0x2a4>
 80043fe:	bf00      	nop
 8004400:	7fefffff 	.word	0x7fefffff
 8004404:	08006d18 	.word	0x08006d18
 8004408:	08006d1c 	.word	0x08006d1c
 800440c:	08006d20 	.word	0x08006d20
 8004410:	08006d24 	.word	0x08006d24
 8004414:	08006d28 	.word	0x08006d28
 8004418:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800441a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800441e:	4553      	cmp	r3, sl
 8004420:	bfa8      	it	ge
 8004422:	4653      	movge	r3, sl
 8004424:	2b00      	cmp	r3, #0
 8004426:	4699      	mov	r9, r3
 8004428:	dc36      	bgt.n	8004498 <_printf_float+0x360>
 800442a:	f04f 0b00 	mov.w	fp, #0
 800442e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004432:	f104 021a 	add.w	r2, r4, #26
 8004436:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004438:	9306      	str	r3, [sp, #24]
 800443a:	eba3 0309 	sub.w	r3, r3, r9
 800443e:	455b      	cmp	r3, fp
 8004440:	dc31      	bgt.n	80044a6 <_printf_float+0x36e>
 8004442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004444:	459a      	cmp	sl, r3
 8004446:	dc3a      	bgt.n	80044be <_printf_float+0x386>
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	07da      	lsls	r2, r3, #31
 800444c:	d437      	bmi.n	80044be <_printf_float+0x386>
 800444e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004450:	ebaa 0903 	sub.w	r9, sl, r3
 8004454:	9b06      	ldr	r3, [sp, #24]
 8004456:	ebaa 0303 	sub.w	r3, sl, r3
 800445a:	4599      	cmp	r9, r3
 800445c:	bfa8      	it	ge
 800445e:	4699      	movge	r9, r3
 8004460:	f1b9 0f00 	cmp.w	r9, #0
 8004464:	dc33      	bgt.n	80044ce <_printf_float+0x396>
 8004466:	f04f 0800 	mov.w	r8, #0
 800446a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800446e:	f104 0b1a 	add.w	fp, r4, #26
 8004472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004474:	ebaa 0303 	sub.w	r3, sl, r3
 8004478:	eba3 0309 	sub.w	r3, r3, r9
 800447c:	4543      	cmp	r3, r8
 800447e:	f77f af79 	ble.w	8004374 <_printf_float+0x23c>
 8004482:	2301      	movs	r3, #1
 8004484:	465a      	mov	r2, fp
 8004486:	4631      	mov	r1, r6
 8004488:	4628      	mov	r0, r5
 800448a:	47b8      	blx	r7
 800448c:	3001      	adds	r0, #1
 800448e:	f43f aeae 	beq.w	80041ee <_printf_float+0xb6>
 8004492:	f108 0801 	add.w	r8, r8, #1
 8004496:	e7ec      	b.n	8004472 <_printf_float+0x33a>
 8004498:	4642      	mov	r2, r8
 800449a:	4631      	mov	r1, r6
 800449c:	4628      	mov	r0, r5
 800449e:	47b8      	blx	r7
 80044a0:	3001      	adds	r0, #1
 80044a2:	d1c2      	bne.n	800442a <_printf_float+0x2f2>
 80044a4:	e6a3      	b.n	80041ee <_printf_float+0xb6>
 80044a6:	2301      	movs	r3, #1
 80044a8:	4631      	mov	r1, r6
 80044aa:	4628      	mov	r0, r5
 80044ac:	9206      	str	r2, [sp, #24]
 80044ae:	47b8      	blx	r7
 80044b0:	3001      	adds	r0, #1
 80044b2:	f43f ae9c 	beq.w	80041ee <_printf_float+0xb6>
 80044b6:	f10b 0b01 	add.w	fp, fp, #1
 80044ba:	9a06      	ldr	r2, [sp, #24]
 80044bc:	e7bb      	b.n	8004436 <_printf_float+0x2fe>
 80044be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044c2:	4631      	mov	r1, r6
 80044c4:	4628      	mov	r0, r5
 80044c6:	47b8      	blx	r7
 80044c8:	3001      	adds	r0, #1
 80044ca:	d1c0      	bne.n	800444e <_printf_float+0x316>
 80044cc:	e68f      	b.n	80041ee <_printf_float+0xb6>
 80044ce:	9a06      	ldr	r2, [sp, #24]
 80044d0:	464b      	mov	r3, r9
 80044d2:	4631      	mov	r1, r6
 80044d4:	4628      	mov	r0, r5
 80044d6:	4442      	add	r2, r8
 80044d8:	47b8      	blx	r7
 80044da:	3001      	adds	r0, #1
 80044dc:	d1c3      	bne.n	8004466 <_printf_float+0x32e>
 80044de:	e686      	b.n	80041ee <_printf_float+0xb6>
 80044e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80044e4:	f1ba 0f01 	cmp.w	sl, #1
 80044e8:	dc01      	bgt.n	80044ee <_printf_float+0x3b6>
 80044ea:	07db      	lsls	r3, r3, #31
 80044ec:	d536      	bpl.n	800455c <_printf_float+0x424>
 80044ee:	2301      	movs	r3, #1
 80044f0:	4642      	mov	r2, r8
 80044f2:	4631      	mov	r1, r6
 80044f4:	4628      	mov	r0, r5
 80044f6:	47b8      	blx	r7
 80044f8:	3001      	adds	r0, #1
 80044fa:	f43f ae78 	beq.w	80041ee <_printf_float+0xb6>
 80044fe:	4631      	mov	r1, r6
 8004500:	4628      	mov	r0, r5
 8004502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004506:	47b8      	blx	r7
 8004508:	3001      	adds	r0, #1
 800450a:	f43f ae70 	beq.w	80041ee <_printf_float+0xb6>
 800450e:	2200      	movs	r2, #0
 8004510:	2300      	movs	r3, #0
 8004512:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004516:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800451a:	f7fc fa6d 	bl	80009f8 <__aeabi_dcmpeq>
 800451e:	b9c0      	cbnz	r0, 8004552 <_printf_float+0x41a>
 8004520:	4653      	mov	r3, sl
 8004522:	f108 0201 	add.w	r2, r8, #1
 8004526:	4631      	mov	r1, r6
 8004528:	4628      	mov	r0, r5
 800452a:	47b8      	blx	r7
 800452c:	3001      	adds	r0, #1
 800452e:	d10c      	bne.n	800454a <_printf_float+0x412>
 8004530:	e65d      	b.n	80041ee <_printf_float+0xb6>
 8004532:	2301      	movs	r3, #1
 8004534:	465a      	mov	r2, fp
 8004536:	4631      	mov	r1, r6
 8004538:	4628      	mov	r0, r5
 800453a:	47b8      	blx	r7
 800453c:	3001      	adds	r0, #1
 800453e:	f43f ae56 	beq.w	80041ee <_printf_float+0xb6>
 8004542:	f108 0801 	add.w	r8, r8, #1
 8004546:	45d0      	cmp	r8, sl
 8004548:	dbf3      	blt.n	8004532 <_printf_float+0x3fa>
 800454a:	464b      	mov	r3, r9
 800454c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004550:	e6df      	b.n	8004312 <_printf_float+0x1da>
 8004552:	f04f 0800 	mov.w	r8, #0
 8004556:	f104 0b1a 	add.w	fp, r4, #26
 800455a:	e7f4      	b.n	8004546 <_printf_float+0x40e>
 800455c:	2301      	movs	r3, #1
 800455e:	4642      	mov	r2, r8
 8004560:	e7e1      	b.n	8004526 <_printf_float+0x3ee>
 8004562:	2301      	movs	r3, #1
 8004564:	464a      	mov	r2, r9
 8004566:	4631      	mov	r1, r6
 8004568:	4628      	mov	r0, r5
 800456a:	47b8      	blx	r7
 800456c:	3001      	adds	r0, #1
 800456e:	f43f ae3e 	beq.w	80041ee <_printf_float+0xb6>
 8004572:	f108 0801 	add.w	r8, r8, #1
 8004576:	68e3      	ldr	r3, [r4, #12]
 8004578:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800457a:	1a5b      	subs	r3, r3, r1
 800457c:	4543      	cmp	r3, r8
 800457e:	dcf0      	bgt.n	8004562 <_printf_float+0x42a>
 8004580:	e6fc      	b.n	800437c <_printf_float+0x244>
 8004582:	f04f 0800 	mov.w	r8, #0
 8004586:	f104 0919 	add.w	r9, r4, #25
 800458a:	e7f4      	b.n	8004576 <_printf_float+0x43e>

0800458c <_printf_common>:
 800458c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004590:	4616      	mov	r6, r2
 8004592:	4698      	mov	r8, r3
 8004594:	688a      	ldr	r2, [r1, #8]
 8004596:	4607      	mov	r7, r0
 8004598:	690b      	ldr	r3, [r1, #16]
 800459a:	460c      	mov	r4, r1
 800459c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045a0:	4293      	cmp	r3, r2
 80045a2:	bfb8      	it	lt
 80045a4:	4613      	movlt	r3, r2
 80045a6:	6033      	str	r3, [r6, #0]
 80045a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045ac:	b10a      	cbz	r2, 80045b2 <_printf_common+0x26>
 80045ae:	3301      	adds	r3, #1
 80045b0:	6033      	str	r3, [r6, #0]
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	0699      	lsls	r1, r3, #26
 80045b6:	bf42      	ittt	mi
 80045b8:	6833      	ldrmi	r3, [r6, #0]
 80045ba:	3302      	addmi	r3, #2
 80045bc:	6033      	strmi	r3, [r6, #0]
 80045be:	6825      	ldr	r5, [r4, #0]
 80045c0:	f015 0506 	ands.w	r5, r5, #6
 80045c4:	d106      	bne.n	80045d4 <_printf_common+0x48>
 80045c6:	f104 0a19 	add.w	sl, r4, #25
 80045ca:	68e3      	ldr	r3, [r4, #12]
 80045cc:	6832      	ldr	r2, [r6, #0]
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	42ab      	cmp	r3, r5
 80045d2:	dc2b      	bgt.n	800462c <_printf_common+0xa0>
 80045d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045d8:	6822      	ldr	r2, [r4, #0]
 80045da:	3b00      	subs	r3, #0
 80045dc:	bf18      	it	ne
 80045de:	2301      	movne	r3, #1
 80045e0:	0692      	lsls	r2, r2, #26
 80045e2:	d430      	bmi.n	8004646 <_printf_common+0xba>
 80045e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045e8:	4641      	mov	r1, r8
 80045ea:	4638      	mov	r0, r7
 80045ec:	47c8      	blx	r9
 80045ee:	3001      	adds	r0, #1
 80045f0:	d023      	beq.n	800463a <_printf_common+0xae>
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	341a      	adds	r4, #26
 80045f6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80045fa:	f003 0306 	and.w	r3, r3, #6
 80045fe:	2b04      	cmp	r3, #4
 8004600:	bf0a      	itet	eq
 8004602:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8004606:	2500      	movne	r5, #0
 8004608:	6833      	ldreq	r3, [r6, #0]
 800460a:	f04f 0600 	mov.w	r6, #0
 800460e:	bf08      	it	eq
 8004610:	1aed      	subeq	r5, r5, r3
 8004612:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004616:	bf08      	it	eq
 8004618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800461c:	4293      	cmp	r3, r2
 800461e:	bfc4      	itt	gt
 8004620:	1a9b      	subgt	r3, r3, r2
 8004622:	18ed      	addgt	r5, r5, r3
 8004624:	42b5      	cmp	r5, r6
 8004626:	d11a      	bne.n	800465e <_printf_common+0xd2>
 8004628:	2000      	movs	r0, #0
 800462a:	e008      	b.n	800463e <_printf_common+0xb2>
 800462c:	2301      	movs	r3, #1
 800462e:	4652      	mov	r2, sl
 8004630:	4641      	mov	r1, r8
 8004632:	4638      	mov	r0, r7
 8004634:	47c8      	blx	r9
 8004636:	3001      	adds	r0, #1
 8004638:	d103      	bne.n	8004642 <_printf_common+0xb6>
 800463a:	f04f 30ff 	mov.w	r0, #4294967295
 800463e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004642:	3501      	adds	r5, #1
 8004644:	e7c1      	b.n	80045ca <_printf_common+0x3e>
 8004646:	18e1      	adds	r1, r4, r3
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	2030      	movs	r0, #48	@ 0x30
 800464c:	3302      	adds	r3, #2
 800464e:	4422      	add	r2, r4
 8004650:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004654:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004658:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800465c:	e7c2      	b.n	80045e4 <_printf_common+0x58>
 800465e:	2301      	movs	r3, #1
 8004660:	4622      	mov	r2, r4
 8004662:	4641      	mov	r1, r8
 8004664:	4638      	mov	r0, r7
 8004666:	47c8      	blx	r9
 8004668:	3001      	adds	r0, #1
 800466a:	d0e6      	beq.n	800463a <_printf_common+0xae>
 800466c:	3601      	adds	r6, #1
 800466e:	e7d9      	b.n	8004624 <_printf_common+0x98>

08004670 <_printf_i>:
 8004670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004674:	7e0f      	ldrb	r7, [r1, #24]
 8004676:	4691      	mov	r9, r2
 8004678:	4680      	mov	r8, r0
 800467a:	460c      	mov	r4, r1
 800467c:	2f78      	cmp	r7, #120	@ 0x78
 800467e:	469a      	mov	sl, r3
 8004680:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004682:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004686:	d807      	bhi.n	8004698 <_printf_i+0x28>
 8004688:	2f62      	cmp	r7, #98	@ 0x62
 800468a:	d80a      	bhi.n	80046a2 <_printf_i+0x32>
 800468c:	2f00      	cmp	r7, #0
 800468e:	f000 80d2 	beq.w	8004836 <_printf_i+0x1c6>
 8004692:	2f58      	cmp	r7, #88	@ 0x58
 8004694:	f000 80b9 	beq.w	800480a <_printf_i+0x19a>
 8004698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800469c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046a0:	e03a      	b.n	8004718 <_printf_i+0xa8>
 80046a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046a6:	2b15      	cmp	r3, #21
 80046a8:	d8f6      	bhi.n	8004698 <_printf_i+0x28>
 80046aa:	a101      	add	r1, pc, #4	@ (adr r1, 80046b0 <_printf_i+0x40>)
 80046ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046b0:	08004709 	.word	0x08004709
 80046b4:	0800471d 	.word	0x0800471d
 80046b8:	08004699 	.word	0x08004699
 80046bc:	08004699 	.word	0x08004699
 80046c0:	08004699 	.word	0x08004699
 80046c4:	08004699 	.word	0x08004699
 80046c8:	0800471d 	.word	0x0800471d
 80046cc:	08004699 	.word	0x08004699
 80046d0:	08004699 	.word	0x08004699
 80046d4:	08004699 	.word	0x08004699
 80046d8:	08004699 	.word	0x08004699
 80046dc:	0800481d 	.word	0x0800481d
 80046e0:	08004747 	.word	0x08004747
 80046e4:	080047d7 	.word	0x080047d7
 80046e8:	08004699 	.word	0x08004699
 80046ec:	08004699 	.word	0x08004699
 80046f0:	0800483f 	.word	0x0800483f
 80046f4:	08004699 	.word	0x08004699
 80046f8:	08004747 	.word	0x08004747
 80046fc:	08004699 	.word	0x08004699
 8004700:	08004699 	.word	0x08004699
 8004704:	080047df 	.word	0x080047df
 8004708:	6833      	ldr	r3, [r6, #0]
 800470a:	1d1a      	adds	r2, r3, #4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6032      	str	r2, [r6, #0]
 8004710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004714:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004718:	2301      	movs	r3, #1
 800471a:	e09d      	b.n	8004858 <_printf_i+0x1e8>
 800471c:	6833      	ldr	r3, [r6, #0]
 800471e:	6820      	ldr	r0, [r4, #0]
 8004720:	1d19      	adds	r1, r3, #4
 8004722:	6031      	str	r1, [r6, #0]
 8004724:	0606      	lsls	r6, r0, #24
 8004726:	d501      	bpl.n	800472c <_printf_i+0xbc>
 8004728:	681d      	ldr	r5, [r3, #0]
 800472a:	e003      	b.n	8004734 <_printf_i+0xc4>
 800472c:	0645      	lsls	r5, r0, #25
 800472e:	d5fb      	bpl.n	8004728 <_printf_i+0xb8>
 8004730:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004734:	2d00      	cmp	r5, #0
 8004736:	da03      	bge.n	8004740 <_printf_i+0xd0>
 8004738:	232d      	movs	r3, #45	@ 0x2d
 800473a:	426d      	negs	r5, r5
 800473c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004740:	4859      	ldr	r0, [pc, #356]	@ (80048a8 <_printf_i+0x238>)
 8004742:	230a      	movs	r3, #10
 8004744:	e011      	b.n	800476a <_printf_i+0xfa>
 8004746:	6821      	ldr	r1, [r4, #0]
 8004748:	6833      	ldr	r3, [r6, #0]
 800474a:	0608      	lsls	r0, r1, #24
 800474c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004750:	d402      	bmi.n	8004758 <_printf_i+0xe8>
 8004752:	0649      	lsls	r1, r1, #25
 8004754:	bf48      	it	mi
 8004756:	b2ad      	uxthmi	r5, r5
 8004758:	2f6f      	cmp	r7, #111	@ 0x6f
 800475a:	6033      	str	r3, [r6, #0]
 800475c:	4852      	ldr	r0, [pc, #328]	@ (80048a8 <_printf_i+0x238>)
 800475e:	bf14      	ite	ne
 8004760:	230a      	movne	r3, #10
 8004762:	2308      	moveq	r3, #8
 8004764:	2100      	movs	r1, #0
 8004766:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800476a:	6866      	ldr	r6, [r4, #4]
 800476c:	2e00      	cmp	r6, #0
 800476e:	60a6      	str	r6, [r4, #8]
 8004770:	bfa2      	ittt	ge
 8004772:	6821      	ldrge	r1, [r4, #0]
 8004774:	f021 0104 	bicge.w	r1, r1, #4
 8004778:	6021      	strge	r1, [r4, #0]
 800477a:	b90d      	cbnz	r5, 8004780 <_printf_i+0x110>
 800477c:	2e00      	cmp	r6, #0
 800477e:	d04b      	beq.n	8004818 <_printf_i+0x1a8>
 8004780:	4616      	mov	r6, r2
 8004782:	fbb5 f1f3 	udiv	r1, r5, r3
 8004786:	fb03 5711 	mls	r7, r3, r1, r5
 800478a:	5dc7      	ldrb	r7, [r0, r7]
 800478c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004790:	462f      	mov	r7, r5
 8004792:	460d      	mov	r5, r1
 8004794:	42bb      	cmp	r3, r7
 8004796:	d9f4      	bls.n	8004782 <_printf_i+0x112>
 8004798:	2b08      	cmp	r3, #8
 800479a:	d10b      	bne.n	80047b4 <_printf_i+0x144>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	07df      	lsls	r7, r3, #31
 80047a0:	d508      	bpl.n	80047b4 <_printf_i+0x144>
 80047a2:	6923      	ldr	r3, [r4, #16]
 80047a4:	6861      	ldr	r1, [r4, #4]
 80047a6:	4299      	cmp	r1, r3
 80047a8:	bfde      	ittt	le
 80047aa:	2330      	movle	r3, #48	@ 0x30
 80047ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047b4:	1b92      	subs	r2, r2, r6
 80047b6:	6122      	str	r2, [r4, #16]
 80047b8:	464b      	mov	r3, r9
 80047ba:	aa03      	add	r2, sp, #12
 80047bc:	4621      	mov	r1, r4
 80047be:	4640      	mov	r0, r8
 80047c0:	f8cd a000 	str.w	sl, [sp]
 80047c4:	f7ff fee2 	bl	800458c <_printf_common>
 80047c8:	3001      	adds	r0, #1
 80047ca:	d14a      	bne.n	8004862 <_printf_i+0x1f2>
 80047cc:	f04f 30ff 	mov.w	r0, #4294967295
 80047d0:	b004      	add	sp, #16
 80047d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	f043 0320 	orr.w	r3, r3, #32
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	2778      	movs	r7, #120	@ 0x78
 80047e0:	4832      	ldr	r0, [pc, #200]	@ (80048ac <_printf_i+0x23c>)
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047e8:	061f      	lsls	r7, r3, #24
 80047ea:	6831      	ldr	r1, [r6, #0]
 80047ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80047f0:	d402      	bmi.n	80047f8 <_printf_i+0x188>
 80047f2:	065f      	lsls	r7, r3, #25
 80047f4:	bf48      	it	mi
 80047f6:	b2ad      	uxthmi	r5, r5
 80047f8:	6031      	str	r1, [r6, #0]
 80047fa:	07d9      	lsls	r1, r3, #31
 80047fc:	bf44      	itt	mi
 80047fe:	f043 0320 	orrmi.w	r3, r3, #32
 8004802:	6023      	strmi	r3, [r4, #0]
 8004804:	b11d      	cbz	r5, 800480e <_printf_i+0x19e>
 8004806:	2310      	movs	r3, #16
 8004808:	e7ac      	b.n	8004764 <_printf_i+0xf4>
 800480a:	4827      	ldr	r0, [pc, #156]	@ (80048a8 <_printf_i+0x238>)
 800480c:	e7e9      	b.n	80047e2 <_printf_i+0x172>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	f023 0320 	bic.w	r3, r3, #32
 8004814:	6023      	str	r3, [r4, #0]
 8004816:	e7f6      	b.n	8004806 <_printf_i+0x196>
 8004818:	4616      	mov	r6, r2
 800481a:	e7bd      	b.n	8004798 <_printf_i+0x128>
 800481c:	6833      	ldr	r3, [r6, #0]
 800481e:	6825      	ldr	r5, [r4, #0]
 8004820:	1d18      	adds	r0, r3, #4
 8004822:	6961      	ldr	r1, [r4, #20]
 8004824:	6030      	str	r0, [r6, #0]
 8004826:	062e      	lsls	r6, r5, #24
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	d501      	bpl.n	8004830 <_printf_i+0x1c0>
 800482c:	6019      	str	r1, [r3, #0]
 800482e:	e002      	b.n	8004836 <_printf_i+0x1c6>
 8004830:	0668      	lsls	r0, r5, #25
 8004832:	d5fb      	bpl.n	800482c <_printf_i+0x1bc>
 8004834:	8019      	strh	r1, [r3, #0]
 8004836:	2300      	movs	r3, #0
 8004838:	4616      	mov	r6, r2
 800483a:	6123      	str	r3, [r4, #16]
 800483c:	e7bc      	b.n	80047b8 <_printf_i+0x148>
 800483e:	6833      	ldr	r3, [r6, #0]
 8004840:	2100      	movs	r1, #0
 8004842:	1d1a      	adds	r2, r3, #4
 8004844:	6032      	str	r2, [r6, #0]
 8004846:	681e      	ldr	r6, [r3, #0]
 8004848:	6862      	ldr	r2, [r4, #4]
 800484a:	4630      	mov	r0, r6
 800484c:	f000 f9d5 	bl	8004bfa <memchr>
 8004850:	b108      	cbz	r0, 8004856 <_printf_i+0x1e6>
 8004852:	1b80      	subs	r0, r0, r6
 8004854:	6060      	str	r0, [r4, #4]
 8004856:	6863      	ldr	r3, [r4, #4]
 8004858:	6123      	str	r3, [r4, #16]
 800485a:	2300      	movs	r3, #0
 800485c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004860:	e7aa      	b.n	80047b8 <_printf_i+0x148>
 8004862:	6923      	ldr	r3, [r4, #16]
 8004864:	4632      	mov	r2, r6
 8004866:	4649      	mov	r1, r9
 8004868:	4640      	mov	r0, r8
 800486a:	47d0      	blx	sl
 800486c:	3001      	adds	r0, #1
 800486e:	d0ad      	beq.n	80047cc <_printf_i+0x15c>
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	079b      	lsls	r3, r3, #30
 8004874:	d413      	bmi.n	800489e <_printf_i+0x22e>
 8004876:	68e0      	ldr	r0, [r4, #12]
 8004878:	9b03      	ldr	r3, [sp, #12]
 800487a:	4298      	cmp	r0, r3
 800487c:	bfb8      	it	lt
 800487e:	4618      	movlt	r0, r3
 8004880:	e7a6      	b.n	80047d0 <_printf_i+0x160>
 8004882:	2301      	movs	r3, #1
 8004884:	4632      	mov	r2, r6
 8004886:	4649      	mov	r1, r9
 8004888:	4640      	mov	r0, r8
 800488a:	47d0      	blx	sl
 800488c:	3001      	adds	r0, #1
 800488e:	d09d      	beq.n	80047cc <_printf_i+0x15c>
 8004890:	3501      	adds	r5, #1
 8004892:	68e3      	ldr	r3, [r4, #12]
 8004894:	9903      	ldr	r1, [sp, #12]
 8004896:	1a5b      	subs	r3, r3, r1
 8004898:	42ab      	cmp	r3, r5
 800489a:	dcf2      	bgt.n	8004882 <_printf_i+0x212>
 800489c:	e7eb      	b.n	8004876 <_printf_i+0x206>
 800489e:	2500      	movs	r5, #0
 80048a0:	f104 0619 	add.w	r6, r4, #25
 80048a4:	e7f5      	b.n	8004892 <_printf_i+0x222>
 80048a6:	bf00      	nop
 80048a8:	08006d2a 	.word	0x08006d2a
 80048ac:	08006d3b 	.word	0x08006d3b

080048b0 <std>:
 80048b0:	2300      	movs	r3, #0
 80048b2:	b510      	push	{r4, lr}
 80048b4:	4604      	mov	r4, r0
 80048b6:	6083      	str	r3, [r0, #8]
 80048b8:	8181      	strh	r1, [r0, #12]
 80048ba:	4619      	mov	r1, r3
 80048bc:	6643      	str	r3, [r0, #100]	@ 0x64
 80048be:	81c2      	strh	r2, [r0, #14]
 80048c0:	2208      	movs	r2, #8
 80048c2:	6183      	str	r3, [r0, #24]
 80048c4:	e9c0 3300 	strd	r3, r3, [r0]
 80048c8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048cc:	305c      	adds	r0, #92	@ 0x5c
 80048ce:	f000 f914 	bl	8004afa <memset>
 80048d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004908 <std+0x58>)
 80048d4:	6224      	str	r4, [r4, #32]
 80048d6:	6263      	str	r3, [r4, #36]	@ 0x24
 80048d8:	4b0c      	ldr	r3, [pc, #48]	@ (800490c <std+0x5c>)
 80048da:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004910 <std+0x60>)
 80048de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004914 <std+0x64>)
 80048e2:	6323      	str	r3, [r4, #48]	@ 0x30
 80048e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004918 <std+0x68>)
 80048e6:	429c      	cmp	r4, r3
 80048e8:	d006      	beq.n	80048f8 <std+0x48>
 80048ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048ee:	4294      	cmp	r4, r2
 80048f0:	d002      	beq.n	80048f8 <std+0x48>
 80048f2:	33d0      	adds	r3, #208	@ 0xd0
 80048f4:	429c      	cmp	r4, r3
 80048f6:	d105      	bne.n	8004904 <std+0x54>
 80048f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004900:	f000 b978 	b.w	8004bf4 <__retarget_lock_init_recursive>
 8004904:	bd10      	pop	{r4, pc}
 8004906:	bf00      	nop
 8004908:	08004a75 	.word	0x08004a75
 800490c:	08004a97 	.word	0x08004a97
 8004910:	08004acf 	.word	0x08004acf
 8004914:	08004af3 	.word	0x08004af3
 8004918:	200002a0 	.word	0x200002a0

0800491c <stdio_exit_handler>:
 800491c:	4a02      	ldr	r2, [pc, #8]	@ (8004928 <stdio_exit_handler+0xc>)
 800491e:	4903      	ldr	r1, [pc, #12]	@ (800492c <stdio_exit_handler+0x10>)
 8004920:	4803      	ldr	r0, [pc, #12]	@ (8004930 <stdio_exit_handler+0x14>)
 8004922:	f000 b869 	b.w	80049f8 <_fwalk_sglue>
 8004926:	bf00      	nop
 8004928:	2000000c 	.word	0x2000000c
 800492c:	08006581 	.word	0x08006581
 8004930:	2000001c 	.word	0x2000001c

08004934 <cleanup_stdio>:
 8004934:	6841      	ldr	r1, [r0, #4]
 8004936:	4b0c      	ldr	r3, [pc, #48]	@ (8004968 <cleanup_stdio+0x34>)
 8004938:	4299      	cmp	r1, r3
 800493a:	b510      	push	{r4, lr}
 800493c:	4604      	mov	r4, r0
 800493e:	d001      	beq.n	8004944 <cleanup_stdio+0x10>
 8004940:	f001 fe1e 	bl	8006580 <_fflush_r>
 8004944:	68a1      	ldr	r1, [r4, #8]
 8004946:	4b09      	ldr	r3, [pc, #36]	@ (800496c <cleanup_stdio+0x38>)
 8004948:	4299      	cmp	r1, r3
 800494a:	d002      	beq.n	8004952 <cleanup_stdio+0x1e>
 800494c:	4620      	mov	r0, r4
 800494e:	f001 fe17 	bl	8006580 <_fflush_r>
 8004952:	68e1      	ldr	r1, [r4, #12]
 8004954:	4b06      	ldr	r3, [pc, #24]	@ (8004970 <cleanup_stdio+0x3c>)
 8004956:	4299      	cmp	r1, r3
 8004958:	d004      	beq.n	8004964 <cleanup_stdio+0x30>
 800495a:	4620      	mov	r0, r4
 800495c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004960:	f001 be0e 	b.w	8006580 <_fflush_r>
 8004964:	bd10      	pop	{r4, pc}
 8004966:	bf00      	nop
 8004968:	200002a0 	.word	0x200002a0
 800496c:	20000308 	.word	0x20000308
 8004970:	20000370 	.word	0x20000370

08004974 <global_stdio_init.part.0>:
 8004974:	b510      	push	{r4, lr}
 8004976:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <global_stdio_init.part.0+0x30>)
 8004978:	2104      	movs	r1, #4
 800497a:	4c0b      	ldr	r4, [pc, #44]	@ (80049a8 <global_stdio_init.part.0+0x34>)
 800497c:	4a0b      	ldr	r2, [pc, #44]	@ (80049ac <global_stdio_init.part.0+0x38>)
 800497e:	4620      	mov	r0, r4
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	2200      	movs	r2, #0
 8004984:	f7ff ff94 	bl	80048b0 <std>
 8004988:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800498c:	2201      	movs	r2, #1
 800498e:	2109      	movs	r1, #9
 8004990:	f7ff ff8e 	bl	80048b0 <std>
 8004994:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004998:	2202      	movs	r2, #2
 800499a:	2112      	movs	r1, #18
 800499c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049a0:	f7ff bf86 	b.w	80048b0 <std>
 80049a4:	200003d8 	.word	0x200003d8
 80049a8:	200002a0 	.word	0x200002a0
 80049ac:	0800491d 	.word	0x0800491d

080049b0 <__sfp_lock_acquire>:
 80049b0:	4801      	ldr	r0, [pc, #4]	@ (80049b8 <__sfp_lock_acquire+0x8>)
 80049b2:	f000 b920 	b.w	8004bf6 <__retarget_lock_acquire_recursive>
 80049b6:	bf00      	nop
 80049b8:	200003e1 	.word	0x200003e1

080049bc <__sfp_lock_release>:
 80049bc:	4801      	ldr	r0, [pc, #4]	@ (80049c4 <__sfp_lock_release+0x8>)
 80049be:	f000 b91b 	b.w	8004bf8 <__retarget_lock_release_recursive>
 80049c2:	bf00      	nop
 80049c4:	200003e1 	.word	0x200003e1

080049c8 <__sinit>:
 80049c8:	b510      	push	{r4, lr}
 80049ca:	4604      	mov	r4, r0
 80049cc:	f7ff fff0 	bl	80049b0 <__sfp_lock_acquire>
 80049d0:	6a23      	ldr	r3, [r4, #32]
 80049d2:	b11b      	cbz	r3, 80049dc <__sinit+0x14>
 80049d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d8:	f7ff bff0 	b.w	80049bc <__sfp_lock_release>
 80049dc:	4b04      	ldr	r3, [pc, #16]	@ (80049f0 <__sinit+0x28>)
 80049de:	6223      	str	r3, [r4, #32]
 80049e0:	4b04      	ldr	r3, [pc, #16]	@ (80049f4 <__sinit+0x2c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f5      	bne.n	80049d4 <__sinit+0xc>
 80049e8:	f7ff ffc4 	bl	8004974 <global_stdio_init.part.0>
 80049ec:	e7f2      	b.n	80049d4 <__sinit+0xc>
 80049ee:	bf00      	nop
 80049f0:	08004935 	.word	0x08004935
 80049f4:	200003d8 	.word	0x200003d8

080049f8 <_fwalk_sglue>:
 80049f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049fc:	4607      	mov	r7, r0
 80049fe:	4688      	mov	r8, r1
 8004a00:	4614      	mov	r4, r2
 8004a02:	2600      	movs	r6, #0
 8004a04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a08:	f1b9 0901 	subs.w	r9, r9, #1
 8004a0c:	d505      	bpl.n	8004a1a <_fwalk_sglue+0x22>
 8004a0e:	6824      	ldr	r4, [r4, #0]
 8004a10:	2c00      	cmp	r4, #0
 8004a12:	d1f7      	bne.n	8004a04 <_fwalk_sglue+0xc>
 8004a14:	4630      	mov	r0, r6
 8004a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a1a:	89ab      	ldrh	r3, [r5, #12]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d907      	bls.n	8004a30 <_fwalk_sglue+0x38>
 8004a20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a24:	3301      	adds	r3, #1
 8004a26:	d003      	beq.n	8004a30 <_fwalk_sglue+0x38>
 8004a28:	4629      	mov	r1, r5
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	47c0      	blx	r8
 8004a2e:	4306      	orrs	r6, r0
 8004a30:	3568      	adds	r5, #104	@ 0x68
 8004a32:	e7e9      	b.n	8004a08 <_fwalk_sglue+0x10>

08004a34 <siprintf>:
 8004a34:	b40e      	push	{r1, r2, r3}
 8004a36:	b500      	push	{lr}
 8004a38:	b09c      	sub	sp, #112	@ 0x70
 8004a3a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a3e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004a40:	9002      	str	r0, [sp, #8]
 8004a42:	9006      	str	r0, [sp, #24]
 8004a44:	9107      	str	r1, [sp, #28]
 8004a46:	9104      	str	r1, [sp, #16]
 8004a48:	4808      	ldr	r0, [pc, #32]	@ (8004a6c <siprintf+0x38>)
 8004a4a:	4909      	ldr	r1, [pc, #36]	@ (8004a70 <siprintf+0x3c>)
 8004a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a50:	9105      	str	r1, [sp, #20]
 8004a52:	a902      	add	r1, sp, #8
 8004a54:	6800      	ldr	r0, [r0, #0]
 8004a56:	9301      	str	r3, [sp, #4]
 8004a58:	f001 fc12 	bl	8006280 <_svfiprintf_r>
 8004a5c:	9b02      	ldr	r3, [sp, #8]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	b01c      	add	sp, #112	@ 0x70
 8004a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a68:	b003      	add	sp, #12
 8004a6a:	4770      	bx	lr
 8004a6c:	20000018 	.word	0x20000018
 8004a70:	ffff0208 	.word	0xffff0208

08004a74 <__sread>:
 8004a74:	b510      	push	{r4, lr}
 8004a76:	460c      	mov	r4, r1
 8004a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a7c:	f000 f86c 	bl	8004b58 <_read_r>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	bfab      	itete	ge
 8004a84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a86:	89a3      	ldrhlt	r3, [r4, #12]
 8004a88:	181b      	addge	r3, r3, r0
 8004a8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a8e:	bfac      	ite	ge
 8004a90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a92:	81a3      	strhlt	r3, [r4, #12]
 8004a94:	bd10      	pop	{r4, pc}

08004a96 <__swrite>:
 8004a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a9a:	461f      	mov	r7, r3
 8004a9c:	898b      	ldrh	r3, [r1, #12]
 8004a9e:	4605      	mov	r5, r0
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	05db      	lsls	r3, r3, #23
 8004aa4:	4616      	mov	r6, r2
 8004aa6:	d505      	bpl.n	8004ab4 <__swrite+0x1e>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab0:	f000 f840 	bl	8004b34 <_lseek_r>
 8004ab4:	89a3      	ldrh	r3, [r4, #12]
 8004ab6:	4632      	mov	r2, r6
 8004ab8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004abc:	4628      	mov	r0, r5
 8004abe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ac2:	81a3      	strh	r3, [r4, #12]
 8004ac4:	463b      	mov	r3, r7
 8004ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aca:	f000 b857 	b.w	8004b7c <_write_r>

08004ace <__sseek>:
 8004ace:	b510      	push	{r4, lr}
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ad6:	f000 f82d 	bl	8004b34 <_lseek_r>
 8004ada:	1c43      	adds	r3, r0, #1
 8004adc:	89a3      	ldrh	r3, [r4, #12]
 8004ade:	bf15      	itete	ne
 8004ae0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004ae2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ae6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004aea:	81a3      	strheq	r3, [r4, #12]
 8004aec:	bf18      	it	ne
 8004aee:	81a3      	strhne	r3, [r4, #12]
 8004af0:	bd10      	pop	{r4, pc}

08004af2 <__sclose>:
 8004af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af6:	f000 b80d 	b.w	8004b14 <_close_r>

08004afa <memset>:
 8004afa:	4402      	add	r2, r0
 8004afc:	4603      	mov	r3, r0
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d100      	bne.n	8004b04 <memset+0xa>
 8004b02:	4770      	bx	lr
 8004b04:	f803 1b01 	strb.w	r1, [r3], #1
 8004b08:	e7f9      	b.n	8004afe <memset+0x4>
	...

08004b0c <_localeconv_r>:
 8004b0c:	4800      	ldr	r0, [pc, #0]	@ (8004b10 <_localeconv_r+0x4>)
 8004b0e:	4770      	bx	lr
 8004b10:	20000158 	.word	0x20000158

08004b14 <_close_r>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	2300      	movs	r3, #0
 8004b18:	4d05      	ldr	r5, [pc, #20]	@ (8004b30 <_close_r+0x1c>)
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	602b      	str	r3, [r5, #0]
 8004b20:	f7fc fdcc 	bl	80016bc <_close>
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	d102      	bne.n	8004b2e <_close_r+0x1a>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	b103      	cbz	r3, 8004b2e <_close_r+0x1a>
 8004b2c:	6023      	str	r3, [r4, #0]
 8004b2e:	bd38      	pop	{r3, r4, r5, pc}
 8004b30:	200003dc 	.word	0x200003dc

08004b34 <_lseek_r>:
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	4604      	mov	r4, r0
 8004b38:	4d06      	ldr	r5, [pc, #24]	@ (8004b54 <_lseek_r+0x20>)
 8004b3a:	4608      	mov	r0, r1
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	2200      	movs	r2, #0
 8004b40:	602a      	str	r2, [r5, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	f7fc fde1 	bl	800170a <_lseek>
 8004b48:	1c43      	adds	r3, r0, #1
 8004b4a:	d102      	bne.n	8004b52 <_lseek_r+0x1e>
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	b103      	cbz	r3, 8004b52 <_lseek_r+0x1e>
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	bd38      	pop	{r3, r4, r5, pc}
 8004b54:	200003dc 	.word	0x200003dc

08004b58 <_read_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	4d06      	ldr	r5, [pc, #24]	@ (8004b78 <_read_r+0x20>)
 8004b5e:	4608      	mov	r0, r1
 8004b60:	4611      	mov	r1, r2
 8004b62:	2200      	movs	r2, #0
 8004b64:	602a      	str	r2, [r5, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	f7fc fd6f 	bl	800164a <_read>
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	d102      	bne.n	8004b76 <_read_r+0x1e>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	b103      	cbz	r3, 8004b76 <_read_r+0x1e>
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	bd38      	pop	{r3, r4, r5, pc}
 8004b78:	200003dc 	.word	0x200003dc

08004b7c <_write_r>:
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	4604      	mov	r4, r0
 8004b80:	4d06      	ldr	r5, [pc, #24]	@ (8004b9c <_write_r+0x20>)
 8004b82:	4608      	mov	r0, r1
 8004b84:	4611      	mov	r1, r2
 8004b86:	2200      	movs	r2, #0
 8004b88:	602a      	str	r2, [r5, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f7fc fd7a 	bl	8001684 <_write>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	d102      	bne.n	8004b9a <_write_r+0x1e>
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	b103      	cbz	r3, 8004b9a <_write_r+0x1e>
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
 8004b9c:	200003dc 	.word	0x200003dc

08004ba0 <__errno>:
 8004ba0:	4b01      	ldr	r3, [pc, #4]	@ (8004ba8 <__errno+0x8>)
 8004ba2:	6818      	ldr	r0, [r3, #0]
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	20000018 	.word	0x20000018

08004bac <__libc_init_array>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	4d0d      	ldr	r5, [pc, #52]	@ (8004be4 <__libc_init_array+0x38>)
 8004bb0:	2600      	movs	r6, #0
 8004bb2:	4c0d      	ldr	r4, [pc, #52]	@ (8004be8 <__libc_init_array+0x3c>)
 8004bb4:	1b64      	subs	r4, r4, r5
 8004bb6:	10a4      	asrs	r4, r4, #2
 8004bb8:	42a6      	cmp	r6, r4
 8004bba:	d109      	bne.n	8004bd0 <__libc_init_array+0x24>
 8004bbc:	4d0b      	ldr	r5, [pc, #44]	@ (8004bec <__libc_init_array+0x40>)
 8004bbe:	2600      	movs	r6, #0
 8004bc0:	4c0b      	ldr	r4, [pc, #44]	@ (8004bf0 <__libc_init_array+0x44>)
 8004bc2:	f002 f87b 	bl	8006cbc <_init>
 8004bc6:	1b64      	subs	r4, r4, r5
 8004bc8:	10a4      	asrs	r4, r4, #2
 8004bca:	42a6      	cmp	r6, r4
 8004bcc:	d105      	bne.n	8004bda <__libc_init_array+0x2e>
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
 8004bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bd4:	3601      	adds	r6, #1
 8004bd6:	4798      	blx	r3
 8004bd8:	e7ee      	b.n	8004bb8 <__libc_init_array+0xc>
 8004bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bde:	3601      	adds	r6, #1
 8004be0:	4798      	blx	r3
 8004be2:	e7f2      	b.n	8004bca <__libc_init_array+0x1e>
 8004be4:	08007090 	.word	0x08007090
 8004be8:	08007090 	.word	0x08007090
 8004bec:	08007090 	.word	0x08007090
 8004bf0:	08007094 	.word	0x08007094

08004bf4 <__retarget_lock_init_recursive>:
 8004bf4:	4770      	bx	lr

08004bf6 <__retarget_lock_acquire_recursive>:
 8004bf6:	4770      	bx	lr

08004bf8 <__retarget_lock_release_recursive>:
 8004bf8:	4770      	bx	lr

08004bfa <memchr>:
 8004bfa:	b2c9      	uxtb	r1, r1
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	4402      	add	r2, r0
 8004c00:	b510      	push	{r4, lr}
 8004c02:	4293      	cmp	r3, r2
 8004c04:	4618      	mov	r0, r3
 8004c06:	d101      	bne.n	8004c0c <memchr+0x12>
 8004c08:	2000      	movs	r0, #0
 8004c0a:	e003      	b.n	8004c14 <memchr+0x1a>
 8004c0c:	7804      	ldrb	r4, [r0, #0]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	428c      	cmp	r4, r1
 8004c12:	d1f6      	bne.n	8004c02 <memchr+0x8>
 8004c14:	bd10      	pop	{r4, pc}

08004c16 <quorem>:
 8004c16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1a:	6903      	ldr	r3, [r0, #16]
 8004c1c:	4607      	mov	r7, r0
 8004c1e:	690c      	ldr	r4, [r1, #16]
 8004c20:	42a3      	cmp	r3, r4
 8004c22:	f2c0 8083 	blt.w	8004d2c <quorem+0x116>
 8004c26:	3c01      	subs	r4, #1
 8004c28:	f100 0514 	add.w	r5, r0, #20
 8004c2c:	f101 0814 	add.w	r8, r1, #20
 8004c30:	00a3      	lsls	r3, r4, #2
 8004c32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c36:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c46:	3301      	adds	r3, #1
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c4e:	d331      	bcc.n	8004cb4 <quorem+0x9e>
 8004c50:	f04f 0a00 	mov.w	sl, #0
 8004c54:	46c4      	mov	ip, r8
 8004c56:	46ae      	mov	lr, r5
 8004c58:	46d3      	mov	fp, sl
 8004c5a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004c5e:	b298      	uxth	r0, r3
 8004c60:	45e1      	cmp	r9, ip
 8004c62:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8004c66:	fb06 a000 	mla	r0, r6, r0, sl
 8004c6a:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8004c6e:	b280      	uxth	r0, r0
 8004c70:	fb06 2303 	mla	r3, r6, r3, r2
 8004c74:	f8de 2000 	ldr.w	r2, [lr]
 8004c78:	b292      	uxth	r2, r2
 8004c7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c7e:	eba2 0200 	sub.w	r2, r2, r0
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f8de 0000 	ldr.w	r0, [lr]
 8004c88:	445a      	add	r2, fp
 8004c8a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004c8e:	b292      	uxth	r2, r2
 8004c90:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004c94:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004c98:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004c9c:	f84e 2b04 	str.w	r2, [lr], #4
 8004ca0:	d2db      	bcs.n	8004c5a <quorem+0x44>
 8004ca2:	9b00      	ldr	r3, [sp, #0]
 8004ca4:	58eb      	ldr	r3, [r5, r3]
 8004ca6:	b92b      	cbnz	r3, 8004cb4 <quorem+0x9e>
 8004ca8:	9b01      	ldr	r3, [sp, #4]
 8004caa:	3b04      	subs	r3, #4
 8004cac:	429d      	cmp	r5, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	d330      	bcc.n	8004d14 <quorem+0xfe>
 8004cb2:	613c      	str	r4, [r7, #16]
 8004cb4:	4638      	mov	r0, r7
 8004cb6:	f001 f97b 	bl	8005fb0 <__mcmp>
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	db26      	blt.n	8004d0c <quorem+0xf6>
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	f858 2b04 	ldr.w	r2, [r8], #4
 8004cc6:	f8d1 c000 	ldr.w	ip, [r1]
 8004cca:	fa1f fe82 	uxth.w	lr, r2
 8004cce:	45c1      	cmp	r9, r8
 8004cd0:	fa1f f38c 	uxth.w	r3, ip
 8004cd4:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8004cd8:	eba3 030e 	sub.w	r3, r3, lr
 8004cdc:	4403      	add	r3, r0
 8004cde:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004ce8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cec:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004cf0:	f841 3b04 	str.w	r3, [r1], #4
 8004cf4:	d2e5      	bcs.n	8004cc2 <quorem+0xac>
 8004cf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cfe:	b922      	cbnz	r2, 8004d0a <quorem+0xf4>
 8004d00:	3b04      	subs	r3, #4
 8004d02:	429d      	cmp	r5, r3
 8004d04:	461a      	mov	r2, r3
 8004d06:	d30b      	bcc.n	8004d20 <quorem+0x10a>
 8004d08:	613c      	str	r4, [r7, #16]
 8004d0a:	3601      	adds	r6, #1
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	b003      	add	sp, #12
 8004d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d14:	6812      	ldr	r2, [r2, #0]
 8004d16:	3b04      	subs	r3, #4
 8004d18:	2a00      	cmp	r2, #0
 8004d1a:	d1ca      	bne.n	8004cb2 <quorem+0x9c>
 8004d1c:	3c01      	subs	r4, #1
 8004d1e:	e7c5      	b.n	8004cac <quorem+0x96>
 8004d20:	6812      	ldr	r2, [r2, #0]
 8004d22:	3b04      	subs	r3, #4
 8004d24:	2a00      	cmp	r2, #0
 8004d26:	d1ef      	bne.n	8004d08 <quorem+0xf2>
 8004d28:	3c01      	subs	r4, #1
 8004d2a:	e7ea      	b.n	8004d02 <quorem+0xec>
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	e7ee      	b.n	8004d0e <quorem+0xf8>

08004d30 <_dtoa_r>:
 8004d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d34:	69c7      	ldr	r7, [r0, #28]
 8004d36:	b099      	sub	sp, #100	@ 0x64
 8004d38:	4683      	mov	fp, r0
 8004d3a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004d3c:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004d40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004d42:	ec55 4b10 	vmov	r4, r5, d0
 8004d46:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004d4a:	b97f      	cbnz	r7, 8004d6c <_dtoa_r+0x3c>
 8004d4c:	2010      	movs	r0, #16
 8004d4e:	f000 fdfd 	bl	800594c <malloc>
 8004d52:	4602      	mov	r2, r0
 8004d54:	f8cb 001c 	str.w	r0, [fp, #28]
 8004d58:	b920      	cbnz	r0, 8004d64 <_dtoa_r+0x34>
 8004d5a:	4ba7      	ldr	r3, [pc, #668]	@ (8004ff8 <_dtoa_r+0x2c8>)
 8004d5c:	21ef      	movs	r1, #239	@ 0xef
 8004d5e:	48a7      	ldr	r0, [pc, #668]	@ (8004ffc <_dtoa_r+0x2cc>)
 8004d60:	f001 fc6e 	bl	8006640 <__assert_func>
 8004d64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004d68:	6007      	str	r7, [r0, #0]
 8004d6a:	60c7      	str	r7, [r0, #12]
 8004d6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004d70:	6819      	ldr	r1, [r3, #0]
 8004d72:	b159      	cbz	r1, 8004d8c <_dtoa_r+0x5c>
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	2301      	movs	r3, #1
 8004d78:	4658      	mov	r0, fp
 8004d7a:	4093      	lsls	r3, r2
 8004d7c:	604a      	str	r2, [r1, #4]
 8004d7e:	608b      	str	r3, [r1, #8]
 8004d80:	f000 feda 	bl	8005b38 <_Bfree>
 8004d84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	1e2b      	subs	r3, r5, #0
 8004d8e:	bfb7      	itett	lt
 8004d90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004d94:	2300      	movge	r3, #0
 8004d96:	2201      	movlt	r2, #1
 8004d98:	9303      	strlt	r3, [sp, #12]
 8004d9a:	bfa8      	it	ge
 8004d9c:	6033      	strge	r3, [r6, #0]
 8004d9e:	9f03      	ldr	r7, [sp, #12]
 8004da0:	4b97      	ldr	r3, [pc, #604]	@ (8005000 <_dtoa_r+0x2d0>)
 8004da2:	bfb8      	it	lt
 8004da4:	6032      	strlt	r2, [r6, #0]
 8004da6:	43bb      	bics	r3, r7
 8004da8:	d112      	bne.n	8004dd0 <_dtoa_r+0xa0>
 8004daa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004dae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004db6:	4323      	orrs	r3, r4
 8004db8:	f000 854c 	beq.w	8005854 <_dtoa_r+0xb24>
 8004dbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004dbe:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005014 <_dtoa_r+0x2e4>
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 854e 	beq.w	8005864 <_dtoa_r+0xb34>
 8004dc8:	f10a 0303 	add.w	r3, sl, #3
 8004dcc:	f000 bd48 	b.w	8005860 <_dtoa_r+0xb30>
 8004dd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	ec51 0b17 	vmov	r0, r1, d7
 8004ddc:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004de0:	f7fb fe0a 	bl	80009f8 <__aeabi_dcmpeq>
 8004de4:	4680      	mov	r8, r0
 8004de6:	b158      	cbz	r0, 8004e00 <_dtoa_r+0xd0>
 8004de8:	2301      	movs	r3, #1
 8004dea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004df0:	b113      	cbz	r3, 8004df8 <_dtoa_r+0xc8>
 8004df2:	4b84      	ldr	r3, [pc, #528]	@ (8005004 <_dtoa_r+0x2d4>)
 8004df4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8005018 <_dtoa_r+0x2e8>
 8004dfc:	f000 bd32 	b.w	8005864 <_dtoa_r+0xb34>
 8004e00:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004e04:	aa16      	add	r2, sp, #88	@ 0x58
 8004e06:	a917      	add	r1, sp, #92	@ 0x5c
 8004e08:	4658      	mov	r0, fp
 8004e0a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004e0e:	f001 f983 	bl	8006118 <__d2b>
 8004e12:	4681      	mov	r9, r0
 8004e14:	2e00      	cmp	r6, #0
 8004e16:	d075      	beq.n	8004f04 <_dtoa_r+0x1d4>
 8004e18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e1a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004e1e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004e22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e26:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004e2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e2e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004e32:	4619      	mov	r1, r3
 8004e34:	2200      	movs	r2, #0
 8004e36:	4b74      	ldr	r3, [pc, #464]	@ (8005008 <_dtoa_r+0x2d8>)
 8004e38:	f7fb f9be 	bl	80001b8 <__aeabi_dsub>
 8004e3c:	a368      	add	r3, pc, #416	@ (adr r3, 8004fe0 <_dtoa_r+0x2b0>)
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	f7fb fb71 	bl	8000528 <__aeabi_dmul>
 8004e46:	a368      	add	r3, pc, #416	@ (adr r3, 8004fe8 <_dtoa_r+0x2b8>)
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	f7fb f9b6 	bl	80001bc <__adddf3>
 8004e50:	4604      	mov	r4, r0
 8004e52:	460d      	mov	r5, r1
 8004e54:	4630      	mov	r0, r6
 8004e56:	f7fb fafd 	bl	8000454 <__aeabi_i2d>
 8004e5a:	a365      	add	r3, pc, #404	@ (adr r3, 8004ff0 <_dtoa_r+0x2c0>)
 8004e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e60:	f7fb fb62 	bl	8000528 <__aeabi_dmul>
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4620      	mov	r0, r4
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	f7fb f9a6 	bl	80001bc <__adddf3>
 8004e70:	4604      	mov	r4, r0
 8004e72:	460d      	mov	r5, r1
 8004e74:	f7fb fe08 	bl	8000a88 <__aeabi_d2iz>
 8004e78:	2200      	movs	r2, #0
 8004e7a:	4607      	mov	r7, r0
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4620      	mov	r0, r4
 8004e80:	4629      	mov	r1, r5
 8004e82:	f7fb fdc3 	bl	8000a0c <__aeabi_dcmplt>
 8004e86:	b140      	cbz	r0, 8004e9a <_dtoa_r+0x16a>
 8004e88:	4638      	mov	r0, r7
 8004e8a:	f7fb fae3 	bl	8000454 <__aeabi_i2d>
 8004e8e:	4622      	mov	r2, r4
 8004e90:	462b      	mov	r3, r5
 8004e92:	f7fb fdb1 	bl	80009f8 <__aeabi_dcmpeq>
 8004e96:	b900      	cbnz	r0, 8004e9a <_dtoa_r+0x16a>
 8004e98:	3f01      	subs	r7, #1
 8004e9a:	2f16      	cmp	r7, #22
 8004e9c:	d851      	bhi.n	8004f42 <_dtoa_r+0x212>
 8004e9e:	4b5b      	ldr	r3, [pc, #364]	@ (800500c <_dtoa_r+0x2dc>)
 8004ea0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004ea4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f7fb fdae 	bl	8000a0c <__aeabi_dcmplt>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	d048      	beq.n	8004f46 <_dtoa_r+0x216>
 8004eb4:	3f01      	subs	r7, #1
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	9312      	str	r3, [sp, #72]	@ 0x48
 8004eba:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004ebc:	1b9b      	subs	r3, r3, r6
 8004ebe:	1e5a      	subs	r2, r3, #1
 8004ec0:	bf46      	itte	mi
 8004ec2:	f1c3 0801 	rsbmi	r8, r3, #1
 8004ec6:	2300      	movmi	r3, #0
 8004ec8:	f04f 0800 	movpl.w	r8, #0
 8004ecc:	9208      	str	r2, [sp, #32]
 8004ece:	bf48      	it	mi
 8004ed0:	9308      	strmi	r3, [sp, #32]
 8004ed2:	2f00      	cmp	r7, #0
 8004ed4:	db39      	blt.n	8004f4a <_dtoa_r+0x21a>
 8004ed6:	9b08      	ldr	r3, [sp, #32]
 8004ed8:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004eda:	443b      	add	r3, r7
 8004edc:	9308      	str	r3, [sp, #32]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ee4:	2b09      	cmp	r3, #9
 8004ee6:	d864      	bhi.n	8004fb2 <_dtoa_r+0x282>
 8004ee8:	2b05      	cmp	r3, #5
 8004eea:	bfc5      	ittet	gt
 8004eec:	3b04      	subgt	r3, #4
 8004eee:	2400      	movgt	r4, #0
 8004ef0:	2401      	movle	r4, #1
 8004ef2:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ef6:	3b02      	subs	r3, #2
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d865      	bhi.n	8004fc8 <_dtoa_r+0x298>
 8004efc:	e8df f003 	tbb	[pc, r3]
 8004f00:	5737392c 	.word	0x5737392c
 8004f04:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004f08:	441e      	add	r6, r3
 8004f0a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	bfc9      	itett	gt
 8004f12:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004f16:	f1c3 0320 	rsble	r3, r3, #32
 8004f1a:	409f      	lslgt	r7, r3
 8004f1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004f20:	bfd8      	it	le
 8004f22:	fa04 f003 	lslle.w	r0, r4, r3
 8004f26:	f106 36ff 	add.w	r6, r6, #4294967295
 8004f2a:	bfc4      	itt	gt
 8004f2c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004f30:	ea47 0003 	orrgt.w	r0, r7, r3
 8004f34:	f7fb fa7e 	bl	8000434 <__aeabi_ui2d>
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004f3e:	9214      	str	r2, [sp, #80]	@ 0x50
 8004f40:	e777      	b.n	8004e32 <_dtoa_r+0x102>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e7b8      	b.n	8004eb8 <_dtoa_r+0x188>
 8004f46:	9012      	str	r0, [sp, #72]	@ 0x48
 8004f48:	e7b7      	b.n	8004eba <_dtoa_r+0x18a>
 8004f4a:	427b      	negs	r3, r7
 8004f4c:	eba8 0807 	sub.w	r8, r8, r7
 8004f50:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f52:	2300      	movs	r3, #0
 8004f54:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004f56:	e7c4      	b.n	8004ee2 <_dtoa_r+0x1b2>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	dc35      	bgt.n	8004fce <_dtoa_r+0x29e>
 8004f62:	2301      	movs	r3, #1
 8004f64:	461a      	mov	r2, r3
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	9307      	str	r3, [sp, #28]
 8004f6a:	920e      	str	r2, [sp, #56]	@ 0x38
 8004f6c:	e00b      	b.n	8004f86 <_dtoa_r+0x256>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e7f3      	b.n	8004f5a <_dtoa_r+0x22a>
 8004f72:	2300      	movs	r3, #0
 8004f74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f78:	18fb      	adds	r3, r7, r3
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	9307      	str	r3, [sp, #28]
 8004f82:	bfb8      	it	lt
 8004f84:	2301      	movlt	r3, #1
 8004f86:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	2204      	movs	r2, #4
 8004f8e:	f102 0514 	add.w	r5, r2, #20
 8004f92:	429d      	cmp	r5, r3
 8004f94:	d91f      	bls.n	8004fd6 <_dtoa_r+0x2a6>
 8004f96:	6041      	str	r1, [r0, #4]
 8004f98:	4658      	mov	r0, fp
 8004f9a:	f000 fd8d 	bl	8005ab8 <_Balloc>
 8004f9e:	4682      	mov	sl, r0
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d13b      	bne.n	800501c <_dtoa_r+0x2ec>
 8004fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8005010 <_dtoa_r+0x2e0>)
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	f240 11af 	movw	r1, #431	@ 0x1af
 8004fac:	e6d7      	b.n	8004d5e <_dtoa_r+0x2e>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e7e0      	b.n	8004f74 <_dtoa_r+0x244>
 8004fb2:	2401      	movs	r4, #1
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fba:	f04f 33ff 	mov.w	r3, #4294967295
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	9307      	str	r3, [sp, #28]
 8004fc4:	2312      	movs	r3, #18
 8004fc6:	e7d0      	b.n	8004f6a <_dtoa_r+0x23a>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fcc:	e7f5      	b.n	8004fba <_dtoa_r+0x28a>
 8004fce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	9307      	str	r3, [sp, #28]
 8004fd4:	e7d7      	b.n	8004f86 <_dtoa_r+0x256>
 8004fd6:	3101      	adds	r1, #1
 8004fd8:	0052      	lsls	r2, r2, #1
 8004fda:	e7d8      	b.n	8004f8e <_dtoa_r+0x25e>
 8004fdc:	f3af 8000 	nop.w
 8004fe0:	636f4361 	.word	0x636f4361
 8004fe4:	3fd287a7 	.word	0x3fd287a7
 8004fe8:	8b60c8b3 	.word	0x8b60c8b3
 8004fec:	3fc68a28 	.word	0x3fc68a28
 8004ff0:	509f79fb 	.word	0x509f79fb
 8004ff4:	3fd34413 	.word	0x3fd34413
 8004ff8:	08006d59 	.word	0x08006d59
 8004ffc:	08006d70 	.word	0x08006d70
 8005000:	7ff00000 	.word	0x7ff00000
 8005004:	08006d29 	.word	0x08006d29
 8005008:	3ff80000 	.word	0x3ff80000
 800500c:	08006e68 	.word	0x08006e68
 8005010:	08006dc8 	.word	0x08006dc8
 8005014:	08006d55 	.word	0x08006d55
 8005018:	08006d28 	.word	0x08006d28
 800501c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005020:	6018      	str	r0, [r3, #0]
 8005022:	9b07      	ldr	r3, [sp, #28]
 8005024:	2b0e      	cmp	r3, #14
 8005026:	f200 80a4 	bhi.w	8005172 <_dtoa_r+0x442>
 800502a:	2c00      	cmp	r4, #0
 800502c:	f000 80a1 	beq.w	8005172 <_dtoa_r+0x442>
 8005030:	2f00      	cmp	r7, #0
 8005032:	dd33      	ble.n	800509c <_dtoa_r+0x36c>
 8005034:	f007 020f 	and.w	r2, r7, #15
 8005038:	4bac      	ldr	r3, [pc, #688]	@ (80052ec <_dtoa_r+0x5bc>)
 800503a:	05f8      	lsls	r0, r7, #23
 800503c:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005040:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005044:	ed93 7b00 	vldr	d7, [r3]
 8005048:	ed8d 7b04 	vstr	d7, [sp, #16]
 800504c:	d516      	bpl.n	800507c <_dtoa_r+0x34c>
 800504e:	4ba8      	ldr	r3, [pc, #672]	@ (80052f0 <_dtoa_r+0x5c0>)
 8005050:	f004 040f 	and.w	r4, r4, #15
 8005054:	2603      	movs	r6, #3
 8005056:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800505a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800505e:	f7fb fb8d 	bl	800077c <__aeabi_ddiv>
 8005062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005066:	4da2      	ldr	r5, [pc, #648]	@ (80052f0 <_dtoa_r+0x5c0>)
 8005068:	b954      	cbnz	r4, 8005080 <_dtoa_r+0x350>
 800506a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800506e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005072:	f7fb fb83 	bl	800077c <__aeabi_ddiv>
 8005076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800507a:	e028      	b.n	80050ce <_dtoa_r+0x39e>
 800507c:	2602      	movs	r6, #2
 800507e:	e7f2      	b.n	8005066 <_dtoa_r+0x336>
 8005080:	07e1      	lsls	r1, r4, #31
 8005082:	d508      	bpl.n	8005096 <_dtoa_r+0x366>
 8005084:	3601      	adds	r6, #1
 8005086:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800508a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800508e:	f7fb fa4b 	bl	8000528 <__aeabi_dmul>
 8005092:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005096:	1064      	asrs	r4, r4, #1
 8005098:	3508      	adds	r5, #8
 800509a:	e7e5      	b.n	8005068 <_dtoa_r+0x338>
 800509c:	f000 80d2 	beq.w	8005244 <_dtoa_r+0x514>
 80050a0:	427c      	negs	r4, r7
 80050a2:	4b92      	ldr	r3, [pc, #584]	@ (80052ec <_dtoa_r+0x5bc>)
 80050a4:	4d92      	ldr	r5, [pc, #584]	@ (80052f0 <_dtoa_r+0x5c0>)
 80050a6:	2602      	movs	r6, #2
 80050a8:	f004 020f 	and.w	r2, r4, #15
 80050ac:	1124      	asrs	r4, r4, #4
 80050ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ba:	f7fb fa35 	bl	8000528 <__aeabi_dmul>
 80050be:	2300      	movs	r3, #0
 80050c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050c4:	2c00      	cmp	r4, #0
 80050c6:	f040 80b2 	bne.w	800522e <_dtoa_r+0x4fe>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1d3      	bne.n	8005076 <_dtoa_r+0x346>
 80050ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80050d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80b7 	beq.w	8005248 <_dtoa_r+0x518>
 80050da:	2200      	movs	r2, #0
 80050dc:	4b85      	ldr	r3, [pc, #532]	@ (80052f4 <_dtoa_r+0x5c4>)
 80050de:	4620      	mov	r0, r4
 80050e0:	4629      	mov	r1, r5
 80050e2:	f7fb fc93 	bl	8000a0c <__aeabi_dcmplt>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	f000 80ae 	beq.w	8005248 <_dtoa_r+0x518>
 80050ec:	9b07      	ldr	r3, [sp, #28]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 80aa 	beq.w	8005248 <_dtoa_r+0x518>
 80050f4:	9b00      	ldr	r3, [sp, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	dd37      	ble.n	800516a <_dtoa_r+0x43a>
 80050fa:	1e7b      	subs	r3, r7, #1
 80050fc:	4620      	mov	r0, r4
 80050fe:	2200      	movs	r2, #0
 8005100:	4629      	mov	r1, r5
 8005102:	9304      	str	r3, [sp, #16]
 8005104:	3601      	adds	r6, #1
 8005106:	4b7c      	ldr	r3, [pc, #496]	@ (80052f8 <_dtoa_r+0x5c8>)
 8005108:	f7fb fa0e 	bl	8000528 <__aeabi_dmul>
 800510c:	9c00      	ldr	r4, [sp, #0]
 800510e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005112:	4630      	mov	r0, r6
 8005114:	f7fb f99e 	bl	8000454 <__aeabi_i2d>
 8005118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800511c:	f7fb fa04 	bl	8000528 <__aeabi_dmul>
 8005120:	2200      	movs	r2, #0
 8005122:	4b76      	ldr	r3, [pc, #472]	@ (80052fc <_dtoa_r+0x5cc>)
 8005124:	f7fb f84a 	bl	80001bc <__adddf3>
 8005128:	4605      	mov	r5, r0
 800512a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800512e:	2c00      	cmp	r4, #0
 8005130:	f040 808d 	bne.w	800524e <_dtoa_r+0x51e>
 8005134:	2200      	movs	r2, #0
 8005136:	4b72      	ldr	r3, [pc, #456]	@ (8005300 <_dtoa_r+0x5d0>)
 8005138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800513c:	f7fb f83c 	bl	80001b8 <__aeabi_dsub>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005148:	462a      	mov	r2, r5
 800514a:	4633      	mov	r3, r6
 800514c:	f7fb fc7c 	bl	8000a48 <__aeabi_dcmpgt>
 8005150:	2800      	cmp	r0, #0
 8005152:	f040 828b 	bne.w	800566c <_dtoa_r+0x93c>
 8005156:	462a      	mov	r2, r5
 8005158:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800515c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005160:	f7fb fc54 	bl	8000a0c <__aeabi_dcmplt>
 8005164:	2800      	cmp	r0, #0
 8005166:	f040 8128 	bne.w	80053ba <_dtoa_r+0x68a>
 800516a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800516e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005172:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005174:	2b00      	cmp	r3, #0
 8005176:	f2c0 815a 	blt.w	800542e <_dtoa_r+0x6fe>
 800517a:	2f0e      	cmp	r7, #14
 800517c:	f300 8157 	bgt.w	800542e <_dtoa_r+0x6fe>
 8005180:	4b5a      	ldr	r3, [pc, #360]	@ (80052ec <_dtoa_r+0x5bc>)
 8005182:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005186:	ed93 7b00 	vldr	d7, [r3]
 800518a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800518c:	2b00      	cmp	r3, #0
 800518e:	ed8d 7b00 	vstr	d7, [sp]
 8005192:	da03      	bge.n	800519c <_dtoa_r+0x46c>
 8005194:	9b07      	ldr	r3, [sp, #28]
 8005196:	2b00      	cmp	r3, #0
 8005198:	f340 8101 	ble.w	800539e <_dtoa_r+0x66e>
 800519c:	4656      	mov	r6, sl
 800519e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80051a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051a6:	4620      	mov	r0, r4
 80051a8:	4629      	mov	r1, r5
 80051aa:	f7fb fae7 	bl	800077c <__aeabi_ddiv>
 80051ae:	f7fb fc6b 	bl	8000a88 <__aeabi_d2iz>
 80051b2:	4680      	mov	r8, r0
 80051b4:	f7fb f94e 	bl	8000454 <__aeabi_i2d>
 80051b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051bc:	f7fb f9b4 	bl	8000528 <__aeabi_dmul>
 80051c0:	4602      	mov	r2, r0
 80051c2:	4620      	mov	r0, r4
 80051c4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80051c8:	460b      	mov	r3, r1
 80051ca:	4629      	mov	r1, r5
 80051cc:	f7fa fff4 	bl	80001b8 <__aeabi_dsub>
 80051d0:	9d07      	ldr	r5, [sp, #28]
 80051d2:	f806 4b01 	strb.w	r4, [r6], #1
 80051d6:	eba6 040a 	sub.w	r4, r6, sl
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	42a5      	cmp	r5, r4
 80051e0:	f040 8117 	bne.w	8005412 <_dtoa_r+0x6e2>
 80051e4:	f7fa ffea 	bl	80001bc <__adddf3>
 80051e8:	4604      	mov	r4, r0
 80051ea:	460d      	mov	r5, r1
 80051ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051f0:	f7fb fc2a 	bl	8000a48 <__aeabi_dcmpgt>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	f040 80f9 	bne.w	80053ec <_dtoa_r+0x6bc>
 80051fa:	4620      	mov	r0, r4
 80051fc:	4629      	mov	r1, r5
 80051fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005202:	f7fb fbf9 	bl	80009f8 <__aeabi_dcmpeq>
 8005206:	b118      	cbz	r0, 8005210 <_dtoa_r+0x4e0>
 8005208:	f018 0f01 	tst.w	r8, #1
 800520c:	f040 80ee 	bne.w	80053ec <_dtoa_r+0x6bc>
 8005210:	4649      	mov	r1, r9
 8005212:	4658      	mov	r0, fp
 8005214:	f000 fc90 	bl	8005b38 <_Bfree>
 8005218:	2300      	movs	r3, #0
 800521a:	3701      	adds	r7, #1
 800521c:	7033      	strb	r3, [r6, #0]
 800521e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005220:	601f      	str	r7, [r3, #0]
 8005222:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 831d 	beq.w	8005864 <_dtoa_r+0xb34>
 800522a:	601e      	str	r6, [r3, #0]
 800522c:	e31a      	b.n	8005864 <_dtoa_r+0xb34>
 800522e:	07e2      	lsls	r2, r4, #31
 8005230:	d505      	bpl.n	800523e <_dtoa_r+0x50e>
 8005232:	3601      	adds	r6, #1
 8005234:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005238:	f7fb f976 	bl	8000528 <__aeabi_dmul>
 800523c:	2301      	movs	r3, #1
 800523e:	1064      	asrs	r4, r4, #1
 8005240:	3508      	adds	r5, #8
 8005242:	e73f      	b.n	80050c4 <_dtoa_r+0x394>
 8005244:	2602      	movs	r6, #2
 8005246:	e742      	b.n	80050ce <_dtoa_r+0x39e>
 8005248:	9c07      	ldr	r4, [sp, #28]
 800524a:	9704      	str	r7, [sp, #16]
 800524c:	e761      	b.n	8005112 <_dtoa_r+0x3e2>
 800524e:	4b27      	ldr	r3, [pc, #156]	@ (80052ec <_dtoa_r+0x5bc>)
 8005250:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005252:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005256:	4454      	add	r4, sl
 8005258:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800525c:	2900      	cmp	r1, #0
 800525e:	d053      	beq.n	8005308 <_dtoa_r+0x5d8>
 8005260:	2000      	movs	r0, #0
 8005262:	4928      	ldr	r1, [pc, #160]	@ (8005304 <_dtoa_r+0x5d4>)
 8005264:	f7fb fa8a 	bl	800077c <__aeabi_ddiv>
 8005268:	4633      	mov	r3, r6
 800526a:	4656      	mov	r6, sl
 800526c:	462a      	mov	r2, r5
 800526e:	f7fa ffa3 	bl	80001b8 <__aeabi_dsub>
 8005272:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800527a:	f7fb fc05 	bl	8000a88 <__aeabi_d2iz>
 800527e:	4605      	mov	r5, r0
 8005280:	f7fb f8e8 	bl	8000454 <__aeabi_i2d>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	3530      	adds	r5, #48	@ 0x30
 800528a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800528e:	f7fa ff93 	bl	80001b8 <__aeabi_dsub>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	f806 5b01 	strb.w	r5, [r6], #1
 800529a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800529e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80052a2:	f7fb fbb3 	bl	8000a0c <__aeabi_dcmplt>
 80052a6:	2800      	cmp	r0, #0
 80052a8:	d171      	bne.n	800538e <_dtoa_r+0x65e>
 80052aa:	2000      	movs	r0, #0
 80052ac:	4911      	ldr	r1, [pc, #68]	@ (80052f4 <_dtoa_r+0x5c4>)
 80052ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052b2:	f7fa ff81 	bl	80001b8 <__aeabi_dsub>
 80052b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80052ba:	f7fb fba7 	bl	8000a0c <__aeabi_dcmplt>
 80052be:	2800      	cmp	r0, #0
 80052c0:	f040 8095 	bne.w	80053ee <_dtoa_r+0x6be>
 80052c4:	42a6      	cmp	r6, r4
 80052c6:	f43f af50 	beq.w	800516a <_dtoa_r+0x43a>
 80052ca:	2200      	movs	r2, #0
 80052cc:	4b0a      	ldr	r3, [pc, #40]	@ (80052f8 <_dtoa_r+0x5c8>)
 80052ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80052d2:	f7fb f929 	bl	8000528 <__aeabi_dmul>
 80052d6:	2200      	movs	r2, #0
 80052d8:	4b07      	ldr	r3, [pc, #28]	@ (80052f8 <_dtoa_r+0x5c8>)
 80052da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80052de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052e2:	f7fb f921 	bl	8000528 <__aeabi_dmul>
 80052e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052ea:	e7c4      	b.n	8005276 <_dtoa_r+0x546>
 80052ec:	08006e68 	.word	0x08006e68
 80052f0:	08006e40 	.word	0x08006e40
 80052f4:	3ff00000 	.word	0x3ff00000
 80052f8:	40240000 	.word	0x40240000
 80052fc:	401c0000 	.word	0x401c0000
 8005300:	40140000 	.word	0x40140000
 8005304:	3fe00000 	.word	0x3fe00000
 8005308:	4631      	mov	r1, r6
 800530a:	4656      	mov	r6, sl
 800530c:	4628      	mov	r0, r5
 800530e:	f7fb f90b 	bl	8000528 <__aeabi_dmul>
 8005312:	9415      	str	r4, [sp, #84]	@ 0x54
 8005314:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005318:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800531c:	f7fb fbb4 	bl	8000a88 <__aeabi_d2iz>
 8005320:	4605      	mov	r5, r0
 8005322:	f7fb f897 	bl	8000454 <__aeabi_i2d>
 8005326:	4602      	mov	r2, r0
 8005328:	3530      	adds	r5, #48	@ 0x30
 800532a:	460b      	mov	r3, r1
 800532c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005330:	f7fa ff42 	bl	80001b8 <__aeabi_dsub>
 8005334:	f806 5b01 	strb.w	r5, [r6], #1
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	42a6      	cmp	r6, r4
 800533e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	d124      	bne.n	8005392 <_dtoa_r+0x662>
 8005348:	4bac      	ldr	r3, [pc, #688]	@ (80055fc <_dtoa_r+0x8cc>)
 800534a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800534e:	f7fa ff35 	bl	80001bc <__adddf3>
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800535a:	f7fb fb75 	bl	8000a48 <__aeabi_dcmpgt>
 800535e:	2800      	cmp	r0, #0
 8005360:	d145      	bne.n	80053ee <_dtoa_r+0x6be>
 8005362:	2000      	movs	r0, #0
 8005364:	49a5      	ldr	r1, [pc, #660]	@ (80055fc <_dtoa_r+0x8cc>)
 8005366:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800536a:	f7fa ff25 	bl	80001b8 <__aeabi_dsub>
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005376:	f7fb fb49 	bl	8000a0c <__aeabi_dcmplt>
 800537a:	2800      	cmp	r0, #0
 800537c:	f43f aef5 	beq.w	800516a <_dtoa_r+0x43a>
 8005380:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005382:	1e73      	subs	r3, r6, #1
 8005384:	9315      	str	r3, [sp, #84]	@ 0x54
 8005386:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800538a:	2b30      	cmp	r3, #48	@ 0x30
 800538c:	d0f8      	beq.n	8005380 <_dtoa_r+0x650>
 800538e:	9f04      	ldr	r7, [sp, #16]
 8005390:	e73e      	b.n	8005210 <_dtoa_r+0x4e0>
 8005392:	4b9b      	ldr	r3, [pc, #620]	@ (8005600 <_dtoa_r+0x8d0>)
 8005394:	f7fb f8c8 	bl	8000528 <__aeabi_dmul>
 8005398:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800539c:	e7bc      	b.n	8005318 <_dtoa_r+0x5e8>
 800539e:	d10c      	bne.n	80053ba <_dtoa_r+0x68a>
 80053a0:	2200      	movs	r2, #0
 80053a2:	4b98      	ldr	r3, [pc, #608]	@ (8005604 <_dtoa_r+0x8d4>)
 80053a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053a8:	f7fb f8be 	bl	8000528 <__aeabi_dmul>
 80053ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053b0:	f7fb fb40 	bl	8000a34 <__aeabi_dcmpge>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	f000 8157 	beq.w	8005668 <_dtoa_r+0x938>
 80053ba:	2400      	movs	r4, #0
 80053bc:	4625      	mov	r5, r4
 80053be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80053c0:	4656      	mov	r6, sl
 80053c2:	43db      	mvns	r3, r3
 80053c4:	9304      	str	r3, [sp, #16]
 80053c6:	2700      	movs	r7, #0
 80053c8:	4621      	mov	r1, r4
 80053ca:	4658      	mov	r0, fp
 80053cc:	f000 fbb4 	bl	8005b38 <_Bfree>
 80053d0:	2d00      	cmp	r5, #0
 80053d2:	d0dc      	beq.n	800538e <_dtoa_r+0x65e>
 80053d4:	b12f      	cbz	r7, 80053e2 <_dtoa_r+0x6b2>
 80053d6:	42af      	cmp	r7, r5
 80053d8:	d003      	beq.n	80053e2 <_dtoa_r+0x6b2>
 80053da:	4639      	mov	r1, r7
 80053dc:	4658      	mov	r0, fp
 80053de:	f000 fbab 	bl	8005b38 <_Bfree>
 80053e2:	4629      	mov	r1, r5
 80053e4:	4658      	mov	r0, fp
 80053e6:	f000 fba7 	bl	8005b38 <_Bfree>
 80053ea:	e7d0      	b.n	800538e <_dtoa_r+0x65e>
 80053ec:	9704      	str	r7, [sp, #16]
 80053ee:	4633      	mov	r3, r6
 80053f0:	461e      	mov	r6, r3
 80053f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053f6:	2a39      	cmp	r2, #57	@ 0x39
 80053f8:	d107      	bne.n	800540a <_dtoa_r+0x6da>
 80053fa:	459a      	cmp	sl, r3
 80053fc:	d1f8      	bne.n	80053f0 <_dtoa_r+0x6c0>
 80053fe:	9a04      	ldr	r2, [sp, #16]
 8005400:	3201      	adds	r2, #1
 8005402:	9204      	str	r2, [sp, #16]
 8005404:	2230      	movs	r2, #48	@ 0x30
 8005406:	f88a 2000 	strb.w	r2, [sl]
 800540a:	781a      	ldrb	r2, [r3, #0]
 800540c:	3201      	adds	r2, #1
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	e7bd      	b.n	800538e <_dtoa_r+0x65e>
 8005412:	2200      	movs	r2, #0
 8005414:	4b7a      	ldr	r3, [pc, #488]	@ (8005600 <_dtoa_r+0x8d0>)
 8005416:	f7fb f887 	bl	8000528 <__aeabi_dmul>
 800541a:	2200      	movs	r2, #0
 800541c:	2300      	movs	r3, #0
 800541e:	4604      	mov	r4, r0
 8005420:	460d      	mov	r5, r1
 8005422:	f7fb fae9 	bl	80009f8 <__aeabi_dcmpeq>
 8005426:	2800      	cmp	r0, #0
 8005428:	f43f aebb 	beq.w	80051a2 <_dtoa_r+0x472>
 800542c:	e6f0      	b.n	8005210 <_dtoa_r+0x4e0>
 800542e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005430:	2a00      	cmp	r2, #0
 8005432:	f000 80db 	beq.w	80055ec <_dtoa_r+0x8bc>
 8005436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005438:	2a01      	cmp	r2, #1
 800543a:	f300 80bf 	bgt.w	80055bc <_dtoa_r+0x88c>
 800543e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005440:	2a00      	cmp	r2, #0
 8005442:	f000 80b7 	beq.w	80055b4 <_dtoa_r+0x884>
 8005446:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800544a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800544c:	4646      	mov	r6, r8
 800544e:	9a08      	ldr	r2, [sp, #32]
 8005450:	2101      	movs	r1, #1
 8005452:	4658      	mov	r0, fp
 8005454:	4498      	add	r8, r3
 8005456:	441a      	add	r2, r3
 8005458:	9208      	str	r2, [sp, #32]
 800545a:	f000 fc23 	bl	8005ca4 <__i2b>
 800545e:	4605      	mov	r5, r0
 8005460:	b15e      	cbz	r6, 800547a <_dtoa_r+0x74a>
 8005462:	9b08      	ldr	r3, [sp, #32]
 8005464:	2b00      	cmp	r3, #0
 8005466:	dd08      	ble.n	800547a <_dtoa_r+0x74a>
 8005468:	42b3      	cmp	r3, r6
 800546a:	9a08      	ldr	r2, [sp, #32]
 800546c:	bfa8      	it	ge
 800546e:	4633      	movge	r3, r6
 8005470:	eba8 0803 	sub.w	r8, r8, r3
 8005474:	1af6      	subs	r6, r6, r3
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	9308      	str	r3, [sp, #32]
 800547a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800547c:	b1f3      	cbz	r3, 80054bc <_dtoa_r+0x78c>
 800547e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 80b7 	beq.w	80055f4 <_dtoa_r+0x8c4>
 8005486:	b18c      	cbz	r4, 80054ac <_dtoa_r+0x77c>
 8005488:	4629      	mov	r1, r5
 800548a:	4622      	mov	r2, r4
 800548c:	4658      	mov	r0, fp
 800548e:	f000 fcc9 	bl	8005e24 <__pow5mult>
 8005492:	464a      	mov	r2, r9
 8005494:	4601      	mov	r1, r0
 8005496:	4605      	mov	r5, r0
 8005498:	4658      	mov	r0, fp
 800549a:	f000 fc19 	bl	8005cd0 <__multiply>
 800549e:	4649      	mov	r1, r9
 80054a0:	9004      	str	r0, [sp, #16]
 80054a2:	4658      	mov	r0, fp
 80054a4:	f000 fb48 	bl	8005b38 <_Bfree>
 80054a8:	9b04      	ldr	r3, [sp, #16]
 80054aa:	4699      	mov	r9, r3
 80054ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054ae:	1b1a      	subs	r2, r3, r4
 80054b0:	d004      	beq.n	80054bc <_dtoa_r+0x78c>
 80054b2:	4649      	mov	r1, r9
 80054b4:	4658      	mov	r0, fp
 80054b6:	f000 fcb5 	bl	8005e24 <__pow5mult>
 80054ba:	4681      	mov	r9, r0
 80054bc:	2101      	movs	r1, #1
 80054be:	4658      	mov	r0, fp
 80054c0:	f000 fbf0 	bl	8005ca4 <__i2b>
 80054c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054c6:	4604      	mov	r4, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 81cf 	beq.w	800586c <_dtoa_r+0xb3c>
 80054ce:	461a      	mov	r2, r3
 80054d0:	4601      	mov	r1, r0
 80054d2:	4658      	mov	r0, fp
 80054d4:	f000 fca6 	bl	8005e24 <__pow5mult>
 80054d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054da:	4604      	mov	r4, r0
 80054dc:	2b01      	cmp	r3, #1
 80054de:	f300 8095 	bgt.w	800560c <_dtoa_r+0x8dc>
 80054e2:	9b02      	ldr	r3, [sp, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f040 8087 	bne.w	80055f8 <_dtoa_r+0x8c8>
 80054ea:	9b03      	ldr	r3, [sp, #12]
 80054ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f040 8089 	bne.w	8005608 <_dtoa_r+0x8d8>
 80054f6:	9b03      	ldr	r3, [sp, #12]
 80054f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80054fc:	0d1b      	lsrs	r3, r3, #20
 80054fe:	051b      	lsls	r3, r3, #20
 8005500:	b12b      	cbz	r3, 800550e <_dtoa_r+0x7de>
 8005502:	9b08      	ldr	r3, [sp, #32]
 8005504:	f108 0801 	add.w	r8, r8, #1
 8005508:	3301      	adds	r3, #1
 800550a:	9308      	str	r3, [sp, #32]
 800550c:	2301      	movs	r3, #1
 800550e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005510:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 81b0 	beq.w	8005878 <_dtoa_r+0xb48>
 8005518:	6923      	ldr	r3, [r4, #16]
 800551a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800551e:	6918      	ldr	r0, [r3, #16]
 8005520:	f000 fb74 	bl	8005c0c <__hi0bits>
 8005524:	f1c0 0020 	rsb	r0, r0, #32
 8005528:	9b08      	ldr	r3, [sp, #32]
 800552a:	4418      	add	r0, r3
 800552c:	f010 001f 	ands.w	r0, r0, #31
 8005530:	d077      	beq.n	8005622 <_dtoa_r+0x8f2>
 8005532:	f1c0 0320 	rsb	r3, r0, #32
 8005536:	2b04      	cmp	r3, #4
 8005538:	dd6b      	ble.n	8005612 <_dtoa_r+0x8e2>
 800553a:	f1c0 001c 	rsb	r0, r0, #28
 800553e:	9b08      	ldr	r3, [sp, #32]
 8005540:	4480      	add	r8, r0
 8005542:	4403      	add	r3, r0
 8005544:	4406      	add	r6, r0
 8005546:	9308      	str	r3, [sp, #32]
 8005548:	f1b8 0f00 	cmp.w	r8, #0
 800554c:	dd05      	ble.n	800555a <_dtoa_r+0x82a>
 800554e:	4649      	mov	r1, r9
 8005550:	4642      	mov	r2, r8
 8005552:	4658      	mov	r0, fp
 8005554:	f000 fcc0 	bl	8005ed8 <__lshift>
 8005558:	4681      	mov	r9, r0
 800555a:	9b08      	ldr	r3, [sp, #32]
 800555c:	2b00      	cmp	r3, #0
 800555e:	dd05      	ble.n	800556c <_dtoa_r+0x83c>
 8005560:	4621      	mov	r1, r4
 8005562:	461a      	mov	r2, r3
 8005564:	4658      	mov	r0, fp
 8005566:	f000 fcb7 	bl	8005ed8 <__lshift>
 800556a:	4604      	mov	r4, r0
 800556c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800556e:	2b00      	cmp	r3, #0
 8005570:	d059      	beq.n	8005626 <_dtoa_r+0x8f6>
 8005572:	4621      	mov	r1, r4
 8005574:	4648      	mov	r0, r9
 8005576:	f000 fd1b 	bl	8005fb0 <__mcmp>
 800557a:	2800      	cmp	r0, #0
 800557c:	da53      	bge.n	8005626 <_dtoa_r+0x8f6>
 800557e:	1e7b      	subs	r3, r7, #1
 8005580:	4649      	mov	r1, r9
 8005582:	220a      	movs	r2, #10
 8005584:	4658      	mov	r0, fp
 8005586:	9304      	str	r3, [sp, #16]
 8005588:	2300      	movs	r3, #0
 800558a:	f000 faf7 	bl	8005b7c <__multadd>
 800558e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005590:	4681      	mov	r9, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 8172 	beq.w	800587c <_dtoa_r+0xb4c>
 8005598:	2300      	movs	r3, #0
 800559a:	4629      	mov	r1, r5
 800559c:	220a      	movs	r2, #10
 800559e:	4658      	mov	r0, fp
 80055a0:	f000 faec 	bl	8005b7c <__multadd>
 80055a4:	9b00      	ldr	r3, [sp, #0]
 80055a6:	4605      	mov	r5, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	dc67      	bgt.n	800567c <_dtoa_r+0x94c>
 80055ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	dc41      	bgt.n	8005636 <_dtoa_r+0x906>
 80055b2:	e063      	b.n	800567c <_dtoa_r+0x94c>
 80055b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80055b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80055ba:	e746      	b.n	800544a <_dtoa_r+0x71a>
 80055bc:	9b07      	ldr	r3, [sp, #28]
 80055be:	1e5c      	subs	r4, r3, #1
 80055c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055c2:	42a3      	cmp	r3, r4
 80055c4:	bfb7      	itett	lt
 80055c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80055c8:	1b1c      	subge	r4, r3, r4
 80055ca:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80055cc:	1ae3      	sublt	r3, r4, r3
 80055ce:	bfbe      	ittt	lt
 80055d0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80055d2:	2400      	movlt	r4, #0
 80055d4:	18d2      	addlt	r2, r2, r3
 80055d6:	9b07      	ldr	r3, [sp, #28]
 80055d8:	bfb8      	it	lt
 80055da:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	bfb5      	itete	lt
 80055e0:	eba8 0603 	sublt.w	r6, r8, r3
 80055e4:	4646      	movge	r6, r8
 80055e6:	2300      	movlt	r3, #0
 80055e8:	9b07      	ldrge	r3, [sp, #28]
 80055ea:	e730      	b.n	800544e <_dtoa_r+0x71e>
 80055ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80055ee:	4646      	mov	r6, r8
 80055f0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80055f2:	e735      	b.n	8005460 <_dtoa_r+0x730>
 80055f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80055f6:	e75c      	b.n	80054b2 <_dtoa_r+0x782>
 80055f8:	2300      	movs	r3, #0
 80055fa:	e788      	b.n	800550e <_dtoa_r+0x7de>
 80055fc:	3fe00000 	.word	0x3fe00000
 8005600:	40240000 	.word	0x40240000
 8005604:	40140000 	.word	0x40140000
 8005608:	9b02      	ldr	r3, [sp, #8]
 800560a:	e780      	b.n	800550e <_dtoa_r+0x7de>
 800560c:	2300      	movs	r3, #0
 800560e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005610:	e782      	b.n	8005518 <_dtoa_r+0x7e8>
 8005612:	d099      	beq.n	8005548 <_dtoa_r+0x818>
 8005614:	331c      	adds	r3, #28
 8005616:	9a08      	ldr	r2, [sp, #32]
 8005618:	441a      	add	r2, r3
 800561a:	4498      	add	r8, r3
 800561c:	441e      	add	r6, r3
 800561e:	9208      	str	r2, [sp, #32]
 8005620:	e792      	b.n	8005548 <_dtoa_r+0x818>
 8005622:	4603      	mov	r3, r0
 8005624:	e7f6      	b.n	8005614 <_dtoa_r+0x8e4>
 8005626:	9b07      	ldr	r3, [sp, #28]
 8005628:	9704      	str	r7, [sp, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	dc20      	bgt.n	8005670 <_dtoa_r+0x940>
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005632:	2b02      	cmp	r3, #2
 8005634:	dd1e      	ble.n	8005674 <_dtoa_r+0x944>
 8005636:	9b00      	ldr	r3, [sp, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	f47f aec0 	bne.w	80053be <_dtoa_r+0x68e>
 800563e:	4621      	mov	r1, r4
 8005640:	2205      	movs	r2, #5
 8005642:	4658      	mov	r0, fp
 8005644:	f000 fa9a 	bl	8005b7c <__multadd>
 8005648:	4601      	mov	r1, r0
 800564a:	4604      	mov	r4, r0
 800564c:	4648      	mov	r0, r9
 800564e:	f000 fcaf 	bl	8005fb0 <__mcmp>
 8005652:	2800      	cmp	r0, #0
 8005654:	f77f aeb3 	ble.w	80053be <_dtoa_r+0x68e>
 8005658:	2331      	movs	r3, #49	@ 0x31
 800565a:	4656      	mov	r6, sl
 800565c:	f806 3b01 	strb.w	r3, [r6], #1
 8005660:	9b04      	ldr	r3, [sp, #16]
 8005662:	3301      	adds	r3, #1
 8005664:	9304      	str	r3, [sp, #16]
 8005666:	e6ae      	b.n	80053c6 <_dtoa_r+0x696>
 8005668:	9c07      	ldr	r4, [sp, #28]
 800566a:	9704      	str	r7, [sp, #16]
 800566c:	4625      	mov	r5, r4
 800566e:	e7f3      	b.n	8005658 <_dtoa_r+0x928>
 8005670:	9b07      	ldr	r3, [sp, #28]
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 8104 	beq.w	8005884 <_dtoa_r+0xb54>
 800567c:	2e00      	cmp	r6, #0
 800567e:	dd05      	ble.n	800568c <_dtoa_r+0x95c>
 8005680:	4629      	mov	r1, r5
 8005682:	4632      	mov	r2, r6
 8005684:	4658      	mov	r0, fp
 8005686:	f000 fc27 	bl	8005ed8 <__lshift>
 800568a:	4605      	mov	r5, r0
 800568c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800568e:	2b00      	cmp	r3, #0
 8005690:	d05a      	beq.n	8005748 <_dtoa_r+0xa18>
 8005692:	6869      	ldr	r1, [r5, #4]
 8005694:	4658      	mov	r0, fp
 8005696:	f000 fa0f 	bl	8005ab8 <_Balloc>
 800569a:	4606      	mov	r6, r0
 800569c:	b928      	cbnz	r0, 80056aa <_dtoa_r+0x97a>
 800569e:	4b84      	ldr	r3, [pc, #528]	@ (80058b0 <_dtoa_r+0xb80>)
 80056a0:	4602      	mov	r2, r0
 80056a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80056a6:	f7ff bb5a 	b.w	8004d5e <_dtoa_r+0x2e>
 80056aa:	692a      	ldr	r2, [r5, #16]
 80056ac:	f105 010c 	add.w	r1, r5, #12
 80056b0:	300c      	adds	r0, #12
 80056b2:	3202      	adds	r2, #2
 80056b4:	0092      	lsls	r2, r2, #2
 80056b6:	f000 ffb5 	bl	8006624 <memcpy>
 80056ba:	2201      	movs	r2, #1
 80056bc:	4631      	mov	r1, r6
 80056be:	4658      	mov	r0, fp
 80056c0:	f000 fc0a 	bl	8005ed8 <__lshift>
 80056c4:	f10a 0301 	add.w	r3, sl, #1
 80056c8:	462f      	mov	r7, r5
 80056ca:	4605      	mov	r5, r0
 80056cc:	9307      	str	r3, [sp, #28]
 80056ce:	9b00      	ldr	r3, [sp, #0]
 80056d0:	4453      	add	r3, sl
 80056d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80056d4:	9b02      	ldr	r3, [sp, #8]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	930a      	str	r3, [sp, #40]	@ 0x28
 80056dc:	9b07      	ldr	r3, [sp, #28]
 80056de:	4621      	mov	r1, r4
 80056e0:	4648      	mov	r0, r9
 80056e2:	3b01      	subs	r3, #1
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	f7ff fa96 	bl	8004c16 <quorem>
 80056ea:	4639      	mov	r1, r7
 80056ec:	9002      	str	r0, [sp, #8]
 80056ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80056f2:	4648      	mov	r0, r9
 80056f4:	f000 fc5c 	bl	8005fb0 <__mcmp>
 80056f8:	462a      	mov	r2, r5
 80056fa:	9008      	str	r0, [sp, #32]
 80056fc:	4621      	mov	r1, r4
 80056fe:	4658      	mov	r0, fp
 8005700:	f000 fc72 	bl	8005fe8 <__mdiff>
 8005704:	68c2      	ldr	r2, [r0, #12]
 8005706:	4606      	mov	r6, r0
 8005708:	bb02      	cbnz	r2, 800574c <_dtoa_r+0xa1c>
 800570a:	4601      	mov	r1, r0
 800570c:	4648      	mov	r0, r9
 800570e:	f000 fc4f 	bl	8005fb0 <__mcmp>
 8005712:	4602      	mov	r2, r0
 8005714:	4631      	mov	r1, r6
 8005716:	4658      	mov	r0, fp
 8005718:	920e      	str	r2, [sp, #56]	@ 0x38
 800571a:	f000 fa0d 	bl	8005b38 <_Bfree>
 800571e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005720:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005722:	9e07      	ldr	r6, [sp, #28]
 8005724:	ea43 0102 	orr.w	r1, r3, r2
 8005728:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800572a:	4319      	orrs	r1, r3
 800572c:	d110      	bne.n	8005750 <_dtoa_r+0xa20>
 800572e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005732:	d029      	beq.n	8005788 <_dtoa_r+0xa58>
 8005734:	9b08      	ldr	r3, [sp, #32]
 8005736:	2b00      	cmp	r3, #0
 8005738:	dd02      	ble.n	8005740 <_dtoa_r+0xa10>
 800573a:	9b02      	ldr	r3, [sp, #8]
 800573c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005740:	9b00      	ldr	r3, [sp, #0]
 8005742:	f883 8000 	strb.w	r8, [r3]
 8005746:	e63f      	b.n	80053c8 <_dtoa_r+0x698>
 8005748:	4628      	mov	r0, r5
 800574a:	e7bb      	b.n	80056c4 <_dtoa_r+0x994>
 800574c:	2201      	movs	r2, #1
 800574e:	e7e1      	b.n	8005714 <_dtoa_r+0x9e4>
 8005750:	9b08      	ldr	r3, [sp, #32]
 8005752:	2b00      	cmp	r3, #0
 8005754:	db04      	blt.n	8005760 <_dtoa_r+0xa30>
 8005756:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005758:	430b      	orrs	r3, r1
 800575a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800575c:	430b      	orrs	r3, r1
 800575e:	d120      	bne.n	80057a2 <_dtoa_r+0xa72>
 8005760:	2a00      	cmp	r2, #0
 8005762:	dded      	ble.n	8005740 <_dtoa_r+0xa10>
 8005764:	4649      	mov	r1, r9
 8005766:	2201      	movs	r2, #1
 8005768:	4658      	mov	r0, fp
 800576a:	f000 fbb5 	bl	8005ed8 <__lshift>
 800576e:	4621      	mov	r1, r4
 8005770:	4681      	mov	r9, r0
 8005772:	f000 fc1d 	bl	8005fb0 <__mcmp>
 8005776:	2800      	cmp	r0, #0
 8005778:	dc03      	bgt.n	8005782 <_dtoa_r+0xa52>
 800577a:	d1e1      	bne.n	8005740 <_dtoa_r+0xa10>
 800577c:	f018 0f01 	tst.w	r8, #1
 8005780:	d0de      	beq.n	8005740 <_dtoa_r+0xa10>
 8005782:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005786:	d1d8      	bne.n	800573a <_dtoa_r+0xa0a>
 8005788:	2339      	movs	r3, #57	@ 0x39
 800578a:	9a00      	ldr	r2, [sp, #0]
 800578c:	7013      	strb	r3, [r2, #0]
 800578e:	4633      	mov	r3, r6
 8005790:	461e      	mov	r6, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005798:	2a39      	cmp	r2, #57	@ 0x39
 800579a:	d052      	beq.n	8005842 <_dtoa_r+0xb12>
 800579c:	3201      	adds	r2, #1
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	e612      	b.n	80053c8 <_dtoa_r+0x698>
 80057a2:	2a00      	cmp	r2, #0
 80057a4:	dd07      	ble.n	80057b6 <_dtoa_r+0xa86>
 80057a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80057aa:	d0ed      	beq.n	8005788 <_dtoa_r+0xa58>
 80057ac:	f108 0301 	add.w	r3, r8, #1
 80057b0:	9a00      	ldr	r2, [sp, #0]
 80057b2:	7013      	strb	r3, [r2, #0]
 80057b4:	e608      	b.n	80053c8 <_dtoa_r+0x698>
 80057b6:	9b07      	ldr	r3, [sp, #28]
 80057b8:	9a07      	ldr	r2, [sp, #28]
 80057ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80057be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d028      	beq.n	8005816 <_dtoa_r+0xae6>
 80057c4:	4649      	mov	r1, r9
 80057c6:	2300      	movs	r3, #0
 80057c8:	220a      	movs	r2, #10
 80057ca:	4658      	mov	r0, fp
 80057cc:	f000 f9d6 	bl	8005b7c <__multadd>
 80057d0:	42af      	cmp	r7, r5
 80057d2:	4681      	mov	r9, r0
 80057d4:	f04f 0300 	mov.w	r3, #0
 80057d8:	f04f 020a 	mov.w	r2, #10
 80057dc:	4639      	mov	r1, r7
 80057de:	4658      	mov	r0, fp
 80057e0:	d107      	bne.n	80057f2 <_dtoa_r+0xac2>
 80057e2:	f000 f9cb 	bl	8005b7c <__multadd>
 80057e6:	4607      	mov	r7, r0
 80057e8:	4605      	mov	r5, r0
 80057ea:	9b07      	ldr	r3, [sp, #28]
 80057ec:	3301      	adds	r3, #1
 80057ee:	9307      	str	r3, [sp, #28]
 80057f0:	e774      	b.n	80056dc <_dtoa_r+0x9ac>
 80057f2:	f000 f9c3 	bl	8005b7c <__multadd>
 80057f6:	4629      	mov	r1, r5
 80057f8:	4607      	mov	r7, r0
 80057fa:	2300      	movs	r3, #0
 80057fc:	220a      	movs	r2, #10
 80057fe:	4658      	mov	r0, fp
 8005800:	f000 f9bc 	bl	8005b7c <__multadd>
 8005804:	4605      	mov	r5, r0
 8005806:	e7f0      	b.n	80057ea <_dtoa_r+0xaba>
 8005808:	9b00      	ldr	r3, [sp, #0]
 800580a:	2700      	movs	r7, #0
 800580c:	2b00      	cmp	r3, #0
 800580e:	bfcc      	ite	gt
 8005810:	461e      	movgt	r6, r3
 8005812:	2601      	movle	r6, #1
 8005814:	4456      	add	r6, sl
 8005816:	4649      	mov	r1, r9
 8005818:	2201      	movs	r2, #1
 800581a:	4658      	mov	r0, fp
 800581c:	f000 fb5c 	bl	8005ed8 <__lshift>
 8005820:	4621      	mov	r1, r4
 8005822:	4681      	mov	r9, r0
 8005824:	f000 fbc4 	bl	8005fb0 <__mcmp>
 8005828:	2800      	cmp	r0, #0
 800582a:	dcb0      	bgt.n	800578e <_dtoa_r+0xa5e>
 800582c:	d102      	bne.n	8005834 <_dtoa_r+0xb04>
 800582e:	f018 0f01 	tst.w	r8, #1
 8005832:	d1ac      	bne.n	800578e <_dtoa_r+0xa5e>
 8005834:	4633      	mov	r3, r6
 8005836:	461e      	mov	r6, r3
 8005838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800583c:	2a30      	cmp	r2, #48	@ 0x30
 800583e:	d0fa      	beq.n	8005836 <_dtoa_r+0xb06>
 8005840:	e5c2      	b.n	80053c8 <_dtoa_r+0x698>
 8005842:	459a      	cmp	sl, r3
 8005844:	d1a4      	bne.n	8005790 <_dtoa_r+0xa60>
 8005846:	9b04      	ldr	r3, [sp, #16]
 8005848:	3301      	adds	r3, #1
 800584a:	9304      	str	r3, [sp, #16]
 800584c:	2331      	movs	r3, #49	@ 0x31
 800584e:	f88a 3000 	strb.w	r3, [sl]
 8005852:	e5b9      	b.n	80053c8 <_dtoa_r+0x698>
 8005854:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005856:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80058b4 <_dtoa_r+0xb84>
 800585a:	b11b      	cbz	r3, 8005864 <_dtoa_r+0xb34>
 800585c:	f10a 0308 	add.w	r3, sl, #8
 8005860:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	4650      	mov	r0, sl
 8005866:	b019      	add	sp, #100	@ 0x64
 8005868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800586c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800586e:	2b01      	cmp	r3, #1
 8005870:	f77f ae37 	ble.w	80054e2 <_dtoa_r+0x7b2>
 8005874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005876:	930a      	str	r3, [sp, #40]	@ 0x28
 8005878:	2001      	movs	r0, #1
 800587a:	e655      	b.n	8005528 <_dtoa_r+0x7f8>
 800587c:	9b00      	ldr	r3, [sp, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	f77f aed6 	ble.w	8005630 <_dtoa_r+0x900>
 8005884:	4656      	mov	r6, sl
 8005886:	4621      	mov	r1, r4
 8005888:	4648      	mov	r0, r9
 800588a:	f7ff f9c4 	bl	8004c16 <quorem>
 800588e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005892:	9b00      	ldr	r3, [sp, #0]
 8005894:	f806 8b01 	strb.w	r8, [r6], #1
 8005898:	eba6 020a 	sub.w	r2, r6, sl
 800589c:	4293      	cmp	r3, r2
 800589e:	ddb3      	ble.n	8005808 <_dtoa_r+0xad8>
 80058a0:	4649      	mov	r1, r9
 80058a2:	2300      	movs	r3, #0
 80058a4:	220a      	movs	r2, #10
 80058a6:	4658      	mov	r0, fp
 80058a8:	f000 f968 	bl	8005b7c <__multadd>
 80058ac:	4681      	mov	r9, r0
 80058ae:	e7ea      	b.n	8005886 <_dtoa_r+0xb56>
 80058b0:	08006dc8 	.word	0x08006dc8
 80058b4:	08006d4c 	.word	0x08006d4c

080058b8 <_free_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	4605      	mov	r5, r0
 80058bc:	2900      	cmp	r1, #0
 80058be:	d041      	beq.n	8005944 <_free_r+0x8c>
 80058c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058c4:	1f0c      	subs	r4, r1, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	bfb8      	it	lt
 80058ca:	18e4      	addlt	r4, r4, r3
 80058cc:	f000 f8e8 	bl	8005aa0 <__malloc_lock>
 80058d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005948 <_free_r+0x90>)
 80058d2:	6813      	ldr	r3, [r2, #0]
 80058d4:	b933      	cbnz	r3, 80058e4 <_free_r+0x2c>
 80058d6:	6063      	str	r3, [r4, #4]
 80058d8:	6014      	str	r4, [r2, #0]
 80058da:	4628      	mov	r0, r5
 80058dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058e0:	f000 b8e4 	b.w	8005aac <__malloc_unlock>
 80058e4:	42a3      	cmp	r3, r4
 80058e6:	d908      	bls.n	80058fa <_free_r+0x42>
 80058e8:	6820      	ldr	r0, [r4, #0]
 80058ea:	1821      	adds	r1, r4, r0
 80058ec:	428b      	cmp	r3, r1
 80058ee:	bf01      	itttt	eq
 80058f0:	6819      	ldreq	r1, [r3, #0]
 80058f2:	685b      	ldreq	r3, [r3, #4]
 80058f4:	1809      	addeq	r1, r1, r0
 80058f6:	6021      	streq	r1, [r4, #0]
 80058f8:	e7ed      	b.n	80058d6 <_free_r+0x1e>
 80058fa:	461a      	mov	r2, r3
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	b10b      	cbz	r3, 8005904 <_free_r+0x4c>
 8005900:	42a3      	cmp	r3, r4
 8005902:	d9fa      	bls.n	80058fa <_free_r+0x42>
 8005904:	6811      	ldr	r1, [r2, #0]
 8005906:	1850      	adds	r0, r2, r1
 8005908:	42a0      	cmp	r0, r4
 800590a:	d10b      	bne.n	8005924 <_free_r+0x6c>
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	4401      	add	r1, r0
 8005910:	1850      	adds	r0, r2, r1
 8005912:	6011      	str	r1, [r2, #0]
 8005914:	4283      	cmp	r3, r0
 8005916:	d1e0      	bne.n	80058da <_free_r+0x22>
 8005918:	6818      	ldr	r0, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	4408      	add	r0, r1
 800591e:	6053      	str	r3, [r2, #4]
 8005920:	6010      	str	r0, [r2, #0]
 8005922:	e7da      	b.n	80058da <_free_r+0x22>
 8005924:	d902      	bls.n	800592c <_free_r+0x74>
 8005926:	230c      	movs	r3, #12
 8005928:	602b      	str	r3, [r5, #0]
 800592a:	e7d6      	b.n	80058da <_free_r+0x22>
 800592c:	6820      	ldr	r0, [r4, #0]
 800592e:	1821      	adds	r1, r4, r0
 8005930:	428b      	cmp	r3, r1
 8005932:	bf02      	ittt	eq
 8005934:	6819      	ldreq	r1, [r3, #0]
 8005936:	685b      	ldreq	r3, [r3, #4]
 8005938:	1809      	addeq	r1, r1, r0
 800593a:	6063      	str	r3, [r4, #4]
 800593c:	bf08      	it	eq
 800593e:	6021      	streq	r1, [r4, #0]
 8005940:	6054      	str	r4, [r2, #4]
 8005942:	e7ca      	b.n	80058da <_free_r+0x22>
 8005944:	bd38      	pop	{r3, r4, r5, pc}
 8005946:	bf00      	nop
 8005948:	200003e8 	.word	0x200003e8

0800594c <malloc>:
 800594c:	4b02      	ldr	r3, [pc, #8]	@ (8005958 <malloc+0xc>)
 800594e:	4601      	mov	r1, r0
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	f000 b825 	b.w	80059a0 <_malloc_r>
 8005956:	bf00      	nop
 8005958:	20000018 	.word	0x20000018

0800595c <sbrk_aligned>:
 800595c:	b570      	push	{r4, r5, r6, lr}
 800595e:	4e0f      	ldr	r6, [pc, #60]	@ (800599c <sbrk_aligned+0x40>)
 8005960:	460c      	mov	r4, r1
 8005962:	4605      	mov	r5, r0
 8005964:	6831      	ldr	r1, [r6, #0]
 8005966:	b911      	cbnz	r1, 800596e <sbrk_aligned+0x12>
 8005968:	f000 fe4c 	bl	8006604 <_sbrk_r>
 800596c:	6030      	str	r0, [r6, #0]
 800596e:	4621      	mov	r1, r4
 8005970:	4628      	mov	r0, r5
 8005972:	f000 fe47 	bl	8006604 <_sbrk_r>
 8005976:	1c43      	adds	r3, r0, #1
 8005978:	d103      	bne.n	8005982 <sbrk_aligned+0x26>
 800597a:	f04f 34ff 	mov.w	r4, #4294967295
 800597e:	4620      	mov	r0, r4
 8005980:	bd70      	pop	{r4, r5, r6, pc}
 8005982:	1cc4      	adds	r4, r0, #3
 8005984:	f024 0403 	bic.w	r4, r4, #3
 8005988:	42a0      	cmp	r0, r4
 800598a:	d0f8      	beq.n	800597e <sbrk_aligned+0x22>
 800598c:	1a21      	subs	r1, r4, r0
 800598e:	4628      	mov	r0, r5
 8005990:	f000 fe38 	bl	8006604 <_sbrk_r>
 8005994:	3001      	adds	r0, #1
 8005996:	d1f2      	bne.n	800597e <sbrk_aligned+0x22>
 8005998:	e7ef      	b.n	800597a <sbrk_aligned+0x1e>
 800599a:	bf00      	nop
 800599c:	200003e4 	.word	0x200003e4

080059a0 <_malloc_r>:
 80059a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059a4:	1ccd      	adds	r5, r1, #3
 80059a6:	4606      	mov	r6, r0
 80059a8:	f025 0503 	bic.w	r5, r5, #3
 80059ac:	3508      	adds	r5, #8
 80059ae:	2d0c      	cmp	r5, #12
 80059b0:	bf38      	it	cc
 80059b2:	250c      	movcc	r5, #12
 80059b4:	2d00      	cmp	r5, #0
 80059b6:	db01      	blt.n	80059bc <_malloc_r+0x1c>
 80059b8:	42a9      	cmp	r1, r5
 80059ba:	d904      	bls.n	80059c6 <_malloc_r+0x26>
 80059bc:	230c      	movs	r3, #12
 80059be:	6033      	str	r3, [r6, #0]
 80059c0:	2000      	movs	r0, #0
 80059c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a9c <_malloc_r+0xfc>
 80059ca:	f000 f869 	bl	8005aa0 <__malloc_lock>
 80059ce:	f8d8 3000 	ldr.w	r3, [r8]
 80059d2:	461c      	mov	r4, r3
 80059d4:	bb44      	cbnz	r4, 8005a28 <_malloc_r+0x88>
 80059d6:	4629      	mov	r1, r5
 80059d8:	4630      	mov	r0, r6
 80059da:	f7ff ffbf 	bl	800595c <sbrk_aligned>
 80059de:	1c43      	adds	r3, r0, #1
 80059e0:	4604      	mov	r4, r0
 80059e2:	d158      	bne.n	8005a96 <_malloc_r+0xf6>
 80059e4:	f8d8 4000 	ldr.w	r4, [r8]
 80059e8:	4627      	mov	r7, r4
 80059ea:	2f00      	cmp	r7, #0
 80059ec:	d143      	bne.n	8005a76 <_malloc_r+0xd6>
 80059ee:	2c00      	cmp	r4, #0
 80059f0:	d04b      	beq.n	8005a8a <_malloc_r+0xea>
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	4639      	mov	r1, r7
 80059f6:	4630      	mov	r0, r6
 80059f8:	eb04 0903 	add.w	r9, r4, r3
 80059fc:	f000 fe02 	bl	8006604 <_sbrk_r>
 8005a00:	4581      	cmp	r9, r0
 8005a02:	d142      	bne.n	8005a8a <_malloc_r+0xea>
 8005a04:	6821      	ldr	r1, [r4, #0]
 8005a06:	4630      	mov	r0, r6
 8005a08:	1a6d      	subs	r5, r5, r1
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	f7ff ffa6 	bl	800595c <sbrk_aligned>
 8005a10:	3001      	adds	r0, #1
 8005a12:	d03a      	beq.n	8005a8a <_malloc_r+0xea>
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	442b      	add	r3, r5
 8005a18:	6023      	str	r3, [r4, #0]
 8005a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	bb62      	cbnz	r2, 8005a7c <_malloc_r+0xdc>
 8005a22:	f8c8 7000 	str.w	r7, [r8]
 8005a26:	e00f      	b.n	8005a48 <_malloc_r+0xa8>
 8005a28:	6822      	ldr	r2, [r4, #0]
 8005a2a:	1b52      	subs	r2, r2, r5
 8005a2c:	d420      	bmi.n	8005a70 <_malloc_r+0xd0>
 8005a2e:	2a0b      	cmp	r2, #11
 8005a30:	d917      	bls.n	8005a62 <_malloc_r+0xc2>
 8005a32:	1961      	adds	r1, r4, r5
 8005a34:	42a3      	cmp	r3, r4
 8005a36:	6025      	str	r5, [r4, #0]
 8005a38:	bf18      	it	ne
 8005a3a:	6059      	strne	r1, [r3, #4]
 8005a3c:	6863      	ldr	r3, [r4, #4]
 8005a3e:	bf08      	it	eq
 8005a40:	f8c8 1000 	streq.w	r1, [r8]
 8005a44:	5162      	str	r2, [r4, r5]
 8005a46:	604b      	str	r3, [r1, #4]
 8005a48:	4630      	mov	r0, r6
 8005a4a:	f000 f82f 	bl	8005aac <__malloc_unlock>
 8005a4e:	f104 000b 	add.w	r0, r4, #11
 8005a52:	1d23      	adds	r3, r4, #4
 8005a54:	f020 0007 	bic.w	r0, r0, #7
 8005a58:	1ac2      	subs	r2, r0, r3
 8005a5a:	bf1c      	itt	ne
 8005a5c:	1a1b      	subne	r3, r3, r0
 8005a5e:	50a3      	strne	r3, [r4, r2]
 8005a60:	e7af      	b.n	80059c2 <_malloc_r+0x22>
 8005a62:	6862      	ldr	r2, [r4, #4]
 8005a64:	42a3      	cmp	r3, r4
 8005a66:	bf0c      	ite	eq
 8005a68:	f8c8 2000 	streq.w	r2, [r8]
 8005a6c:	605a      	strne	r2, [r3, #4]
 8005a6e:	e7eb      	b.n	8005a48 <_malloc_r+0xa8>
 8005a70:	4623      	mov	r3, r4
 8005a72:	6864      	ldr	r4, [r4, #4]
 8005a74:	e7ae      	b.n	80059d4 <_malloc_r+0x34>
 8005a76:	463c      	mov	r4, r7
 8005a78:	687f      	ldr	r7, [r7, #4]
 8005a7a:	e7b6      	b.n	80059ea <_malloc_r+0x4a>
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	42a3      	cmp	r3, r4
 8005a82:	d1fb      	bne.n	8005a7c <_malloc_r+0xdc>
 8005a84:	2300      	movs	r3, #0
 8005a86:	6053      	str	r3, [r2, #4]
 8005a88:	e7de      	b.n	8005a48 <_malloc_r+0xa8>
 8005a8a:	230c      	movs	r3, #12
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	6033      	str	r3, [r6, #0]
 8005a90:	f000 f80c 	bl	8005aac <__malloc_unlock>
 8005a94:	e794      	b.n	80059c0 <_malloc_r+0x20>
 8005a96:	6005      	str	r5, [r0, #0]
 8005a98:	e7d6      	b.n	8005a48 <_malloc_r+0xa8>
 8005a9a:	bf00      	nop
 8005a9c:	200003e8 	.word	0x200003e8

08005aa0 <__malloc_lock>:
 8005aa0:	4801      	ldr	r0, [pc, #4]	@ (8005aa8 <__malloc_lock+0x8>)
 8005aa2:	f7ff b8a8 	b.w	8004bf6 <__retarget_lock_acquire_recursive>
 8005aa6:	bf00      	nop
 8005aa8:	200003e0 	.word	0x200003e0

08005aac <__malloc_unlock>:
 8005aac:	4801      	ldr	r0, [pc, #4]	@ (8005ab4 <__malloc_unlock+0x8>)
 8005aae:	f7ff b8a3 	b.w	8004bf8 <__retarget_lock_release_recursive>
 8005ab2:	bf00      	nop
 8005ab4:	200003e0 	.word	0x200003e0

08005ab8 <_Balloc>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	69c6      	ldr	r6, [r0, #28]
 8005abc:	4604      	mov	r4, r0
 8005abe:	460d      	mov	r5, r1
 8005ac0:	b976      	cbnz	r6, 8005ae0 <_Balloc+0x28>
 8005ac2:	2010      	movs	r0, #16
 8005ac4:	f7ff ff42 	bl	800594c <malloc>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	61e0      	str	r0, [r4, #28]
 8005acc:	b920      	cbnz	r0, 8005ad8 <_Balloc+0x20>
 8005ace:	4b18      	ldr	r3, [pc, #96]	@ (8005b30 <_Balloc+0x78>)
 8005ad0:	216b      	movs	r1, #107	@ 0x6b
 8005ad2:	4818      	ldr	r0, [pc, #96]	@ (8005b34 <_Balloc+0x7c>)
 8005ad4:	f000 fdb4 	bl	8006640 <__assert_func>
 8005ad8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005adc:	6006      	str	r6, [r0, #0]
 8005ade:	60c6      	str	r6, [r0, #12]
 8005ae0:	69e6      	ldr	r6, [r4, #28]
 8005ae2:	68f3      	ldr	r3, [r6, #12]
 8005ae4:	b183      	cbz	r3, 8005b08 <_Balloc+0x50>
 8005ae6:	69e3      	ldr	r3, [r4, #28]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005aee:	b9b8      	cbnz	r0, 8005b20 <_Balloc+0x68>
 8005af0:	2101      	movs	r1, #1
 8005af2:	4620      	mov	r0, r4
 8005af4:	fa01 f605 	lsl.w	r6, r1, r5
 8005af8:	1d72      	adds	r2, r6, #5
 8005afa:	0092      	lsls	r2, r2, #2
 8005afc:	f000 fdbe 	bl	800667c <_calloc_r>
 8005b00:	b160      	cbz	r0, 8005b1c <_Balloc+0x64>
 8005b02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005b06:	e00e      	b.n	8005b26 <_Balloc+0x6e>
 8005b08:	2221      	movs	r2, #33	@ 0x21
 8005b0a:	2104      	movs	r1, #4
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	f000 fdb5 	bl	800667c <_calloc_r>
 8005b12:	69e3      	ldr	r3, [r4, #28]
 8005b14:	60f0      	str	r0, [r6, #12]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e4      	bne.n	8005ae6 <_Balloc+0x2e>
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	6802      	ldr	r2, [r0, #0]
 8005b22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b26:	2300      	movs	r3, #0
 8005b28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b2c:	e7f7      	b.n	8005b1e <_Balloc+0x66>
 8005b2e:	bf00      	nop
 8005b30:	08006d59 	.word	0x08006d59
 8005b34:	08006dd9 	.word	0x08006dd9

08005b38 <_Bfree>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	69c6      	ldr	r6, [r0, #28]
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	460c      	mov	r4, r1
 8005b40:	b976      	cbnz	r6, 8005b60 <_Bfree+0x28>
 8005b42:	2010      	movs	r0, #16
 8005b44:	f7ff ff02 	bl	800594c <malloc>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	61e8      	str	r0, [r5, #28]
 8005b4c:	b920      	cbnz	r0, 8005b58 <_Bfree+0x20>
 8005b4e:	4b09      	ldr	r3, [pc, #36]	@ (8005b74 <_Bfree+0x3c>)
 8005b50:	218f      	movs	r1, #143	@ 0x8f
 8005b52:	4809      	ldr	r0, [pc, #36]	@ (8005b78 <_Bfree+0x40>)
 8005b54:	f000 fd74 	bl	8006640 <__assert_func>
 8005b58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b5c:	6006      	str	r6, [r0, #0]
 8005b5e:	60c6      	str	r6, [r0, #12]
 8005b60:	b13c      	cbz	r4, 8005b72 <_Bfree+0x3a>
 8005b62:	69eb      	ldr	r3, [r5, #28]
 8005b64:	6862      	ldr	r2, [r4, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b6c:	6021      	str	r1, [r4, #0]
 8005b6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
 8005b74:	08006d59 	.word	0x08006d59
 8005b78:	08006dd9 	.word	0x08006dd9

08005b7c <__multadd>:
 8005b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b80:	f101 0c14 	add.w	ip, r1, #20
 8005b84:	4607      	mov	r7, r0
 8005b86:	460c      	mov	r4, r1
 8005b88:	461e      	mov	r6, r3
 8005b8a:	690d      	ldr	r5, [r1, #16]
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	f8dc 3000 	ldr.w	r3, [ip]
 8005b92:	3001      	adds	r0, #1
 8005b94:	b299      	uxth	r1, r3
 8005b96:	4285      	cmp	r5, r0
 8005b98:	fb02 6101 	mla	r1, r2, r1, r6
 8005b9c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ba0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8005ba4:	b289      	uxth	r1, r1
 8005ba6:	fb02 3306 	mla	r3, r2, r6, r3
 8005baa:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005bae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005bb2:	f84c 1b04 	str.w	r1, [ip], #4
 8005bb6:	dcea      	bgt.n	8005b8e <__multadd+0x12>
 8005bb8:	b30e      	cbz	r6, 8005bfe <__multadd+0x82>
 8005bba:	68a3      	ldr	r3, [r4, #8]
 8005bbc:	42ab      	cmp	r3, r5
 8005bbe:	dc19      	bgt.n	8005bf4 <__multadd+0x78>
 8005bc0:	6861      	ldr	r1, [r4, #4]
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	3101      	adds	r1, #1
 8005bc6:	f7ff ff77 	bl	8005ab8 <_Balloc>
 8005bca:	4680      	mov	r8, r0
 8005bcc:	b928      	cbnz	r0, 8005bda <__multadd+0x5e>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8005c04 <__multadd+0x88>)
 8005bd2:	21ba      	movs	r1, #186	@ 0xba
 8005bd4:	480c      	ldr	r0, [pc, #48]	@ (8005c08 <__multadd+0x8c>)
 8005bd6:	f000 fd33 	bl	8006640 <__assert_func>
 8005bda:	6922      	ldr	r2, [r4, #16]
 8005bdc:	f104 010c 	add.w	r1, r4, #12
 8005be0:	300c      	adds	r0, #12
 8005be2:	3202      	adds	r2, #2
 8005be4:	0092      	lsls	r2, r2, #2
 8005be6:	f000 fd1d 	bl	8006624 <memcpy>
 8005bea:	4621      	mov	r1, r4
 8005bec:	4644      	mov	r4, r8
 8005bee:	4638      	mov	r0, r7
 8005bf0:	f7ff ffa2 	bl	8005b38 <_Bfree>
 8005bf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005bf8:	3501      	adds	r5, #1
 8005bfa:	615e      	str	r6, [r3, #20]
 8005bfc:	6125      	str	r5, [r4, #16]
 8005bfe:	4620      	mov	r0, r4
 8005c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c04:	08006dc8 	.word	0x08006dc8
 8005c08:	08006dd9 	.word	0x08006dd9

08005c0c <__hi0bits>:
 8005c0c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005c10:	4603      	mov	r3, r0
 8005c12:	bf36      	itet	cc
 8005c14:	0403      	lslcc	r3, r0, #16
 8005c16:	2000      	movcs	r0, #0
 8005c18:	2010      	movcc	r0, #16
 8005c1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c1e:	bf3c      	itt	cc
 8005c20:	021b      	lslcc	r3, r3, #8
 8005c22:	3008      	addcc	r0, #8
 8005c24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c28:	bf3c      	itt	cc
 8005c2a:	011b      	lslcc	r3, r3, #4
 8005c2c:	3004      	addcc	r0, #4
 8005c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c32:	bf3c      	itt	cc
 8005c34:	009b      	lslcc	r3, r3, #2
 8005c36:	3002      	addcc	r0, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	db05      	blt.n	8005c48 <__hi0bits+0x3c>
 8005c3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005c40:	f100 0001 	add.w	r0, r0, #1
 8005c44:	bf08      	it	eq
 8005c46:	2020      	moveq	r0, #32
 8005c48:	4770      	bx	lr

08005c4a <__lo0bits>:
 8005c4a:	6803      	ldr	r3, [r0, #0]
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	f013 0007 	ands.w	r0, r3, #7
 8005c52:	d00b      	beq.n	8005c6c <__lo0bits+0x22>
 8005c54:	07d9      	lsls	r1, r3, #31
 8005c56:	d421      	bmi.n	8005c9c <__lo0bits+0x52>
 8005c58:	0798      	lsls	r0, r3, #30
 8005c5a:	bf47      	ittee	mi
 8005c5c:	085b      	lsrmi	r3, r3, #1
 8005c5e:	2001      	movmi	r0, #1
 8005c60:	089b      	lsrpl	r3, r3, #2
 8005c62:	2002      	movpl	r0, #2
 8005c64:	bf4c      	ite	mi
 8005c66:	6013      	strmi	r3, [r2, #0]
 8005c68:	6013      	strpl	r3, [r2, #0]
 8005c6a:	4770      	bx	lr
 8005c6c:	b299      	uxth	r1, r3
 8005c6e:	b909      	cbnz	r1, 8005c74 <__lo0bits+0x2a>
 8005c70:	0c1b      	lsrs	r3, r3, #16
 8005c72:	2010      	movs	r0, #16
 8005c74:	b2d9      	uxtb	r1, r3
 8005c76:	b909      	cbnz	r1, 8005c7c <__lo0bits+0x32>
 8005c78:	3008      	adds	r0, #8
 8005c7a:	0a1b      	lsrs	r3, r3, #8
 8005c7c:	0719      	lsls	r1, r3, #28
 8005c7e:	bf04      	itt	eq
 8005c80:	091b      	lsreq	r3, r3, #4
 8005c82:	3004      	addeq	r0, #4
 8005c84:	0799      	lsls	r1, r3, #30
 8005c86:	bf04      	itt	eq
 8005c88:	089b      	lsreq	r3, r3, #2
 8005c8a:	3002      	addeq	r0, #2
 8005c8c:	07d9      	lsls	r1, r3, #31
 8005c8e:	d403      	bmi.n	8005c98 <__lo0bits+0x4e>
 8005c90:	085b      	lsrs	r3, r3, #1
 8005c92:	f100 0001 	add.w	r0, r0, #1
 8005c96:	d003      	beq.n	8005ca0 <__lo0bits+0x56>
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	4770      	bx	lr
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	4770      	bx	lr
 8005ca0:	2020      	movs	r0, #32
 8005ca2:	4770      	bx	lr

08005ca4 <__i2b>:
 8005ca4:	b510      	push	{r4, lr}
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	2101      	movs	r1, #1
 8005caa:	f7ff ff05 	bl	8005ab8 <_Balloc>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	b928      	cbnz	r0, 8005cbe <__i2b+0x1a>
 8005cb2:	4b05      	ldr	r3, [pc, #20]	@ (8005cc8 <__i2b+0x24>)
 8005cb4:	f240 1145 	movw	r1, #325	@ 0x145
 8005cb8:	4804      	ldr	r0, [pc, #16]	@ (8005ccc <__i2b+0x28>)
 8005cba:	f000 fcc1 	bl	8006640 <__assert_func>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	6144      	str	r4, [r0, #20]
 8005cc2:	6103      	str	r3, [r0, #16]
 8005cc4:	bd10      	pop	{r4, pc}
 8005cc6:	bf00      	nop
 8005cc8:	08006dc8 	.word	0x08006dc8
 8005ccc:	08006dd9 	.word	0x08006dd9

08005cd0 <__multiply>:
 8005cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	690a      	ldr	r2, [r1, #16]
 8005cd8:	460f      	mov	r7, r1
 8005cda:	b085      	sub	sp, #20
 8005cdc:	6923      	ldr	r3, [r4, #16]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	bfa2      	ittt	ge
 8005ce2:	4623      	movge	r3, r4
 8005ce4:	460c      	movge	r4, r1
 8005ce6:	461f      	movge	r7, r3
 8005ce8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005cec:	68a3      	ldr	r3, [r4, #8]
 8005cee:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005cf2:	6861      	ldr	r1, [r4, #4]
 8005cf4:	eb0a 0609 	add.w	r6, sl, r9
 8005cf8:	42b3      	cmp	r3, r6
 8005cfa:	bfb8      	it	lt
 8005cfc:	3101      	addlt	r1, #1
 8005cfe:	f7ff fedb 	bl	8005ab8 <_Balloc>
 8005d02:	b930      	cbnz	r0, 8005d12 <__multiply+0x42>
 8005d04:	4602      	mov	r2, r0
 8005d06:	4b45      	ldr	r3, [pc, #276]	@ (8005e1c <__multiply+0x14c>)
 8005d08:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005d0c:	4844      	ldr	r0, [pc, #272]	@ (8005e20 <__multiply+0x150>)
 8005d0e:	f000 fc97 	bl	8006640 <__assert_func>
 8005d12:	f100 0514 	add.w	r5, r0, #20
 8005d16:	2200      	movs	r2, #0
 8005d18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005d1c:	462b      	mov	r3, r5
 8005d1e:	4543      	cmp	r3, r8
 8005d20:	d321      	bcc.n	8005d66 <__multiply+0x96>
 8005d22:	f107 0114 	add.w	r1, r7, #20
 8005d26:	f104 0214 	add.w	r2, r4, #20
 8005d2a:	f104 0715 	add.w	r7, r4, #21
 8005d2e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005d32:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005d36:	9302      	str	r3, [sp, #8]
 8005d38:	1b13      	subs	r3, r2, r4
 8005d3a:	3b15      	subs	r3, #21
 8005d3c:	f023 0303 	bic.w	r3, r3, #3
 8005d40:	3304      	adds	r3, #4
 8005d42:	42ba      	cmp	r2, r7
 8005d44:	bf38      	it	cc
 8005d46:	2304      	movcc	r3, #4
 8005d48:	9301      	str	r3, [sp, #4]
 8005d4a:	9b02      	ldr	r3, [sp, #8]
 8005d4c:	9103      	str	r1, [sp, #12]
 8005d4e:	428b      	cmp	r3, r1
 8005d50:	d80c      	bhi.n	8005d6c <__multiply+0x9c>
 8005d52:	2e00      	cmp	r6, #0
 8005d54:	dd03      	ble.n	8005d5e <__multiply+0x8e>
 8005d56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d05b      	beq.n	8005e16 <__multiply+0x146>
 8005d5e:	6106      	str	r6, [r0, #16]
 8005d60:	b005      	add	sp, #20
 8005d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d66:	f843 2b04 	str.w	r2, [r3], #4
 8005d6a:	e7d8      	b.n	8005d1e <__multiply+0x4e>
 8005d6c:	f8b1 a000 	ldrh.w	sl, [r1]
 8005d70:	f1ba 0f00 	cmp.w	sl, #0
 8005d74:	d024      	beq.n	8005dc0 <__multiply+0xf0>
 8005d76:	f104 0e14 	add.w	lr, r4, #20
 8005d7a:	46a9      	mov	r9, r5
 8005d7c:	f04f 0c00 	mov.w	ip, #0
 8005d80:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005d84:	f8d9 3000 	ldr.w	r3, [r9]
 8005d88:	fa1f fb87 	uxth.w	fp, r7
 8005d8c:	4572      	cmp	r2, lr
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	fb0a 330b 	mla	r3, sl, fp, r3
 8005d94:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005d98:	f8d9 7000 	ldr.w	r7, [r9]
 8005d9c:	4463      	add	r3, ip
 8005d9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005da2:	fb0a c70b 	mla	r7, sl, fp, ip
 8005da6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005db0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005db4:	f849 3b04 	str.w	r3, [r9], #4
 8005db8:	d8e2      	bhi.n	8005d80 <__multiply+0xb0>
 8005dba:	9b01      	ldr	r3, [sp, #4]
 8005dbc:	f845 c003 	str.w	ip, [r5, r3]
 8005dc0:	9b03      	ldr	r3, [sp, #12]
 8005dc2:	3104      	adds	r1, #4
 8005dc4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005dc8:	f1b9 0f00 	cmp.w	r9, #0
 8005dcc:	d021      	beq.n	8005e12 <__multiply+0x142>
 8005dce:	682b      	ldr	r3, [r5, #0]
 8005dd0:	f104 0c14 	add.w	ip, r4, #20
 8005dd4:	46ae      	mov	lr, r5
 8005dd6:	f04f 0a00 	mov.w	sl, #0
 8005dda:	f8bc b000 	ldrh.w	fp, [ip]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005de4:	fb09 770b 	mla	r7, r9, fp, r7
 8005de8:	4457      	add	r7, sl
 8005dea:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005dee:	f84e 3b04 	str.w	r3, [lr], #4
 8005df2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005df6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005dfa:	f8be 3000 	ldrh.w	r3, [lr]
 8005dfe:	4562      	cmp	r2, ip
 8005e00:	fb09 330a 	mla	r3, r9, sl, r3
 8005e04:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005e08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e0c:	d8e5      	bhi.n	8005dda <__multiply+0x10a>
 8005e0e:	9f01      	ldr	r7, [sp, #4]
 8005e10:	51eb      	str	r3, [r5, r7]
 8005e12:	3504      	adds	r5, #4
 8005e14:	e799      	b.n	8005d4a <__multiply+0x7a>
 8005e16:	3e01      	subs	r6, #1
 8005e18:	e79b      	b.n	8005d52 <__multiply+0x82>
 8005e1a:	bf00      	nop
 8005e1c:	08006dc8 	.word	0x08006dc8
 8005e20:	08006dd9 	.word	0x08006dd9

08005e24 <__pow5mult>:
 8005e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e28:	4615      	mov	r5, r2
 8005e2a:	f012 0203 	ands.w	r2, r2, #3
 8005e2e:	4607      	mov	r7, r0
 8005e30:	460e      	mov	r6, r1
 8005e32:	d007      	beq.n	8005e44 <__pow5mult+0x20>
 8005e34:	3a01      	subs	r2, #1
 8005e36:	4c25      	ldr	r4, [pc, #148]	@ (8005ecc <__pow5mult+0xa8>)
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e3e:	f7ff fe9d 	bl	8005b7c <__multadd>
 8005e42:	4606      	mov	r6, r0
 8005e44:	10ad      	asrs	r5, r5, #2
 8005e46:	d03d      	beq.n	8005ec4 <__pow5mult+0xa0>
 8005e48:	69fc      	ldr	r4, [r7, #28]
 8005e4a:	b97c      	cbnz	r4, 8005e6c <__pow5mult+0x48>
 8005e4c:	2010      	movs	r0, #16
 8005e4e:	f7ff fd7d 	bl	800594c <malloc>
 8005e52:	4602      	mov	r2, r0
 8005e54:	61f8      	str	r0, [r7, #28]
 8005e56:	b928      	cbnz	r0, 8005e64 <__pow5mult+0x40>
 8005e58:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed0 <__pow5mult+0xac>)
 8005e5a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005e5e:	481d      	ldr	r0, [pc, #116]	@ (8005ed4 <__pow5mult+0xb0>)
 8005e60:	f000 fbee 	bl	8006640 <__assert_func>
 8005e64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e68:	6004      	str	r4, [r0, #0]
 8005e6a:	60c4      	str	r4, [r0, #12]
 8005e6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005e70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e74:	b94c      	cbnz	r4, 8005e8a <__pow5mult+0x66>
 8005e76:	f240 2171 	movw	r1, #625	@ 0x271
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	f7ff ff12 	bl	8005ca4 <__i2b>
 8005e80:	2300      	movs	r3, #0
 8005e82:	4604      	mov	r4, r0
 8005e84:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e88:	6003      	str	r3, [r0, #0]
 8005e8a:	f04f 0900 	mov.w	r9, #0
 8005e8e:	07eb      	lsls	r3, r5, #31
 8005e90:	d50a      	bpl.n	8005ea8 <__pow5mult+0x84>
 8005e92:	4631      	mov	r1, r6
 8005e94:	4622      	mov	r2, r4
 8005e96:	4638      	mov	r0, r7
 8005e98:	f7ff ff1a 	bl	8005cd0 <__multiply>
 8005e9c:	4680      	mov	r8, r0
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	4646      	mov	r6, r8
 8005ea4:	f7ff fe48 	bl	8005b38 <_Bfree>
 8005ea8:	106d      	asrs	r5, r5, #1
 8005eaa:	d00b      	beq.n	8005ec4 <__pow5mult+0xa0>
 8005eac:	6820      	ldr	r0, [r4, #0]
 8005eae:	b938      	cbnz	r0, 8005ec0 <__pow5mult+0x9c>
 8005eb0:	4622      	mov	r2, r4
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	4638      	mov	r0, r7
 8005eb6:	f7ff ff0b 	bl	8005cd0 <__multiply>
 8005eba:	6020      	str	r0, [r4, #0]
 8005ebc:	f8c0 9000 	str.w	r9, [r0]
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	e7e4      	b.n	8005e8e <__pow5mult+0x6a>
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eca:	bf00      	nop
 8005ecc:	08006e34 	.word	0x08006e34
 8005ed0:	08006d59 	.word	0x08006d59
 8005ed4:	08006dd9 	.word	0x08006dd9

08005ed8 <__lshift>:
 8005ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005edc:	460c      	mov	r4, r1
 8005ede:	4607      	mov	r7, r0
 8005ee0:	4691      	mov	r9, r2
 8005ee2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ee6:	6923      	ldr	r3, [r4, #16]
 8005ee8:	6849      	ldr	r1, [r1, #4]
 8005eea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005eee:	68a3      	ldr	r3, [r4, #8]
 8005ef0:	f108 0601 	add.w	r6, r8, #1
 8005ef4:	42b3      	cmp	r3, r6
 8005ef6:	db0b      	blt.n	8005f10 <__lshift+0x38>
 8005ef8:	4638      	mov	r0, r7
 8005efa:	f7ff fddd 	bl	8005ab8 <_Balloc>
 8005efe:	4605      	mov	r5, r0
 8005f00:	b948      	cbnz	r0, 8005f16 <__lshift+0x3e>
 8005f02:	4602      	mov	r2, r0
 8005f04:	4b28      	ldr	r3, [pc, #160]	@ (8005fa8 <__lshift+0xd0>)
 8005f06:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005f0a:	4828      	ldr	r0, [pc, #160]	@ (8005fac <__lshift+0xd4>)
 8005f0c:	f000 fb98 	bl	8006640 <__assert_func>
 8005f10:	3101      	adds	r1, #1
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	e7ee      	b.n	8005ef4 <__lshift+0x1c>
 8005f16:	2300      	movs	r3, #0
 8005f18:	f100 0114 	add.w	r1, r0, #20
 8005f1c:	f100 0210 	add.w	r2, r0, #16
 8005f20:	4618      	mov	r0, r3
 8005f22:	4553      	cmp	r3, sl
 8005f24:	db33      	blt.n	8005f8e <__lshift+0xb6>
 8005f26:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f2a:	f104 0314 	add.w	r3, r4, #20
 8005f2e:	6920      	ldr	r0, [r4, #16]
 8005f30:	f019 091f 	ands.w	r9, r9, #31
 8005f34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f3c:	d02b      	beq.n	8005f96 <__lshift+0xbe>
 8005f3e:	f1c9 0e20 	rsb	lr, r9, #32
 8005f42:	468a      	mov	sl, r1
 8005f44:	2200      	movs	r2, #0
 8005f46:	6818      	ldr	r0, [r3, #0]
 8005f48:	fa00 f009 	lsl.w	r0, r0, r9
 8005f4c:	4310      	orrs	r0, r2
 8005f4e:	f84a 0b04 	str.w	r0, [sl], #4
 8005f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f56:	459c      	cmp	ip, r3
 8005f58:	fa22 f20e 	lsr.w	r2, r2, lr
 8005f5c:	d8f3      	bhi.n	8005f46 <__lshift+0x6e>
 8005f5e:	ebac 0304 	sub.w	r3, ip, r4
 8005f62:	f104 0015 	add.w	r0, r4, #21
 8005f66:	3b15      	subs	r3, #21
 8005f68:	f023 0303 	bic.w	r3, r3, #3
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	4584      	cmp	ip, r0
 8005f70:	bf38      	it	cc
 8005f72:	2304      	movcc	r3, #4
 8005f74:	50ca      	str	r2, [r1, r3]
 8005f76:	b10a      	cbz	r2, 8005f7c <__lshift+0xa4>
 8005f78:	f108 0602 	add.w	r6, r8, #2
 8005f7c:	3e01      	subs	r6, #1
 8005f7e:	4638      	mov	r0, r7
 8005f80:	4621      	mov	r1, r4
 8005f82:	612e      	str	r6, [r5, #16]
 8005f84:	f7ff fdd8 	bl	8005b38 <_Bfree>
 8005f88:	4628      	mov	r0, r5
 8005f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f8e:	3301      	adds	r3, #1
 8005f90:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f94:	e7c5      	b.n	8005f22 <__lshift+0x4a>
 8005f96:	3904      	subs	r1, #4
 8005f98:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f9c:	459c      	cmp	ip, r3
 8005f9e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005fa2:	d8f9      	bhi.n	8005f98 <__lshift+0xc0>
 8005fa4:	e7ea      	b.n	8005f7c <__lshift+0xa4>
 8005fa6:	bf00      	nop
 8005fa8:	08006dc8 	.word	0x08006dc8
 8005fac:	08006dd9 	.word	0x08006dd9

08005fb0 <__mcmp>:
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	690a      	ldr	r2, [r1, #16]
 8005fb4:	6900      	ldr	r0, [r0, #16]
 8005fb6:	1a80      	subs	r0, r0, r2
 8005fb8:	b530      	push	{r4, r5, lr}
 8005fba:	d10e      	bne.n	8005fda <__mcmp+0x2a>
 8005fbc:	3314      	adds	r3, #20
 8005fbe:	3114      	adds	r1, #20
 8005fc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005fc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005fc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005fcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005fd0:	4295      	cmp	r5, r2
 8005fd2:	d003      	beq.n	8005fdc <__mcmp+0x2c>
 8005fd4:	d205      	bcs.n	8005fe2 <__mcmp+0x32>
 8005fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fda:	bd30      	pop	{r4, r5, pc}
 8005fdc:	42a3      	cmp	r3, r4
 8005fde:	d3f3      	bcc.n	8005fc8 <__mcmp+0x18>
 8005fe0:	e7fb      	b.n	8005fda <__mcmp+0x2a>
 8005fe2:	2001      	movs	r0, #1
 8005fe4:	e7f9      	b.n	8005fda <__mcmp+0x2a>
	...

08005fe8 <__mdiff>:
 8005fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fec:	4689      	mov	r9, r1
 8005fee:	4606      	mov	r6, r0
 8005ff0:	4611      	mov	r1, r2
 8005ff2:	4614      	mov	r4, r2
 8005ff4:	4648      	mov	r0, r9
 8005ff6:	f7ff ffdb 	bl	8005fb0 <__mcmp>
 8005ffa:	1e05      	subs	r5, r0, #0
 8005ffc:	d112      	bne.n	8006024 <__mdiff+0x3c>
 8005ffe:	4629      	mov	r1, r5
 8006000:	4630      	mov	r0, r6
 8006002:	f7ff fd59 	bl	8005ab8 <_Balloc>
 8006006:	4602      	mov	r2, r0
 8006008:	b928      	cbnz	r0, 8006016 <__mdiff+0x2e>
 800600a:	4b41      	ldr	r3, [pc, #260]	@ (8006110 <__mdiff+0x128>)
 800600c:	f240 2137 	movw	r1, #567	@ 0x237
 8006010:	4840      	ldr	r0, [pc, #256]	@ (8006114 <__mdiff+0x12c>)
 8006012:	f000 fb15 	bl	8006640 <__assert_func>
 8006016:	2301      	movs	r3, #1
 8006018:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800601c:	4610      	mov	r0, r2
 800601e:	b003      	add	sp, #12
 8006020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006024:	bfbc      	itt	lt
 8006026:	464b      	movlt	r3, r9
 8006028:	46a1      	movlt	r9, r4
 800602a:	4630      	mov	r0, r6
 800602c:	bfb8      	it	lt
 800602e:	2501      	movlt	r5, #1
 8006030:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006034:	bfb4      	ite	lt
 8006036:	461c      	movlt	r4, r3
 8006038:	2500      	movge	r5, #0
 800603a:	f7ff fd3d 	bl	8005ab8 <_Balloc>
 800603e:	4602      	mov	r2, r0
 8006040:	b918      	cbnz	r0, 800604a <__mdiff+0x62>
 8006042:	4b33      	ldr	r3, [pc, #204]	@ (8006110 <__mdiff+0x128>)
 8006044:	f240 2145 	movw	r1, #581	@ 0x245
 8006048:	e7e2      	b.n	8006010 <__mdiff+0x28>
 800604a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800604e:	f104 0e14 	add.w	lr, r4, #20
 8006052:	6926      	ldr	r6, [r4, #16]
 8006054:	f100 0b14 	add.w	fp, r0, #20
 8006058:	60c5      	str	r5, [r0, #12]
 800605a:	f109 0514 	add.w	r5, r9, #20
 800605e:	f109 0310 	add.w	r3, r9, #16
 8006062:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006066:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800606a:	46d9      	mov	r9, fp
 800606c:	f04f 0c00 	mov.w	ip, #0
 8006070:	9301      	str	r3, [sp, #4]
 8006072:	9b01      	ldr	r3, [sp, #4]
 8006074:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006078:	f853 af04 	ldr.w	sl, [r3, #4]!
 800607c:	4576      	cmp	r6, lr
 800607e:	9301      	str	r3, [sp, #4]
 8006080:	fa1f f38a 	uxth.w	r3, sl
 8006084:	4619      	mov	r1, r3
 8006086:	b283      	uxth	r3, r0
 8006088:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800608c:	eba1 0303 	sub.w	r3, r1, r3
 8006090:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006094:	4463      	add	r3, ip
 8006096:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800609a:	b29b      	uxth	r3, r3
 800609c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80060a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80060a4:	f849 3b04 	str.w	r3, [r9], #4
 80060a8:	d8e3      	bhi.n	8006072 <__mdiff+0x8a>
 80060aa:	1b33      	subs	r3, r6, r4
 80060ac:	3415      	adds	r4, #21
 80060ae:	3b15      	subs	r3, #21
 80060b0:	f023 0303 	bic.w	r3, r3, #3
 80060b4:	3304      	adds	r3, #4
 80060b6:	42a6      	cmp	r6, r4
 80060b8:	bf38      	it	cc
 80060ba:	2304      	movcc	r3, #4
 80060bc:	441d      	add	r5, r3
 80060be:	445b      	add	r3, fp
 80060c0:	462c      	mov	r4, r5
 80060c2:	461e      	mov	r6, r3
 80060c4:	4544      	cmp	r4, r8
 80060c6:	d30e      	bcc.n	80060e6 <__mdiff+0xfe>
 80060c8:	f108 0103 	add.w	r1, r8, #3
 80060cc:	1b49      	subs	r1, r1, r5
 80060ce:	3d03      	subs	r5, #3
 80060d0:	f021 0103 	bic.w	r1, r1, #3
 80060d4:	45a8      	cmp	r8, r5
 80060d6:	bf38      	it	cc
 80060d8:	2100      	movcc	r1, #0
 80060da:	440b      	add	r3, r1
 80060dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80060e0:	b199      	cbz	r1, 800610a <__mdiff+0x122>
 80060e2:	6117      	str	r7, [r2, #16]
 80060e4:	e79a      	b.n	800601c <__mdiff+0x34>
 80060e6:	f854 1b04 	ldr.w	r1, [r4], #4
 80060ea:	46e6      	mov	lr, ip
 80060ec:	fa1f fc81 	uxth.w	ip, r1
 80060f0:	0c08      	lsrs	r0, r1, #16
 80060f2:	4471      	add	r1, lr
 80060f4:	44f4      	add	ip, lr
 80060f6:	b289      	uxth	r1, r1
 80060f8:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80060fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006100:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006104:	f846 1b04 	str.w	r1, [r6], #4
 8006108:	e7dc      	b.n	80060c4 <__mdiff+0xdc>
 800610a:	3f01      	subs	r7, #1
 800610c:	e7e6      	b.n	80060dc <__mdiff+0xf4>
 800610e:	bf00      	nop
 8006110:	08006dc8 	.word	0x08006dc8
 8006114:	08006dd9 	.word	0x08006dd9

08006118 <__d2b>:
 8006118:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800611c:	460f      	mov	r7, r1
 800611e:	2101      	movs	r1, #1
 8006120:	4616      	mov	r6, r2
 8006122:	ec59 8b10 	vmov	r8, r9, d0
 8006126:	f7ff fcc7 	bl	8005ab8 <_Balloc>
 800612a:	4604      	mov	r4, r0
 800612c:	b930      	cbnz	r0, 800613c <__d2b+0x24>
 800612e:	4602      	mov	r2, r0
 8006130:	4b23      	ldr	r3, [pc, #140]	@ (80061c0 <__d2b+0xa8>)
 8006132:	f240 310f 	movw	r1, #783	@ 0x30f
 8006136:	4823      	ldr	r0, [pc, #140]	@ (80061c4 <__d2b+0xac>)
 8006138:	f000 fa82 	bl	8006640 <__assert_func>
 800613c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006140:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006144:	b10d      	cbz	r5, 800614a <__d2b+0x32>
 8006146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800614a:	9301      	str	r3, [sp, #4]
 800614c:	f1b8 0300 	subs.w	r3, r8, #0
 8006150:	d023      	beq.n	800619a <__d2b+0x82>
 8006152:	4668      	mov	r0, sp
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	f7ff fd78 	bl	8005c4a <__lo0bits>
 800615a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800615e:	b1d0      	cbz	r0, 8006196 <__d2b+0x7e>
 8006160:	f1c0 0320 	rsb	r3, r0, #32
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	40c2      	lsrs	r2, r0
 800616a:	430b      	orrs	r3, r1
 800616c:	9201      	str	r2, [sp, #4]
 800616e:	6163      	str	r3, [r4, #20]
 8006170:	9b01      	ldr	r3, [sp, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	61a3      	str	r3, [r4, #24]
 8006176:	bf0c      	ite	eq
 8006178:	2201      	moveq	r2, #1
 800617a:	2202      	movne	r2, #2
 800617c:	6122      	str	r2, [r4, #16]
 800617e:	b1a5      	cbz	r5, 80061aa <__d2b+0x92>
 8006180:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006184:	4405      	add	r5, r0
 8006186:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800618a:	603d      	str	r5, [r7, #0]
 800618c:	6030      	str	r0, [r6, #0]
 800618e:	4620      	mov	r0, r4
 8006190:	b003      	add	sp, #12
 8006192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006196:	6161      	str	r1, [r4, #20]
 8006198:	e7ea      	b.n	8006170 <__d2b+0x58>
 800619a:	a801      	add	r0, sp, #4
 800619c:	f7ff fd55 	bl	8005c4a <__lo0bits>
 80061a0:	9b01      	ldr	r3, [sp, #4]
 80061a2:	3020      	adds	r0, #32
 80061a4:	2201      	movs	r2, #1
 80061a6:	6163      	str	r3, [r4, #20]
 80061a8:	e7e8      	b.n	800617c <__d2b+0x64>
 80061aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80061ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80061b2:	6038      	str	r0, [r7, #0]
 80061b4:	6918      	ldr	r0, [r3, #16]
 80061b6:	f7ff fd29 	bl	8005c0c <__hi0bits>
 80061ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80061be:	e7e5      	b.n	800618c <__d2b+0x74>
 80061c0:	08006dc8 	.word	0x08006dc8
 80061c4:	08006dd9 	.word	0x08006dd9

080061c8 <__ssputs_r>:
 80061c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061cc:	461f      	mov	r7, r3
 80061ce:	688e      	ldr	r6, [r1, #8]
 80061d0:	4682      	mov	sl, r0
 80061d2:	460c      	mov	r4, r1
 80061d4:	42be      	cmp	r6, r7
 80061d6:	4690      	mov	r8, r2
 80061d8:	680b      	ldr	r3, [r1, #0]
 80061da:	d82d      	bhi.n	8006238 <__ssputs_r+0x70>
 80061dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80061e4:	d026      	beq.n	8006234 <__ssputs_r+0x6c>
 80061e6:	6965      	ldr	r5, [r4, #20]
 80061e8:	6909      	ldr	r1, [r1, #16]
 80061ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061ee:	eba3 0901 	sub.w	r9, r3, r1
 80061f2:	1c7b      	adds	r3, r7, #1
 80061f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061f8:	444b      	add	r3, r9
 80061fa:	106d      	asrs	r5, r5, #1
 80061fc:	429d      	cmp	r5, r3
 80061fe:	bf38      	it	cc
 8006200:	461d      	movcc	r5, r3
 8006202:	0553      	lsls	r3, r2, #21
 8006204:	d527      	bpl.n	8006256 <__ssputs_r+0x8e>
 8006206:	4629      	mov	r1, r5
 8006208:	f7ff fbca 	bl	80059a0 <_malloc_r>
 800620c:	4606      	mov	r6, r0
 800620e:	b360      	cbz	r0, 800626a <__ssputs_r+0xa2>
 8006210:	464a      	mov	r2, r9
 8006212:	6921      	ldr	r1, [r4, #16]
 8006214:	f000 fa06 	bl	8006624 <memcpy>
 8006218:	89a3      	ldrh	r3, [r4, #12]
 800621a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800621e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006222:	81a3      	strh	r3, [r4, #12]
 8006224:	6126      	str	r6, [r4, #16]
 8006226:	444e      	add	r6, r9
 8006228:	6165      	str	r5, [r4, #20]
 800622a:	eba5 0509 	sub.w	r5, r5, r9
 800622e:	6026      	str	r6, [r4, #0]
 8006230:	463e      	mov	r6, r7
 8006232:	60a5      	str	r5, [r4, #8]
 8006234:	42be      	cmp	r6, r7
 8006236:	d900      	bls.n	800623a <__ssputs_r+0x72>
 8006238:	463e      	mov	r6, r7
 800623a:	4632      	mov	r2, r6
 800623c:	4641      	mov	r1, r8
 800623e:	6820      	ldr	r0, [r4, #0]
 8006240:	f000 f9c6 	bl	80065d0 <memmove>
 8006244:	68a3      	ldr	r3, [r4, #8]
 8006246:	2000      	movs	r0, #0
 8006248:	1b9b      	subs	r3, r3, r6
 800624a:	60a3      	str	r3, [r4, #8]
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	4433      	add	r3, r6
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006256:	462a      	mov	r2, r5
 8006258:	f000 fa36 	bl	80066c8 <_realloc_r>
 800625c:	4606      	mov	r6, r0
 800625e:	2800      	cmp	r0, #0
 8006260:	d1e0      	bne.n	8006224 <__ssputs_r+0x5c>
 8006262:	6921      	ldr	r1, [r4, #16]
 8006264:	4650      	mov	r0, sl
 8006266:	f7ff fb27 	bl	80058b8 <_free_r>
 800626a:	230c      	movs	r3, #12
 800626c:	f04f 30ff 	mov.w	r0, #4294967295
 8006270:	f8ca 3000 	str.w	r3, [sl]
 8006274:	89a3      	ldrh	r3, [r4, #12]
 8006276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800627a:	81a3      	strh	r3, [r4, #12]
 800627c:	e7e9      	b.n	8006252 <__ssputs_r+0x8a>
	...

08006280 <_svfiprintf_r>:
 8006280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006284:	4698      	mov	r8, r3
 8006286:	898b      	ldrh	r3, [r1, #12]
 8006288:	b09d      	sub	sp, #116	@ 0x74
 800628a:	4607      	mov	r7, r0
 800628c:	061b      	lsls	r3, r3, #24
 800628e:	460d      	mov	r5, r1
 8006290:	4614      	mov	r4, r2
 8006292:	d510      	bpl.n	80062b6 <_svfiprintf_r+0x36>
 8006294:	690b      	ldr	r3, [r1, #16]
 8006296:	b973      	cbnz	r3, 80062b6 <_svfiprintf_r+0x36>
 8006298:	2140      	movs	r1, #64	@ 0x40
 800629a:	f7ff fb81 	bl	80059a0 <_malloc_r>
 800629e:	6028      	str	r0, [r5, #0]
 80062a0:	6128      	str	r0, [r5, #16]
 80062a2:	b930      	cbnz	r0, 80062b2 <_svfiprintf_r+0x32>
 80062a4:	230c      	movs	r3, #12
 80062a6:	603b      	str	r3, [r7, #0]
 80062a8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ac:	b01d      	add	sp, #116	@ 0x74
 80062ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b2:	2340      	movs	r3, #64	@ 0x40
 80062b4:	616b      	str	r3, [r5, #20]
 80062b6:	2300      	movs	r3, #0
 80062b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80062bc:	f04f 0901 	mov.w	r9, #1
 80062c0:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8006464 <_svfiprintf_r+0x1e4>
 80062c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80062c6:	2320      	movs	r3, #32
 80062c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062cc:	2330      	movs	r3, #48	@ 0x30
 80062ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062d2:	4623      	mov	r3, r4
 80062d4:	469a      	mov	sl, r3
 80062d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062da:	b10a      	cbz	r2, 80062e0 <_svfiprintf_r+0x60>
 80062dc:	2a25      	cmp	r2, #37	@ 0x25
 80062de:	d1f9      	bne.n	80062d4 <_svfiprintf_r+0x54>
 80062e0:	ebba 0b04 	subs.w	fp, sl, r4
 80062e4:	d00b      	beq.n	80062fe <_svfiprintf_r+0x7e>
 80062e6:	465b      	mov	r3, fp
 80062e8:	4622      	mov	r2, r4
 80062ea:	4629      	mov	r1, r5
 80062ec:	4638      	mov	r0, r7
 80062ee:	f7ff ff6b 	bl	80061c8 <__ssputs_r>
 80062f2:	3001      	adds	r0, #1
 80062f4:	f000 80a7 	beq.w	8006446 <_svfiprintf_r+0x1c6>
 80062f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062fa:	445a      	add	r2, fp
 80062fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80062fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 809f 	beq.w	8006446 <_svfiprintf_r+0x1c6>
 8006308:	2300      	movs	r3, #0
 800630a:	f04f 32ff 	mov.w	r2, #4294967295
 800630e:	f10a 0a01 	add.w	sl, sl, #1
 8006312:	9304      	str	r3, [sp, #16]
 8006314:	9307      	str	r3, [sp, #28]
 8006316:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800631a:	931a      	str	r3, [sp, #104]	@ 0x68
 800631c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006320:	4654      	mov	r4, sl
 8006322:	2205      	movs	r2, #5
 8006324:	484f      	ldr	r0, [pc, #316]	@ (8006464 <_svfiprintf_r+0x1e4>)
 8006326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800632a:	f7fe fc66 	bl	8004bfa <memchr>
 800632e:	9a04      	ldr	r2, [sp, #16]
 8006330:	b9d8      	cbnz	r0, 800636a <_svfiprintf_r+0xea>
 8006332:	06d0      	lsls	r0, r2, #27
 8006334:	bf44      	itt	mi
 8006336:	2320      	movmi	r3, #32
 8006338:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800633c:	0711      	lsls	r1, r2, #28
 800633e:	bf44      	itt	mi
 8006340:	232b      	movmi	r3, #43	@ 0x2b
 8006342:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006346:	f89a 3000 	ldrb.w	r3, [sl]
 800634a:	2b2a      	cmp	r3, #42	@ 0x2a
 800634c:	d015      	beq.n	800637a <_svfiprintf_r+0xfa>
 800634e:	9a07      	ldr	r2, [sp, #28]
 8006350:	4654      	mov	r4, sl
 8006352:	2000      	movs	r0, #0
 8006354:	f04f 0c0a 	mov.w	ip, #10
 8006358:	4621      	mov	r1, r4
 800635a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800635e:	3b30      	subs	r3, #48	@ 0x30
 8006360:	2b09      	cmp	r3, #9
 8006362:	d94b      	bls.n	80063fc <_svfiprintf_r+0x17c>
 8006364:	b1b0      	cbz	r0, 8006394 <_svfiprintf_r+0x114>
 8006366:	9207      	str	r2, [sp, #28]
 8006368:	e014      	b.n	8006394 <_svfiprintf_r+0x114>
 800636a:	eba0 0308 	sub.w	r3, r0, r8
 800636e:	46a2      	mov	sl, r4
 8006370:	fa09 f303 	lsl.w	r3, r9, r3
 8006374:	4313      	orrs	r3, r2
 8006376:	9304      	str	r3, [sp, #16]
 8006378:	e7d2      	b.n	8006320 <_svfiprintf_r+0xa0>
 800637a:	9b03      	ldr	r3, [sp, #12]
 800637c:	1d19      	adds	r1, r3, #4
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	9103      	str	r1, [sp, #12]
 8006384:	bfbb      	ittet	lt
 8006386:	425b      	neglt	r3, r3
 8006388:	f042 0202 	orrlt.w	r2, r2, #2
 800638c:	9307      	strge	r3, [sp, #28]
 800638e:	9307      	strlt	r3, [sp, #28]
 8006390:	bfb8      	it	lt
 8006392:	9204      	strlt	r2, [sp, #16]
 8006394:	7823      	ldrb	r3, [r4, #0]
 8006396:	2b2e      	cmp	r3, #46	@ 0x2e
 8006398:	d10a      	bne.n	80063b0 <_svfiprintf_r+0x130>
 800639a:	7863      	ldrb	r3, [r4, #1]
 800639c:	2b2a      	cmp	r3, #42	@ 0x2a
 800639e:	d132      	bne.n	8006406 <_svfiprintf_r+0x186>
 80063a0:	9b03      	ldr	r3, [sp, #12]
 80063a2:	3402      	adds	r4, #2
 80063a4:	1d1a      	adds	r2, r3, #4
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063ac:	9203      	str	r2, [sp, #12]
 80063ae:	9305      	str	r3, [sp, #20]
 80063b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006474 <_svfiprintf_r+0x1f4>
 80063b4:	2203      	movs	r2, #3
 80063b6:	7821      	ldrb	r1, [r4, #0]
 80063b8:	4650      	mov	r0, sl
 80063ba:	f7fe fc1e 	bl	8004bfa <memchr>
 80063be:	b138      	cbz	r0, 80063d0 <_svfiprintf_r+0x150>
 80063c0:	eba0 000a 	sub.w	r0, r0, sl
 80063c4:	2240      	movs	r2, #64	@ 0x40
 80063c6:	9b04      	ldr	r3, [sp, #16]
 80063c8:	3401      	adds	r4, #1
 80063ca:	4082      	lsls	r2, r0
 80063cc:	4313      	orrs	r3, r2
 80063ce:	9304      	str	r3, [sp, #16]
 80063d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d4:	2206      	movs	r2, #6
 80063d6:	4824      	ldr	r0, [pc, #144]	@ (8006468 <_svfiprintf_r+0x1e8>)
 80063d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063dc:	f7fe fc0d 	bl	8004bfa <memchr>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d036      	beq.n	8006452 <_svfiprintf_r+0x1d2>
 80063e4:	4b21      	ldr	r3, [pc, #132]	@ (800646c <_svfiprintf_r+0x1ec>)
 80063e6:	bb1b      	cbnz	r3, 8006430 <_svfiprintf_r+0x1b0>
 80063e8:	9b03      	ldr	r3, [sp, #12]
 80063ea:	3307      	adds	r3, #7
 80063ec:	f023 0307 	bic.w	r3, r3, #7
 80063f0:	3308      	adds	r3, #8
 80063f2:	9303      	str	r3, [sp, #12]
 80063f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063f6:	4433      	add	r3, r6
 80063f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80063fa:	e76a      	b.n	80062d2 <_svfiprintf_r+0x52>
 80063fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006400:	460c      	mov	r4, r1
 8006402:	2001      	movs	r0, #1
 8006404:	e7a8      	b.n	8006358 <_svfiprintf_r+0xd8>
 8006406:	2300      	movs	r3, #0
 8006408:	3401      	adds	r4, #1
 800640a:	f04f 0c0a 	mov.w	ip, #10
 800640e:	4619      	mov	r1, r3
 8006410:	9305      	str	r3, [sp, #20]
 8006412:	4620      	mov	r0, r4
 8006414:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006418:	3a30      	subs	r2, #48	@ 0x30
 800641a:	2a09      	cmp	r2, #9
 800641c:	d903      	bls.n	8006426 <_svfiprintf_r+0x1a6>
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0c6      	beq.n	80063b0 <_svfiprintf_r+0x130>
 8006422:	9105      	str	r1, [sp, #20]
 8006424:	e7c4      	b.n	80063b0 <_svfiprintf_r+0x130>
 8006426:	fb0c 2101 	mla	r1, ip, r1, r2
 800642a:	4604      	mov	r4, r0
 800642c:	2301      	movs	r3, #1
 800642e:	e7f0      	b.n	8006412 <_svfiprintf_r+0x192>
 8006430:	ab03      	add	r3, sp, #12
 8006432:	462a      	mov	r2, r5
 8006434:	a904      	add	r1, sp, #16
 8006436:	4638      	mov	r0, r7
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	4b0d      	ldr	r3, [pc, #52]	@ (8006470 <_svfiprintf_r+0x1f0>)
 800643c:	f7fd fe7c 	bl	8004138 <_printf_float>
 8006440:	1c42      	adds	r2, r0, #1
 8006442:	4606      	mov	r6, r0
 8006444:	d1d6      	bne.n	80063f4 <_svfiprintf_r+0x174>
 8006446:	89ab      	ldrh	r3, [r5, #12]
 8006448:	065b      	lsls	r3, r3, #25
 800644a:	f53f af2d 	bmi.w	80062a8 <_svfiprintf_r+0x28>
 800644e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006450:	e72c      	b.n	80062ac <_svfiprintf_r+0x2c>
 8006452:	ab03      	add	r3, sp, #12
 8006454:	462a      	mov	r2, r5
 8006456:	a904      	add	r1, sp, #16
 8006458:	4638      	mov	r0, r7
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	4b04      	ldr	r3, [pc, #16]	@ (8006470 <_svfiprintf_r+0x1f0>)
 800645e:	f7fe f907 	bl	8004670 <_printf_i>
 8006462:	e7ed      	b.n	8006440 <_svfiprintf_r+0x1c0>
 8006464:	08006f30 	.word	0x08006f30
 8006468:	08006f3a 	.word	0x08006f3a
 800646c:	08004139 	.word	0x08004139
 8006470:	080061c9 	.word	0x080061c9
 8006474:	08006f36 	.word	0x08006f36

08006478 <__sflush_r>:
 8006478:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800647c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006480:	0716      	lsls	r6, r2, #28
 8006482:	4605      	mov	r5, r0
 8006484:	460c      	mov	r4, r1
 8006486:	d454      	bmi.n	8006532 <__sflush_r+0xba>
 8006488:	684b      	ldr	r3, [r1, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	dc02      	bgt.n	8006494 <__sflush_r+0x1c>
 800648e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006490:	2b00      	cmp	r3, #0
 8006492:	dd48      	ble.n	8006526 <__sflush_r+0xae>
 8006494:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006496:	2e00      	cmp	r6, #0
 8006498:	d045      	beq.n	8006526 <__sflush_r+0xae>
 800649a:	2300      	movs	r3, #0
 800649c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80064a0:	682f      	ldr	r7, [r5, #0]
 80064a2:	6a21      	ldr	r1, [r4, #32]
 80064a4:	602b      	str	r3, [r5, #0]
 80064a6:	d030      	beq.n	800650a <__sflush_r+0x92>
 80064a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064aa:	89a3      	ldrh	r3, [r4, #12]
 80064ac:	0759      	lsls	r1, r3, #29
 80064ae:	d505      	bpl.n	80064bc <__sflush_r+0x44>
 80064b0:	6863      	ldr	r3, [r4, #4]
 80064b2:	1ad2      	subs	r2, r2, r3
 80064b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80064b6:	b10b      	cbz	r3, 80064bc <__sflush_r+0x44>
 80064b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064ba:	1ad2      	subs	r2, r2, r3
 80064bc:	2300      	movs	r3, #0
 80064be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064c0:	6a21      	ldr	r1, [r4, #32]
 80064c2:	4628      	mov	r0, r5
 80064c4:	47b0      	blx	r6
 80064c6:	1c43      	adds	r3, r0, #1
 80064c8:	89a3      	ldrh	r3, [r4, #12]
 80064ca:	d106      	bne.n	80064da <__sflush_r+0x62>
 80064cc:	6829      	ldr	r1, [r5, #0]
 80064ce:	291d      	cmp	r1, #29
 80064d0:	d82b      	bhi.n	800652a <__sflush_r+0xb2>
 80064d2:	4a2a      	ldr	r2, [pc, #168]	@ (800657c <__sflush_r+0x104>)
 80064d4:	410a      	asrs	r2, r1
 80064d6:	07d6      	lsls	r6, r2, #31
 80064d8:	d427      	bmi.n	800652a <__sflush_r+0xb2>
 80064da:	2200      	movs	r2, #0
 80064dc:	04d9      	lsls	r1, r3, #19
 80064de:	6062      	str	r2, [r4, #4]
 80064e0:	6922      	ldr	r2, [r4, #16]
 80064e2:	6022      	str	r2, [r4, #0]
 80064e4:	d504      	bpl.n	80064f0 <__sflush_r+0x78>
 80064e6:	1c42      	adds	r2, r0, #1
 80064e8:	d101      	bne.n	80064ee <__sflush_r+0x76>
 80064ea:	682b      	ldr	r3, [r5, #0]
 80064ec:	b903      	cbnz	r3, 80064f0 <__sflush_r+0x78>
 80064ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80064f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064f2:	602f      	str	r7, [r5, #0]
 80064f4:	b1b9      	cbz	r1, 8006526 <__sflush_r+0xae>
 80064f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064fa:	4299      	cmp	r1, r3
 80064fc:	d002      	beq.n	8006504 <__sflush_r+0x8c>
 80064fe:	4628      	mov	r0, r5
 8006500:	f7ff f9da 	bl	80058b8 <_free_r>
 8006504:	2300      	movs	r3, #0
 8006506:	6363      	str	r3, [r4, #52]	@ 0x34
 8006508:	e00d      	b.n	8006526 <__sflush_r+0xae>
 800650a:	2301      	movs	r3, #1
 800650c:	4628      	mov	r0, r5
 800650e:	47b0      	blx	r6
 8006510:	4602      	mov	r2, r0
 8006512:	1c50      	adds	r0, r2, #1
 8006514:	d1c9      	bne.n	80064aa <__sflush_r+0x32>
 8006516:	682b      	ldr	r3, [r5, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d0c6      	beq.n	80064aa <__sflush_r+0x32>
 800651c:	2b1d      	cmp	r3, #29
 800651e:	d001      	beq.n	8006524 <__sflush_r+0xac>
 8006520:	2b16      	cmp	r3, #22
 8006522:	d11d      	bne.n	8006560 <__sflush_r+0xe8>
 8006524:	602f      	str	r7, [r5, #0]
 8006526:	2000      	movs	r0, #0
 8006528:	e021      	b.n	800656e <__sflush_r+0xf6>
 800652a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800652e:	b21b      	sxth	r3, r3
 8006530:	e01a      	b.n	8006568 <__sflush_r+0xf0>
 8006532:	690f      	ldr	r7, [r1, #16]
 8006534:	2f00      	cmp	r7, #0
 8006536:	d0f6      	beq.n	8006526 <__sflush_r+0xae>
 8006538:	0793      	lsls	r3, r2, #30
 800653a:	680e      	ldr	r6, [r1, #0]
 800653c:	600f      	str	r7, [r1, #0]
 800653e:	bf0c      	ite	eq
 8006540:	694b      	ldreq	r3, [r1, #20]
 8006542:	2300      	movne	r3, #0
 8006544:	eba6 0807 	sub.w	r8, r6, r7
 8006548:	608b      	str	r3, [r1, #8]
 800654a:	f1b8 0f00 	cmp.w	r8, #0
 800654e:	ddea      	ble.n	8006526 <__sflush_r+0xae>
 8006550:	4643      	mov	r3, r8
 8006552:	463a      	mov	r2, r7
 8006554:	6a21      	ldr	r1, [r4, #32]
 8006556:	4628      	mov	r0, r5
 8006558:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800655a:	47b0      	blx	r6
 800655c:	2800      	cmp	r0, #0
 800655e:	dc08      	bgt.n	8006572 <__sflush_r+0xfa>
 8006560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006568:	f04f 30ff 	mov.w	r0, #4294967295
 800656c:	81a3      	strh	r3, [r4, #12]
 800656e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006572:	4407      	add	r7, r0
 8006574:	eba8 0800 	sub.w	r8, r8, r0
 8006578:	e7e7      	b.n	800654a <__sflush_r+0xd2>
 800657a:	bf00      	nop
 800657c:	dfbffffe 	.word	0xdfbffffe

08006580 <_fflush_r>:
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	690b      	ldr	r3, [r1, #16]
 8006584:	4605      	mov	r5, r0
 8006586:	460c      	mov	r4, r1
 8006588:	b913      	cbnz	r3, 8006590 <_fflush_r+0x10>
 800658a:	2500      	movs	r5, #0
 800658c:	4628      	mov	r0, r5
 800658e:	bd38      	pop	{r3, r4, r5, pc}
 8006590:	b118      	cbz	r0, 800659a <_fflush_r+0x1a>
 8006592:	6a03      	ldr	r3, [r0, #32]
 8006594:	b90b      	cbnz	r3, 800659a <_fflush_r+0x1a>
 8006596:	f7fe fa17 	bl	80049c8 <__sinit>
 800659a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0f3      	beq.n	800658a <_fflush_r+0xa>
 80065a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065a4:	07d0      	lsls	r0, r2, #31
 80065a6:	d404      	bmi.n	80065b2 <_fflush_r+0x32>
 80065a8:	0599      	lsls	r1, r3, #22
 80065aa:	d402      	bmi.n	80065b2 <_fflush_r+0x32>
 80065ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065ae:	f7fe fb22 	bl	8004bf6 <__retarget_lock_acquire_recursive>
 80065b2:	4628      	mov	r0, r5
 80065b4:	4621      	mov	r1, r4
 80065b6:	f7ff ff5f 	bl	8006478 <__sflush_r>
 80065ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065bc:	4605      	mov	r5, r0
 80065be:	07da      	lsls	r2, r3, #31
 80065c0:	d4e4      	bmi.n	800658c <_fflush_r+0xc>
 80065c2:	89a3      	ldrh	r3, [r4, #12]
 80065c4:	059b      	lsls	r3, r3, #22
 80065c6:	d4e1      	bmi.n	800658c <_fflush_r+0xc>
 80065c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065ca:	f7fe fb15 	bl	8004bf8 <__retarget_lock_release_recursive>
 80065ce:	e7dd      	b.n	800658c <_fflush_r+0xc>

080065d0 <memmove>:
 80065d0:	4288      	cmp	r0, r1
 80065d2:	b510      	push	{r4, lr}
 80065d4:	eb01 0402 	add.w	r4, r1, r2
 80065d8:	d902      	bls.n	80065e0 <memmove+0x10>
 80065da:	4284      	cmp	r4, r0
 80065dc:	4623      	mov	r3, r4
 80065de:	d807      	bhi.n	80065f0 <memmove+0x20>
 80065e0:	1e43      	subs	r3, r0, #1
 80065e2:	42a1      	cmp	r1, r4
 80065e4:	d008      	beq.n	80065f8 <memmove+0x28>
 80065e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065ee:	e7f8      	b.n	80065e2 <memmove+0x12>
 80065f0:	4402      	add	r2, r0
 80065f2:	4601      	mov	r1, r0
 80065f4:	428a      	cmp	r2, r1
 80065f6:	d100      	bne.n	80065fa <memmove+0x2a>
 80065f8:	bd10      	pop	{r4, pc}
 80065fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006602:	e7f7      	b.n	80065f4 <memmove+0x24>

08006604 <_sbrk_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	2300      	movs	r3, #0
 8006608:	4d05      	ldr	r5, [pc, #20]	@ (8006620 <_sbrk_r+0x1c>)
 800660a:	4604      	mov	r4, r0
 800660c:	4608      	mov	r0, r1
 800660e:	602b      	str	r3, [r5, #0]
 8006610:	f7fb f888 	bl	8001724 <_sbrk>
 8006614:	1c43      	adds	r3, r0, #1
 8006616:	d102      	bne.n	800661e <_sbrk_r+0x1a>
 8006618:	682b      	ldr	r3, [r5, #0]
 800661a:	b103      	cbz	r3, 800661e <_sbrk_r+0x1a>
 800661c:	6023      	str	r3, [r4, #0]
 800661e:	bd38      	pop	{r3, r4, r5, pc}
 8006620:	200003dc 	.word	0x200003dc

08006624 <memcpy>:
 8006624:	440a      	add	r2, r1
 8006626:	1e43      	subs	r3, r0, #1
 8006628:	4291      	cmp	r1, r2
 800662a:	d100      	bne.n	800662e <memcpy+0xa>
 800662c:	4770      	bx	lr
 800662e:	b510      	push	{r4, lr}
 8006630:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006634:	4291      	cmp	r1, r2
 8006636:	f803 4f01 	strb.w	r4, [r3, #1]!
 800663a:	d1f9      	bne.n	8006630 <memcpy+0xc>
 800663c:	bd10      	pop	{r4, pc}
	...

08006640 <__assert_func>:
 8006640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006642:	4614      	mov	r4, r2
 8006644:	461a      	mov	r2, r3
 8006646:	4b09      	ldr	r3, [pc, #36]	@ (800666c <__assert_func+0x2c>)
 8006648:	4605      	mov	r5, r0
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68d8      	ldr	r0, [r3, #12]
 800664e:	b954      	cbnz	r4, 8006666 <__assert_func+0x26>
 8006650:	4b07      	ldr	r3, [pc, #28]	@ (8006670 <__assert_func+0x30>)
 8006652:	461c      	mov	r4, r3
 8006654:	9100      	str	r1, [sp, #0]
 8006656:	4907      	ldr	r1, [pc, #28]	@ (8006674 <__assert_func+0x34>)
 8006658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800665c:	462b      	mov	r3, r5
 800665e:	f000 f86f 	bl	8006740 <fiprintf>
 8006662:	f000 f87f 	bl	8006764 <abort>
 8006666:	4b04      	ldr	r3, [pc, #16]	@ (8006678 <__assert_func+0x38>)
 8006668:	e7f4      	b.n	8006654 <__assert_func+0x14>
 800666a:	bf00      	nop
 800666c:	20000018 	.word	0x20000018
 8006670:	08006f86 	.word	0x08006f86
 8006674:	08006f58 	.word	0x08006f58
 8006678:	08006f4b 	.word	0x08006f4b

0800667c <_calloc_r>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	fba1 5402 	umull	r5, r4, r1, r2
 8006682:	b93c      	cbnz	r4, 8006694 <_calloc_r+0x18>
 8006684:	4629      	mov	r1, r5
 8006686:	f7ff f98b 	bl	80059a0 <_malloc_r>
 800668a:	4606      	mov	r6, r0
 800668c:	b928      	cbnz	r0, 800669a <_calloc_r+0x1e>
 800668e:	2600      	movs	r6, #0
 8006690:	4630      	mov	r0, r6
 8006692:	bd70      	pop	{r4, r5, r6, pc}
 8006694:	220c      	movs	r2, #12
 8006696:	6002      	str	r2, [r0, #0]
 8006698:	e7f9      	b.n	800668e <_calloc_r+0x12>
 800669a:	462a      	mov	r2, r5
 800669c:	4621      	mov	r1, r4
 800669e:	f7fe fa2c 	bl	8004afa <memset>
 80066a2:	e7f5      	b.n	8006690 <_calloc_r+0x14>

080066a4 <__ascii_mbtowc>:
 80066a4:	b082      	sub	sp, #8
 80066a6:	b901      	cbnz	r1, 80066aa <__ascii_mbtowc+0x6>
 80066a8:	a901      	add	r1, sp, #4
 80066aa:	b142      	cbz	r2, 80066be <__ascii_mbtowc+0x1a>
 80066ac:	b14b      	cbz	r3, 80066c2 <__ascii_mbtowc+0x1e>
 80066ae:	7813      	ldrb	r3, [r2, #0]
 80066b0:	600b      	str	r3, [r1, #0]
 80066b2:	7812      	ldrb	r2, [r2, #0]
 80066b4:	1e10      	subs	r0, r2, #0
 80066b6:	bf18      	it	ne
 80066b8:	2001      	movne	r0, #1
 80066ba:	b002      	add	sp, #8
 80066bc:	4770      	bx	lr
 80066be:	4610      	mov	r0, r2
 80066c0:	e7fb      	b.n	80066ba <__ascii_mbtowc+0x16>
 80066c2:	f06f 0001 	mvn.w	r0, #1
 80066c6:	e7f8      	b.n	80066ba <__ascii_mbtowc+0x16>

080066c8 <_realloc_r>:
 80066c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066cc:	4680      	mov	r8, r0
 80066ce:	4615      	mov	r5, r2
 80066d0:	460c      	mov	r4, r1
 80066d2:	b921      	cbnz	r1, 80066de <_realloc_r+0x16>
 80066d4:	4611      	mov	r1, r2
 80066d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066da:	f7ff b961 	b.w	80059a0 <_malloc_r>
 80066de:	b92a      	cbnz	r2, 80066ec <_realloc_r+0x24>
 80066e0:	f7ff f8ea 	bl	80058b8 <_free_r>
 80066e4:	2400      	movs	r4, #0
 80066e6:	4620      	mov	r0, r4
 80066e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066ec:	f000 f841 	bl	8006772 <_malloc_usable_size_r>
 80066f0:	4285      	cmp	r5, r0
 80066f2:	4606      	mov	r6, r0
 80066f4:	d802      	bhi.n	80066fc <_realloc_r+0x34>
 80066f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80066fa:	d8f4      	bhi.n	80066e6 <_realloc_r+0x1e>
 80066fc:	4629      	mov	r1, r5
 80066fe:	4640      	mov	r0, r8
 8006700:	f7ff f94e 	bl	80059a0 <_malloc_r>
 8006704:	4607      	mov	r7, r0
 8006706:	2800      	cmp	r0, #0
 8006708:	d0ec      	beq.n	80066e4 <_realloc_r+0x1c>
 800670a:	42b5      	cmp	r5, r6
 800670c:	462a      	mov	r2, r5
 800670e:	4621      	mov	r1, r4
 8006710:	bf28      	it	cs
 8006712:	4632      	movcs	r2, r6
 8006714:	f7ff ff86 	bl	8006624 <memcpy>
 8006718:	4621      	mov	r1, r4
 800671a:	4640      	mov	r0, r8
 800671c:	463c      	mov	r4, r7
 800671e:	f7ff f8cb 	bl	80058b8 <_free_r>
 8006722:	e7e0      	b.n	80066e6 <_realloc_r+0x1e>

08006724 <__ascii_wctomb>:
 8006724:	4603      	mov	r3, r0
 8006726:	4608      	mov	r0, r1
 8006728:	b141      	cbz	r1, 800673c <__ascii_wctomb+0x18>
 800672a:	2aff      	cmp	r2, #255	@ 0xff
 800672c:	d904      	bls.n	8006738 <__ascii_wctomb+0x14>
 800672e:	228a      	movs	r2, #138	@ 0x8a
 8006730:	f04f 30ff 	mov.w	r0, #4294967295
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	4770      	bx	lr
 8006738:	2001      	movs	r0, #1
 800673a:	700a      	strb	r2, [r1, #0]
 800673c:	4770      	bx	lr
	...

08006740 <fiprintf>:
 8006740:	b40e      	push	{r1, r2, r3}
 8006742:	b503      	push	{r0, r1, lr}
 8006744:	ab03      	add	r3, sp, #12
 8006746:	4601      	mov	r1, r0
 8006748:	4805      	ldr	r0, [pc, #20]	@ (8006760 <fiprintf+0x20>)
 800674a:	f853 2b04 	ldr.w	r2, [r3], #4
 800674e:	6800      	ldr	r0, [r0, #0]
 8006750:	9301      	str	r3, [sp, #4]
 8006752:	f000 f83f 	bl	80067d4 <_vfiprintf_r>
 8006756:	b002      	add	sp, #8
 8006758:	f85d eb04 	ldr.w	lr, [sp], #4
 800675c:	b003      	add	sp, #12
 800675e:	4770      	bx	lr
 8006760:	20000018 	.word	0x20000018

08006764 <abort>:
 8006764:	2006      	movs	r0, #6
 8006766:	b508      	push	{r3, lr}
 8006768:	f000 fa08 	bl	8006b7c <raise>
 800676c:	2001      	movs	r0, #1
 800676e:	f7fa ff61 	bl	8001634 <_exit>

08006772 <_malloc_usable_size_r>:
 8006772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006776:	1f18      	subs	r0, r3, #4
 8006778:	2b00      	cmp	r3, #0
 800677a:	bfbc      	itt	lt
 800677c:	580b      	ldrlt	r3, [r1, r0]
 800677e:	18c0      	addlt	r0, r0, r3
 8006780:	4770      	bx	lr

08006782 <__sfputc_r>:
 8006782:	6893      	ldr	r3, [r2, #8]
 8006784:	3b01      	subs	r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	6093      	str	r3, [r2, #8]
 800678a:	b410      	push	{r4}
 800678c:	da08      	bge.n	80067a0 <__sfputc_r+0x1e>
 800678e:	6994      	ldr	r4, [r2, #24]
 8006790:	42a3      	cmp	r3, r4
 8006792:	db01      	blt.n	8006798 <__sfputc_r+0x16>
 8006794:	290a      	cmp	r1, #10
 8006796:	d103      	bne.n	80067a0 <__sfputc_r+0x1e>
 8006798:	f85d 4b04 	ldr.w	r4, [sp], #4
 800679c:	f000 b932 	b.w	8006a04 <__swbuf_r>
 80067a0:	6813      	ldr	r3, [r2, #0]
 80067a2:	1c58      	adds	r0, r3, #1
 80067a4:	6010      	str	r0, [r2, #0]
 80067a6:	4608      	mov	r0, r1
 80067a8:	7019      	strb	r1, [r3, #0]
 80067aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <__sfputs_r>:
 80067b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b2:	4606      	mov	r6, r0
 80067b4:	460f      	mov	r7, r1
 80067b6:	4614      	mov	r4, r2
 80067b8:	18d5      	adds	r5, r2, r3
 80067ba:	42ac      	cmp	r4, r5
 80067bc:	d101      	bne.n	80067c2 <__sfputs_r+0x12>
 80067be:	2000      	movs	r0, #0
 80067c0:	e007      	b.n	80067d2 <__sfputs_r+0x22>
 80067c2:	463a      	mov	r2, r7
 80067c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c8:	4630      	mov	r0, r6
 80067ca:	f7ff ffda 	bl	8006782 <__sfputc_r>
 80067ce:	1c43      	adds	r3, r0, #1
 80067d0:	d1f3      	bne.n	80067ba <__sfputs_r+0xa>
 80067d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080067d4 <_vfiprintf_r>:
 80067d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d8:	460d      	mov	r5, r1
 80067da:	b09d      	sub	sp, #116	@ 0x74
 80067dc:	4614      	mov	r4, r2
 80067de:	4698      	mov	r8, r3
 80067e0:	4606      	mov	r6, r0
 80067e2:	b118      	cbz	r0, 80067ec <_vfiprintf_r+0x18>
 80067e4:	6a03      	ldr	r3, [r0, #32]
 80067e6:	b90b      	cbnz	r3, 80067ec <_vfiprintf_r+0x18>
 80067e8:	f7fe f8ee 	bl	80049c8 <__sinit>
 80067ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067ee:	07d9      	lsls	r1, r3, #31
 80067f0:	d405      	bmi.n	80067fe <_vfiprintf_r+0x2a>
 80067f2:	89ab      	ldrh	r3, [r5, #12]
 80067f4:	059a      	lsls	r2, r3, #22
 80067f6:	d402      	bmi.n	80067fe <_vfiprintf_r+0x2a>
 80067f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067fa:	f7fe f9fc 	bl	8004bf6 <__retarget_lock_acquire_recursive>
 80067fe:	89ab      	ldrh	r3, [r5, #12]
 8006800:	071b      	lsls	r3, r3, #28
 8006802:	d501      	bpl.n	8006808 <_vfiprintf_r+0x34>
 8006804:	692b      	ldr	r3, [r5, #16]
 8006806:	b99b      	cbnz	r3, 8006830 <_vfiprintf_r+0x5c>
 8006808:	4629      	mov	r1, r5
 800680a:	4630      	mov	r0, r6
 800680c:	f000 f938 	bl	8006a80 <__swsetup_r>
 8006810:	b170      	cbz	r0, 8006830 <_vfiprintf_r+0x5c>
 8006812:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006814:	07dc      	lsls	r4, r3, #31
 8006816:	d504      	bpl.n	8006822 <_vfiprintf_r+0x4e>
 8006818:	f04f 30ff 	mov.w	r0, #4294967295
 800681c:	b01d      	add	sp, #116	@ 0x74
 800681e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006822:	89ab      	ldrh	r3, [r5, #12]
 8006824:	0598      	lsls	r0, r3, #22
 8006826:	d4f7      	bmi.n	8006818 <_vfiprintf_r+0x44>
 8006828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800682a:	f7fe f9e5 	bl	8004bf8 <__retarget_lock_release_recursive>
 800682e:	e7f3      	b.n	8006818 <_vfiprintf_r+0x44>
 8006830:	2300      	movs	r3, #0
 8006832:	f8cd 800c 	str.w	r8, [sp, #12]
 8006836:	f04f 0901 	mov.w	r9, #1
 800683a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80069f0 <_vfiprintf_r+0x21c>
 800683e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006840:	2320      	movs	r3, #32
 8006842:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006846:	2330      	movs	r3, #48	@ 0x30
 8006848:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800684c:	4623      	mov	r3, r4
 800684e:	469a      	mov	sl, r3
 8006850:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006854:	b10a      	cbz	r2, 800685a <_vfiprintf_r+0x86>
 8006856:	2a25      	cmp	r2, #37	@ 0x25
 8006858:	d1f9      	bne.n	800684e <_vfiprintf_r+0x7a>
 800685a:	ebba 0b04 	subs.w	fp, sl, r4
 800685e:	d00b      	beq.n	8006878 <_vfiprintf_r+0xa4>
 8006860:	465b      	mov	r3, fp
 8006862:	4622      	mov	r2, r4
 8006864:	4629      	mov	r1, r5
 8006866:	4630      	mov	r0, r6
 8006868:	f7ff ffa2 	bl	80067b0 <__sfputs_r>
 800686c:	3001      	adds	r0, #1
 800686e:	f000 80a7 	beq.w	80069c0 <_vfiprintf_r+0x1ec>
 8006872:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006874:	445a      	add	r2, fp
 8006876:	9209      	str	r2, [sp, #36]	@ 0x24
 8006878:	f89a 3000 	ldrb.w	r3, [sl]
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 809f 	beq.w	80069c0 <_vfiprintf_r+0x1ec>
 8006882:	2300      	movs	r3, #0
 8006884:	f04f 32ff 	mov.w	r2, #4294967295
 8006888:	f10a 0a01 	add.w	sl, sl, #1
 800688c:	9304      	str	r3, [sp, #16]
 800688e:	9307      	str	r3, [sp, #28]
 8006890:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006894:	931a      	str	r3, [sp, #104]	@ 0x68
 8006896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800689a:	4654      	mov	r4, sl
 800689c:	2205      	movs	r2, #5
 800689e:	4854      	ldr	r0, [pc, #336]	@ (80069f0 <_vfiprintf_r+0x21c>)
 80068a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a4:	f7fe f9a9 	bl	8004bfa <memchr>
 80068a8:	9a04      	ldr	r2, [sp, #16]
 80068aa:	b9d8      	cbnz	r0, 80068e4 <_vfiprintf_r+0x110>
 80068ac:	06d1      	lsls	r1, r2, #27
 80068ae:	bf44      	itt	mi
 80068b0:	2320      	movmi	r3, #32
 80068b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068b6:	0713      	lsls	r3, r2, #28
 80068b8:	bf44      	itt	mi
 80068ba:	232b      	movmi	r3, #43	@ 0x2b
 80068bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068c0:	f89a 3000 	ldrb.w	r3, [sl]
 80068c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80068c6:	d015      	beq.n	80068f4 <_vfiprintf_r+0x120>
 80068c8:	9a07      	ldr	r2, [sp, #28]
 80068ca:	4654      	mov	r4, sl
 80068cc:	2000      	movs	r0, #0
 80068ce:	f04f 0c0a 	mov.w	ip, #10
 80068d2:	4621      	mov	r1, r4
 80068d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068d8:	3b30      	subs	r3, #48	@ 0x30
 80068da:	2b09      	cmp	r3, #9
 80068dc:	d94b      	bls.n	8006976 <_vfiprintf_r+0x1a2>
 80068de:	b1b0      	cbz	r0, 800690e <_vfiprintf_r+0x13a>
 80068e0:	9207      	str	r2, [sp, #28]
 80068e2:	e014      	b.n	800690e <_vfiprintf_r+0x13a>
 80068e4:	eba0 0308 	sub.w	r3, r0, r8
 80068e8:	46a2      	mov	sl, r4
 80068ea:	fa09 f303 	lsl.w	r3, r9, r3
 80068ee:	4313      	orrs	r3, r2
 80068f0:	9304      	str	r3, [sp, #16]
 80068f2:	e7d2      	b.n	800689a <_vfiprintf_r+0xc6>
 80068f4:	9b03      	ldr	r3, [sp, #12]
 80068f6:	1d19      	adds	r1, r3, #4
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	9103      	str	r1, [sp, #12]
 80068fe:	bfbb      	ittet	lt
 8006900:	425b      	neglt	r3, r3
 8006902:	f042 0202 	orrlt.w	r2, r2, #2
 8006906:	9307      	strge	r3, [sp, #28]
 8006908:	9307      	strlt	r3, [sp, #28]
 800690a:	bfb8      	it	lt
 800690c:	9204      	strlt	r2, [sp, #16]
 800690e:	7823      	ldrb	r3, [r4, #0]
 8006910:	2b2e      	cmp	r3, #46	@ 0x2e
 8006912:	d10a      	bne.n	800692a <_vfiprintf_r+0x156>
 8006914:	7863      	ldrb	r3, [r4, #1]
 8006916:	2b2a      	cmp	r3, #42	@ 0x2a
 8006918:	d132      	bne.n	8006980 <_vfiprintf_r+0x1ac>
 800691a:	9b03      	ldr	r3, [sp, #12]
 800691c:	3402      	adds	r4, #2
 800691e:	1d1a      	adds	r2, r3, #4
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006926:	9203      	str	r2, [sp, #12]
 8006928:	9305      	str	r3, [sp, #20]
 800692a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006a00 <_vfiprintf_r+0x22c>
 800692e:	2203      	movs	r2, #3
 8006930:	7821      	ldrb	r1, [r4, #0]
 8006932:	4650      	mov	r0, sl
 8006934:	f7fe f961 	bl	8004bfa <memchr>
 8006938:	b138      	cbz	r0, 800694a <_vfiprintf_r+0x176>
 800693a:	eba0 000a 	sub.w	r0, r0, sl
 800693e:	2240      	movs	r2, #64	@ 0x40
 8006940:	9b04      	ldr	r3, [sp, #16]
 8006942:	3401      	adds	r4, #1
 8006944:	4082      	lsls	r2, r0
 8006946:	4313      	orrs	r3, r2
 8006948:	9304      	str	r3, [sp, #16]
 800694a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800694e:	2206      	movs	r2, #6
 8006950:	4828      	ldr	r0, [pc, #160]	@ (80069f4 <_vfiprintf_r+0x220>)
 8006952:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006956:	f7fe f950 	bl	8004bfa <memchr>
 800695a:	2800      	cmp	r0, #0
 800695c:	d03f      	beq.n	80069de <_vfiprintf_r+0x20a>
 800695e:	4b26      	ldr	r3, [pc, #152]	@ (80069f8 <_vfiprintf_r+0x224>)
 8006960:	bb1b      	cbnz	r3, 80069aa <_vfiprintf_r+0x1d6>
 8006962:	9b03      	ldr	r3, [sp, #12]
 8006964:	3307      	adds	r3, #7
 8006966:	f023 0307 	bic.w	r3, r3, #7
 800696a:	3308      	adds	r3, #8
 800696c:	9303      	str	r3, [sp, #12]
 800696e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006970:	443b      	add	r3, r7
 8006972:	9309      	str	r3, [sp, #36]	@ 0x24
 8006974:	e76a      	b.n	800684c <_vfiprintf_r+0x78>
 8006976:	fb0c 3202 	mla	r2, ip, r2, r3
 800697a:	460c      	mov	r4, r1
 800697c:	2001      	movs	r0, #1
 800697e:	e7a8      	b.n	80068d2 <_vfiprintf_r+0xfe>
 8006980:	2300      	movs	r3, #0
 8006982:	3401      	adds	r4, #1
 8006984:	f04f 0c0a 	mov.w	ip, #10
 8006988:	4619      	mov	r1, r3
 800698a:	9305      	str	r3, [sp, #20]
 800698c:	4620      	mov	r0, r4
 800698e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006992:	3a30      	subs	r2, #48	@ 0x30
 8006994:	2a09      	cmp	r2, #9
 8006996:	d903      	bls.n	80069a0 <_vfiprintf_r+0x1cc>
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0c6      	beq.n	800692a <_vfiprintf_r+0x156>
 800699c:	9105      	str	r1, [sp, #20]
 800699e:	e7c4      	b.n	800692a <_vfiprintf_r+0x156>
 80069a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80069a4:	4604      	mov	r4, r0
 80069a6:	2301      	movs	r3, #1
 80069a8:	e7f0      	b.n	800698c <_vfiprintf_r+0x1b8>
 80069aa:	ab03      	add	r3, sp, #12
 80069ac:	462a      	mov	r2, r5
 80069ae:	a904      	add	r1, sp, #16
 80069b0:	4630      	mov	r0, r6
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	4b11      	ldr	r3, [pc, #68]	@ (80069fc <_vfiprintf_r+0x228>)
 80069b6:	f7fd fbbf 	bl	8004138 <_printf_float>
 80069ba:	4607      	mov	r7, r0
 80069bc:	1c78      	adds	r0, r7, #1
 80069be:	d1d6      	bne.n	800696e <_vfiprintf_r+0x19a>
 80069c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069c2:	07d9      	lsls	r1, r3, #31
 80069c4:	d405      	bmi.n	80069d2 <_vfiprintf_r+0x1fe>
 80069c6:	89ab      	ldrh	r3, [r5, #12]
 80069c8:	059a      	lsls	r2, r3, #22
 80069ca:	d402      	bmi.n	80069d2 <_vfiprintf_r+0x1fe>
 80069cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069ce:	f7fe f913 	bl	8004bf8 <__retarget_lock_release_recursive>
 80069d2:	89ab      	ldrh	r3, [r5, #12]
 80069d4:	065b      	lsls	r3, r3, #25
 80069d6:	f53f af1f 	bmi.w	8006818 <_vfiprintf_r+0x44>
 80069da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069dc:	e71e      	b.n	800681c <_vfiprintf_r+0x48>
 80069de:	ab03      	add	r3, sp, #12
 80069e0:	462a      	mov	r2, r5
 80069e2:	a904      	add	r1, sp, #16
 80069e4:	4630      	mov	r0, r6
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	4b04      	ldr	r3, [pc, #16]	@ (80069fc <_vfiprintf_r+0x228>)
 80069ea:	f7fd fe41 	bl	8004670 <_printf_i>
 80069ee:	e7e4      	b.n	80069ba <_vfiprintf_r+0x1e6>
 80069f0:	08006f30 	.word	0x08006f30
 80069f4:	08006f3a 	.word	0x08006f3a
 80069f8:	08004139 	.word	0x08004139
 80069fc:	080067b1 	.word	0x080067b1
 8006a00:	08006f36 	.word	0x08006f36

08006a04 <__swbuf_r>:
 8006a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a06:	460e      	mov	r6, r1
 8006a08:	4614      	mov	r4, r2
 8006a0a:	4605      	mov	r5, r0
 8006a0c:	b118      	cbz	r0, 8006a16 <__swbuf_r+0x12>
 8006a0e:	6a03      	ldr	r3, [r0, #32]
 8006a10:	b90b      	cbnz	r3, 8006a16 <__swbuf_r+0x12>
 8006a12:	f7fd ffd9 	bl	80049c8 <__sinit>
 8006a16:	69a3      	ldr	r3, [r4, #24]
 8006a18:	60a3      	str	r3, [r4, #8]
 8006a1a:	89a3      	ldrh	r3, [r4, #12]
 8006a1c:	071a      	lsls	r2, r3, #28
 8006a1e:	d501      	bpl.n	8006a24 <__swbuf_r+0x20>
 8006a20:	6923      	ldr	r3, [r4, #16]
 8006a22:	b943      	cbnz	r3, 8006a36 <__swbuf_r+0x32>
 8006a24:	4621      	mov	r1, r4
 8006a26:	4628      	mov	r0, r5
 8006a28:	f000 f82a 	bl	8006a80 <__swsetup_r>
 8006a2c:	b118      	cbz	r0, 8006a36 <__swbuf_r+0x32>
 8006a2e:	f04f 37ff 	mov.w	r7, #4294967295
 8006a32:	4638      	mov	r0, r7
 8006a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	b2f6      	uxtb	r6, r6
 8006a3a:	6922      	ldr	r2, [r4, #16]
 8006a3c:	4637      	mov	r7, r6
 8006a3e:	1a98      	subs	r0, r3, r2
 8006a40:	6963      	ldr	r3, [r4, #20]
 8006a42:	4283      	cmp	r3, r0
 8006a44:	dc05      	bgt.n	8006a52 <__swbuf_r+0x4e>
 8006a46:	4621      	mov	r1, r4
 8006a48:	4628      	mov	r0, r5
 8006a4a:	f7ff fd99 	bl	8006580 <_fflush_r>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d1ed      	bne.n	8006a2e <__swbuf_r+0x2a>
 8006a52:	68a3      	ldr	r3, [r4, #8]
 8006a54:	3b01      	subs	r3, #1
 8006a56:	60a3      	str	r3, [r4, #8]
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	6022      	str	r2, [r4, #0]
 8006a5e:	701e      	strb	r6, [r3, #0]
 8006a60:	1c43      	adds	r3, r0, #1
 8006a62:	6962      	ldr	r2, [r4, #20]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d004      	beq.n	8006a72 <__swbuf_r+0x6e>
 8006a68:	89a3      	ldrh	r3, [r4, #12]
 8006a6a:	07db      	lsls	r3, r3, #31
 8006a6c:	d5e1      	bpl.n	8006a32 <__swbuf_r+0x2e>
 8006a6e:	2e0a      	cmp	r6, #10
 8006a70:	d1df      	bne.n	8006a32 <__swbuf_r+0x2e>
 8006a72:	4621      	mov	r1, r4
 8006a74:	4628      	mov	r0, r5
 8006a76:	f7ff fd83 	bl	8006580 <_fflush_r>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	d0d9      	beq.n	8006a32 <__swbuf_r+0x2e>
 8006a7e:	e7d6      	b.n	8006a2e <__swbuf_r+0x2a>

08006a80 <__swsetup_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	4b29      	ldr	r3, [pc, #164]	@ (8006b28 <__swsetup_r+0xa8>)
 8006a84:	4605      	mov	r5, r0
 8006a86:	460c      	mov	r4, r1
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	b118      	cbz	r0, 8006a94 <__swsetup_r+0x14>
 8006a8c:	6a03      	ldr	r3, [r0, #32]
 8006a8e:	b90b      	cbnz	r3, 8006a94 <__swsetup_r+0x14>
 8006a90:	f7fd ff9a 	bl	80049c8 <__sinit>
 8006a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a98:	0719      	lsls	r1, r3, #28
 8006a9a:	d422      	bmi.n	8006ae2 <__swsetup_r+0x62>
 8006a9c:	06da      	lsls	r2, r3, #27
 8006a9e:	d407      	bmi.n	8006ab0 <__swsetup_r+0x30>
 8006aa0:	2209      	movs	r2, #9
 8006aa2:	602a      	str	r2, [r5, #0]
 8006aa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aac:	81a3      	strh	r3, [r4, #12]
 8006aae:	e033      	b.n	8006b18 <__swsetup_r+0x98>
 8006ab0:	0758      	lsls	r0, r3, #29
 8006ab2:	d512      	bpl.n	8006ada <__swsetup_r+0x5a>
 8006ab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ab6:	b141      	cbz	r1, 8006aca <__swsetup_r+0x4a>
 8006ab8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006abc:	4299      	cmp	r1, r3
 8006abe:	d002      	beq.n	8006ac6 <__swsetup_r+0x46>
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	f7fe fef9 	bl	80058b8 <_free_r>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006aca:	89a3      	ldrh	r3, [r4, #12]
 8006acc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ad0:	81a3      	strh	r3, [r4, #12]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	6063      	str	r3, [r4, #4]
 8006ad6:	6923      	ldr	r3, [r4, #16]
 8006ad8:	6023      	str	r3, [r4, #0]
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	f043 0308 	orr.w	r3, r3, #8
 8006ae0:	81a3      	strh	r3, [r4, #12]
 8006ae2:	6923      	ldr	r3, [r4, #16]
 8006ae4:	b94b      	cbnz	r3, 8006afa <__swsetup_r+0x7a>
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006af0:	d003      	beq.n	8006afa <__swsetup_r+0x7a>
 8006af2:	4621      	mov	r1, r4
 8006af4:	4628      	mov	r0, r5
 8006af6:	f000 f882 	bl	8006bfe <__smakebuf_r>
 8006afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006afe:	f013 0201 	ands.w	r2, r3, #1
 8006b02:	d00a      	beq.n	8006b1a <__swsetup_r+0x9a>
 8006b04:	2200      	movs	r2, #0
 8006b06:	60a2      	str	r2, [r4, #8]
 8006b08:	6962      	ldr	r2, [r4, #20]
 8006b0a:	4252      	negs	r2, r2
 8006b0c:	61a2      	str	r2, [r4, #24]
 8006b0e:	6922      	ldr	r2, [r4, #16]
 8006b10:	b942      	cbnz	r2, 8006b24 <__swsetup_r+0xa4>
 8006b12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b16:	d1c5      	bne.n	8006aa4 <__swsetup_r+0x24>
 8006b18:	bd38      	pop	{r3, r4, r5, pc}
 8006b1a:	0799      	lsls	r1, r3, #30
 8006b1c:	bf58      	it	pl
 8006b1e:	6962      	ldrpl	r2, [r4, #20]
 8006b20:	60a2      	str	r2, [r4, #8]
 8006b22:	e7f4      	b.n	8006b0e <__swsetup_r+0x8e>
 8006b24:	2000      	movs	r0, #0
 8006b26:	e7f7      	b.n	8006b18 <__swsetup_r+0x98>
 8006b28:	20000018 	.word	0x20000018

08006b2c <_raise_r>:
 8006b2c:	291f      	cmp	r1, #31
 8006b2e:	b538      	push	{r3, r4, r5, lr}
 8006b30:	4605      	mov	r5, r0
 8006b32:	460c      	mov	r4, r1
 8006b34:	d904      	bls.n	8006b40 <_raise_r+0x14>
 8006b36:	2316      	movs	r3, #22
 8006b38:	6003      	str	r3, [r0, #0]
 8006b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006b42:	b112      	cbz	r2, 8006b4a <_raise_r+0x1e>
 8006b44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b48:	b94b      	cbnz	r3, 8006b5e <_raise_r+0x32>
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	f000 f830 	bl	8006bb0 <_getpid_r>
 8006b50:	4622      	mov	r2, r4
 8006b52:	4601      	mov	r1, r0
 8006b54:	4628      	mov	r0, r5
 8006b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b5a:	f000 b817 	b.w	8006b8c <_kill_r>
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d00a      	beq.n	8006b78 <_raise_r+0x4c>
 8006b62:	1c59      	adds	r1, r3, #1
 8006b64:	d103      	bne.n	8006b6e <_raise_r+0x42>
 8006b66:	2316      	movs	r3, #22
 8006b68:	6003      	str	r3, [r0, #0]
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	e7e7      	b.n	8006b3e <_raise_r+0x12>
 8006b6e:	2100      	movs	r1, #0
 8006b70:	4620      	mov	r0, r4
 8006b72:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006b76:	4798      	blx	r3
 8006b78:	2000      	movs	r0, #0
 8006b7a:	e7e0      	b.n	8006b3e <_raise_r+0x12>

08006b7c <raise>:
 8006b7c:	4b02      	ldr	r3, [pc, #8]	@ (8006b88 <raise+0xc>)
 8006b7e:	4601      	mov	r1, r0
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	f7ff bfd3 	b.w	8006b2c <_raise_r>
 8006b86:	bf00      	nop
 8006b88:	20000018 	.word	0x20000018

08006b8c <_kill_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	2300      	movs	r3, #0
 8006b90:	4d06      	ldr	r5, [pc, #24]	@ (8006bac <_kill_r+0x20>)
 8006b92:	4604      	mov	r4, r0
 8006b94:	4608      	mov	r0, r1
 8006b96:	4611      	mov	r1, r2
 8006b98:	602b      	str	r3, [r5, #0]
 8006b9a:	f7fa fd3b 	bl	8001614 <_kill>
 8006b9e:	1c43      	adds	r3, r0, #1
 8006ba0:	d102      	bne.n	8006ba8 <_kill_r+0x1c>
 8006ba2:	682b      	ldr	r3, [r5, #0]
 8006ba4:	b103      	cbz	r3, 8006ba8 <_kill_r+0x1c>
 8006ba6:	6023      	str	r3, [r4, #0]
 8006ba8:	bd38      	pop	{r3, r4, r5, pc}
 8006baa:	bf00      	nop
 8006bac:	200003dc 	.word	0x200003dc

08006bb0 <_getpid_r>:
 8006bb0:	f7fa bd28 	b.w	8001604 <_getpid>

08006bb4 <__swhatbuf_r>:
 8006bb4:	b570      	push	{r4, r5, r6, lr}
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bbc:	b096      	sub	sp, #88	@ 0x58
 8006bbe:	4615      	mov	r5, r2
 8006bc0:	2900      	cmp	r1, #0
 8006bc2:	461e      	mov	r6, r3
 8006bc4:	da0c      	bge.n	8006be0 <__swhatbuf_r+0x2c>
 8006bc6:	89a3      	ldrh	r3, [r4, #12]
 8006bc8:	2100      	movs	r1, #0
 8006bca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006bce:	bf14      	ite	ne
 8006bd0:	2340      	movne	r3, #64	@ 0x40
 8006bd2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	6031      	str	r1, [r6, #0]
 8006bda:	602b      	str	r3, [r5, #0]
 8006bdc:	b016      	add	sp, #88	@ 0x58
 8006bde:	bd70      	pop	{r4, r5, r6, pc}
 8006be0:	466a      	mov	r2, sp
 8006be2:	f000 f849 	bl	8006c78 <_fstat_r>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	dbed      	blt.n	8006bc6 <__swhatbuf_r+0x12>
 8006bea:	9901      	ldr	r1, [sp, #4]
 8006bec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006bf0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006bf4:	4259      	negs	r1, r3
 8006bf6:	4159      	adcs	r1, r3
 8006bf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bfc:	e7eb      	b.n	8006bd6 <__swhatbuf_r+0x22>

08006bfe <__smakebuf_r>:
 8006bfe:	898b      	ldrh	r3, [r1, #12]
 8006c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c02:	079d      	lsls	r5, r3, #30
 8006c04:	4606      	mov	r6, r0
 8006c06:	460c      	mov	r4, r1
 8006c08:	d507      	bpl.n	8006c1a <__smakebuf_r+0x1c>
 8006c0a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006c0e:	6023      	str	r3, [r4, #0]
 8006c10:	6123      	str	r3, [r4, #16]
 8006c12:	2301      	movs	r3, #1
 8006c14:	6163      	str	r3, [r4, #20]
 8006c16:	b003      	add	sp, #12
 8006c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c1a:	ab01      	add	r3, sp, #4
 8006c1c:	466a      	mov	r2, sp
 8006c1e:	f7ff ffc9 	bl	8006bb4 <__swhatbuf_r>
 8006c22:	9f00      	ldr	r7, [sp, #0]
 8006c24:	4605      	mov	r5, r0
 8006c26:	4630      	mov	r0, r6
 8006c28:	4639      	mov	r1, r7
 8006c2a:	f7fe feb9 	bl	80059a0 <_malloc_r>
 8006c2e:	b948      	cbnz	r0, 8006c44 <__smakebuf_r+0x46>
 8006c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c34:	059a      	lsls	r2, r3, #22
 8006c36:	d4ee      	bmi.n	8006c16 <__smakebuf_r+0x18>
 8006c38:	f023 0303 	bic.w	r3, r3, #3
 8006c3c:	f043 0302 	orr.w	r3, r3, #2
 8006c40:	81a3      	strh	r3, [r4, #12]
 8006c42:	e7e2      	b.n	8006c0a <__smakebuf_r+0xc>
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	6020      	str	r0, [r4, #0]
 8006c48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c4c:	81a3      	strh	r3, [r4, #12]
 8006c4e:	9b01      	ldr	r3, [sp, #4]
 8006c50:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c54:	b15b      	cbz	r3, 8006c6e <__smakebuf_r+0x70>
 8006c56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f000 f81e 	bl	8006c9c <_isatty_r>
 8006c60:	b128      	cbz	r0, 8006c6e <__smakebuf_r+0x70>
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	f023 0303 	bic.w	r3, r3, #3
 8006c68:	f043 0301 	orr.w	r3, r3, #1
 8006c6c:	81a3      	strh	r3, [r4, #12]
 8006c6e:	89a3      	ldrh	r3, [r4, #12]
 8006c70:	431d      	orrs	r5, r3
 8006c72:	81a5      	strh	r5, [r4, #12]
 8006c74:	e7cf      	b.n	8006c16 <__smakebuf_r+0x18>
	...

08006c78 <_fstat_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	4d06      	ldr	r5, [pc, #24]	@ (8006c98 <_fstat_r+0x20>)
 8006c7e:	4604      	mov	r4, r0
 8006c80:	4608      	mov	r0, r1
 8006c82:	4611      	mov	r1, r2
 8006c84:	602b      	str	r3, [r5, #0]
 8006c86:	f7fa fd25 	bl	80016d4 <_fstat>
 8006c8a:	1c43      	adds	r3, r0, #1
 8006c8c:	d102      	bne.n	8006c94 <_fstat_r+0x1c>
 8006c8e:	682b      	ldr	r3, [r5, #0]
 8006c90:	b103      	cbz	r3, 8006c94 <_fstat_r+0x1c>
 8006c92:	6023      	str	r3, [r4, #0]
 8006c94:	bd38      	pop	{r3, r4, r5, pc}
 8006c96:	bf00      	nop
 8006c98:	200003dc 	.word	0x200003dc

08006c9c <_isatty_r>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	4d05      	ldr	r5, [pc, #20]	@ (8006cb8 <_isatty_r+0x1c>)
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	4608      	mov	r0, r1
 8006ca6:	602b      	str	r3, [r5, #0]
 8006ca8:	f7fa fd24 	bl	80016f4 <_isatty>
 8006cac:	1c43      	adds	r3, r0, #1
 8006cae:	d102      	bne.n	8006cb6 <_isatty_r+0x1a>
 8006cb0:	682b      	ldr	r3, [r5, #0]
 8006cb2:	b103      	cbz	r3, 8006cb6 <_isatty_r+0x1a>
 8006cb4:	6023      	str	r3, [r4, #0]
 8006cb6:	bd38      	pop	{r3, r4, r5, pc}
 8006cb8:	200003dc 	.word	0x200003dc

08006cbc <_init>:
 8006cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cbe:	bf00      	nop
 8006cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cc2:	bc08      	pop	{r3}
 8006cc4:	469e      	mov	lr, r3
 8006cc6:	4770      	bx	lr

08006cc8 <_fini>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	bf00      	nop
 8006ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cce:	bc08      	pop	{r3}
 8006cd0:	469e      	mov	lr, r3
 8006cd2:	4770      	bx	lr
