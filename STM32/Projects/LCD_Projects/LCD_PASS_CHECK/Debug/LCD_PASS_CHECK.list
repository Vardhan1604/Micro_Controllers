
LCD_PASS_CHECK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000015c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bfc  0800015c  0800015c  0000115c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002d58  08002d58  00003d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dc0  08002dc0  0000403c  2**0
                  CONTENTS
  4 .ARM          00000008  08002dc0  08002dc0  00003dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dc8  08002dc8  0000403c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc8  08002dc8  00003dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002dcc  08002dcc  00003dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08002dd0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000003c  08002e0c  0000403c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002e0c  00004124  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca1f  00000000  00000000  00004072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf0  00000000  00000000  00010a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00012688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000781  00000000  00000000  00013060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020900  00000000  00000000  000137e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d201  00000000  00000000  000340e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccbb7  00000000  00000000  000412e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010de99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027ac  00000000  00000000  0010dedc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00110688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800015c <__do_global_dtors_aux>:
 800015c:	b510      	push	{r4, lr}
 800015e:	4c05      	ldr	r4, [pc, #20]	@ (8000174 <__do_global_dtors_aux+0x18>)
 8000160:	7823      	ldrb	r3, [r4, #0]
 8000162:	b933      	cbnz	r3, 8000172 <__do_global_dtors_aux+0x16>
 8000164:	4b04      	ldr	r3, [pc, #16]	@ (8000178 <__do_global_dtors_aux+0x1c>)
 8000166:	b113      	cbz	r3, 800016e <__do_global_dtors_aux+0x12>
 8000168:	4804      	ldr	r0, [pc, #16]	@ (800017c <__do_global_dtors_aux+0x20>)
 800016a:	f3af 8000 	nop.w
 800016e:	2301      	movs	r3, #1
 8000170:	7023      	strb	r3, [r4, #0]
 8000172:	bd10      	pop	{r4, pc}
 8000174:	2000003c 	.word	0x2000003c
 8000178:	00000000 	.word	0x00000000
 800017c:	08002d40 	.word	0x08002d40

08000180 <frame_dummy>:
 8000180:	b508      	push	{r3, lr}
 8000182:	4b03      	ldr	r3, [pc, #12]	@ (8000190 <frame_dummy+0x10>)
 8000184:	b11b      	cbz	r3, 800018e <frame_dummy+0xe>
 8000186:	4903      	ldr	r1, [pc, #12]	@ (8000194 <frame_dummy+0x14>)
 8000188:	4803      	ldr	r0, [pc, #12]	@ (8000198 <frame_dummy+0x18>)
 800018a:	f3af 8000 	nop.w
 800018e:	bd08      	pop	{r3, pc}
 8000190:	00000000 	.word	0x00000000
 8000194:	20000040 	.word	0x20000040
 8000198:	08002d40 	.word	0x08002d40

0800019c <__aeabi_uldivmod>:
 800019c:	b953      	cbnz	r3, 80001b4 <__aeabi_uldivmod+0x18>
 800019e:	b94a      	cbnz	r2, 80001b4 <__aeabi_uldivmod+0x18>
 80001a0:	2900      	cmp	r1, #0
 80001a2:	bf08      	it	eq
 80001a4:	2800      	cmpeq	r0, #0
 80001a6:	bf1c      	itt	ne
 80001a8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ac:	f04f 30ff 	movne.w	r0, #4294967295
 80001b0:	f000 b97e 	b.w	80004b0 <__aeabi_idiv0>
 80001b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001bc:	f000 f806 	bl	80001cc <__udivmoddi4>
 80001c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c8:	b004      	add	sp, #16
 80001ca:	4770      	bx	lr

080001cc <__udivmoddi4>:
 80001cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001d0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80001d2:	460c      	mov	r4, r1
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d14d      	bne.n	8000274 <__udivmoddi4+0xa8>
 80001d8:	428a      	cmp	r2, r1
 80001da:	460f      	mov	r7, r1
 80001dc:	4684      	mov	ip, r0
 80001de:	4696      	mov	lr, r2
 80001e0:	fab2 f382 	clz	r3, r2
 80001e4:	d960      	bls.n	80002a8 <__udivmoddi4+0xdc>
 80001e6:	b14b      	cbz	r3, 80001fc <__udivmoddi4+0x30>
 80001e8:	fa02 fe03 	lsl.w	lr, r2, r3
 80001ec:	f1c3 0220 	rsb	r2, r3, #32
 80001f0:	409f      	lsls	r7, r3
 80001f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80001f6:	fa20 f202 	lsr.w	r2, r0, r2
 80001fa:	4317      	orrs	r7, r2
 80001fc:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000200:	fa1f f48e 	uxth.w	r4, lr
 8000204:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000208:	fbb7 f1f6 	udiv	r1, r7, r6
 800020c:	fb06 7711 	mls	r7, r6, r1, r7
 8000210:	fb01 f004 	mul.w	r0, r1, r4
 8000214:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000218:	4290      	cmp	r0, r2
 800021a:	d908      	bls.n	800022e <__udivmoddi4+0x62>
 800021c:	eb1e 0202 	adds.w	r2, lr, r2
 8000220:	f101 37ff 	add.w	r7, r1, #4294967295
 8000224:	d202      	bcs.n	800022c <__udivmoddi4+0x60>
 8000226:	4290      	cmp	r0, r2
 8000228:	f200 812d 	bhi.w	8000486 <__udivmoddi4+0x2ba>
 800022c:	4639      	mov	r1, r7
 800022e:	1a12      	subs	r2, r2, r0
 8000230:	fa1f fc8c 	uxth.w	ip, ip
 8000234:	fbb2 f0f6 	udiv	r0, r2, r6
 8000238:	fb06 2210 	mls	r2, r6, r0, r2
 800023c:	fb00 f404 	mul.w	r4, r0, r4
 8000240:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000244:	4564      	cmp	r4, ip
 8000246:	d908      	bls.n	800025a <__udivmoddi4+0x8e>
 8000248:	eb1e 0c0c 	adds.w	ip, lr, ip
 800024c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000250:	d202      	bcs.n	8000258 <__udivmoddi4+0x8c>
 8000252:	4564      	cmp	r4, ip
 8000254:	f200 811a 	bhi.w	800048c <__udivmoddi4+0x2c0>
 8000258:	4610      	mov	r0, r2
 800025a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800025e:	ebac 0c04 	sub.w	ip, ip, r4
 8000262:	2100      	movs	r1, #0
 8000264:	b125      	cbz	r5, 8000270 <__udivmoddi4+0xa4>
 8000266:	fa2c f303 	lsr.w	r3, ip, r3
 800026a:	2200      	movs	r2, #0
 800026c:	e9c5 3200 	strd	r3, r2, [r5]
 8000270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000274:	428b      	cmp	r3, r1
 8000276:	d905      	bls.n	8000284 <__udivmoddi4+0xb8>
 8000278:	b10d      	cbz	r5, 800027e <__udivmoddi4+0xb2>
 800027a:	e9c5 0100 	strd	r0, r1, [r5]
 800027e:	2100      	movs	r1, #0
 8000280:	4608      	mov	r0, r1
 8000282:	e7f5      	b.n	8000270 <__udivmoddi4+0xa4>
 8000284:	fab3 f183 	clz	r1, r3
 8000288:	2900      	cmp	r1, #0
 800028a:	d14d      	bne.n	8000328 <__udivmoddi4+0x15c>
 800028c:	42a3      	cmp	r3, r4
 800028e:	f0c0 80f2 	bcc.w	8000476 <__udivmoddi4+0x2aa>
 8000292:	4290      	cmp	r0, r2
 8000294:	f080 80ef 	bcs.w	8000476 <__udivmoddi4+0x2aa>
 8000298:	4606      	mov	r6, r0
 800029a:	4623      	mov	r3, r4
 800029c:	4608      	mov	r0, r1
 800029e:	2d00      	cmp	r5, #0
 80002a0:	d0e6      	beq.n	8000270 <__udivmoddi4+0xa4>
 80002a2:	e9c5 6300 	strd	r6, r3, [r5]
 80002a6:	e7e3      	b.n	8000270 <__udivmoddi4+0xa4>
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	f040 80a2 	bne.w	80003f2 <__udivmoddi4+0x226>
 80002ae:	1a8a      	subs	r2, r1, r2
 80002b0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80002b4:	fa1f f68e 	uxth.w	r6, lr
 80002b8:	2101      	movs	r1, #1
 80002ba:	fbb2 f4f7 	udiv	r4, r2, r7
 80002be:	fb07 2014 	mls	r0, r7, r4, r2
 80002c2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002ca:	fb06 f004 	mul.w	r0, r6, r4
 80002ce:	4290      	cmp	r0, r2
 80002d0:	d90f      	bls.n	80002f2 <__udivmoddi4+0x126>
 80002d2:	eb1e 0202 	adds.w	r2, lr, r2
 80002d6:	f104 38ff 	add.w	r8, r4, #4294967295
 80002da:	bf2c      	ite	cs
 80002dc:	f04f 0901 	movcs.w	r9, #1
 80002e0:	f04f 0900 	movcc.w	r9, #0
 80002e4:	4290      	cmp	r0, r2
 80002e6:	d903      	bls.n	80002f0 <__udivmoddi4+0x124>
 80002e8:	f1b9 0f00 	cmp.w	r9, #0
 80002ec:	f000 80c8 	beq.w	8000480 <__udivmoddi4+0x2b4>
 80002f0:	4644      	mov	r4, r8
 80002f2:	1a12      	subs	r2, r2, r0
 80002f4:	fa1f fc8c 	uxth.w	ip, ip
 80002f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000300:	fb00 f606 	mul.w	r6, r0, r6
 8000304:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000308:	4566      	cmp	r6, ip
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x152>
 800030c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000310:	f100 32ff 	add.w	r2, r0, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x150>
 8000316:	4566      	cmp	r6, ip
 8000318:	f200 80bb 	bhi.w	8000492 <__udivmoddi4+0x2c6>
 800031c:	4610      	mov	r0, r2
 800031e:	ebac 0c06 	sub.w	ip, ip, r6
 8000322:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000326:	e79d      	b.n	8000264 <__udivmoddi4+0x98>
 8000328:	f1c1 0620 	rsb	r6, r1, #32
 800032c:	408b      	lsls	r3, r1
 800032e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000332:	fa22 f706 	lsr.w	r7, r2, r6
 8000336:	fa20 fc06 	lsr.w	ip, r0, r6
 800033a:	40f4      	lsrs	r4, r6
 800033c:	408a      	lsls	r2, r1
 800033e:	431f      	orrs	r7, r3
 8000340:	ea4e 030c 	orr.w	r3, lr, ip
 8000344:	fa00 fe01 	lsl.w	lr, r0, r1
 8000348:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000350:	fa1f fc87 	uxth.w	ip, r7
 8000354:	fbb4 f0f8 	udiv	r0, r4, r8
 8000358:	fb08 4410 	mls	r4, r8, r0, r4
 800035c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000360:	fb00 f90c 	mul.w	r9, r0, ip
 8000364:	45a1      	cmp	r9, r4
 8000366:	d90e      	bls.n	8000386 <__udivmoddi4+0x1ba>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 3aff 	add.w	sl, r0, #4294967295
 800036e:	bf2c      	ite	cs
 8000370:	f04f 0b01 	movcs.w	fp, #1
 8000374:	f04f 0b00 	movcc.w	fp, #0
 8000378:	45a1      	cmp	r9, r4
 800037a:	d903      	bls.n	8000384 <__udivmoddi4+0x1b8>
 800037c:	f1bb 0f00 	cmp.w	fp, #0
 8000380:	f000 8093 	beq.w	80004aa <__udivmoddi4+0x2de>
 8000384:	4650      	mov	r0, sl
 8000386:	eba4 0409 	sub.w	r4, r4, r9
 800038a:	fa1f f983 	uxth.w	r9, r3
 800038e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000392:	fb08 4413 	mls	r4, r8, r3, r4
 8000396:	fb03 fc0c 	mul.w	ip, r3, ip
 800039a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039e:	45a4      	cmp	ip, r4
 80003a0:	d906      	bls.n	80003b0 <__udivmoddi4+0x1e4>
 80003a2:	193c      	adds	r4, r7, r4
 80003a4:	f103 38ff 	add.w	r8, r3, #4294967295
 80003a8:	d201      	bcs.n	80003ae <__udivmoddi4+0x1e2>
 80003aa:	45a4      	cmp	ip, r4
 80003ac:	d87a      	bhi.n	80004a4 <__udivmoddi4+0x2d8>
 80003ae:	4643      	mov	r3, r8
 80003b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003b4:	eba4 040c 	sub.w	r4, r4, ip
 80003b8:	fba0 9802 	umull	r9, r8, r0, r2
 80003bc:	4544      	cmp	r4, r8
 80003be:	46cc      	mov	ip, r9
 80003c0:	4643      	mov	r3, r8
 80003c2:	d302      	bcc.n	80003ca <__udivmoddi4+0x1fe>
 80003c4:	d106      	bne.n	80003d4 <__udivmoddi4+0x208>
 80003c6:	45ce      	cmp	lr, r9
 80003c8:	d204      	bcs.n	80003d4 <__udivmoddi4+0x208>
 80003ca:	3801      	subs	r0, #1
 80003cc:	ebb9 0c02 	subs.w	ip, r9, r2
 80003d0:	eb68 0307 	sbc.w	r3, r8, r7
 80003d4:	b15d      	cbz	r5, 80003ee <__udivmoddi4+0x222>
 80003d6:	ebbe 020c 	subs.w	r2, lr, ip
 80003da:	eb64 0403 	sbc.w	r4, r4, r3
 80003de:	fa04 f606 	lsl.w	r6, r4, r6
 80003e2:	fa22 f301 	lsr.w	r3, r2, r1
 80003e6:	40cc      	lsrs	r4, r1
 80003e8:	431e      	orrs	r6, r3
 80003ea:	e9c5 6400 	strd	r6, r4, [r5]
 80003ee:	2100      	movs	r1, #0
 80003f0:	e73e      	b.n	8000270 <__udivmoddi4+0xa4>
 80003f2:	fa02 fe03 	lsl.w	lr, r2, r3
 80003f6:	f1c3 0120 	rsb	r1, r3, #32
 80003fa:	fa04 f203 	lsl.w	r2, r4, r3
 80003fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000408:	fa20 f101 	lsr.w	r1, r0, r1
 800040c:	fa1f f68e 	uxth.w	r6, lr
 8000410:	fbb4 f0f7 	udiv	r0, r4, r7
 8000414:	430a      	orrs	r2, r1
 8000416:	fb07 4410 	mls	r4, r7, r0, r4
 800041a:	0c11      	lsrs	r1, r2, #16
 800041c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000420:	fb00 f406 	mul.w	r4, r0, r6
 8000424:	428c      	cmp	r4, r1
 8000426:	d90e      	bls.n	8000446 <__udivmoddi4+0x27a>
 8000428:	eb1e 0101 	adds.w	r1, lr, r1
 800042c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000430:	bf2c      	ite	cs
 8000432:	f04f 0901 	movcs.w	r9, #1
 8000436:	f04f 0900 	movcc.w	r9, #0
 800043a:	428c      	cmp	r4, r1
 800043c:	d902      	bls.n	8000444 <__udivmoddi4+0x278>
 800043e:	f1b9 0f00 	cmp.w	r9, #0
 8000442:	d02c      	beq.n	800049e <__udivmoddi4+0x2d2>
 8000444:	4640      	mov	r0, r8
 8000446:	1b09      	subs	r1, r1, r4
 8000448:	b292      	uxth	r2, r2
 800044a:	fbb1 f4f7 	udiv	r4, r1, r7
 800044e:	fb07 1114 	mls	r1, r7, r4, r1
 8000452:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000456:	fb04 f106 	mul.w	r1, r4, r6
 800045a:	4291      	cmp	r1, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x2a2>
 800045e:	eb1e 0202 	adds.w	r2, lr, r2
 8000462:	f104 38ff 	add.w	r8, r4, #4294967295
 8000466:	d201      	bcs.n	800046c <__udivmoddi4+0x2a0>
 8000468:	4291      	cmp	r1, r2
 800046a:	d815      	bhi.n	8000498 <__udivmoddi4+0x2cc>
 800046c:	4644      	mov	r4, r8
 800046e:	1a52      	subs	r2, r2, r1
 8000470:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000474:	e721      	b.n	80002ba <__udivmoddi4+0xee>
 8000476:	1a86      	subs	r6, r0, r2
 8000478:	eb64 0303 	sbc.w	r3, r4, r3
 800047c:	2001      	movs	r0, #1
 800047e:	e70e      	b.n	800029e <__udivmoddi4+0xd2>
 8000480:	3c02      	subs	r4, #2
 8000482:	4472      	add	r2, lr
 8000484:	e735      	b.n	80002f2 <__udivmoddi4+0x126>
 8000486:	3902      	subs	r1, #2
 8000488:	4472      	add	r2, lr
 800048a:	e6d0      	b.n	800022e <__udivmoddi4+0x62>
 800048c:	44f4      	add	ip, lr
 800048e:	3802      	subs	r0, #2
 8000490:	e6e3      	b.n	800025a <__udivmoddi4+0x8e>
 8000492:	44f4      	add	ip, lr
 8000494:	3802      	subs	r0, #2
 8000496:	e742      	b.n	800031e <__udivmoddi4+0x152>
 8000498:	3c02      	subs	r4, #2
 800049a:	4472      	add	r2, lr
 800049c:	e7e7      	b.n	800046e <__udivmoddi4+0x2a2>
 800049e:	3802      	subs	r0, #2
 80004a0:	4471      	add	r1, lr
 80004a2:	e7d0      	b.n	8000446 <__udivmoddi4+0x27a>
 80004a4:	3b02      	subs	r3, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	e782      	b.n	80003b0 <__udivmoddi4+0x1e4>
 80004aa:	3802      	subs	r0, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	e76a      	b.n	8000386 <__udivmoddi4+0x1ba>

080004b0 <__aeabi_idiv0>:
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop

080004b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b8:	f000 fc48 	bl	8000d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004bc:	f000 f838 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c0:	f000 f894 	bl	80005ec <MX_GPIO_Init>
  MX_ICACHE_Init();
 80004c4:	f000 f87e 	bl	80005c4 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80004c8:	2000      	movs	r0, #0
 80004ca:	f000 fa1d 	bl	8000908 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80004ce:	2001      	movs	r0, #1
 80004d0:	f000 fa1a 	bl	8000908 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80004d4:	2002      	movs	r0, #2
 80004d6:	f000 fa17 	bl	8000908 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(B1, BUTTON_MODE_EXTI);
 80004da:	2101      	movs	r1, #1
 80004dc:	2000      	movs	r0, #0
 80004de:	f000 fa79 	bl	80009d4 <BSP_PB_Init>
  BSP_PB_Init(B2, BUTTON_MODE_EXTI);
 80004e2:	2101      	movs	r1, #1
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fa75 	bl	80009d4 <BSP_PB_Init>
  BSP_PB_Init(B3, BUTTON_MODE_EXTI);
 80004ea:	2101      	movs	r1, #1
 80004ec:	2002      	movs	r0, #2
 80004ee:	f000 fa71 	bl	80009d4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80004f2:	4b0e      	ldr	r3, [pc, #56]	@ (800052c <main+0x78>)
 80004f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004f8:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80004fa:	4b0c      	ldr	r3, [pc, #48]	@ (800052c <main+0x78>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000500:	4b0a      	ldr	r3, [pc, #40]	@ (800052c <main+0x78>)
 8000502:	2200      	movs	r2, #0
 8000504:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000506:	4b09      	ldr	r3, [pc, #36]	@ (800052c <main+0x78>)
 8000508:	2200      	movs	r2, #0
 800050a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800050c:	4b07      	ldr	r3, [pc, #28]	@ (800052c <main+0x78>)
 800050e:	2200      	movs	r2, #0
 8000510:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000512:	4906      	ldr	r1, [pc, #24]	@ (800052c <main+0x78>)
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fb3b 	bl	8000b90 <BSP_COM_Init>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d002      	beq.n	8000526 <main+0x72>
  {
    Error_Handler();
 8000520:	f000 f8a2 	bl	8000668 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	bf00      	nop
 8000526:	bf00      	nop
 8000528:	e7fd      	b.n	8000526 <main+0x72>
 800052a:	bf00      	nop
 800052c:	20000058 	.word	0x20000058

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b098      	sub	sp, #96	@ 0x60
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2240      	movs	r2, #64	@ 0x40
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f002 fbd1 	bl	8002ce6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2220      	movs	r2, #32
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f002 fbcb 	bl	8002ce6 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000550:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000554:	f001 f826 	bl	80015a4 <HAL_PWREx_ControlVoltageScaling>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800055e:	f000 f883 	bl	8000668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000562:	2302      	movs	r3, #2
 8000564:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000566:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800056a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056c:	2310      	movs	r3, #16
 800056e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_NONE;
 8000570:	2300      	movs	r3, #0
 8000572:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0320 	add.w	r3, r7, #32
 8000578:	4618      	mov	r0, r3
 800057a:	f001 f871 	bl	8001660 <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000584:	f000 f870 	bl	8000668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	233f      	movs	r3, #63	@ 0x3f
 800058a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK7|RCC_CLOCKTYPE_HCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB7CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHB5_PLL1_CLKDivider = RCC_SYSCLK_PLL1_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHB5_HSEHSI_CLKDivider = RCC_SYSCLK_HSEHSI_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a8:	463b      	mov	r3, r7
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fc41 	bl	8001e34 <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005b8:	f000 f856 	bl	8000668 <Error_Handler>
  }
}
 80005bc:	bf00      	nop
 80005be:	3760      	adds	r7, #96	@ 0x60
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 ffbb 	bl	8001544 <HAL_ICACHE_ConfigAssociativityMode>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80005d4:	f000 f848 	bl	8000668 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80005d8:	f000 ffd4 	bl	8001584 <HAL_ICACHE_Enable>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80005e2:	f000 f841 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b17      	ldr	r3, [pc, #92]	@ (8000660 <MX_GPIO_Init+0x74>)
 8000604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000608:	4a15      	ldr	r2, [pc, #84]	@ (8000660 <MX_GPIO_Init+0x74>)
 800060a:	f043 0304 	orr.w	r3, r3, #4
 800060e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000612:	4b13      	ldr	r3, [pc, #76]	@ (8000660 <MX_GPIO_Init+0x74>)
 8000614:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <MX_GPIO_Init+0x74>)
 8000622:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000626:	4a0e      	ldr	r2, [pc, #56]	@ (8000660 <MX_GPIO_Init+0x74>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000630:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <MX_GPIO_Init+0x74>)
 8000632:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800063e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000642:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	4619      	mov	r1, r3
 8000652:	4804      	ldr	r0, [pc, #16]	@ (8000664 <MX_GPIO_Init+0x78>)
 8000654:	f000 fdd6 	bl	8001204 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000658:	bf00      	nop
 800065a:	3720      	adds	r7, #32
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	46020c00 	.word	0x46020c00
 8000664:	42020800 	.word	0x42020800

08000668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066c:	b672      	cpsid	i
}
 800066e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <Error_Handler+0x8>

08000674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800067a:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <HAL_MspInit+0x30>)
 800067c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000680:	4a08      	ldr	r2, [pc, #32]	@ (80006a4 <HAL_MspInit+0x30>)
 8000682:	f043 0304 	orr.w	r3, r3, #4
 8000686:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <HAL_MspInit+0x30>)
 800068c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000690:	f003 0304 	and.w	r3, r3, #4
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	46020c00 	.word	0x46020c00

080006a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <NMI_Handler+0x4>

080006b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <HardFault_Handler+0x4>

080006b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <MemManage_Handler+0x4>

080006c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <BusFault_Handler+0x4>

080006c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <UsageFault_Handler+0x4>

080006d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006fe:	f000 fbc3 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}

08000706 <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_PIN);
 800070a:	2040      	movs	r0, #64	@ 0x40
 800070c:	f000 fede 	bl	80014cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_PIN);
 8000718:	2080      	movs	r0, #128	@ 0x80
 800071a:	f000 fed7 	bl	80014cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}

08000722 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_PIN);
 8000726:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800072a:	f000 fecf 	bl	80014cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  __IO uint32_t tmpreg;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <SystemInit+0x20>)
 800073a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800073e:	4a05      	ldr	r2, [pc, #20]	@ (8000754 <SystemInit+0x20>)
 8000740:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000744:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  CLEAR_BIT(ADC4->CR, ADC_CR_ADVREGEN);

  /* Disable ADC kernel clock */
  CLEAR_BIT(RCC->AHB4ENR, RCC_AHB4ENR_ADC4EN);
#endif
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b089      	sub	sp, #36	@ 0x24
 800075c:	af00      	add	r7, sp, #0
  uint32_t plln;
  float_t fracn;
  float_t pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 800075e:	4b4f      	ldr	r3, [pc, #316]	@ (800089c <SystemCoreClockUpdate+0x144>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	f003 030c 	and.w	r3, r3, #12
 8000766:	2b08      	cmp	r3, #8
 8000768:	d002      	beq.n	8000770 <SystemCoreClockUpdate+0x18>
 800076a:	2b0c      	cmp	r3, #12
 800076c:	d00b      	beq.n	8000786 <SystemCoreClockUpdate+0x2e>
 800076e:	e07d      	b.n	800086c <SystemCoreClockUpdate+0x114>
  {
    case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
      SystemCoreClock = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8000770:	4b4a      	ldr	r3, [pc, #296]	@ (800089c <SystemCoreClockUpdate+0x144>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	0d1b      	lsrs	r3, r3, #20
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	4a49      	ldr	r2, [pc, #292]	@ (80008a0 <SystemCoreClockUpdate+0x148>)
 800077c:	fa22 f303 	lsr.w	r3, r2, r3
 8000780:	4a48      	ldr	r2, [pc, #288]	@ (80008a4 <SystemCoreClockUpdate+0x14c>)
 8000782:	6013      	str	r3, [r2, #0]
      break;
 8000784:	e076      	b.n	8000874 <SystemCoreClockUpdate+0x11c>

    case (RCC_CFGR1_SWS_0 | RCC_CFGR1_SWS_1):  /* PLL1 used as system clock source */
      /* PLL_VCO = (PLLsource / PLLM) * PLLN * FractionnalPart
          SYSCLK = PLL_VCO / PLLR */
      /* Get PLL1 CFGR and DIVR register values */
      tmp1 = RCC->PLL1CFGR;
 8000786:	4b45      	ldr	r3, [pc, #276]	@ (800089c <SystemCoreClockUpdate+0x144>)
 8000788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800078a:	61fb      	str	r3, [r7, #28]
      tmp2 = RCC->PLL1DIVR;
 800078c:	4b43      	ldr	r3, [pc, #268]	@ (800089c <SystemCoreClockUpdate+0x144>)
 800078e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000790:	617b      	str	r3, [r7, #20]

      /* Retrieve PLL1 multiplication factor and divider */
      pllm = ((tmp1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	0a1b      	lsrs	r3, r3, #8
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	3301      	adds	r3, #1
 800079c:	613b      	str	r3, [r7, #16]
      plln = (tmp2 & RCC_PLL1DIVR_PLL1N) + 1U;
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80007a4:	3301      	adds	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
      pllr = ((tmp2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	0e1b      	lsrs	r3, r3, #24
 80007ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80007b0:	3301      	adds	r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]

      /* Check if fractional part is enable */
      if ((tmp1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f003 0310 	and.w	r3, r3, #16
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d00b      	beq.n	80007d6 <SystemCoreClockUpdate+0x7e>
      {
        fracn = (float_t)((uint32_t)((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80007be:	4b37      	ldr	r3, [pc, #220]	@ (800089c <SystemCoreClockUpdate+0x144>)
 80007c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007c2:	08db      	lsrs	r3, r3, #3
 80007c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80007c8:	ee07 3a90 	vmov	s15, r3
 80007cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007d0:	edc7 7a06 	vstr	s15, [r7, #24]
 80007d4:	e002      	b.n	80007dc <SystemCoreClockUpdate+0x84>
      }
      else
      {
        fracn = (float_t)0U;
 80007d6:	f04f 0300 	mov.w	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
      }

      /* determine PLL source */
      pllsource = (tmp1 & RCC_PLL1CFGR_PLL1SRC);
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	f003 0303 	and.w	r3, r3, #3
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d003      	beq.n	80007f2 <SystemCoreClockUpdate+0x9a>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b03      	cmp	r3, #3
 80007ee:	d003      	beq.n	80007f8 <SystemCoreClockUpdate+0xa0>
 80007f0:	e00c      	b.n	800080c <SystemCoreClockUpdate+0xb4>
      switch (pllsource)
      {
        /* HSI used as PLL1 clock source */
        case RCC_PLL1CFGR_PLL1SRC_1:
          tmp1 = HSI_VALUE;
 80007f2:	4b2d      	ldr	r3, [pc, #180]	@ (80008a8 <SystemCoreClockUpdate+0x150>)
 80007f4:	61fb      	str	r3, [r7, #28]
          break;
 80007f6:	e00c      	b.n	8000812 <SystemCoreClockUpdate+0xba>

        /* HSE used as PLL1 clock source */
        case (RCC_PLL1CFGR_PLL1SRC_0 | RCC_PLL1CFGR_PLL1SRC_1):
          tmp1 = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 80007f8:	4b28      	ldr	r3, [pc, #160]	@ (800089c <SystemCoreClockUpdate+0x144>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	0d1b      	lsrs	r3, r3, #20
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	4a27      	ldr	r2, [pc, #156]	@ (80008a0 <SystemCoreClockUpdate+0x148>)
 8000804:	fa22 f303 	lsr.w	r3, r2, r3
 8000808:	61fb      	str	r3, [r7, #28]
          break;
 800080a:	e002      	b.n	8000812 <SystemCoreClockUpdate+0xba>

        default:
          tmp1 = 0U;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
          break;
 8000810:	bf00      	nop
      }

      /* Compute VCO output frequency */
      pllvco = ((float_t) tmp1 / (float_t)pllm) * (((float_t)plln + (float_t)(fracn / (float_t)0x2000U)));
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	ee07 3a90 	vmov	s15, r3
 8000818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	ee07 3a90 	vmov	s15, r3
 8000822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	ee07 3a90 	vmov	s15, r3
 8000830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000834:	ed97 6a06 	vldr	s12, [r7, #24]
 8000838:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80008ac <SystemCoreClockUpdate+0x154>
 800083c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000840:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000848:	edc7 7a00 	vstr	s15, [r7]
      SystemCoreClock = (uint32_t)((float_t)(pllvco / (float_t)pllr));
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	ee07 3a90 	vmov	s15, r3
 8000852:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000856:	edd7 6a00 	vldr	s13, [r7]
 800085a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800085e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000862:	ee17 2a90 	vmov	r2, s15
 8000866:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <SystemCoreClockUpdate+0x14c>)
 8000868:	601a      	str	r2, [r3, #0]
      break;
 800086a:	e003      	b.n	8000874 <SystemCoreClockUpdate+0x11c>

    case 0x00u:  /* HSI used as system clock source */
    default:
      SystemCoreClock = HSI_VALUE;
 800086c:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <SystemCoreClockUpdate+0x14c>)
 800086e:	4a0e      	ldr	r2, [pc, #56]	@ (80008a8 <SystemCoreClockUpdate+0x150>)
 8000870:	601a      	str	r2, [r3, #0]
      break;
 8000872:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp1 = AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)];
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <SystemCoreClockUpdate+0x144>)
 8000876:	6a1b      	ldr	r3, [r3, #32]
 8000878:	f003 0307 	and.w	r3, r3, #7
 800087c:	4a0c      	ldr	r2, [pc, #48]	@ (80008b0 <SystemCoreClockUpdate+0x158>)
 800087e:	5cd3      	ldrb	r3, [r2, r3]
 8000880:	61fb      	str	r3, [r7, #28]

  /* HCLK clock frequency */
  SystemCoreClock >>= tmp1;
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <SystemCoreClockUpdate+0x14c>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	fa22 f303 	lsr.w	r3, r2, r3
 800088c:	4a05      	ldr	r2, [pc, #20]	@ (80008a4 <SystemCoreClockUpdate+0x14c>)
 800088e:	6013      	str	r3, [r2, #0]
}
 8000890:	bf00      	nop
 8000892:	3724      	adds	r7, #36	@ 0x24
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	46020c00 	.word	0x46020c00
 80008a0:	01e84800 	.word	0x01e84800
 80008a4:	20000000 	.word	0x20000000
 80008a8:	00f42400 	.word	0x00f42400
 80008ac:	46000000 	.word	0x46000000
 80008b0:	08002d98 	.word	0x08002d98

080008b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80008b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008b8:	f7ff ff3c 	bl	8000734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80008bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80008be:	e003      	b.n	80008c8 <LoopCopyDataInit>

080008c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80008c0:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80008c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80008c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80008c6:	3104      	adds	r1, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80008c8:	480a      	ldr	r0, [pc, #40]	@ (80008f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80008cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80008ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80008d0:	d3f6      	bcc.n	80008c0 <CopyDataInit>
	ldr	r2, =_sbss
 80008d2:	4a0a      	ldr	r2, [pc, #40]	@ (80008fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80008d4:	e002      	b.n	80008dc <LoopFillZerobss>

080008d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80008d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80008d8:	f842 3b04 	str.w	r3, [r2], #4

080008dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80008dc:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <LoopForever+0x16>)
	cmp	r2, r3
 80008de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80008e0:	d3f9      	bcc.n	80008d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008e2:	f002 fa09 	bl	8002cf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008e6:	f7ff fde5 	bl	80004b4 <main>

080008ea <LoopForever>:

LoopForever:
    b LoopForever
 80008ea:	e7fe      	b.n	80008ea <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80008ec:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 80008f0:	08002dd0 	.word	0x08002dd0
	ldr	r0, =_sdata
 80008f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80008f8:	2000003c 	.word	0x2000003c
	ldr	r2, =_sbss
 80008fc:	2000003c 	.word	0x2000003c
	ldr	r3, = _ebss
 8000900:	20000124 	.word	0x20000124

08000904 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC4_IRQHandler>
	...

08000908 <BSP_LED_Init>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LD1)
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d10f      	bne.n	8000938 <BSP_LED_Init+0x30>
  {
    LD1_GPIO_CLK_ENABLE();
 8000918:	4b2b      	ldr	r3, [pc, #172]	@ (80009c8 <BSP_LED_Init+0xc0>)
 800091a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800091e:	4a2a      	ldr	r2, [pc, #168]	@ (80009c8 <BSP_LED_Init+0xc0>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000928:	4b27      	ldr	r3, [pc, #156]	@ (80009c8 <BSP_LED_Init+0xc0>)
 800092a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	e021      	b.n	800097c <BSP_LED_Init+0x74>
  }
  else if (Led == LD2)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d10f      	bne.n	800095e <BSP_LED_Init+0x56>
  {
    LD2_GPIO_CLK_ENABLE();
 800093e:	4b22      	ldr	r3, [pc, #136]	@ (80009c8 <BSP_LED_Init+0xc0>)
 8000940:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000944:	4a20      	ldr	r2, [pc, #128]	@ (80009c8 <BSP_LED_Init+0xc0>)
 8000946:	f043 0302 	orr.w	r3, r3, #2
 800094a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800094e:	4b1e      	ldr	r3, [pc, #120]	@ (80009c8 <BSP_LED_Init+0xc0>)
 8000950:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000954:	f003 0302 	and.w	r3, r3, #2
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	e00e      	b.n	800097c <BSP_LED_Init+0x74>
  }
  else /* Led = LD3 */
  {
    LD3_GPIO_CLK_ENABLE();
 800095e:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <BSP_LED_Init+0xc0>)
 8000960:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000964:	4a18      	ldr	r2, [pc, #96]	@ (80009c8 <BSP_LED_Init+0xc0>)
 8000966:	f043 0302 	orr.w	r3, r3, #2
 800096a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800096e:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <BSP_LED_Init+0xc0>)
 8000970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000974:	f003 0302 	and.w	r3, r3, #2
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4a13      	ldr	r2, [pc, #76]	@ (80009cc <BSP_LED_Init+0xc4>)
 8000980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000984:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 800098a:	2301      	movs	r3, #1
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 800098e:	2302      	movs	r3, #2
 8000990:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	4a0e      	ldr	r2, [pc, #56]	@ (80009d0 <BSP_LED_Init+0xc8>)
 8000996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099a:	f107 0214 	add.w	r2, r7, #20
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 fc2f 	bl	8001204 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4a09      	ldr	r2, [pc, #36]	@ (80009d0 <BSP_LED_Init+0xc8>)
 80009aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	4a06      	ldr	r2, [pc, #24]	@ (80009cc <BSP_LED_Init+0xc4>)
 80009b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009b6:	2201      	movs	r2, #1
 80009b8:	4619      	mov	r1, r3
 80009ba:	f000 fd6f 	bl	800149c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3728      	adds	r7, #40	@ 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	46020c00 	.word	0x46020c00
 80009cc:	20000004 	.word	0x20000004
 80009d0:	2000000c 	.word	0x2000000c

080009d4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code.
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	@ 0x50
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	460a      	mov	r2, r1
 80009de:	71fb      	strb	r3, [r7, #7]
 80009e0:	4613      	mov	r3, r2
 80009e2:	71bb      	strb	r3, [r7, #6]
  int32_t               status = BSP_ERROR_NONE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_B1_IT_PRIORITY,
 80009e8:	4a5b      	ldr	r2, [pc, #364]	@ (8000b58 <BSP_PB_Init+0x184>)
 80009ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80009f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                                       BSP_B2_IT_PRIORITY,
                                                       BSP_B3_IT_PRIORITY};
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {B1_EXTI_LINE, B2_EXTI_LINE, B3_EXTI_LINE};
 80009f4:	4a59      	ldr	r2, [pc, #356]	@ (8000b5c <BSP_PB_Init+0x188>)
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80009fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  BSP_EXTI_LineCallback ButtonCallback[BUTTONn]     = {B1_EXTI_Callback,
 8000a00:	4a57      	ldr	r2, [pc, #348]	@ (8000b60 <BSP_PB_Init+0x18c>)
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                                       B2_EXTI_Callback,
                                                       B3_EXTI_Callback};

  /* Enable the BUTTON clock */
  if (Button == B1)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d10f      	bne.n	8000a32 <BSP_PB_Init+0x5e>
  {
    B1_GPIO_CLK_ENABLE();
 8000a12:	4b54      	ldr	r3, [pc, #336]	@ (8000b64 <BSP_PB_Init+0x190>)
 8000a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a18:	4a52      	ldr	r2, [pc, #328]	@ (8000b64 <BSP_PB_Init+0x190>)
 8000a1a:	f043 0304 	orr.w	r3, r3, #4
 8000a1e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a22:	4b50      	ldr	r3, [pc, #320]	@ (8000b64 <BSP_PB_Init+0x190>)
 8000a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	e021      	b.n	8000a76 <BSP_PB_Init+0xa2>
  }
  else if (Button == B2)
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d10f      	bne.n	8000a58 <BSP_PB_Init+0x84>
  {
    B2_GPIO_CLK_ENABLE();
 8000a38:	4b4a      	ldr	r3, [pc, #296]	@ (8000b64 <BSP_PB_Init+0x190>)
 8000a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a3e:	4a49      	ldr	r2, [pc, #292]	@ (8000b64 <BSP_PB_Init+0x190>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a48:	4b46      	ldr	r3, [pc, #280]	@ (8000b64 <BSP_PB_Init+0x190>)
 8000a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	e00e      	b.n	8000a76 <BSP_PB_Init+0xa2>
  }
  else /* B3 */
  {
    B3_GPIO_CLK_ENABLE();
 8000a58:	4b42      	ldr	r3, [pc, #264]	@ (8000b64 <BSP_PB_Init+0x190>)
 8000a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a5e:	4a41      	ldr	r2, [pc, #260]	@ (8000b64 <BSP_PB_Init+0x190>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a68:	4b3e      	ldr	r3, [pc, #248]	@ (8000b64 <BSP_PB_Init+0x190>)
 8000a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  }

  GPIO_Init.Pin   = BUTTON_PIN[Button];
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	4a3b      	ldr	r2, [pc, #236]	@ (8000b68 <BSP_PB_Init+0x194>)
 8000a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_Init.Pull  = GPIO_PULLUP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a84:	2302      	movs	r3, #2
 8000a86:	647b      	str	r3, [r7, #68]	@ 0x44

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000a88:	79bb      	ldrb	r3, [r7, #6]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d10b      	bne.n	8000aa6 <BSP_PB_Init+0xd2>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	4a35      	ldr	r2, [pc, #212]	@ (8000b6c <BSP_PB_Init+0x198>)
 8000a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fbaf 	bl	8001204 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8000aa6:	79bb      	ldrb	r3, [r7, #6]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d14f      	bne.n	8000b4c <BSP_PB_Init+0x178>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
 8000aac:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	4a2d      	ldr	r2, [pc, #180]	@ (8000b6c <BSP_PB_Init+0x198>)
 8000ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aba:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 fb9f 	bl	8001204 <HAL_GPIO_Init>

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 8000ac6:	79fa      	ldrb	r2, [r7, #7]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	4413      	add	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4a27      	ldr	r2, [pc, #156]	@ (8000b70 <BSP_PB_Init+0x19c>)
 8000ad2:	441a      	add	r2, r3
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	3350      	adds	r3, #80	@ 0x50
 8000ada:	443b      	add	r3, r7
 8000adc:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	f000 fb7a 	bl	80011dc <HAL_EXTI_GetHandle>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d12b      	bne.n	8000b46 <BSP_PB_Init+0x172>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_FALLING_CB_ID, ButtonCallback[Button]) == HAL_OK)
 8000aee:	79fa      	ldrb	r2, [r7, #7]
 8000af0:	4613      	mov	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	4413      	add	r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b70 <BSP_PB_Init+0x19c>)
 8000afa:	1898      	adds	r0, r3, r2
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	3350      	adds	r3, #80	@ 0x50
 8000b02:	443b      	add	r3, r7
 8000b04:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	f000 fb3a 	bl	8001184 <HAL_EXTI_RegisterCallback>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d113      	bne.n	8000b3e <BSP_PB_Init+0x16a>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], BSP_BUTTON_IT_PRIO[Button], 0x00);
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	4a16      	ldr	r2, [pc, #88]	@ (8000b74 <BSP_PB_Init+0x1a0>)
 8000b1a:	56d0      	ldrsb	r0, [r2, r3]
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	3350      	adds	r3, #80	@ 0x50
 8000b22:	443b      	add	r3, r7
 8000b24:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f000 fa84 	bl	8001038 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	4a10      	ldr	r2, [pc, #64]	@ (8000b74 <BSP_PB_Init+0x1a0>)
 8000b34:	56d3      	ldrsb	r3, [r2, r3]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 fa9b 	bl	8001072 <HAL_NVIC_EnableIRQ>
 8000b3c:	e006      	b.n	8000b4c <BSP_PB_Init+0x178>
      }
      else
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8000b3e:	f06f 0303 	mvn.w	r3, #3
 8000b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000b44:	e002      	b.n	8000b4c <BSP_PB_Init+0x178>
      }
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8000b46:	f06f 0303 	mvn.w	r3, #3
 8000b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return status;
 8000b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3750      	adds	r7, #80	@ 0x50
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	08002d74 	.word	0x08002d74
 8000b5c:	08002d80 	.word	0x08002d80
 8000b60:	08002d8c 	.word	0x08002d8c
 8000b64:	46020c00 	.word	0x46020c00
 8000b68:	20000018 	.word	0x20000018
 8000b6c:	20000020 	.word	0x20000020
 8000b70:	200000fc 	.word	0x200000fc
 8000b74:	2000002c 	.word	0x2000002c

08000b78 <BSP_PB_Callback>:
  *     @arg B2
  *     @arg B3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code.
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d103      	bne.n	8000bae <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8000ba6:	f06f 0301 	mvn.w	r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	e026      	b.n	8000bfc <BSP_COM_Init+0x6c>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
 8000bae:	79fa      	ldrb	r2, [r7, #7]
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	4915      	ldr	r1, [pc, #84]	@ (8000c08 <BSP_COM_Init+0x78>)
 8000bb4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000bb8:	4914      	ldr	r1, [pc, #80]	@ (8000c0c <BSP_COM_Init+0x7c>)
 8000bba:	2094      	movs	r0, #148	@ 0x94
 8000bbc:	fb00 f303 	mul.w	r3, r0, r3
 8000bc0:	440b      	add	r3, r1
 8000bc2:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2294      	movs	r2, #148	@ 0x94
 8000bc8:	fb02 f303 	mul.w	r3, r2, r3
 8000bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8000c0c <BSP_COM_Init+0x7c>)
 8000bce:	4413      	add	r3, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 f863 	bl	8000c9c <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d10f      	bne.n	8000bfc <BSP_COM_Init+0x6c>
    {
      if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2294      	movs	r2, #148	@ 0x94
 8000be0:	fb02 f303 	mul.w	r3, r2, r3
 8000be4:	4a09      	ldr	r2, [pc, #36]	@ (8000c0c <BSP_COM_Init+0x7c>)
 8000be6:	4413      	add	r3, r2
 8000be8:	6839      	ldr	r1, [r7, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f810 	bl	8000c10 <MX_USART1_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <BSP_COM_Init+0x6c>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8000bf6:	f06f 0303 	mvn.w	r3, #3
 8000bfa:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return status;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000030 	.word	0x20000030
 8000c0c:	20000068 	.word	0x20000068

08000c10 <MX_USART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	891b      	ldrh	r3, [r3, #8]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	895b      	ldrh	r3, [r3, #10]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	220c      	movs	r2, #12
 8000c42:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	899b      	ldrh	r3, [r3, #12]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c54:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f001 fb28 	bl	80022b8 <HAL_UART_Init>
 8000c68:	4603      	mov	r3, r0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <B1_EXTI_Callback>:
/**
  * @brief  B1 EXTI line detection callbacks.
  * @retval None.
  */
static void B1_EXTI_Callback(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
  BSP_PB_Callback(B1);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff ff7e 	bl	8000b78 <BSP_PB_Callback>
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <B2_EXTI_Callback>:
/**
  * @brief  B2 EXTI line detection callbacks.
  * @retval None.
  */
static void B2_EXTI_Callback(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  BSP_PB_Callback(B2);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f7ff ff77 	bl	8000b78 <BSP_PB_Callback>
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <B3_EXTI_Callback>:
/**
  * @brief  B3 EXTI line detection callbacks.
  * @retval None.
  */
static void B3_EXTI_Callback(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
  BSP_PB_Callback(B3);
 8000c92:	2002      	movs	r0, #2
 8000c94:	f7ff ff70 	bl	8000b78 <BSP_PB_Callback>
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable COM and GPIO clocks */
  COM1_TX_GPIO_CLK_ENABLE();
 8000ca4:	4b26      	ldr	r3, [pc, #152]	@ (8000d40 <UART_MspInit+0xa4>)
 8000ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000caa:	4a25      	ldr	r2, [pc, #148]	@ (8000d40 <UART_MspInit+0xa4>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cb4:	4b22      	ldr	r3, [pc, #136]	@ (8000d40 <UART_MspInit+0xa4>)
 8000cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d40 <UART_MspInit+0xa4>)
 8000cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d40 <UART_MspInit+0xa4>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d40 <UART_MspInit+0xa4>)
 8000cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
  COM1_CLK_ENABLE();
 8000ce0:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <UART_MspInit+0xa4>)
 8000ce2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ce6:	4a16      	ldr	r2, [pc, #88]	@ (8000d40 <UART_MspInit+0xa4>)
 8000ce8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cec:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <UART_MspInit+0xa4>)
 8000cf2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM1_TX_PIN;
 8000cfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d02:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Alternate = COM1_TX_AF;
 8000d10:	2307      	movs	r3, #7
 8000d12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &GPIO_Init);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480a      	ldr	r0, [pc, #40]	@ (8000d44 <UART_MspInit+0xa8>)
 8000d1c:	f000 fa72 	bl	8001204 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM1_RX_PIN;
 8000d20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_Init.Alternate = COM1_RX_AF;
 8000d26:	2307      	movs	r3, #7
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &GPIO_Init);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <UART_MspInit+0xac>)
 8000d32:	f000 fa67 	bl	8001204 <HAL_GPIO_Init>
}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	@ 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	46020c00 	.word	0x46020c00
 8000d44:	42020400 	.word	0x42020400
 8000d48:	42020000 	.word	0x42020000

08000d4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d50:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <HAL_Init+0x3c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0c      	ldr	r2, [pc, #48]	@ (8000d88 <HAL_Init+0x3c>)
 8000d56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f000 f960 	bl	8001022 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 8000d62:	f7ff fcf9 	bl	8000758 <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000d66:	2004      	movs	r0, #4
 8000d68:	f000 f9b4 	bl	80010d4 <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d6c:	200f      	movs	r0, #15
 8000d6e:	f000 f80d 	bl	8000d8c <HAL_InitTick>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_Init+0x30>
  {
    return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e002      	b.n	8000d82 <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f7ff fc7a 	bl	8000674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40022000 	.word	0x40022000

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000d98:	4b36      	ldr	r3, [pc, #216]	@ (8000e74 <HAL_InitTick+0xe8>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d101      	bne.n	8000da4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e062      	b.n	8000e6a <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000da4:	4b34      	ldr	r3, [pc, #208]	@ (8000e78 <HAL_InitTick+0xec>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0304 	and.w	r3, r3, #4
 8000dac:	2b04      	cmp	r3, #4
 8000dae:	d10c      	bne.n	8000dca <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000db0:	4b32      	ldr	r3, [pc, #200]	@ (8000e7c <HAL_InitTick+0xf0>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e74 <HAL_InitTick+0xe8>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	e03d      	b.n	8000e46 <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 8000dca:	4b2d      	ldr	r3, [pc, #180]	@ (8000e80 <HAL_InitTick+0xf4>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000dd4:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000ddc:	d025      	beq.n	8000e2a <HAL_InitTick+0x9e>
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000de4:	d82e      	bhi.n	8000e44 <HAL_InitTick+0xb8>
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d004      	beq.n	8000df6 <HAL_InitTick+0x6a>
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000df2:	d00d      	beq.n	8000e10 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8000df4:	e026      	b.n	8000e44 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000df6:	4b21      	ldr	r3, [pc, #132]	@ (8000e7c <HAL_InitTick+0xf0>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000e74 <HAL_InitTick+0xe8>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000e04:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0c:	60fb      	str	r3, [r7, #12]
        break;
 8000e0e:	e01a      	b.n	8000e46 <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000e10:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <HAL_InitTick+0xe8>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e1e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	60fb      	str	r3, [r7, #12]
        break;
 8000e28:	e00d      	b.n	8000e46 <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000e2a:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <HAL_InitTick+0xe8>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e38:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e40:	60fb      	str	r3, [r7, #12]
        break;
 8000e42:	e000      	b.n	8000e46 <HAL_InitTick+0xba>
        break;
 8000e44:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f000 f922 	bl	8001090 <HAL_SYSTICK_Config>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e009      	b.n	8000e6a <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e56:	2200      	movs	r2, #0
 8000e58:	6879      	ldr	r1, [r7, #4]
 8000e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5e:	f000 f8eb 	bl	8001038 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000e62:	4a08      	ldr	r2, [pc, #32]	@ (8000e84 <HAL_InitTick+0xf8>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000038 	.word	0x20000038
 8000e78:	e000e010 	.word	0xe000e010
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	46020c00 	.word	0x46020c00
 8000e84:	20000034 	.word	0x20000034

08000e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <HAL_IncTick+0x20>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <HAL_IncTick+0x24>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a04      	ldr	r2, [pc, #16]	@ (8000eac <HAL_IncTick+0x24>)
 8000e9a:	6013      	str	r3, [r2, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000038 	.word	0x20000038
 8000eac:	20000120 	.word	0x20000120

08000eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb4:	4b03      	ldr	r3, [pc, #12]	@ (8000ec4 <HAL_GetTick+0x14>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000120 	.word	0x20000120

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	db0b      	blt.n	8000f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 021f 	and.w	r2, r3, #31
 8000f44:	4907      	ldr	r1, [pc, #28]	@ (8000f64 <__NVIC_EnableIRQ+0x38>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000e100 	.word	0xe000e100

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	@ (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	@ (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	@ 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	@ 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ff4c 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
 8001046:	f7ff ff63 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 800104a:	4603      	mov	r3, r0
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	6978      	ldr	r0, [r7, #20]
 8001058:	f7ff ffb0 	bl	8000fbc <NVIC_EncodePriority>
 800105c:	4602      	mov	r2, r0
 800105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff7f 	bl	8000f68 <__NVIC_SetPriority>
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbaxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff53 	bl	8000f2c <__NVIC_EnableIRQ>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a0:	d301      	bcc.n	80010a6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00d      	b.n	80010c2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80010a6:	4a0a      	ldr	r2, [pc, #40]	@ (80010d0 <HAL_SYSTICK_Config+0x40>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80010ae:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <HAL_SYSTICK_Config+0x40>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_SYSTICK_Config+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a05      	ldr	r2, [pc, #20]	@ (80010d0 <HAL_SYSTICK_Config+0x40>)
 80010ba:	f043 0303 	orr.w	r3, r3, #3
 80010be:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b04      	cmp	r3, #4
 80010e0:	d844      	bhi.n	800116c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80010e2:	a201      	add	r2, pc, #4	@ (adr r2, 80010e8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80010e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e8:	0800110b 	.word	0x0800110b
 80010ec:	08001129 	.word	0x08001129
 80010f0:	0800114b 	.word	0x0800114b
 80010f4:	0800116d 	.word	0x0800116d
 80010f8:	080010fd 	.word	0x080010fd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80010fc:	4b1f      	ldr	r3, [pc, #124]	@ (800117c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a1e      	ldr	r2, [pc, #120]	@ (800117c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6013      	str	r3, [r2, #0]
      break;
 8001108:	e031      	b.n	800116e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800110a:	4b1c      	ldr	r3, [pc, #112]	@ (800117c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a1b      	ldr	r2, [pc, #108]	@ (800117c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001110:	f023 0304 	bic.w	r3, r3, #4
 8001114:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001116:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111c:	4a18      	ldr	r2, [pc, #96]	@ (8001180 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800111e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001122:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001126:	e022      	b.n	800116e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001128:	4b14      	ldr	r3, [pc, #80]	@ (800117c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a13      	ldr	r2, [pc, #76]	@ (800117c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800112e:	f023 0304 	bic.w	r3, r3, #4
 8001132:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800113a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800113e:	4a10      	ldr	r2, [pc, #64]	@ (8001180 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001140:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001144:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001148:	e011      	b.n	800116e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001150:	f023 0304 	bic.w	r3, r3, #4
 8001154:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001160:	4a07      	ldr	r2, [pc, #28]	@ (8001180 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001162:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001166:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800116a:	e000      	b.n	800116e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800116c:	bf00      	nop
  }
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000e010 	.word	0xe000e010
 8001180:	46020c00 	.word	0x46020c00

08001184 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	460b      	mov	r3, r1
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001196:	7afb      	ldrb	r3, [r7, #11]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d011      	beq.n	80011c0 <HAL_EXTI_RegisterCallback+0x3c>
 800119c:	2b02      	cmp	r3, #2
 800119e:	dc13      	bgt.n	80011c8 <HAL_EXTI_RegisterCallback+0x44>
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <HAL_EXTI_RegisterCallback+0x26>
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d007      	beq.n	80011b8 <HAL_EXTI_RegisterCallback+0x34>
 80011a8:	e00e      	b.n	80011c8 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	609a      	str	r2, [r3, #8]
      break;
 80011b6:	e00a      	b.n	80011ce <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	605a      	str	r2, [r3, #4]
      break;
 80011be:	e006      	b.n	80011ce <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	609a      	str	r2, [r3, #8]
      break;
 80011c6:	e002      	b.n	80011ce <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	75fb      	strb	r3, [r7, #23]
      break;
 80011cc:	bf00      	nop
  }

  return status;
 80011ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	371c      	adds	r7, #28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e003      	b.n	80011f8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80011f6:	2300      	movs	r3, #0
  }
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001212:	e130      	b.n	8001476 <HAL_GPIO_Init+0x272>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	2101      	movs	r1, #1
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	fa01 f303 	lsl.w	r3, r1, r3
 8001220:	4013      	ands	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 8122 	beq.w	8001470 <HAL_GPIO_Init+0x26c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b01      	cmp	r3, #1
 8001236:	d005      	beq.n	8001244 <HAL_GPIO_Init+0x40>
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d130      	bne.n	80012a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800127a:	2201      	movs	r2, #1
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	091b      	lsrs	r3, r3, #4
 8001290:	f003 0201 	and.w	r2, r3, #1
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d017      	beq.n	80012e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	2203      	movs	r2, #3
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d123      	bne.n	8001336 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	08da      	lsrs	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3208      	adds	r2, #8
 80012f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	220f      	movs	r2, #15
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	691a      	ldr	r2, [r3, #16]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	08da      	lsrs	r2, r3, #3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3208      	adds	r2, #8
 8001330:	6939      	ldr	r1, [r7, #16]
 8001332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0203 	and.w	r2, r3, #3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d07c      	beq.n	8001470 <HAL_GPIO_Init+0x26c>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001376:	4a47      	ldr	r2, [pc, #284]	@ (8001494 <HAL_GPIO_Init+0x290>)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3318      	adds	r3, #24
 800137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	0a9a      	lsrs	r2, r3, #10
 800139e:	4b3e      	ldr	r3, [pc, #248]	@ (8001498 <HAL_GPIO_Init+0x294>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	f002 0203 	and.w	r2, r2, #3
 80013a8:	00d2      	lsls	r2, r2, #3
 80013aa:	4093      	lsls	r3, r2
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80013b2:	4938      	ldr	r1, [pc, #224]	@ (8001494 <HAL_GPIO_Init+0x290>)
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	089b      	lsrs	r3, r3, #2
 80013b8:	3318      	adds	r3, #24
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013c0:	4b34      	ldr	r3, [pc, #208]	@ (8001494 <HAL_GPIO_Init+0x290>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x1e0>
        {
          temp |= iocurrent;
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001494 <HAL_GPIO_Init+0x290>)
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001494 <HAL_GPIO_Init+0x290>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x20a>
        {
          temp |= iocurrent;
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800140e:	4a21      	ldr	r2, [pc, #132]	@ (8001494 <HAL_GPIO_Init+0x290>)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001414:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <HAL_GPIO_Init+0x290>)
 8001416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800143a:	4a16      	ldr	r2, [pc, #88]	@ (8001494 <HAL_GPIO_Init+0x290>)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8001442:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <HAL_GPIO_Init+0x290>)
 8001444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001468:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <HAL_GPIO_Init+0x290>)
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3301      	adds	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	fa22 f303 	lsr.w	r3, r2, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	f47f aec7 	bne.w	8001214 <HAL_GPIO_Init+0x10>
  }
}
 8001486:	bf00      	nop
 8001488:	bf00      	nop
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	46022000 	.word	0x46022000
 8001498:	002f7f7f 	.word	0x002f7f7f

0800149c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	807b      	strh	r3, [r7, #2]
 80014a8:	4613      	mov	r3, r2
 80014aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014ac:	787b      	ldrb	r3, [r7, #1]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014b2:	887a      	ldrh	r2, [r7, #2]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014b8:	e002      	b.n	80014c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00U)
 80014d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	4013      	ands	r3, r2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d006      	beq.n	80014f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80014e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001514 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f814 	bl	8001518 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00U)
 80014f0:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80014f2:	691a      	ldr	r2, [r3, #16]
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d006      	beq.n	800150a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80014fc:	4a05      	ldr	r2, [pc, #20]	@ (8001514 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	4618      	mov	r0, r3
 8001506:	f000 f812 	bl	800152e <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	46022000 	.word	0x46022000

08001518 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001550:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e007      	b.n	8001572 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001562:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 0204 	bic.w	r2, r3, #4
 800156a:	4905      	ldr	r1, [pc, #20]	@ (8001580 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001572:	7bfb      	ldrb	r3, [r7, #15]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	40030400 	.word	0x40030400

08001584 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <HAL_ICACHE_Enable+0x1c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a04      	ldr	r2, [pc, #16]	@ (80015a0 <HAL_ICACHE_Enable+0x1c>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40030400 	.word	0x40030400

080015a4 <HAL_PWREx_ControlVoltageScaling>:
  *        only take effect after the 2.4 GHz RADIO has entered Sleep or Deepsleep mode.
  * @note  In range 2, the 2.4 GHz RADIO shall not transmit nor receive.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  uint32_t vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80015ac:	4b29      	ldr	r3, [pc, #164]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80015ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015b4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d101      	bne.n	80015c2 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	e042      	b.n	8001648 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Set voltage scaling level */
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 80015c2:	4b24      	ldr	r3, [pc, #144]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80015ca:	4922      	ldr	r1, [pc, #136]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	60cb      	str	r3, [r1, #12]


  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 80015d2:	4b21      	ldr	r3, [pc, #132]	@ (8001658 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2232      	movs	r2, #50	@ 0x32
 80015d8:	fb02 f303 	mul.w	r3, r2, r3
 80015dc:	4a1f      	ldr	r2, [pc, #124]	@ (800165c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80015de:	fba2 2303 	umull	r2, r3, r2, r3
 80015e2:	0c9b      	lsrs	r3, r3, #18
 80015e4:	3301      	adds	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80015e8:	e002      	b.n	80015f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
  {
    timeout--;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80015f0:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <HAL_PWREx_ControlVoltageScaling+0x5e>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f3      	bne.n	80015ea <HAL_PWREx_ControlVoltageScaling+0x46>
  }

  /* Check time out  */
  if (timeout == 0U)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_PWREx_ControlVoltageScaling+0x68>
  {
    return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e01d      	b.n	8001648 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Wait until ACTVOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 800160c:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2232      	movs	r2, #50	@ 0x32
 8001612:	fb02 f303 	mul.w	r3, r2, r3
 8001616:	4a11      	ldr	r2, [pc, #68]	@ (800165c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8001618:	fba2 2303 	umull	r2, r3, r2, r3
 800161c:	0c9b      	lsrs	r3, r3, #18
 800161e:	3301      	adds	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001622:	e002      	b.n	800162a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3b01      	subs	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800162a:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800162c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800162e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d102      	bne.n	800163c <HAL_PWREx_ControlVoltageScaling+0x98>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f3      	bne.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out  */
  if (timeout == 0U)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_PWREx_ControlVoltageScaling+0xa2>
  {
    return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e000      	b.n	8001648 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	46020800 	.word	0x46020800
 8001658:	20000000 	.word	0x20000000
 800165c:	431bde83 	.word	0x431bde83

08001660 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	@ 0x30
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t mask;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e3d9      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001672:	4b90      	ldr	r3, [pc, #576]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	623b      	str	r3, [r7, #32]
  pllsrc = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800167c:	4b8d      	ldr	r3, [pc, #564]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 800167e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d072      	beq.n	8001778 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL1 in these cases it is not allowed to be disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	2b08      	cmp	r3, #8
 8001696:	d005      	beq.n	80016a4 <HAL_RCC_OscConfig+0x44>
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	2b0c      	cmp	r3, #12
 800169c:	d12a      	bne.n	80016f4 <HAL_RCC_OscConfig+0x94>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSE)))
 800169e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d127      	bne.n	80016f4 <HAL_RCC_OscConfig+0x94>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_OscConfig+0x50>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e3ba      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Otherwise, applying divider is allowed */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d15f      	bne.n	8001776 <HAL_RCC_OscConfig+0x116>
        {
          assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

          /* Adjust the HSE division factor */
          __HAL_RCC_HSE_CONFIG(RCC_HSE_ON | RCC_OscInitStruct->HSEDiv);
 80016b6:	4b7f      	ldr	r3, [pc, #508]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	4a7b      	ldr	r2, [pc, #492]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 80016c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016ca:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSE value */
          SystemCoreClock = (HSE_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSEPRE)) >> RCC_CR_HSEPRE_Pos)));
 80016cc:	4b79      	ldr	r3, [pc, #484]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0d1b      	lsrs	r3, r3, #20
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	4a78      	ldr	r2, [pc, #480]	@ (80018b8 <HAL_RCC_OscConfig+0x258>)
 80016d8:	fa22 f303 	lsr.w	r3, r2, r3
 80016dc:	4a77      	ldr	r2, [pc, #476]	@ (80018bc <HAL_RCC_OscConfig+0x25c>)
 80016de:	6013      	str	r3, [r2, #0]

          /* Adapt Systick interrupt period */
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016e0:	4b77      	ldr	r3, [pc, #476]	@ (80018c0 <HAL_RCC_OscConfig+0x260>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fb51 	bl	8000d8c <HAL_InitTick>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d042      	beq.n	8001776 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e398      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d01f      	beq.n	800173c <HAL_RCC_OscConfig+0xdc>
      {
        assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG((RCC_OscInitStruct->HSEState | RCC_OscInitStruct->HSEDiv));
 80016fc:	4b6d      	ldr	r3, [pc, #436]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6859      	ldr	r1, [r3, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	430b      	orrs	r3, r1
 800170e:	4969      	ldr	r1, [pc, #420]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 8001710:	4313      	orrs	r3, r2
 8001712:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff fbcc 	bl	8000eb0 <HAL_GetTick>
 8001718:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0xce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fbc8 	bl	8000eb0 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	@ 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e37b      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800172e:	4b61      	ldr	r3, [pc, #388]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0xbc>
 800173a:	e01d      	b.n	8001778 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173c:	4b5d      	ldr	r3, [pc, #372]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	495a      	ldr	r1, [pc, #360]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff fbaf 	bl	8000eb0 <HAL_GetTick>
 8001752:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001756:	f7ff fbab 	bl	8000eb0 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b64      	cmp	r3, #100	@ 0x64
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e35e      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001768:	4b52      	ldr	r3, [pc, #328]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f0      	bne.n	8001756 <HAL_RCC_OscConfig+0xf6>
 8001774:	e000      	b.n	8001778 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001776:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d05a      	beq.n	800183a <HAL_RCC_OscConfig+0x1da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <HAL_RCC_OscConfig+0x136>
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	2b0c      	cmp	r3, #12
 800178e:	d113      	bne.n	80017b8 <HAL_RCC_OscConfig+0x158>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSI)))
 8001790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001792:	2b02      	cmp	r3, #2
 8001794:	d110      	bne.n	80017b8 <HAL_RCC_OscConfig+0x158>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_OscConfig+0x142>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e341      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a2:	4b44      	ldr	r3, [pc, #272]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	041b      	lsls	r3, r3, #16
 80017b0:	4940      	ldr	r1, [pc, #256]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	610b      	str	r3, [r1, #16]
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80017b6:	e040      	b.n	800183a <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d023      	beq.n	8001808 <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c0:	4b3c      	ldr	r3, [pc, #240]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a3b      	ldr	r2, [pc, #236]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 80017c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fb70 	bl	8000eb0 <HAL_GetTick>
 80017d0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d4:	f7ff fb6c 	bl	8000eb0 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e31f      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e6:	4b33      	ldr	r3, [pc, #204]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x174>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f2:	4b30      	ldr	r3, [pc, #192]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	041b      	lsls	r3, r3, #16
 8001800:	492c      	ldr	r1, [pc, #176]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 8001802:	4313      	orrs	r3, r2
 8001804:	610b      	str	r3, [r1, #16]
 8001806:	e018      	b.n	800183a <HAL_RCC_OscConfig+0x1da>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001808:	4b2a      	ldr	r3, [pc, #168]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a29      	ldr	r2, [pc, #164]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 800180e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff fb4c 	bl	8000eb0 <HAL_GetTick>
 8001818:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x1ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800181c:	f7ff fb48 	bl	8000eb0 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e2fb      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800182e:	4b21      	ldr	r3, [pc, #132]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x1bc>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 80d2 	beq.w	80019ec <HAL_RCC_OscConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001848:	2300      	movs	r3, #0
 800184a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Update LSI1 configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 800184e:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 8001850:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d111      	bne.n	8001880 <HAL_RCC_OscConfig+0x220>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800185c:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 800185e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001862:	4a14      	ldr	r2, [pc, #80]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800186c:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_RCC_OscConfig+0x254>)
 800186e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800187a:	2301      	movs	r3, #1
 800187c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001880:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <HAL_RCC_OscConfig+0x264>)
 8001882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d123      	bne.n	80018d4 <HAL_RCC_OscConfig+0x274>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800188c:	4b0d      	ldr	r3, [pc, #52]	@ (80018c4 <HAL_RCC_OscConfig+0x264>)
 800188e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001890:	4a0c      	ldr	r2, [pc, #48]	@ (80018c4 <HAL_RCC_OscConfig+0x264>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001898:	f7ff fb0a 	bl	8000eb0 <HAL_GetTick>
 800189c:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800189e:	e013      	b.n	80018c8 <HAL_RCC_OscConfig+0x268>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a0:	f7ff fb06 	bl	8000eb0 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d90c      	bls.n	80018c8 <HAL_RCC_OscConfig+0x268>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e2b9      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
 80018b2:	bf00      	nop
 80018b4:	46020c00 	.word	0x46020c00
 80018b8:	01e84800 	.word	0x01e84800
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000034 	.word	0x20000034
 80018c4:	46020800 	.word	0x46020800
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80018c8:	4ba4      	ldr	r3, [pc, #656]	@ (8001b5c <HAL_RCC_OscConfig+0x4fc>)
 80018ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0e5      	beq.n	80018a0 <HAL_RCC_OscConfig+0x240>
        }
      }
    }

    /* Get BDCR1 register value */
    tmpreg1 = RCC->BDCR1;
 80018d4:	4ba2      	ldr	r3, [pc, #648]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 80018d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018da:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Define mask depending on LSI presence */
    mask = RCC_BDCR1_LSI1ON;
 80018dc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80018e0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_LSI2_SUPPORT)
    mask |= RCC_BDCR1_LSI2ON;
#endif /* RCC_LSI2_SUPPORT */

    /* Check the LSI1 State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d056      	beq.n	8001998 <HAL_RCC_OscConfig+0x338>
    {
      if ((RCC_OscInitStruct->LSIState & RCC_LSI1_ON) != 0x00u)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d030      	beq.n	8001958 <HAL_RCC_OscConfig+0x2f8>
      {
        /* Check LSI1 division factor */
        assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

        /* Check is LSIDiv is requested to be changed and LSI is already ON */
        if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_BDCR1_LSI1PREDIV)) && ((tmpreg1 & RCC_BDCR1_LSI1RDY) != 0x00u))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69da      	ldr	r2, [r3, #28]
 80018fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001900:	429a      	cmp	r2, r3
 8001902:	d020      	beq.n	8001946 <HAL_RCC_OscConfig+0x2e6>
 8001904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001906:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d01b      	beq.n	8001946 <HAL_RCC_OscConfig+0x2e6>
        {
          /* Disable LSI1 */
          tmpreg1 &= ~RCC_BDCR1_LSI1ON;
 800190e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001910:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001914:	62bb      	str	r3, [r7, #40]	@ 0x28
          RCC->BDCR1 = tmpreg1;
 8001916:	4a92      	ldr	r2, [pc, #584]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 8001918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800191a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800191e:	f7ff fac7 	bl	8000eb0 <HAL_GetTick>
 8001922:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is disabled */
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x2d8>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001926:	f7ff fac3 	bl	8000eb0 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b14      	cmp	r3, #20
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x2d8>
            {
              /* LSI1 may be forced ON by IWDG */
              return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e276      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8001938:	4b89      	ldr	r3, [pc, #548]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 800193a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800193e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1ef      	bne.n	8001926 <HAL_RCC_OscConfig+0x2c6>
          HAL_Delay(1);
#endif
        }

        /* Set LSI1 division factor */
        tmpreg1 &= ~RCC_BDCR1_LSI1PREDIV;
 8001946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001948:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800194c:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001954:	4313      	orrs	r3, r2
 8001956:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Enable Concerned LSI */
      tmpreg1 |= RCC_OscInitStruct->LSIState;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800195e:	4313      	orrs	r3, r2
 8001960:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8001962:	4a7f      	ldr	r2, [pc, #508]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 8001964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001966:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196a:	f7ff faa1 	bl	8000eb0 <HAL_GetTick>
 800196e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready : LSIRDY bit is position ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x324>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001972:	f7ff fa9d 	bl	8000eb0 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b14      	cmp	r3, #20
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x324>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e250      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8001984:	4b76      	ldr	r3, [pc, #472]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 8001986:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4013      	ands	r3, r2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0ed      	beq.n	8001972 <HAL_RCC_OscConfig+0x312>
 8001996:	e01d      	b.n	80019d4 <HAL_RCC_OscConfig+0x374>
#endif
    }
    else
    {
      /* Disable the Internal Low Speed oscillator LSI1 and LSI2 is available */
      tmpreg1 &= ~mask;
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	43db      	mvns	r3, r3
 800199c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800199e:	4013      	ands	r3, r2
 80019a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 80019a2:	4a6f      	ldr	r2, [pc, #444]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 80019a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019aa:	f7ff fa81 	bl	8000eb0 <HAL_GetTick>
 80019ae:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is disabled : LSIRDY bit position is ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x364>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b2:	f7ff fa7d 	bl	8000eb0 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b14      	cmp	r3, #20
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x364>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e230      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 80019c4:	4b66      	ldr	r3, [pc, #408]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 80019c6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1ee      	bne.n	80019b2 <HAL_RCC_OscConfig+0x352>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d107      	bne.n	80019ec <HAL_RCC_OscConfig+0x38c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019dc:	4b60      	ldr	r3, [pc, #384]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 80019de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019e2:	4a5f      	ldr	r2, [pc, #380]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80e2 	beq.w	8001bbe <HAL_RCC_OscConfig+0x55e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8001a00:	4b57      	ldr	r3, [pc, #348]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 8001a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d111      	bne.n	8001a32 <HAL_RCC_OscConfig+0x3d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b54      	ldr	r3, [pc, #336]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 8001a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a14:	4a52      	ldr	r2, [pc, #328]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001a1e:	4b50      	ldr	r3, [pc, #320]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 8001a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001a32:	4b4a      	ldr	r3, [pc, #296]	@ (8001b5c <HAL_RCC_OscConfig+0x4fc>)
 8001a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d118      	bne.n	8001a70 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001a3e:	4b47      	ldr	r3, [pc, #284]	@ (8001b5c <HAL_RCC_OscConfig+0x4fc>)
 8001a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a42:	4a46      	ldr	r2, [pc, #280]	@ (8001b5c <HAL_RCC_OscConfig+0x4fc>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fa31 	bl	8000eb0 <HAL_GetTick>
 8001a4e:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a52:	f7ff fa2d 	bl	8000eb0 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e1e0      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001a64:	4b3d      	ldr	r3, [pc, #244]	@ (8001b5c <HAL_RCC_OscConfig+0x4fc>)
 8001a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x3f2>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d051      	beq.n	8001b1c <HAL_RCC_OscConfig+0x4bc>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_LSESYSEN);
 8001a78:	4b39      	ldr	r3, [pc, #228]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 8001a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a82:	62bb      	str	r3, [r7, #40]	@ 0x28
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8001a8e:	4a34      	ldr	r2, [pc, #208]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 8001a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a96:	f7ff fa0b 	bl	8000eb0 <HAL_GetTick>
 8001a9a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 8001a9c:	e00a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x454>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9e:	f7ff fa07 	bl	8000eb0 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x454>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e1b8      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 8001ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 8001ab6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0ed      	beq.n	8001a9e <HAL_RCC_OscConfig+0x43e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR1_LSESYSEN) != 0U)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d01e      	beq.n	8001b0c <HAL_RCC_OscConfig+0x4ac>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 8001ace:	e00a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x486>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad0:	f7ff f9ee 	bl	8000eb0 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x486>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e19f      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 8001ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0ed      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x470>
 8001af4:	e057      	b.n	8001ba6 <HAL_RCC_OscConfig+0x546>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7ff f9db 	bl	8000eb0 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e18c      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8001b0c:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 8001b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1ed      	bne.n	8001af6 <HAL_RCC_OscConfig+0x496>
 8001b1a:	e044      	b.n	8001ba6 <HAL_RCC_OscConfig+0x546>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR1, (RCC_BDCR1_LSEON | RCC_BDCR1_LSESYSEN));
 8001b1c:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 8001b1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b22:	4a0f      	ldr	r2, [pc, #60]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 8001b24:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8001b28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR1, RCC_BDCR1_LSEBYP);
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 8001b2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b32:	4a0b      	ldr	r2, [pc, #44]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 8001b34:	f023 0304 	bic.w	r3, r3, #4
 8001b38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f9b8 	bl	8000eb0 <HAL_GetTick>
 8001b40:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8001b42:	e00f      	b.n	8001b64 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7ff f9b4 	bl	8000eb0 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d906      	bls.n	8001b64 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e165      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
 8001b5a:	bf00      	nop
 8001b5c:	46020800 	.word	0x46020800
 8001b60:	46020c00 	.word	0x46020c00
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8001b64:	4b98      	ldr	r3, [pc, #608]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001b66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1e8      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4e4>
        }
      }

      if (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSEN) != 0U)
 8001b72:	4b95      	ldr	r3, [pc, #596]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001b74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d012      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x546>
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7ff f995 	bl	8000eb0 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e146      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8001b98:	4b8b      	ldr	r3, [pc, #556]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1ed      	bne.n	8001b82 <HAL_RCC_OscConfig+0x522>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ba6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d107      	bne.n	8001bbe <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bae:	4b86      	ldr	r3, [pc, #536]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bb4:	4a84      	ldr	r2, [pc, #528]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001bb6:	f023 0304 	bic.w	r3, r3, #4
 8001bba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if ((RCC_OscInitStruct->PLL1.PLLState) != RCC_PLL_NONE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 812e 	beq.w	8001e24 <HAL_RCC_OscConfig+0x7c4>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	2b0c      	cmp	r3, #12
 8001bcc:	f000 80ba 	beq.w	8001d44 <HAL_RCC_OscConfig+0x6e4>
    {
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_ON)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	f040 8093 	bne.w	8001d00 <HAL_RCC_OscConfig+0x6a0>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL1.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL1.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL1.PLLR));

        /* Disable the main PLL1. */
        tmpreg1 = (RCC->CR & ~RCC_CR_PLL1ON);
 8001bda:	4b7b      	ldr	r3, [pc, #492]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001be2:	62bb      	str	r3, [r7, #40]	@ 0x28
        RCC->CR = tmpreg1;
 8001be4:	4a78      	ldr	r2, [pc, #480]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7ff f961 	bl	8000eb0 <HAL_GetTick>
 8001bee:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        do
        {
          tmpreg1 = RCC->CR;
 8001bf0:	4b75      	ldr	r3, [pc, #468]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7ff f95b 	bl	8000eb0 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e10e      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
          }
        } while ((tmpreg1 & RCC_CR_PLL1RDY) != 0U);
 8001c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1ee      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x590>

        /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
        if (RCC_OscInitStruct->PLL1.PLLSource == RCC_PLLSOURCE_HSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d108      	bne.n	8001c2c <HAL_RCC_OscConfig+0x5cc>
        {
          /* Clock source is HSE or HSE/2 */
          pllsrc = HSE_VALUE >> ((tmpreg1 & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos);
 8001c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c1c:	0d1b      	lsrs	r3, r3, #20
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	4a6a      	ldr	r2, [pc, #424]	@ (8001dcc <HAL_RCC_OscConfig+0x76c>)
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
 8001c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c2a:	e001      	b.n	8001c30 <HAL_RCC_OscConfig+0x5d0>
        }
        else
        {
          /* Clock source is HSI */
          pllsrc = HSI_VALUE;
 8001c2c:	4b68      	ldr	r3, [pc, #416]	@ (8001dd0 <HAL_RCC_OscConfig+0x770>)
 8001c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Compute VCO input frequency depending on M divider */
        pllsrc = (pllsrc / RCC_OscInitStruct->PLL1.PLLM);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllsrc));

        if (pllsrc > PLL_INPUTRANGE0_FREQMAX)
 8001c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c3e:	4a65      	ldr	r2, [pc, #404]	@ (8001dd4 <HAL_RCC_OscConfig+0x774>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d902      	bls.n	8001c4a <HAL_RCC_OscConfig+0x5ea>
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE1;
 8001c44:	230c      	movs	r3, #12
 8001c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c48:	e001      	b.n	8001c4e <HAL_RCC_OscConfig+0x5ee>
        }
        else
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Configure PLL1 source, PLLM divider, VCO input range and enable PLL1R output. Clear also FRACEN*/
        tmpreg2 = RCC->PLL1CFGR;
 8001c4e:	4b5e      	ldr	r3, [pc, #376]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c52:	617b      	str	r3, [r7, #20]
        tmpreg2 &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1RGE | RCC_PLL1CFGR_PLL1FRACEN | RCC_PLL1CFGR_PLL1M);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f423 63e3 	bic.w	r3, r3, #1816	@ 0x718
 8001c5a:	f023 0307 	bic.w	r3, r3, #7
 8001c5e:	617b      	str	r3, [r7, #20]
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c66:	431a      	orrs	r2, r3
                    ((RCC_OscInitStruct->PLL1.PLLM - 1u) << RCC_PLL1CFGR_PLL1M_Pos) | RCC_PLL1CFGR_PLL1REN);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	021b      	lsls	r3, r3, #8
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8001c70:	431a      	orrs	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c7a:	617b      	str	r3, [r7, #20]
        RCC->PLL1CFGR = tmpreg2;
 8001c7c:	4a52      	ldr	r2, [pc, #328]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLLN multiplication factor and PLLP, PLLQ, PLLR dividers */
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c86:	1e5a      	subs	r2, r3, #1
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	025b      	lsls	r3, r3, #9
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8001c90:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLQ - 1u) << RCC_PLL1DIVR_PLL1Q_Pos) |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c96:	3b01      	subs	r3, #1
 8001c98:	041b      	lsls	r3, r3, #16
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 8001c9a:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLR - 1u) << RCC_PLL1DIVR_PLL1R_Pos));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	061b      	lsls	r3, r3, #24
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
        RCC->PLL1DIVR = tmpreg2;
 8001ca8:	4a47      	ldr	r2, [pc, #284]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	6353      	str	r3, [r2, #52]	@ 0x34

        if (RCC_OscInitStruct->PLL1.PLLFractional != 0x00u)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00a      	beq.n	8001ccc <HAL_RCC_OscConfig+0x66c>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cba:	4a43      	ldr	r2, [pc, #268]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	6393      	str	r3, [r2, #56]	@ 0x38

          /* Enable PLL1FRACEN */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 8001cc0:	4b41      	ldr	r3, [pc, #260]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc4:	4a40      	ldr	r2, [pc, #256]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001cc6:	f043 0310 	orr.w	r3, r3, #16
 8001cca:	6293      	str	r3, [r2, #40]	@ 0x28
        }

        /* Enable the main PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001ccc:	4b3e      	ldr	r3, [pc, #248]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a3d      	ldr	r2, [pc, #244]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001cd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff f8ea 	bl	8000eb0 <HAL_GetTick>
 8001cdc:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x692>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff f8e6 	bl	8000eb0 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e099      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001cf2:	4b35      	ldr	r3, [pc, #212]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x680>
 8001cfe:	e091      	b.n	8001e24 <HAL_RCC_OscConfig+0x7c4>
        }
      }
      else
      {
        /* Disable the main PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001d00:	4b31      	ldr	r3, [pc, #196]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a30      	ldr	r2, [pc, #192]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001d06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f8d0 	bl	8000eb0 <HAL_GetTick>
 8001d10:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x6c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d14:	f7ff f8cc 	bl	8000eb0 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x6c6>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e07f      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d26:	4b28      	ldr	r3, [pc, #160]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x6b4>
          }
        }

        /* CLear the PLL1 source and disable outputs to save power when PLL1 is off */
        CLEAR_BIT(RCC->PLL1CFGR, (RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | \
 8001d32:	4b25      	ldr	r3, [pc, #148]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d36:	4a24      	ldr	r2, [pc, #144]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001d38:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001d3c:	f023 0303 	bic.w	r3, r3, #3
 8001d40:	6293      	str	r3, [r2, #40]	@ 0x28
 8001d42:	e06f      	b.n	8001e24 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL1 used as System clock source */
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_OscConfig+0x6f0>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e06a      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        tmpreg1 = RCC->PLL1CFGR;
 8001d50:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d54:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg2 = RCC->PLL1DIVR;
 8001d56:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc8 <HAL_RCC_OscConfig+0x768>)
 8001d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d5a:	617b      	str	r3, [r7, #20]

        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 8001d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d5e:	f003 0203 	and.w	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d12b      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x762>
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 8001d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	f003 0207 	and.w	r2, r3, #7
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d76:	3b01      	subs	r3, #1
        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d122      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d86:	3b01      	subs	r3, #1
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d11a      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	0a5b      	lsrs	r3, r3, #9
 8001d90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d98:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d111      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	0c1b      	lsrs	r3, r3, #16
 8001da2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001daa:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d108      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) != (RCC_OscInitStruct->PLL1.PLLR - 1u)))
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	0e1b      	lsrs	r3, r3, #24
 8001db4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dbc:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d00a      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x778>
        {
          return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e02f      	b.n	8001e26 <HAL_RCC_OscConfig+0x7c6>
 8001dc6:	bf00      	nop
 8001dc8:	46020c00 	.word	0x46020c00
 8001dcc:	01e84800 	.word	0x01e84800
 8001dd0:	00f42400 	.word	0x00f42400
 8001dd4:	007a1200 	.word	0x007a1200
        }
        else
        {
          /* Check if only fractional part needs to be updated  */
          tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 8001dd8:	4b15      	ldr	r3, [pc, #84]	@ (8001e30 <HAL_RCC_OscConfig+0x7d0>)
 8001dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ddc:	08db      	lsrs	r3, r3, #3
 8001dde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001de2:	62bb      	str	r3, [r7, #40]	@ 0x28

          if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d01a      	beq.n	8001e24 <HAL_RCC_OscConfig+0x7c4>
          {
            assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

            /* Disable PLL1FRACEN */
            __HAL_RCC_PLL1_FRACN_DISABLE();
 8001dee:	4b10      	ldr	r3, [pc, #64]	@ (8001e30 <HAL_RCC_OscConfig+0x7d0>)
 8001df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df2:	4a0f      	ldr	r2, [pc, #60]	@ (8001e30 <HAL_RCC_OscConfig+0x7d0>)
 8001df4:	f023 0310 	bic.w	r3, r3, #16
 8001df8:	6293      	str	r3, [r2, #40]	@ 0x28

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dfa:	f7ff f859 	bl	8000eb0 <HAL_GetTick>
 8001dfe:	61f8      	str	r0, [r7, #28]

            /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
            while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8001e00:	bf00      	nop
 8001e02:	f7ff f855 	bl	8000eb0 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d0f9      	beq.n	8001e02 <HAL_RCC_OscConfig+0x7a2>
            {
            }

            /* Configure PLL1 PLL1FRACN */
            __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e12:	4a07      	ldr	r2, [pc, #28]	@ (8001e30 <HAL_RCC_OscConfig+0x7d0>)
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	6393      	str	r3, [r2, #56]	@ 0x38

            /* Enable PLL1FRACEN to latch new value. */
            __HAL_RCC_PLL1_FRACN_ENABLE();
 8001e18:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <HAL_RCC_OscConfig+0x7d0>)
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1c:	4a04      	ldr	r2, [pc, #16]	@ (8001e30 <HAL_RCC_OscConfig+0x7d0>)
 8001e1e:	f043 0310 	orr.w	r3, r3, #16
 8001e22:	6293      	str	r3, [r2, #40]	@ 0x28
          }
        }
      }
    }
  }
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3730      	adds	r7, #48	@ 0x30
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	46020c00 	.word	0x46020c00

08001e34 <HAL_RCC_ClockConfig>:
  *         HCLK5 prescaler is switched automatically by hardware, but configuration shall
  *         always be performed before setting new PLL1 source as Sysclk source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e115      	b.n	8002074 <HAL_RCC_ClockConfig+0x240>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e48:	4b8c      	ldr	r3, [pc, #560]	@ (800207c <HAL_RCC_ClockConfig+0x248>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d910      	bls.n	8001e78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b89      	ldr	r3, [pc, #548]	@ (800207c <HAL_RCC_ClockConfig+0x248>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 020f 	bic.w	r2, r3, #15
 8001e5e:	4987      	ldr	r1, [pc, #540]	@ (800207c <HAL_RCC_ClockConfig+0x248>)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e66:	4b85      	ldr	r3, [pc, #532]	@ (800207c <HAL_RCC_ClockConfig+0x248>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0fd      	b.n	8002074 <HAL_RCC_ClockConfig+0x240>
  }

  /*-------------------------- HCLK5 Configuration --------------------------*/
  /* HCLK5 prescaler is switched automatically by hardware, but configuration shall
    always be performed before setting new PLL1 source as Sysclk source. */
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK5) == RCC_CLOCKTYPE_HCLK5)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00d      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x6c>
  {
    assert_param(IS_RCC_HCLK5_HSEHSI(RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
    assert_param(IS_RCC_HCLK5_PLL1(RCC_ClkInitStruct->AHB5_PLL1_CLKDivider));
    MODIFY_REG(RCC->CFGR4, (RCC_CFGR4_HDIV5 | RCC_CFGR4_HPRE5),
 8001e84:	4b7e      	ldr	r3, [pc, #504]	@ (8002080 <HAL_RCC_ClockConfig+0x24c>)
 8001e86:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e8a:	f023 0217 	bic.w	r2, r3, #23
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6999      	ldr	r1, [r3, #24]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	430b      	orrs	r3, r1
 8001e98:	4979      	ldr	r1, [pc, #484]	@ (8002080 <HAL_RCC_ClockConfig+0x24c>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
               (RCC_ClkInitStruct->AHB5_PLL1_CLKDivider | RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d06f      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 8001eac:	4b74      	ldr	r3, [pc, #464]	@ (8002080 <HAL_RCC_ClockConfig+0x24c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	617b      	str	r3, [r7, #20]

    /* PLL1 is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d118      	bne.n	8001eec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the PLL1 ready flag */
      if ((tmpreg1 & RCC_CR_PLL1RDY) == 0U)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0d5      	b.n	8002074 <HAL_RCC_ClockConfig+0x240>
      }
      else
      {
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8001ec8:	4b6d      	ldr	r3, [pc, #436]	@ (8002080 <HAL_RCC_ClockConfig+0x24c>)
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	f003 020c 	and.w	r2, r3, #12
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d01a      	beq.n	8001f10 <HAL_RCC_ClockConfig+0xdc>
        {
          /* Whatever is PLL frequency, use step prediv to reach maximum frequency. */
          /* Select pll1r to be prediv with 2-step divider when selected as Sysclk source */
          MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRESTEP, RCC_PLL1CFGR_PLL1RCLKPRE);
 8001eda:	4b69      	ldr	r3, [pc, #420]	@ (8002080 <HAL_RCC_ClockConfig+0x24c>)
 8001edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ede:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001ee2:	4a67      	ldr	r2, [pc, #412]	@ (8002080 <HAL_RCC_ClockConfig+0x24c>)
 8001ee4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ee8:	6293      	str	r3, [r2, #40]	@ 0x28
 8001eea:	e011      	b.n	8001f10 <HAL_RCC_ClockConfig+0xdc>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d106      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xce>
      {
        /* Check the HSE ready flag */
        if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d108      	bne.n	8001f10 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0b8      	b.n	8002074 <HAL_RCC_ClockConfig+0x240>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0b1      	b.n	8002074 <HAL_RCC_ClockConfig+0x240>
        }
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f10:	4b5b      	ldr	r3, [pc, #364]	@ (8002080 <HAL_RCC_ClockConfig+0x24c>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	f023 0203 	bic.w	r2, r3, #3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	4958      	ldr	r1, [pc, #352]	@ (8002080 <HAL_RCC_ClockConfig+0x24c>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f22:	f7fe ffc5 	bl	8000eb0 <HAL_GetTick>
 8001f26:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_ClockConfig+0x10c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2a:	f7fe ffc1 	bl	8000eb0 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e099      	b.n	8002074 <HAL_RCC_ClockConfig+0x240>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8001f40:	4b4f      	ldr	r3, [pc, #316]	@ (8002080 <HAL_RCC_ClockConfig+0x24c>)
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	f003 020c 	and.w	r2, r3, #12
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d1eb      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xf6>
      }
    }

    /* If PLL1rCLK is asked to be SYSCLK source, clear prediv. */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d118      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x158>
    {
      /* Set PLL1R prediv to not divided */
      CLEAR_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRE);
 8001f5a:	4b49      	ldr	r3, [pc, #292]	@ (8002080 <HAL_RCC_ClockConfig+0x24c>)
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5e:	4a48      	ldr	r2, [pc, #288]	@ (8002080 <HAL_RCC_ClockConfig+0x24c>)
 8001f60:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001f64:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f66:	f7fe ffa3 	bl	8000eb0 <HAL_GetTick>
 8001f6a:	60f8      	str	r0, [r7, #12]

      /* Wait until PLL1 not divided is ready */
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_ClockConfig+0x14c>
      {
        if ((HAL_GetTick() - tickstart) > PLL1_NDIV_TIMEOUT_VALUE)
 8001f6e:	f7fe ff9f 	bl	8000eb0 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b0a      	cmp	r3, #10
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_ClockConfig+0x14c>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e079      	b.n	8002074 <HAL_RCC_ClockConfig+0x240>
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8001f80:	4b3f      	ldr	r3, [pc, #252]	@ (8002080 <HAL_RCC_ClockConfig+0x24c>)
 8001f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 8001f8c:	4b3c      	ldr	r3, [pc, #240]	@ (8002080 <HAL_RCC_ClockConfig+0x24c>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00a      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f023 0307 	bic.w	r3, r3, #7
 8001fa8:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00a      	beq.n	8001fda <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fca:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00b      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x1ca>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001fec:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <HAL_RCC_ClockConfig+0x1d6>
  {
    RCC->CFGR2 = tmpreg1;
 8002004:	4a1e      	ldr	r2, [pc, #120]	@ (8002080 <HAL_RCC_ClockConfig+0x24c>)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK7 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK7) == RCC_CLOCKTYPE_PCLK7)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB7CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB7CLKDivider);
 8002016:	4a1a      	ldr	r2, [pc, #104]	@ (8002080 <HAL_RCC_ClockConfig+0x24c>)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800201e:	4b17      	ldr	r3, [pc, #92]	@ (800207c <HAL_RCC_ClockConfig+0x248>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d210      	bcs.n	800204e <HAL_RCC_ClockConfig+0x21a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202c:	4b13      	ldr	r3, [pc, #76]	@ (800207c <HAL_RCC_ClockConfig+0x248>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f023 020f 	bic.w	r2, r3, #15
 8002034:	4911      	ldr	r1, [pc, #68]	@ (800207c <HAL_RCC_ClockConfig+0x248>)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	4313      	orrs	r3, r2
 800203a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203c:	4b0f      	ldr	r3, [pc, #60]	@ (800207c <HAL_RCC_ClockConfig+0x248>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d001      	beq.n	800204e <HAL_RCC_ClockConfig+0x21a>
    {
      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e012      	b.n	8002074 <HAL_RCC_ClockConfig+0x240>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800204e:	f000 f81f 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 8002052:	4602      	mov	r2, r0
 8002054:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <HAL_RCC_ClockConfig+0x24c>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	4909      	ldr	r1, [pc, #36]	@ (8002084 <HAL_RCC_ClockConfig+0x250>)
 800205e:	5ccb      	ldrb	r3, [r1, r3]
 8002060:	fa22 f303 	lsr.w	r3, r2, r3
 8002064:	4a08      	ldr	r2, [pc, #32]	@ (8002088 <HAL_RCC_ClockConfig+0x254>)
 8002066:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002068:	4b08      	ldr	r3, [pc, #32]	@ (800208c <HAL_RCC_ClockConfig+0x258>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fe8d 	bl	8000d8c <HAL_InitTick>
 8002072:	4603      	mov	r3, r0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40022000 	.word	0x40022000
 8002080:	46020c00 	.word	0x46020c00
 8002084:	08002d98 	.word	0x08002d98
 8002088:	20000000 	.word	0x20000000
 800208c:	20000034 	.word	0x20000034

08002090 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
  uint32_t sysclk;

  /* Get SYSCLK source */
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002096:	4b10      	ldr	r3, [pc, #64]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x48>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	607b      	str	r3, [r7, #4]

  if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d102      	bne.n	80020ac <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x4c>)
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	e00f      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d109      	bne.n	80020c6 <HAL_RCC_GetSysClockFreq+0x36>
  {
    /* HSE used as system clock source. Check if HSE is divided by 2 */
    sysclk = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 80020b2:	4b09      	ldr	r3, [pc, #36]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x48>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	0d1b      	lsrs	r3, r3, #20
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	4a08      	ldr	r2, [pc, #32]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x50>)
 80020be:	fa22 f303 	lsr.w	r3, r2, r3
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	e002      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else
  {
    /* PLL1 used as system clock source */
    sysclk = HAL_RCC_GetPLL1RFreq();
 80020c6:	f000 f863 	bl	8002190 <HAL_RCC_GetPLL1RFreq>
 80020ca:	6078      	str	r0, [r7, #4]
  }

  return sysclk;
 80020cc:	687b      	ldr	r3, [r7, #4]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	46020c00 	.word	0x46020c00
 80020dc:	00f42400 	.word	0x00f42400
 80020e0:	01e84800 	.word	0x01e84800

080020e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80020e8:	f7ff ffd2 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b07      	ldr	r3, [pc, #28]	@ (800210c <HAL_RCC_GetHCLKFreq+0x28>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	4906      	ldr	r1, [pc, #24]	@ (8002110 <HAL_RCC_GetHCLKFreq+0x2c>)
 80020f8:	5ccb      	ldrb	r3, [r1, r3]
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	4a05      	ldr	r2, [pc, #20]	@ (8002114 <HAL_RCC_GetHCLKFreq+0x30>)
 8002100:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002102:	4b04      	ldr	r3, [pc, #16]	@ (8002114 <HAL_RCC_GetHCLKFreq+0x30>)
 8002104:	681b      	ldr	r3, [r3, #0]
}
 8002106:	4618      	mov	r0, r3
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	46020c00 	.word	0x46020c00
 8002110:	08002d98 	.word	0x08002d98
 8002114:	20000000 	.word	0x20000000

08002118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800211c:	f7ff ffe2 	bl	80020e4 <HAL_RCC_GetHCLKFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	4903      	ldr	r1, [pc, #12]	@ (800213c <HAL_RCC_GetPCLK1Freq+0x24>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	46020c00 	.word	0x46020c00
 800213c:	08002da0 	.word	0x08002da0

08002140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002144:	f7ff ffce 	bl	80020e4 <HAL_RCC_GetHCLKFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4903      	ldr	r1, [pc, #12]	@ (8002164 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	46020c00 	.word	0x46020c00
 8002164:	08002da0 	.word	0x08002da0

08002168 <HAL_RCC_GetPCLK7Freq>:
  * @note   Each time PCLK7 changes, this function must be called to update the
  *         right PCLK7 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK7 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK7Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK7 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE7) >> RCC_CFGR3_PPRE7_Pos]);
 800216c:	f7ff ffba 	bl	80020e4 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <HAL_RCC_GetPCLK7Freq+0x20>)
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4903      	ldr	r1, [pc, #12]	@ (800218c <HAL_RCC_GetPCLK7Freq+0x24>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	46020c00 	.word	0x46020c00
 800218c:	08002da0 	.word	0x08002da0

08002190 <HAL_RCC_GetPLL1RFreq>:
/**
  * @brief  Return the PLL1R frequency.
  * @retval PLL1R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL1RFreq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL1R divider */
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8002196:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <HAL_RCC_GetPLL1RFreq+0x34>)
 8002198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800219a:	0e1b      	lsrs	r3, r3, #24
 800219c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021a0:	3301      	adds	r3, #1
 80021a2:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL1R one */
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 80021a4:	f000 f810 	bl	80021c8 <RCC_PLL1_GetVCOOutputFreq>
 80021a8:	eef0 7a40 	vmov.f32	s15, s0
 80021ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021b0:	ee17 2a90 	vmov	r2, s15
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	46020c00 	.word	0x46020c00

080021c8 <RCC_PLL1_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL1 VCO output frequency
  * @retval Value of PLL1 VCO output frequency
  */
static float_t RCC_PLL1_GetVCOOutputFreq(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
  float_t pllm;
  float_t plln;
  float_t pllfracn;

  /* Get PLL1 DIVR register value */
  tmpreg1 = RCC->PLL1DIVR;
 80021ce:	4b36      	ldr	r3, [pc, #216]	@ (80022a8 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 80021d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 multiplication factor */
  tmp = (tmpreg1 & RCC_PLL1DIVR_PLL1N) + 1U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021da:	3301      	adds	r3, #1
 80021dc:	617b      	str	r3, [r7, #20]
  plln = (float_t) tmp;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	ee07 3a90 	vmov	s15, r3
 80021e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021e8:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Get PLL1 CFGR register value */
  tmpreg1 = RCC->PLL1CFGR;
 80021ec:	4b2e      	ldr	r3, [pc, #184]	@ (80022a8 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 80021ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 divider */
  tmp = ((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	3301      	adds	r3, #1
 80021fc:	617b      	str	r3, [r7, #20]
  pllm = (float_t) tmp;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	ee07 3a90 	vmov	s15, r3
 8002204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002208:	edc7 7a01 	vstr	s15, [r7, #4]

  /* Check if fractional part is enable */
  if ((tmpreg1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b00      	cmp	r3, #0
 8002214:	d006      	beq.n	8002224 <RCC_PLL1_GetVCOOutputFreq+0x5c>
  {
    tmp = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 8002216:	4b24      	ldr	r3, [pc, #144]	@ (80022a8 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8002218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800221a:	08db      	lsrs	r3, r3, #3
 800221c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	e001      	b.n	8002228 <RCC_PLL1_GetVCOOutputFreq+0x60>
  }
  else
  {
    tmp = 0u;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
  }
  pllfracn = (float_t)tmp;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002232:	edc7 7a00 	vstr	s15, [r7]

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLL1CFGR_PLL1SRC)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d002      	beq.n	8002246 <RCC_PLL1_GetVCOOutputFreq+0x7e>
 8002240:	2b03      	cmp	r3, #3
 8002242:	d003      	beq.n	800224c <RCC_PLL1_GetVCOOutputFreq+0x84>
 8002244:	e013      	b.n	800226e <RCC_PLL1_GetVCOOutputFreq+0xa6>
  {
    /* HSI used as PLL1 clock source */
    case RCC_PLLSOURCE_HSI:
      pllsrc = (float_t)HSI_VALUE;
 8002246:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <RCC_PLL1_GetVCOOutputFreq+0xe4>)
 8002248:	613b      	str	r3, [r7, #16]
      break;
 800224a:	e014      	b.n	8002276 <RCC_PLL1_GetVCOOutputFreq+0xae>

    /* HSE used as PLL1 clock source */
    case RCC_PLLSOURCE_HSE:
      tmp = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 800224c:	4b16      	ldr	r3, [pc, #88]	@ (80022a8 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0d1b      	lsrs	r3, r3, #20
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	4a16      	ldr	r2, [pc, #88]	@ (80022b0 <RCC_PLL1_GetVCOOutputFreq+0xe8>)
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
 800225c:	617b      	str	r3, [r7, #20]
      pllsrc = (float_t)tmp;
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	ee07 3a90 	vmov	s15, r3
 8002264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002268:	edc7 7a04 	vstr	s15, [r7, #16]
      break;
 800226c:	e003      	b.n	8002276 <RCC_PLL1_GetVCOOutputFreq+0xae>

    default:
      pllsrc = (float_t)0;
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	613b      	str	r3, [r7, #16]
      break;
 8002274:	bf00      	nop
  }

  /* Compute VCO output frequency */
  return ((pllsrc / pllm) * (plln + (pllfracn / (float_t)0x2000u)));
 8002276:	edd7 6a04 	vldr	s13, [r7, #16]
 800227a:	edd7 7a01 	vldr	s15, [r7, #4]
 800227e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002282:	edd7 7a00 	vldr	s15, [r7]
 8002286:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 80022b4 <RCC_PLL1_GetVCOOutputFreq+0xec>
 800228a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800228e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002296:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800229a:	eeb0 0a67 	vmov.f32	s0, s15
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	46020c00 	.word	0x46020c00
 80022ac:	4b742400 	.word	0x4b742400
 80022b0:	01e84800 	.word	0x01e84800
 80022b4:	46000000 	.word	0x46000000

080022b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e042      	b.n	8002350 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d106      	bne.n	80022e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f83b 	bl	8002358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2224      	movs	r2, #36	@ 0x24
 80022e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fad0 	bl	80028a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f82f 	bl	800236c <UART_SetConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e01b      	b.n	8002350 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 fb4f 	bl	80029ec <UART_CheckIdleState>
 800234e:	4603      	mov	r3, r0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800236c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002370:	b08c      	sub	sp, #48	@ 0x30
 8002372:	af00      	add	r7, sp, #0
 8002374:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	431a      	orrs	r2, r3
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	431a      	orrs	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	4313      	orrs	r3, r2
 8002392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	4b98      	ldr	r3, [pc, #608]	@ (80025fc <UART_SetConfig+0x290>)
 800239c:	4013      	ands	r3, r2
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a8d      	ldr	r2, [pc, #564]	@ (8002600 <UART_SetConfig+0x294>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d004      	beq.n	80023d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023d4:	4313      	orrs	r3, r2
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80023e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80023ec:	430b      	orrs	r3, r1
 80023ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f6:	f023 010f 	bic.w	r1, r3, #15
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a7e      	ldr	r2, [pc, #504]	@ (8002604 <UART_SetConfig+0x298>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d125      	bne.n	800245c <UART_SetConfig+0xf0>
 8002410:	4b7d      	ldr	r3, [pc, #500]	@ (8002608 <UART_SetConfig+0x29c>)
 8002412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b03      	cmp	r3, #3
 800241c:	d81a      	bhi.n	8002454 <UART_SetConfig+0xe8>
 800241e:	a201      	add	r2, pc, #4	@ (adr r2, 8002424 <UART_SetConfig+0xb8>)
 8002420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002424:	08002435 	.word	0x08002435
 8002428:	08002445 	.word	0x08002445
 800242c:	0800243d 	.word	0x0800243d
 8002430:	0800244d 	.word	0x0800244d
 8002434:	2301      	movs	r3, #1
 8002436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800243a:	e07c      	b.n	8002536 <UART_SetConfig+0x1ca>
 800243c:	2304      	movs	r3, #4
 800243e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002442:	e078      	b.n	8002536 <UART_SetConfig+0x1ca>
 8002444:	2308      	movs	r3, #8
 8002446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800244a:	e074      	b.n	8002536 <UART_SetConfig+0x1ca>
 800244c:	2310      	movs	r3, #16
 800244e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002452:	e070      	b.n	8002536 <UART_SetConfig+0x1ca>
 8002454:	2320      	movs	r3, #32
 8002456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800245a:	e06c      	b.n	8002536 <UART_SetConfig+0x1ca>
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a6a      	ldr	r2, [pc, #424]	@ (800260c <UART_SetConfig+0x2a0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d138      	bne.n	80024d8 <UART_SetConfig+0x16c>
 8002466:	4b68      	ldr	r3, [pc, #416]	@ (8002608 <UART_SetConfig+0x29c>)
 8002468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b0c      	cmp	r3, #12
 8002472:	d82d      	bhi.n	80024d0 <UART_SetConfig+0x164>
 8002474:	a201      	add	r2, pc, #4	@ (adr r2, 800247c <UART_SetConfig+0x110>)
 8002476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247a:	bf00      	nop
 800247c:	080024b1 	.word	0x080024b1
 8002480:	080024d1 	.word	0x080024d1
 8002484:	080024d1 	.word	0x080024d1
 8002488:	080024d1 	.word	0x080024d1
 800248c:	080024c1 	.word	0x080024c1
 8002490:	080024d1 	.word	0x080024d1
 8002494:	080024d1 	.word	0x080024d1
 8002498:	080024d1 	.word	0x080024d1
 800249c:	080024b9 	.word	0x080024b9
 80024a0:	080024d1 	.word	0x080024d1
 80024a4:	080024d1 	.word	0x080024d1
 80024a8:	080024d1 	.word	0x080024d1
 80024ac:	080024c9 	.word	0x080024c9
 80024b0:	2300      	movs	r3, #0
 80024b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024b6:	e03e      	b.n	8002536 <UART_SetConfig+0x1ca>
 80024b8:	2304      	movs	r3, #4
 80024ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024be:	e03a      	b.n	8002536 <UART_SetConfig+0x1ca>
 80024c0:	2308      	movs	r3, #8
 80024c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024c6:	e036      	b.n	8002536 <UART_SetConfig+0x1ca>
 80024c8:	2310      	movs	r3, #16
 80024ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024ce:	e032      	b.n	8002536 <UART_SetConfig+0x1ca>
 80024d0:	2320      	movs	r3, #32
 80024d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024d6:	e02e      	b.n	8002536 <UART_SetConfig+0x1ca>
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a48      	ldr	r2, [pc, #288]	@ (8002600 <UART_SetConfig+0x294>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d126      	bne.n	8002530 <UART_SetConfig+0x1c4>
 80024e2:	4b49      	ldr	r3, [pc, #292]	@ (8002608 <UART_SetConfig+0x29c>)
 80024e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d81b      	bhi.n	8002528 <UART_SetConfig+0x1bc>
 80024f0:	a201      	add	r2, pc, #4	@ (adr r2, 80024f8 <UART_SetConfig+0x18c>)
 80024f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f6:	bf00      	nop
 80024f8:	08002509 	.word	0x08002509
 80024fc:	08002519 	.word	0x08002519
 8002500:	08002511 	.word	0x08002511
 8002504:	08002521 	.word	0x08002521
 8002508:	2302      	movs	r3, #2
 800250a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800250e:	e012      	b.n	8002536 <UART_SetConfig+0x1ca>
 8002510:	2304      	movs	r3, #4
 8002512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002516:	e00e      	b.n	8002536 <UART_SetConfig+0x1ca>
 8002518:	2308      	movs	r3, #8
 800251a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800251e:	e00a      	b.n	8002536 <UART_SetConfig+0x1ca>
 8002520:	2310      	movs	r3, #16
 8002522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002526:	e006      	b.n	8002536 <UART_SetConfig+0x1ca>
 8002528:	2320      	movs	r3, #32
 800252a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800252e:	e002      	b.n	8002536 <UART_SetConfig+0x1ca>
 8002530:	2320      	movs	r3, #32
 8002532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a31      	ldr	r2, [pc, #196]	@ (8002600 <UART_SetConfig+0x294>)
 800253c:	4293      	cmp	r3, r2
 800253e:	f040 80b4 	bne.w	80026aa <UART_SetConfig+0x33e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002542:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002546:	3b02      	subs	r3, #2
 8002548:	2b0e      	cmp	r3, #14
 800254a:	d830      	bhi.n	80025ae <UART_SetConfig+0x242>
 800254c:	a201      	add	r2, pc, #4	@ (adr r2, 8002554 <UART_SetConfig+0x1e8>)
 800254e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002552:	bf00      	nop
 8002554:	08002591 	.word	0x08002591
 8002558:	080025af 	.word	0x080025af
 800255c:	08002599 	.word	0x08002599
 8002560:	080025af 	.word	0x080025af
 8002564:	080025af 	.word	0x080025af
 8002568:	080025af 	.word	0x080025af
 800256c:	0800259f 	.word	0x0800259f
 8002570:	080025af 	.word	0x080025af
 8002574:	080025af 	.word	0x080025af
 8002578:	080025af 	.word	0x080025af
 800257c:	080025af 	.word	0x080025af
 8002580:	080025af 	.word	0x080025af
 8002584:	080025af 	.word	0x080025af
 8002588:	080025af 	.word	0x080025af
 800258c:	080025a7 	.word	0x080025a7
    {
      case UART_CLOCKSOURCE_PCLK7:
        pclk = HAL_RCC_GetPCLK7Freq();
 8002590:	f7ff fdea 	bl	8002168 <HAL_RCC_GetPCLK7Freq>
 8002594:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002596:	e010      	b.n	80025ba <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002598:	4b1d      	ldr	r3, [pc, #116]	@ (8002610 <UART_SetConfig+0x2a4>)
 800259a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800259c:	e00d      	b.n	80025ba <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800259e:	f7ff fd77 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 80025a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80025a4:	e009      	b.n	80025ba <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80025ac:	e005      	b.n	80025ba <UART_SetConfig+0x24e>
      default:
        pclk = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80025b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 8159 	beq.w	8002874 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	4a13      	ldr	r2, [pc, #76]	@ (8002614 <UART_SetConfig+0x2a8>)
 80025c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025cc:	461a      	mov	r2, r3
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4413      	add	r3, r2
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d305      	bcc.n	80025f2 <UART_SetConfig+0x286>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d912      	bls.n	8002618 <UART_SetConfig+0x2ac>
      {
        ret = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80025f8:	e13c      	b.n	8002874 <UART_SetConfig+0x508>
 80025fa:	bf00      	nop
 80025fc:	cfff69f3 	.word	0xcfff69f3
 8002600:	46002400 	.word	0x46002400
 8002604:	40013800 	.word	0x40013800
 8002608:	46020c00 	.word	0x46020c00
 800260c:	40004400 	.word	0x40004400
 8002610:	00f42400 	.word	0x00f42400
 8002614:	08002da8 	.word	0x08002da8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	2200      	movs	r2, #0
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	60fa      	str	r2, [r7, #12]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002624:	4a9e      	ldr	r2, [pc, #632]	@ (80028a0 <UART_SetConfig+0x534>)
 8002626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800262a:	b29b      	uxth	r3, r3
 800262c:	2200      	movs	r2, #0
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002636:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800263a:	f7fd fdaf 	bl	800019c <__aeabi_uldivmod>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4610      	mov	r0, r2
 8002644:	4619      	mov	r1, r3
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	020b      	lsls	r3, r1, #8
 8002650:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002654:	0202      	lsls	r2, r0, #8
 8002656:	6979      	ldr	r1, [r7, #20]
 8002658:	6849      	ldr	r1, [r1, #4]
 800265a:	0849      	lsrs	r1, r1, #1
 800265c:	2000      	movs	r0, #0
 800265e:	460c      	mov	r4, r1
 8002660:	4605      	mov	r5, r0
 8002662:	eb12 0804 	adds.w	r8, r2, r4
 8002666:	eb43 0905 	adc.w	r9, r3, r5
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	469a      	mov	sl, r3
 8002672:	4693      	mov	fp, r2
 8002674:	4652      	mov	r2, sl
 8002676:	465b      	mov	r3, fp
 8002678:	4640      	mov	r0, r8
 800267a:	4649      	mov	r1, r9
 800267c:	f7fd fd8e 	bl	800019c <__aeabi_uldivmod>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4613      	mov	r3, r2
 8002686:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800268e:	d308      	bcc.n	80026a2 <UART_SetConfig+0x336>
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002696:	d204      	bcs.n	80026a2 <UART_SetConfig+0x336>
        {
          huart->Instance->BRR = usartdiv;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6a3a      	ldr	r2, [r7, #32]
 800269e:	60da      	str	r2, [r3, #12]
 80026a0:	e0e8      	b.n	8002874 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80026a8:	e0e4      	b.n	8002874 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026b2:	d177      	bne.n	80027a4 <UART_SetConfig+0x438>
  {
    switch (clocksource)
 80026b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80026b8:	2b10      	cmp	r3, #16
 80026ba:	d838      	bhi.n	800272e <UART_SetConfig+0x3c2>
 80026bc:	a201      	add	r2, pc, #4	@ (adr r2, 80026c4 <UART_SetConfig+0x358>)
 80026be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c2:	bf00      	nop
 80026c4:	08002709 	.word	0x08002709
 80026c8:	08002711 	.word	0x08002711
 80026cc:	0800272f 	.word	0x0800272f
 80026d0:	0800272f 	.word	0x0800272f
 80026d4:	08002719 	.word	0x08002719
 80026d8:	0800272f 	.word	0x0800272f
 80026dc:	0800272f 	.word	0x0800272f
 80026e0:	0800272f 	.word	0x0800272f
 80026e4:	0800271f 	.word	0x0800271f
 80026e8:	0800272f 	.word	0x0800272f
 80026ec:	0800272f 	.word	0x0800272f
 80026f0:	0800272f 	.word	0x0800272f
 80026f4:	0800272f 	.word	0x0800272f
 80026f8:	0800272f 	.word	0x0800272f
 80026fc:	0800272f 	.word	0x0800272f
 8002700:	0800272f 	.word	0x0800272f
 8002704:	08002727 	.word	0x08002727
    {
#if defined(USART2)
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002708:	f7ff fd06 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 800270c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800270e:	e014      	b.n	800273a <UART_SetConfig+0x3ce>
#endif /* USART2 */
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002710:	f7ff fd16 	bl	8002140 <HAL_RCC_GetPCLK2Freq>
 8002714:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002716:	e010      	b.n	800273a <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002718:	4b62      	ldr	r3, [pc, #392]	@ (80028a4 <UART_SetConfig+0x538>)
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800271c:	e00d      	b.n	800273a <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800271e:	f7ff fcb7 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 8002722:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002724:	e009      	b.n	800273a <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800272c:	e005      	b.n	800273a <UART_SetConfig+0x3ce>
      default:
        pclk = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002738:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 8099 	beq.w	8002874 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	4a56      	ldr	r2, [pc, #344]	@ (80028a0 <UART_SetConfig+0x534>)
 8002748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800274c:	461a      	mov	r2, r3
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	fbb3 f3f2 	udiv	r3, r3, r2
 8002754:	005a      	lsls	r2, r3, #1
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	085b      	lsrs	r3, r3, #1
 800275c:	441a      	add	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	fbb2 f3f3 	udiv	r3, r2, r3
 8002766:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	2b0f      	cmp	r3, #15
 800276c:	d916      	bls.n	800279c <UART_SetConfig+0x430>
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002774:	d212      	bcs.n	800279c <UART_SetConfig+0x430>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	b29b      	uxth	r3, r3
 800277a:	f023 030f 	bic.w	r3, r3, #15
 800277e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	085b      	lsrs	r3, r3, #1
 8002784:	b29b      	uxth	r3, r3
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	b29a      	uxth	r2, r3
 800278c:	8bfb      	ldrh	r3, [r7, #30]
 800278e:	4313      	orrs	r3, r2
 8002790:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	8bfa      	ldrh	r2, [r7, #30]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	e06b      	b.n	8002874 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80027a2:	e067      	b.n	8002874 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80027a8:	2b10      	cmp	r3, #16
 80027aa:	d838      	bhi.n	800281e <UART_SetConfig+0x4b2>
 80027ac:	a201      	add	r2, pc, #4	@ (adr r2, 80027b4 <UART_SetConfig+0x448>)
 80027ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b2:	bf00      	nop
 80027b4:	080027f9 	.word	0x080027f9
 80027b8:	08002801 	.word	0x08002801
 80027bc:	0800281f 	.word	0x0800281f
 80027c0:	0800281f 	.word	0x0800281f
 80027c4:	08002809 	.word	0x08002809
 80027c8:	0800281f 	.word	0x0800281f
 80027cc:	0800281f 	.word	0x0800281f
 80027d0:	0800281f 	.word	0x0800281f
 80027d4:	0800280f 	.word	0x0800280f
 80027d8:	0800281f 	.word	0x0800281f
 80027dc:	0800281f 	.word	0x0800281f
 80027e0:	0800281f 	.word	0x0800281f
 80027e4:	0800281f 	.word	0x0800281f
 80027e8:	0800281f 	.word	0x0800281f
 80027ec:	0800281f 	.word	0x0800281f
 80027f0:	0800281f 	.word	0x0800281f
 80027f4:	08002817 	.word	0x08002817
    {
#if defined(USART2)
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027f8:	f7ff fc8e 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 80027fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80027fe:	e014      	b.n	800282a <UART_SetConfig+0x4be>
#endif /* USART2 */
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002800:	f7ff fc9e 	bl	8002140 <HAL_RCC_GetPCLK2Freq>
 8002804:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002806:	e010      	b.n	800282a <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002808:	4b26      	ldr	r3, [pc, #152]	@ (80028a4 <UART_SetConfig+0x538>)
 800280a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800280c:	e00d      	b.n	800282a <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800280e:	f7ff fc3f 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 8002812:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002814:	e009      	b.n	800282a <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800281a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800281c:	e005      	b.n	800282a <UART_SetConfig+0x4be>
      default:
        pclk = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002828:	bf00      	nop
    }

    if (pclk != 0U)
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	2b00      	cmp	r3, #0
 800282e:	d021      	beq.n	8002874 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	4a1a      	ldr	r2, [pc, #104]	@ (80028a0 <UART_SetConfig+0x534>)
 8002836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800283a:	461a      	mov	r2, r3
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	085b      	lsrs	r3, r3, #1
 8002848:	441a      	add	r2, r3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	2b0f      	cmp	r3, #15
 8002858:	d909      	bls.n	800286e <UART_SetConfig+0x502>
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002860:	d205      	bcs.n	800286e <UART_SetConfig+0x502>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	b29a      	uxth	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	60da      	str	r2, [r3, #12]
 800286c:	e002      	b.n	8002874 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2201      	movs	r2, #1
 8002878:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2201      	movs	r2, #1
 8002880:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2200      	movs	r2, #0
 8002888:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2200      	movs	r2, #0
 800288e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002890:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002894:	4618      	mov	r0, r3
 8002896:	3730      	adds	r7, #48	@ 0x30
 8002898:	46bd      	mov	sp, r7
 800289a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800289e:	bf00      	nop
 80028a0:	08002da8 	.word	0x08002da8
 80028a4:	00f42400 	.word	0x00f42400

080028a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01a      	beq.n	80029be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029a6:	d10a      	bne.n	80029be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	605a      	str	r2, [r3, #4]
  }
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b098      	sub	sp, #96	@ 0x60
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029fc:	f7fe fa58 	bl	8000eb0 <HAL_GetTick>
 8002a00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d12f      	bne.n	8002a70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f88e 	bl	8002b40 <UART_WaitOnFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d022      	beq.n	8002a70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a32:	e853 3f00 	ldrex	r3, [r3]
 8002a36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a4a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a50:	e841 2300 	strex	r3, r2, [r1]
 8002a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1e6      	bne.n	8002a2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e063      	b.n	8002b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d149      	bne.n	8002b12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a7e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a86:	2200      	movs	r2, #0
 8002a88:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f857 	bl	8002b40 <UART_WaitOnFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d03c      	beq.n	8002b12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	e853 3f00 	ldrex	r3, [r3]
 8002aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ab6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ab8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002abc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002abe:	e841 2300 	strex	r3, r2, [r1]
 8002ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1e6      	bne.n	8002a98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3308      	adds	r3, #8
 8002ad0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	e853 3f00 	ldrex	r3, [r3]
 8002ad8:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3308      	adds	r3, #8
 8002ae8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002aea:	61fa      	str	r2, [r7, #28]
 8002aec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aee:	69b9      	ldr	r1, [r7, #24]
 8002af0:	69fa      	ldr	r2, [r7, #28]
 8002af2:	e841 2300 	strex	r3, r2, [r1]
 8002af6:	617b      	str	r3, [r7, #20]
   return(result);
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1e5      	bne.n	8002aca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e012      	b.n	8002b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3758      	adds	r7, #88	@ 0x58
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b50:	e04f      	b.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d04b      	beq.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5a:	f7fe f9a9 	bl	8000eb0 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d302      	bcc.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e04e      	b.n	8002c12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d037      	beq.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b80      	cmp	r3, #128	@ 0x80
 8002b86:	d034      	beq.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b40      	cmp	r3, #64	@ 0x40
 8002b8c:	d031      	beq.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d110      	bne.n	8002bbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2208      	movs	r2, #8
 8002ba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f838 	bl	8002c1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2208      	movs	r2, #8
 8002bae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e029      	b.n	8002c12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bcc:	d111      	bne.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f81e 	bl	8002c1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e00f      	b.n	8002c12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	bf0c      	ite	eq
 8002c02:	2301      	moveq	r3, #1
 8002c04:	2300      	movne	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d0a0      	beq.n	8002b52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b095      	sub	sp, #84	@ 0x54
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c2a:	e853 3f00 	ldrex	r3, [r3]
 8002c2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c40:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c48:	e841 2300 	strex	r3, r2, [r1]
 8002c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1e6      	bne.n	8002c22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3308      	adds	r3, #8
 8002c5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	e853 3f00 	ldrex	r3, [r3]
 8002c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3308      	adds	r3, #8
 8002c76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c80:	e841 2300 	strex	r3, r2, [r1]
 8002c84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1e3      	bne.n	8002c54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d118      	bne.n	8002cc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	e853 3f00 	ldrex	r3, [r3]
 8002ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f023 0310 	bic.w	r3, r3, #16
 8002ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb6:	6979      	ldr	r1, [r7, #20]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	e841 2300 	strex	r3, r2, [r1]
 8002cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1e6      	bne.n	8002c94 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002cda:	bf00      	nop
 8002cdc:	3754      	adds	r7, #84	@ 0x54
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <memset>:
 8002ce6:	4402      	add	r2, r0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d100      	bne.n	8002cf0 <memset+0xa>
 8002cee:	4770      	bx	lr
 8002cf0:	f803 1b01 	strb.w	r1, [r3], #1
 8002cf4:	e7f9      	b.n	8002cea <memset+0x4>
	...

08002cf8 <__libc_init_array>:
 8002cf8:	b570      	push	{r4, r5, r6, lr}
 8002cfa:	4d0d      	ldr	r5, [pc, #52]	@ (8002d30 <__libc_init_array+0x38>)
 8002cfc:	2600      	movs	r6, #0
 8002cfe:	4c0d      	ldr	r4, [pc, #52]	@ (8002d34 <__libc_init_array+0x3c>)
 8002d00:	1b64      	subs	r4, r4, r5
 8002d02:	10a4      	asrs	r4, r4, #2
 8002d04:	42a6      	cmp	r6, r4
 8002d06:	d109      	bne.n	8002d1c <__libc_init_array+0x24>
 8002d08:	4d0b      	ldr	r5, [pc, #44]	@ (8002d38 <__libc_init_array+0x40>)
 8002d0a:	2600      	movs	r6, #0
 8002d0c:	4c0b      	ldr	r4, [pc, #44]	@ (8002d3c <__libc_init_array+0x44>)
 8002d0e:	f000 f817 	bl	8002d40 <_init>
 8002d12:	1b64      	subs	r4, r4, r5
 8002d14:	10a4      	asrs	r4, r4, #2
 8002d16:	42a6      	cmp	r6, r4
 8002d18:	d105      	bne.n	8002d26 <__libc_init_array+0x2e>
 8002d1a:	bd70      	pop	{r4, r5, r6, pc}
 8002d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d20:	3601      	adds	r6, #1
 8002d22:	4798      	blx	r3
 8002d24:	e7ee      	b.n	8002d04 <__libc_init_array+0xc>
 8002d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d2a:	3601      	adds	r6, #1
 8002d2c:	4798      	blx	r3
 8002d2e:	e7f2      	b.n	8002d16 <__libc_init_array+0x1e>
 8002d30:	08002dc8 	.word	0x08002dc8
 8002d34:	08002dc8 	.word	0x08002dc8
 8002d38:	08002dc8 	.word	0x08002dc8
 8002d3c:	08002dcc 	.word	0x08002dcc

08002d40 <_init>:
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	bf00      	nop
 8002d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d46:	bc08      	pop	{r3}
 8002d48:	469e      	mov	lr, r3
 8002d4a:	4770      	bx	lr

08002d4c <_fini>:
 8002d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4e:	bf00      	nop
 8002d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d52:	bc08      	pop	{r3}
 8002d54:	469e      	mov	lr, r3
 8002d56:	4770      	bx	lr
