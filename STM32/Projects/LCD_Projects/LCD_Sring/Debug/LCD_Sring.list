
LCD_Sring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000015c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000253c  0800015c  0800015c  0000115c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002698  08002698  00003698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026f4  080026f4  0000408c  2**0
                  CONTENTS
  4 .ARM          00000000  080026f4  080026f4  0000408c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026f4  080026f4  0000408c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026f4  080026f4  000036f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080026f8  080026f8  000036f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  080026fc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000008c  08002788  0000408c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08002788  000041f8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006508  00000000  00000000  000040c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b1  00000000  00000000  0000a5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  0000bc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004cf  00000000  00000000  0000c320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020791  00000000  00000000  0000c7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b3a  00000000  00000000  0002cf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbd13  00000000  00000000  00035aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001017cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ddc  00000000  00000000  00101810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001035ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800015c <__do_global_dtors_aux>:
 800015c:	b510      	push	{r4, lr}
 800015e:	4c05      	ldr	r4, [pc, #20]	@ (8000174 <__do_global_dtors_aux+0x18>)
 8000160:	7823      	ldrb	r3, [r4, #0]
 8000162:	b933      	cbnz	r3, 8000172 <__do_global_dtors_aux+0x16>
 8000164:	4b04      	ldr	r3, [pc, #16]	@ (8000178 <__do_global_dtors_aux+0x1c>)
 8000166:	b113      	cbz	r3, 800016e <__do_global_dtors_aux+0x12>
 8000168:	4804      	ldr	r0, [pc, #16]	@ (800017c <__do_global_dtors_aux+0x20>)
 800016a:	f3af 8000 	nop.w
 800016e:	2301      	movs	r3, #1
 8000170:	7023      	strb	r3, [r4, #0]
 8000172:	bd10      	pop	{r4, pc}
 8000174:	2000008c 	.word	0x2000008c
 8000178:	00000000 	.word	0x00000000
 800017c:	08002680 	.word	0x08002680

08000180 <frame_dummy>:
 8000180:	b508      	push	{r3, lr}
 8000182:	4b03      	ldr	r3, [pc, #12]	@ (8000190 <frame_dummy+0x10>)
 8000184:	b11b      	cbz	r3, 800018e <frame_dummy+0xe>
 8000186:	4903      	ldr	r1, [pc, #12]	@ (8000194 <frame_dummy+0x14>)
 8000188:	4803      	ldr	r0, [pc, #12]	@ (8000198 <frame_dummy+0x18>)
 800018a:	f3af 8000 	nop.w
 800018e:	bd08      	pop	{r3, pc}
 8000190:	00000000 	.word	0x00000000
 8000194:	20000090 	.word	0x20000090
 8000198:	08002680 	.word	0x08002680

0800019c <LCD_cmd>:
uint16_t data_pins[8] = {GPIO_PIN_14, GPIO_PIN_0, GPIO_PIN_9, GPIO_PIN_15, GPIO_PIN_9, GPIO_PIN_12, GPIO_PIN_15, GPIO_PIN_3};

// Function to wait until the LCD is not busy

// Function to send a command to the LCD
void LCD_cmd(unsigned char cmd) {
 800019c:	b580      	push	{r7, lr}
 800019e:	b084      	sub	sp, #16
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4603      	mov	r3, r0
 80001a4:	71fb      	strb	r3, [r7, #7]


	// Send the command to the data pins
    for (int i = 0; i < 8; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	60fb      	str	r3, [r7, #12]
 80001aa:	e017      	b.n	80001dc <LCD_cmd+0x40>
        HAL_GPIO_WritePin(data_ports[i], data_pins[i], (cmd & (1 << i)));
 80001ac:	4a1b      	ldr	r2, [pc, #108]	@ (800021c <LCD_cmd+0x80>)
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80001b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000220 <LCD_cmd+0x84>)
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80001bc:	2201      	movs	r2, #1
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	fa02 f303 	lsl.w	r3, r2, r3
 80001c4:	b25a      	sxtb	r2, r3
 80001c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ca:	4013      	ands	r3, r2
 80001cc:	b25b      	sxtb	r3, r3
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	461a      	mov	r2, r3
 80001d2:	f000 feeb 	bl	8000fac <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++) {
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	3301      	adds	r3, #1
 80001da:	60fb      	str	r3, [r7, #12]
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	2b07      	cmp	r3, #7
 80001e0:	dde4      	ble.n	80001ac <LCD_cmd+0x10>
    }

    HAL_GPIO_WritePin(GPIOB, RS_Pin, GPIO_PIN_RESET); // Command mode
 80001e2:	2200      	movs	r2, #0
 80001e4:	2180      	movs	r1, #128	@ 0x80
 80001e6:	480f      	ldr	r0, [pc, #60]	@ (8000224 <LCD_cmd+0x88>)
 80001e8:	f000 fee0 	bl	8000fac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, RW_Pin, GPIO_PIN_RESET); // Write mode
 80001ec:	2200      	movs	r2, #0
 80001ee:	2140      	movs	r1, #64	@ 0x40
 80001f0:	480c      	ldr	r0, [pc, #48]	@ (8000224 <LCD_cmd+0x88>)
 80001f2:	f000 fedb 	bl	8000fac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, EN_Pin, GPIO_PIN_SET);   // Enable
 80001f6:	2201      	movs	r2, #1
 80001f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001fc:	4809      	ldr	r0, [pc, #36]	@ (8000224 <LCD_cmd+0x88>)
 80001fe:	f000 fed5 	bl	8000fac <HAL_GPIO_WritePin>
    HAL_Delay(1);                                     // Short delay
 8000202:	2001      	movs	r0, #1
 8000204:	f000 fc18 	bl	8000a38 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, EN_Pin, GPIO_PIN_RESET); // Disable
 8000208:	2200      	movs	r2, #0
 800020a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800020e:	4805      	ldr	r0, [pc, #20]	@ (8000224 <LCD_cmd+0x88>)
 8000210:	f000 fecc 	bl	8000fac <HAL_GPIO_WritePin>
}
 8000214:	bf00      	nop
 8000216:	3710      	adds	r7, #16
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}
 800021c:	20000000 	.word	0x20000000
 8000220:	20000020 	.word	0x20000020
 8000224:	42020400 	.word	0x42020400

08000228 <LCD_data>:

// Function to send data to the LCD
void LCD_data(unsigned char data) {
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]

    // Send the data to the data pins
    for (int i = 0; i < 8; i++) {
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
 8000236:	e017      	b.n	8000268 <LCD_data+0x40>
        HAL_GPIO_WritePin(data_ports[i], data_pins[i], (data & (1 << i)));
 8000238:	4a1b      	ldr	r2, [pc, #108]	@ (80002a8 <LCD_data+0x80>)
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000240:	4a1a      	ldr	r2, [pc, #104]	@ (80002ac <LCD_data+0x84>)
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000248:	2201      	movs	r2, #1
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	fa02 f303 	lsl.w	r3, r2, r3
 8000250:	b25a      	sxtb	r2, r3
 8000252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000256:	4013      	ands	r3, r2
 8000258:	b25b      	sxtb	r3, r3
 800025a:	b2db      	uxtb	r3, r3
 800025c:	461a      	mov	r2, r3
 800025e:	f000 fea5 	bl	8000fac <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++) {
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	3301      	adds	r3, #1
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	2b07      	cmp	r3, #7
 800026c:	dde4      	ble.n	8000238 <LCD_data+0x10>
    }

    HAL_GPIO_WritePin(GPIOB, RS_Pin, GPIO_PIN_SET);   // Data mode
 800026e:	2201      	movs	r2, #1
 8000270:	2180      	movs	r1, #128	@ 0x80
 8000272:	480f      	ldr	r0, [pc, #60]	@ (80002b0 <LCD_data+0x88>)
 8000274:	f000 fe9a 	bl	8000fac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, RW_Pin, GPIO_PIN_RESET); // Write mode
 8000278:	2200      	movs	r2, #0
 800027a:	2140      	movs	r1, #64	@ 0x40
 800027c:	480c      	ldr	r0, [pc, #48]	@ (80002b0 <LCD_data+0x88>)
 800027e:	f000 fe95 	bl	8000fac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, EN_Pin, GPIO_PIN_SET);   // Enable
 8000282:	2201      	movs	r2, #1
 8000284:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000288:	4809      	ldr	r0, [pc, #36]	@ (80002b0 <LCD_data+0x88>)
 800028a:	f000 fe8f 	bl	8000fac <HAL_GPIO_WritePin>
    HAL_Delay(1);                                     // Short delay
 800028e:	2001      	movs	r0, #1
 8000290:	f000 fbd2 	bl	8000a38 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, EN_Pin, GPIO_PIN_RESET); // Disable
 8000294:	2200      	movs	r2, #0
 8000296:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800029a:	4805      	ldr	r0, [pc, #20]	@ (80002b0 <LCD_data+0x88>)
 800029c:	f000 fe86 	bl	8000fac <HAL_GPIO_WritePin>
}
 80002a0:	bf00      	nop
 80002a2:	3710      	adds	r7, #16
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000000 	.word	0x20000000
 80002ac:	20000020 	.word	0x20000020
 80002b0:	42020400 	.word	0x42020400

080002b4 <LCD_init>:

// Function to initialize the LCD
void LCD_init() {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
    unsigned char init_cmds[5] = {0x01, 0x0C, 0x06, 0x38, 0x80}; // Clear, Display ON, Entry mode, Function set, Set cursor
 80002ba:	4a0f      	ldr	r2, [pc, #60]	@ (80002f8 <LCD_init+0x44>)
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002c2:	6018      	str	r0, [r3, #0]
 80002c4:	3304      	adds	r3, #4
 80002c6:	7019      	strb	r1, [r3, #0]

    // Initialize the LCD with commands
    for (int i = 0; i < 5; i++) {
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
 80002cc:	e00c      	b.n	80002e8 <LCD_init+0x34>
        LCD_cmd(init_cmds[i]);
 80002ce:	1d3a      	adds	r2, r7, #4
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	4413      	add	r3, r2
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff60 	bl	800019c <LCD_cmd>
        HAL_Delay(10); // Wait for initialization commands to complete
 80002dc:	200a      	movs	r0, #10
 80002de:	f000 fbab 	bl	8000a38 <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	3301      	adds	r3, #1
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	2b04      	cmp	r3, #4
 80002ec:	ddef      	ble.n	80002ce <LCD_init+0x1a>
    }
}
 80002ee:	bf00      	nop
 80002f0:	bf00      	nop
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	08002698 	.word	0x08002698

080002fc <LCD_Print>:

// Function to print a string to the LCD
void LCD_Print(const char *str) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000304:	e006      	b.n	8000314 <LCD_Print+0x18>
        LCD_data(*str++);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	1c5a      	adds	r2, r3, #1
 800030a:	607a      	str	r2, [r7, #4]
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	f7ff ff8a 	bl	8000228 <LCD_data>
    while (*str) {
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d1f4      	bne.n	8000306 <LCD_Print+0xa>
    }
}
 800031c:	bf00      	nop
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b08a      	sub	sp, #40	@ 0x28
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char a[]={0x0E, 0x1B, 0x11, 0x11, 0x1F, 0x1F, 0x1F, 0x00};
 800032e:	4a28      	ldr	r2, [pc, #160]	@ (80003d0 <main+0xa8>)
 8000330:	f107 0318 	add.w	r3, r7, #24
 8000334:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000338:	e883 0003 	stmia.w	r3, {r0, r1}
    //int len=sizeof(a);
  /* USER CODE END 1 */
    int num=12345;
 800033c:	f243 0339 	movw	r3, #12345	@ 0x3039
 8000340:	627b      	str	r3, [r7, #36]	@ 0x24
    char numchar[20];
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000342:	f000 fabb 	bl	80008bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000346:	f000 f84b 	bl	80003e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034a:	f000 f8b5 	bl	80004b8 <MX_GPIO_Init>
  MX_ICACHE_Init();
 800034e:	f000 f89f 	bl	8000490 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 8000352:	f7ff ffaf 	bl	80002b4 <LCD_init>
  //LCD_Print("goa");
  LCD_cmd(0x40 );
 8000356:	2040      	movs	r0, #64	@ 0x40
 8000358:	f7ff ff20 	bl	800019c <LCD_cmd>
  for(int i=0; i<8; i++)
 800035c:	2300      	movs	r3, #0
 800035e:	623b      	str	r3, [r7, #32]
 8000360:	e00a      	b.n	8000378 <main+0x50>
  	    {

  	  	  LCD_data(a[i]);
 8000362:	f107 0218 	add.w	r2, r7, #24
 8000366:	6a3b      	ldr	r3, [r7, #32]
 8000368:	4413      	add	r3, r2
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff ff5b 	bl	8000228 <LCD_data>
  for(int i=0; i<8; i++)
 8000372:	6a3b      	ldr	r3, [r7, #32]
 8000374:	3301      	adds	r3, #1
 8000376:	623b      	str	r3, [r7, #32]
 8000378:	6a3b      	ldr	r3, [r7, #32]
 800037a:	2b07      	cmp	r3, #7
 800037c:	ddf1      	ble.n	8000362 <main+0x3a>

  	    }
  LCD_cmd(0x80);
 800037e:	2080      	movs	r0, #128	@ 0x80
 8000380:	f7ff ff0c 	bl	800019c <LCD_cmd>
  LCD_data(0);
 8000384:	2000      	movs	r0, #0
 8000386:	f7ff ff4f 	bl	8000228 <LCD_data>
  LCD_cmd(0xc0);
 800038a:	20c0      	movs	r0, #192	@ 0xc0
 800038c:	f7ff ff06 	bl	800019c <LCD_cmd>
  LCD_Print("HYDRABAD");
 8000390:	4810      	ldr	r0, [pc, #64]	@ (80003d4 <main+0xac>)
 8000392:	f7ff ffb3 	bl	80002fc <LCD_Print>
  /* USER CODE END 2 */
  while (1)
    {

      /* USER CODE END WHILE */
     if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == 0)
 8000396:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800039a:	480f      	ldr	r0, [pc, #60]	@ (80003d8 <main+0xb0>)
 800039c:	f000 fdee 	bl	8000f7c <HAL_GPIO_ReadPin>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d105      	bne.n	80003b2 <main+0x8a>
     {
    	 HAL_Delay(250);
 80003a6:	20fa      	movs	r0, #250	@ 0xfa
 80003a8:	f000 fb46 	bl	8000a38 <HAL_Delay>
  	   num++;
 80003ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003ae:	3301      	adds	r3, #1
 80003b0:	627b      	str	r3, [r7, #36]	@ 0x24

     }
     sprintf(numchar, "%d",num);
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80003b6:	4909      	ldr	r1, [pc, #36]	@ (80003dc <main+0xb4>)
 80003b8:	4618      	mov	r0, r3
 80003ba:	f001 fcaf 	bl	8001d1c <siprintf>
       	   LCD_cmd(0x85);
 80003be:	2085      	movs	r0, #133	@ 0x85
 80003c0:	f7ff feec 	bl	800019c <LCD_cmd>
       	   LCD_Print(numchar);
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff ff98 	bl	80002fc <LCD_Print>
     if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == 0)
 80003cc:	e7e3      	b.n	8000396 <main+0x6e>
 80003ce:	bf00      	nop
 80003d0:	080026b0 	.word	0x080026b0
 80003d4:	080026a0 	.word	0x080026a0
 80003d8:	42020800 	.word	0x42020800
 80003dc:	080026ac 	.word	0x080026ac

080003e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b098      	sub	sp, #96	@ 0x60
 80003e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e6:	f107 0320 	add.w	r3, r7, #32
 80003ea:	2240      	movs	r2, #64	@ 0x40
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 fcb4 	bl	8001d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f4:	463b      	mov	r3, r7
 80003f6:	2220      	movs	r2, #32
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 fcae 	bl	8001d5c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000400:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000404:	f000 fe56 	bl	80010b4 <HAL_PWREx_ControlVoltageScaling>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800040e:	f000 f8cf 	bl	80005b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000412:	2302      	movs	r3, #2
 8000414:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000416:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800041a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800041c:	2310      	movs	r3, #16
 800041e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
 8000420:	2302      	movs	r3, #2
 8000422:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
 8000424:	2302      	movs	r3, #2
 8000426:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL1.PLLM = 1;
 8000428:	2301      	movs	r3, #1
 800042a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL1.PLLN = 8;
 800042c:	2308      	movs	r3, #8
 800042e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL1.PLLP = 2;
 8000430:	2302      	movs	r3, #2
 8000432:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL1.PLLQ = 2;
 8000434:	2302      	movs	r3, #2
 8000436:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLR = 2;
 8000438:	2302      	movs	r3, #2
 800043a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000440:	f107 0320 	add.w	r3, r7, #32
 8000444:	4618      	mov	r0, r3
 8000446:	f000 fe93 	bl	8001170 <HAL_RCC_OscConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000450:	f000 f8ae 	bl	80005b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000454:	233f      	movs	r3, #63	@ 0x3f
 8000456:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK7|RCC_CLOCKTYPE_HCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000458:	2303      	movs	r3, #3
 800045a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000464:	2300      	movs	r3, #0
 8000466:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB7CLKDivider = RCC_HCLK_DIV1;
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHB5_PLL1_CLKDivider = RCC_SYSCLK_PLL1_DIV2;
 800046c:	2304      	movs	r3, #4
 800046e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHB5_HSEHSI_CLKDivider = RCC_SYSCLK_HSEHSI_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000474:	463b      	mov	r3, r7
 8000476:	2101      	movs	r1, #1
 8000478:	4618      	mov	r0, r3
 800047a:	f001 fa63 	bl	8001944 <HAL_RCC_ClockConfig>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000484:	f000 f894 	bl	80005b0 <Error_Handler>
  }
}
 8000488:	bf00      	nop
 800048a:	3760      	adds	r7, #96	@ 0x60
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000494:	2000      	movs	r0, #0
 8000496:	f000 fddd 	bl	8001054 <HAL_ICACHE_ConfigAssociativityMode>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80004a0:	f000 f886 	bl	80005b0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80004a4:	f000 fdf6 	bl	8001094 <HAL_ICACHE_Enable>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80004ae:	f000 f87f 	bl	80005b0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ce:	4b34      	ldr	r3, [pc, #208]	@ (80005a0 <MX_GPIO_Init+0xe8>)
 80004d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004d4:	4a32      	ldr	r2, [pc, #200]	@ (80005a0 <MX_GPIO_Init+0xe8>)
 80004d6:	f043 0302 	orr.w	r3, r3, #2
 80004da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004de:	4b30      	ldr	r3, [pc, #192]	@ (80005a0 <MX_GPIO_Init+0xe8>)
 80004e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004e4:	f003 0302 	and.w	r3, r3, #2
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ec:	4b2c      	ldr	r3, [pc, #176]	@ (80005a0 <MX_GPIO_Init+0xe8>)
 80004ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004f2:	4a2b      	ldr	r2, [pc, #172]	@ (80005a0 <MX_GPIO_Init+0xe8>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004fc:	4b28      	ldr	r3, [pc, #160]	@ (80005a0 <MX_GPIO_Init+0xe8>)
 80004fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	4b25      	ldr	r3, [pc, #148]	@ (80005a0 <MX_GPIO_Init+0xe8>)
 800050c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000510:	4a23      	ldr	r2, [pc, #140]	@ (80005a0 <MX_GPIO_Init+0xe8>)
 8000512:	f043 0301 	orr.w	r3, r3, #1
 8000516:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800051a:	4b21      	ldr	r3, [pc, #132]	@ (80005a0 <MX_GPIO_Init+0xe8>)
 800051c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000520:	f003 0301 	and.w	r3, r3, #1
 8000524:	603b      	str	r3, [r7, #0]
 8000526:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D2_Pin|RS_Pin|RW_Pin|D7_Pin
 8000528:	2200      	movs	r2, #0
 800052a:	f24e 21c9 	movw	r1, #58057	@ 0xe2c9
 800052e:	481d      	ldr	r0, [pc, #116]	@ (80005a4 <MX_GPIO_Init+0xec>)
 8000530:	f000 fd3c 	bl	8000fac <HAL_GPIO_WritePin>
                          |D1_Pin|D3_Pin|D0_Pin|EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 4112 	mov.w	r1, #37376	@ 0x9200
 800053a:	481b      	ldr	r0, [pc, #108]	@ (80005a8 <MX_GPIO_Init+0xf0>)
 800053c:	f000 fd36 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D2_Pin RS_Pin RW_Pin D7_Pin
                           D1_Pin D3_Pin D0_Pin EN_Pin */
  GPIO_InitStruct.Pin = D2_Pin|RS_Pin|RW_Pin|D7_Pin
 8000540:	f24e 23c9 	movw	r3, #58057	@ 0xe2c9
 8000544:	60fb      	str	r3, [r7, #12]
                          |D1_Pin|D3_Pin|D0_Pin|EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000546:	2301      	movs	r3, #1
 8000548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	2300      	movs	r3, #0
 8000550:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000552:	f107 030c 	add.w	r3, r7, #12
 8000556:	4619      	mov	r1, r3
 8000558:	4812      	ldr	r0, [pc, #72]	@ (80005a4 <MX_GPIO_Init+0xec>)
 800055a:	f000 fbc3 	bl	8000ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800055e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	480e      	ldr	r0, [pc, #56]	@ (80005ac <MX_GPIO_Init+0xf4>)
 8000574:	f000 fbb6 	bl	8000ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin;
 8000578:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 800057c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057e:	2301      	movs	r3, #1
 8000580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	4619      	mov	r1, r3
 8000590:	4805      	ldr	r0, [pc, #20]	@ (80005a8 <MX_GPIO_Init+0xf0>)
 8000592:	f000 fba7 	bl	8000ce4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000596:	bf00      	nop
 8000598:	3720      	adds	r7, #32
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	46020c00 	.word	0x46020c00
 80005a4:	42020400 	.word	0x42020400
 80005a8:	42020000 	.word	0x42020000
 80005ac:	42020800 	.word	0x42020800

080005b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b4:	b672      	cpsid	i
}
 80005b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <Error_Handler+0x8>

080005bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b0a      	ldr	r3, [pc, #40]	@ (80005ec <HAL_MspInit+0x30>)
 80005c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005c8:	4a08      	ldr	r2, [pc, #32]	@ (80005ec <HAL_MspInit+0x30>)
 80005ca:	f043 0304 	orr.w	r3, r3, #4
 80005ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80005d2:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <HAL_MspInit+0x30>)
 80005d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005d8:	f003 0304 	and.w	r3, r3, #4
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	46020c00 	.word	0x46020c00

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <NMI_Handler+0x4>

080005f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <HardFault_Handler+0x4>

08000600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <MemManage_Handler+0x4>

08000608 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <BusFault_Handler+0x4>

08000610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <UsageFault_Handler+0x4>

08000618 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000646:	f000 f9d7 	bl	80009f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}

0800064e <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_PIN);
 8000652:	2040      	movs	r0, #64	@ 0x40
 8000654:	f000 fcc2 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}

0800065c <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_PIN);
 8000660:	2080      	movs	r0, #128	@ 0x80
 8000662:	f000 fcbb 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}

0800066a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_PIN);
 800066e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000672:	f000 fcb3 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000684:	4a14      	ldr	r2, [pc, #80]	@ (80006d8 <_sbrk+0x5c>)
 8000686:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <_sbrk+0x60>)
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000690:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <_sbrk+0x64>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d102      	bne.n	800069e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <_sbrk+0x64>)
 800069a:	4a12      	ldr	r2, [pc, #72]	@ (80006e4 <_sbrk+0x68>)
 800069c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800069e:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <_sbrk+0x64>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	693a      	ldr	r2, [r7, #16]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d207      	bcs.n	80006bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006ac:	f001 fb5e 	bl	8001d6c <__errno>
 80006b0:	4603      	mov	r3, r0
 80006b2:	220c      	movs	r2, #12
 80006b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	e009      	b.n	80006d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006bc:	4b08      	ldr	r3, [pc, #32]	@ (80006e0 <_sbrk+0x64>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006c2:	4b07      	ldr	r3, [pc, #28]	@ (80006e0 <_sbrk+0x64>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4413      	add	r3, r2
 80006ca:	4a05      	ldr	r2, [pc, #20]	@ (80006e0 <_sbrk+0x64>)
 80006cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ce:	68fb      	ldr	r3, [r7, #12]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20020000 	.word	0x20020000
 80006dc:	00000400 	.word	0x00000400
 80006e0:	200000a8 	.word	0x200000a8
 80006e4:	200001f8 	.word	0x200001f8

080006e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  __IO uint32_t tmpreg;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <SystemInit+0x20>)
 80006ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006f2:	4a05      	ldr	r2, [pc, #20]	@ (8000708 <SystemInit+0x20>)
 80006f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  CLEAR_BIT(ADC4->CR, ADC_CR_ADVREGEN);

  /* Disable ADC kernel clock */
  CLEAR_BIT(RCC->AHB4ENR, RCC_AHB4ENR_ADC4EN);
#endif
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b089      	sub	sp, #36	@ 0x24
 8000710:	af00      	add	r7, sp, #0
  uint32_t plln;
  float_t fracn;
  float_t pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 8000712:	4b4f      	ldr	r3, [pc, #316]	@ (8000850 <SystemCoreClockUpdate+0x144>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	f003 030c 	and.w	r3, r3, #12
 800071a:	2b08      	cmp	r3, #8
 800071c:	d002      	beq.n	8000724 <SystemCoreClockUpdate+0x18>
 800071e:	2b0c      	cmp	r3, #12
 8000720:	d00b      	beq.n	800073a <SystemCoreClockUpdate+0x2e>
 8000722:	e07d      	b.n	8000820 <SystemCoreClockUpdate+0x114>
  {
    case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
      SystemCoreClock = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8000724:	4b4a      	ldr	r3, [pc, #296]	@ (8000850 <SystemCoreClockUpdate+0x144>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	0d1b      	lsrs	r3, r3, #20
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	4a49      	ldr	r2, [pc, #292]	@ (8000854 <SystemCoreClockUpdate+0x148>)
 8000730:	fa22 f303 	lsr.w	r3, r2, r3
 8000734:	4a48      	ldr	r2, [pc, #288]	@ (8000858 <SystemCoreClockUpdate+0x14c>)
 8000736:	6013      	str	r3, [r2, #0]
      break;
 8000738:	e076      	b.n	8000828 <SystemCoreClockUpdate+0x11c>

    case (RCC_CFGR1_SWS_0 | RCC_CFGR1_SWS_1):  /* PLL1 used as system clock source */
      /* PLL_VCO = (PLLsource / PLLM) * PLLN * FractionnalPart
          SYSCLK = PLL_VCO / PLLR */
      /* Get PLL1 CFGR and DIVR register values */
      tmp1 = RCC->PLL1CFGR;
 800073a:	4b45      	ldr	r3, [pc, #276]	@ (8000850 <SystemCoreClockUpdate+0x144>)
 800073c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800073e:	61fb      	str	r3, [r7, #28]
      tmp2 = RCC->PLL1DIVR;
 8000740:	4b43      	ldr	r3, [pc, #268]	@ (8000850 <SystemCoreClockUpdate+0x144>)
 8000742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000744:	617b      	str	r3, [r7, #20]

      /* Retrieve PLL1 multiplication factor and divider */
      pllm = ((tmp1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	3301      	adds	r3, #1
 8000750:	613b      	str	r3, [r7, #16]
      plln = (tmp2 & RCC_PLL1DIVR_PLL1N) + 1U;
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000758:	3301      	adds	r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
      pllr = ((tmp2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	0e1b      	lsrs	r3, r3, #24
 8000760:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000764:	3301      	adds	r3, #1
 8000766:	60bb      	str	r3, [r7, #8]

      /* Check if fractional part is enable */
      if ((tmp1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	f003 0310 	and.w	r3, r3, #16
 800076e:	2b00      	cmp	r3, #0
 8000770:	d00b      	beq.n	800078a <SystemCoreClockUpdate+0x7e>
      {
        fracn = (float_t)((uint32_t)((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8000772:	4b37      	ldr	r3, [pc, #220]	@ (8000850 <SystemCoreClockUpdate+0x144>)
 8000774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000776:	08db      	lsrs	r3, r3, #3
 8000778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800077c:	ee07 3a90 	vmov	s15, r3
 8000780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000784:	edc7 7a06 	vstr	s15, [r7, #24]
 8000788:	e002      	b.n	8000790 <SystemCoreClockUpdate+0x84>
      }
      else
      {
        fracn = (float_t)0U;
 800078a:	f04f 0300 	mov.w	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
      }

      /* determine PLL source */
      pllsource = (tmp1 & RCC_PLL1CFGR_PLL1SRC);
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	f003 0303 	and.w	r3, r3, #3
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b02      	cmp	r3, #2
 800079c:	d003      	beq.n	80007a6 <SystemCoreClockUpdate+0x9a>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	d003      	beq.n	80007ac <SystemCoreClockUpdate+0xa0>
 80007a4:	e00c      	b.n	80007c0 <SystemCoreClockUpdate+0xb4>
      switch (pllsource)
      {
        /* HSI used as PLL1 clock source */
        case RCC_PLL1CFGR_PLL1SRC_1:
          tmp1 = HSI_VALUE;
 80007a6:	4b2d      	ldr	r3, [pc, #180]	@ (800085c <SystemCoreClockUpdate+0x150>)
 80007a8:	61fb      	str	r3, [r7, #28]
          break;
 80007aa:	e00c      	b.n	80007c6 <SystemCoreClockUpdate+0xba>

        /* HSE used as PLL1 clock source */
        case (RCC_PLL1CFGR_PLL1SRC_0 | RCC_PLL1CFGR_PLL1SRC_1):
          tmp1 = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 80007ac:	4b28      	ldr	r3, [pc, #160]	@ (8000850 <SystemCoreClockUpdate+0x144>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	0d1b      	lsrs	r3, r3, #20
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	4a27      	ldr	r2, [pc, #156]	@ (8000854 <SystemCoreClockUpdate+0x148>)
 80007b8:	fa22 f303 	lsr.w	r3, r2, r3
 80007bc:	61fb      	str	r3, [r7, #28]
          break;
 80007be:	e002      	b.n	80007c6 <SystemCoreClockUpdate+0xba>

        default:
          tmp1 = 0U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
          break;
 80007c4:	bf00      	nop
      }

      /* Compute VCO output frequency */
      pllvco = ((float_t) tmp1 / (float_t)pllm) * (((float_t)plln + (float_t)(fracn / (float_t)0x2000U)));
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	ee07 3a90 	vmov	s15, r3
 80007cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	ee07 3a90 	vmov	s15, r3
 80007d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	ee07 3a90 	vmov	s15, r3
 80007e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80007e8:	ed97 6a06 	vldr	s12, [r7, #24]
 80007ec:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8000860 <SystemCoreClockUpdate+0x154>
 80007f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80007f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80007f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007fc:	edc7 7a00 	vstr	s15, [r7]
      SystemCoreClock = (uint32_t)((float_t)(pllvco / (float_t)pllr));
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	ee07 3a90 	vmov	s15, r3
 8000806:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800080a:	edd7 6a00 	vldr	s13, [r7]
 800080e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000816:	ee17 2a90 	vmov	r2, s15
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <SystemCoreClockUpdate+0x14c>)
 800081c:	601a      	str	r2, [r3, #0]
      break;
 800081e:	e003      	b.n	8000828 <SystemCoreClockUpdate+0x11c>

    case 0x00u:  /* HSI used as system clock source */
    default:
      SystemCoreClock = HSI_VALUE;
 8000820:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <SystemCoreClockUpdate+0x14c>)
 8000822:	4a0e      	ldr	r2, [pc, #56]	@ (800085c <SystemCoreClockUpdate+0x150>)
 8000824:	601a      	str	r2, [r3, #0]
      break;
 8000826:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp1 = AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)];
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <SystemCoreClockUpdate+0x144>)
 800082a:	6a1b      	ldr	r3, [r3, #32]
 800082c:	f003 0307 	and.w	r3, r3, #7
 8000830:	4a0c      	ldr	r2, [pc, #48]	@ (8000864 <SystemCoreClockUpdate+0x158>)
 8000832:	5cd3      	ldrb	r3, [r2, r3]
 8000834:	61fb      	str	r3, [r7, #28]

  /* HCLK clock frequency */
  SystemCoreClock >>= tmp1;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <SystemCoreClockUpdate+0x14c>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	fa22 f303 	lsr.w	r3, r2, r3
 8000840:	4a05      	ldr	r2, [pc, #20]	@ (8000858 <SystemCoreClockUpdate+0x14c>)
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	3724      	adds	r7, #36	@ 0x24
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	46020c00 	.word	0x46020c00
 8000854:	01e84800 	.word	0x01e84800
 8000858:	20000030 	.word	0x20000030
 800085c:	00f42400 	.word	0x00f42400
 8000860:	46000000 	.word	0x46000000
 8000864:	080026b8 	.word	0x080026b8

08000868 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000868:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800086c:	f7ff ff3c 	bl	80006e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000870:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000872:	e003      	b.n	800087c <LoopCopyDataInit>

08000874 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000874:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000876:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000878:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800087a:	3104      	adds	r1, #4

0800087c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800087c:	480a      	ldr	r0, [pc, #40]	@ (80008a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <LoopForever+0xe>)
	adds	r2, r0, r1
 8000880:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000882:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000884:	d3f6      	bcc.n	8000874 <CopyDataInit>
	ldr	r2, =_sbss
 8000886:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000888:	e002      	b.n	8000890 <LoopFillZerobss>

0800088a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800088a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800088c:	f842 3b04 	str.w	r3, [r2], #4

08000890 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000890:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <LoopForever+0x16>)
	cmp	r2, r3
 8000892:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000894:	d3f9      	bcc.n	800088a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000896:	f001 fa6f 	bl	8001d78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800089a:	f7ff fd45 	bl	8000328 <main>

0800089e <LoopForever>:

LoopForever:
    b LoopForever
 800089e:	e7fe      	b.n	800089e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80008a0:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 80008a4:	080026fc 	.word	0x080026fc
	ldr	r0, =_sdata
 80008a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80008ac:	2000008c 	.word	0x2000008c
	ldr	r2, =_sbss
 80008b0:	2000008c 	.word	0x2000008c
	ldr	r3, = _ebss
 80008b4:	200001f8 	.word	0x200001f8

080008b8 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC4_IRQHandler>
	...

080008bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c0:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <HAL_Init+0x3c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0c      	ldr	r2, [pc, #48]	@ (80008f8 <HAL_Init+0x3c>)
 80008c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f000 f966 	bl	8000b9e <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 80008d2:	f7ff ff1b 	bl	800070c <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80008d6:	2004      	movs	r0, #4
 80008d8:	f000 f9ac 	bl	8000c34 <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008dc:	200f      	movs	r0, #15
 80008de:	f000 f80d 	bl	80008fc <HAL_InitTick>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_Init+0x30>
  {
    return HAL_ERROR;
 80008e8:	2301      	movs	r3, #1
 80008ea:	e002      	b.n	80008f2 <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008ec:	f7ff fe66 	bl	80005bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40022000 	.word	0x40022000

080008fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000908:	4b36      	ldr	r3, [pc, #216]	@ (80009e4 <HAL_InitTick+0xe8>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d101      	bne.n	8000914 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000910:	2301      	movs	r3, #1
 8000912:	e062      	b.n	80009da <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000914:	4b34      	ldr	r3, [pc, #208]	@ (80009e8 <HAL_InitTick+0xec>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f003 0304 	and.w	r3, r3, #4
 800091c:	2b04      	cmp	r3, #4
 800091e:	d10c      	bne.n	800093a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000920:	4b32      	ldr	r3, [pc, #200]	@ (80009ec <HAL_InitTick+0xf0>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b2f      	ldr	r3, [pc, #188]	@ (80009e4 <HAL_InitTick+0xe8>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000932:	fbb2 f3f3 	udiv	r3, r2, r3
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	e03d      	b.n	80009b6 <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 800093a:	4b2d      	ldr	r3, [pc, #180]	@ (80009f0 <HAL_InitTick+0xf4>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000940:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000944:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800094c:	d025      	beq.n	800099a <HAL_InitTick+0x9e>
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000954:	d82e      	bhi.n	80009b4 <HAL_InitTick+0xb8>
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d004      	beq.n	8000966 <HAL_InitTick+0x6a>
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000962:	d00d      	beq.n	8000980 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8000964:	e026      	b.n	80009b4 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000966:	4b21      	ldr	r3, [pc, #132]	@ (80009ec <HAL_InitTick+0xf0>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	4b1e      	ldr	r3, [pc, #120]	@ (80009e4 <HAL_InitTick+0xe8>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	4619      	mov	r1, r3
 8000970:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000974:	fbb3 f3f1 	udiv	r3, r3, r1
 8000978:	fbb2 f3f3 	udiv	r3, r2, r3
 800097c:	60fb      	str	r3, [r7, #12]
        break;
 800097e:	e01a      	b.n	80009b6 <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000980:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <HAL_InitTick+0xe8>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800098a:	fbb3 f3f2 	udiv	r3, r3, r2
 800098e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000992:	fbb2 f3f3 	udiv	r3, r2, r3
 8000996:	60fb      	str	r3, [r7, #12]
        break;
 8000998:	e00d      	b.n	80009b6 <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800099a:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <HAL_InitTick+0xe8>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80009a8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80009ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b0:	60fb      	str	r3, [r7, #12]
        break;
 80009b2:	e000      	b.n	80009b6 <HAL_InitTick+0xba>
        break;
 80009b4:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80009b6:	68f8      	ldr	r0, [r7, #12]
 80009b8:	f000 f91a 	bl	8000bf0 <HAL_SYSTICK_Config>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e009      	b.n	80009da <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c6:	2200      	movs	r2, #0
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	f04f 30ff 	mov.w	r0, #4294967295
 80009ce:	f000 f8f1 	bl	8000bb4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80009d2:	4a08      	ldr	r2, [pc, #32]	@ (80009f4 <HAL_InitTick+0xf8>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000038 	.word	0x20000038
 80009e8:	e000e010 	.word	0xe000e010
 80009ec:	20000030 	.word	0x20000030
 80009f0:	46020c00 	.word	0x46020c00
 80009f4:	20000034 	.word	0x20000034

080009f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_IncTick+0x20>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_IncTick+0x24>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <HAL_IncTick+0x24>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000038 	.word	0x20000038
 8000a1c:	200000ac 	.word	0x200000ac

08000a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b03      	ldr	r3, [pc, #12]	@ (8000a34 <HAL_GetTick+0x14>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	200000ac 	.word	0x200000ac

08000a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a40:	f7ff ffee 	bl	8000a20 <HAL_GetTick>
 8000a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a50:	d005      	beq.n	8000a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a52:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <HAL_Delay+0x44>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5e:	bf00      	nop
 8000a60:	f7ff ffde 	bl	8000a20 <HAL_GetTick>
 8000a64:	4602      	mov	r2, r0
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d8f7      	bhi.n	8000a60 <HAL_Delay+0x28>
  {
  }
}
 8000a70:	bf00      	nop
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000038 	.word	0x20000038

08000a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000acc:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	f003 0307 	and.w	r3, r3, #7
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db0a      	blt.n	8000b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	490c      	ldr	r1, [pc, #48]	@ (8000b30 <__NVIC_SetPriority+0x4c>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	0112      	lsls	r2, r2, #4
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	440b      	add	r3, r1
 8000b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b0c:	e00a      	b.n	8000b24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4908      	ldr	r1, [pc, #32]	@ (8000b34 <__NVIC_SetPriority+0x50>)
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	0112      	lsls	r2, r2, #4
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	440b      	add	r3, r1
 8000b22:	761a      	strb	r2, [r3, #24]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	@ 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f1c3 0307 	rsb	r3, r3, #7
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	bf28      	it	cs
 8000b56:	2304      	movcs	r3, #4
 8000b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d902      	bls.n	8000b68 <NVIC_EncodePriority+0x30>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3b03      	subs	r3, #3
 8000b66:	e000      	b.n	8000b6a <NVIC_EncodePriority+0x32>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43da      	mvns	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43d9      	mvns	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	4313      	orrs	r3, r2
         );
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3724      	adds	r7, #36	@ 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ff6a 	bl	8000a80 <__NVIC_SetPriorityGrouping>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
 8000bc2:	f7ff ff81 	bl	8000ac8 <__NVIC_GetPriorityGrouping>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	68b9      	ldr	r1, [r7, #8]
 8000bd2:	6978      	ldr	r0, [r7, #20]
 8000bd4:	f7ff ffb0 	bl	8000b38 <NVIC_EncodePriority>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bde:	4611      	mov	r1, r2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff7f 	bl	8000ae4 <__NVIC_SetPriority>
}
 8000be6:	bf00      	nop
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c00:	d301      	bcc.n	8000c06 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00d      	b.n	8000c22 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <HAL_SYSTICK_Config+0x40>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <HAL_SYSTICK_Config+0x40>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_SYSTICK_Config+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a05      	ldr	r2, [pc, #20]	@ (8000c30 <HAL_SYSTICK_Config+0x40>)
 8000c1a:	f043 0303 	orr.w	r3, r3, #3
 8000c1e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	d844      	bhi.n	8000ccc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000c42:	a201      	add	r2, pc, #4	@ (adr r2, 8000c48 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c48:	08000c6b 	.word	0x08000c6b
 8000c4c:	08000c89 	.word	0x08000c89
 8000c50:	08000cab 	.word	0x08000cab
 8000c54:	08000ccd 	.word	0x08000ccd
 8000c58:	08000c5d 	.word	0x08000c5d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a1e      	ldr	r2, [pc, #120]	@ (8000cdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6013      	str	r3, [r2, #0]
      break;
 8000c68:	e031      	b.n	8000cce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a1b      	ldr	r2, [pc, #108]	@ (8000cdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c70:	f023 0304 	bic.w	r3, r3, #4
 8000c74:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000c76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7c:	4a18      	ldr	r2, [pc, #96]	@ (8000ce0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c7e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000c82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000c86:	e022      	b.n	8000cce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a13      	ldr	r2, [pc, #76]	@ (8000cdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c8e:	f023 0304 	bic.w	r3, r3, #4
 8000c92:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000c9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ce0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ca0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000ca8:	e011      	b.n	8000cce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a0b      	ldr	r2, [pc, #44]	@ (8000cdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000cb0:	f023 0304 	bic.w	r3, r3, #4
 8000cb4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000cc0:	4a07      	ldr	r2, [pc, #28]	@ (8000ce0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000cc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000cca:	e000      	b.n	8000cce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000ccc:	bf00      	nop
  }
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000e010 	.word	0xe000e010
 8000ce0:	46020c00 	.word	0x46020c00

08000ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cf2:	e130      	b.n	8000f56 <HAL_GPIO_Init+0x272>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 8122 	beq.w	8000f50 <HAL_GPIO_Init+0x26c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d005      	beq.n	8000d24 <HAL_GPIO_Init+0x40>
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d130      	bne.n	8000d86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	f003 0201 	and.w	r2, r3, #1
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d017      	beq.n	8000dc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d123      	bne.n	8000e16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	220f      	movs	r2, #15
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	691a      	ldr	r2, [r3, #16]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	08da      	lsrs	r2, r3, #3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3208      	adds	r2, #8
 8000e10:	6939      	ldr	r1, [r7, #16]
 8000e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0203 	and.w	r2, r3, #3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d07c      	beq.n	8000f50 <HAL_GPIO_Init+0x26c>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000e56:	4a47      	ldr	r2, [pc, #284]	@ (8000f74 <HAL_GPIO_Init+0x290>)
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	3318      	adds	r3, #24
 8000e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	220f      	movs	r2, #15
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	0a9a      	lsrs	r2, r3, #10
 8000e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f78 <HAL_GPIO_Init+0x294>)
 8000e80:	4013      	ands	r3, r2
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	f002 0203 	and.w	r2, r2, #3
 8000e88:	00d2      	lsls	r2, r2, #3
 8000e8a:	4093      	lsls	r3, r2
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000e92:	4938      	ldr	r1, [pc, #224]	@ (8000f74 <HAL_GPIO_Init+0x290>)
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	3318      	adds	r3, #24
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ea0:	4b34      	ldr	r3, [pc, #208]	@ (8000f74 <HAL_GPIO_Init+0x290>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x1e0>
        {
          temp |= iocurrent;
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8000f74 <HAL_GPIO_Init+0x290>)
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000eca:	4b2a      	ldr	r3, [pc, #168]	@ (8000f74 <HAL_GPIO_Init+0x290>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x20a>
        {
          temp |= iocurrent;
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000eee:	4a21      	ldr	r2, [pc, #132]	@ (8000f74 <HAL_GPIO_Init+0x290>)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f74 <HAL_GPIO_Init+0x290>)
 8000ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f1a:	4a16      	ldr	r2, [pc, #88]	@ (8000f74 <HAL_GPIO_Init+0x290>)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8000f22:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <HAL_GPIO_Init+0x290>)
 8000f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f48:	4a0a      	ldr	r2, [pc, #40]	@ (8000f74 <HAL_GPIO_Init+0x290>)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f47f aec7 	bne.w	8000cf4 <HAL_GPIO_Init+0x10>
  }
}
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	371c      	adds	r7, #28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	46022000 	.word	0x46022000
 8000f78:	002f7f7f 	.word	0x002f7f7f

08000f7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d002      	beq.n	8000f9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f94:	2301      	movs	r3, #1
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	e001      	b.n	8000f9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fbc:	787b      	ldrb	r3, [r7, #1]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fc2:	887a      	ldrh	r2, [r7, #2]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fca:	887a      	ldrh	r2, [r7, #2]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00U)
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	4013      	ands	r3, r2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d006      	beq.n	8001000 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8001024 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f814 	bl	8001028 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00U)
 8001000:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001002:	691a      	ldr	r2, [r3, #16]
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	4013      	ands	r3, r2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d006      	beq.n	800101a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800100c:	4a05      	ldr	r2, [pc, #20]	@ (8001024 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f812 	bl	800103e <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	46022000 	.word	0x46022000

08001028 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001060:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	2b00      	cmp	r3, #0
 800106a:	d002      	beq.n	8001072 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	73fb      	strb	r3, [r7, #15]
 8001070:	e007      	b.n	8001082 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001072:	4b07      	ldr	r3, [pc, #28]	@ (8001090 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f023 0204 	bic.w	r2, r3, #4
 800107a:	4905      	ldr	r1, [pc, #20]	@ (8001090 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4313      	orrs	r3, r2
 8001080:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	40030400 	.word	0x40030400

08001094 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <HAL_ICACHE_Enable+0x1c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <HAL_ICACHE_Enable+0x1c>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	40030400 	.word	0x40030400

080010b4 <HAL_PWREx_ControlVoltageScaling>:
  *        only take effect after the 2.4 GHz RADIO has entered Sleep or Deepsleep mode.
  * @note  In range 2, the 2.4 GHz RADIO shall not transmit nor receive.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  uint32_t vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80010bc:	4b29      	ldr	r3, [pc, #164]	@ (8001164 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80010be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d101      	bne.n	80010d2 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e042      	b.n	8001158 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Set voltage scaling level */
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 80010d2:	4b24      	ldr	r3, [pc, #144]	@ (8001164 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80010da:	4922      	ldr	r1, [pc, #136]	@ (8001164 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4313      	orrs	r3, r2
 80010e0:	60cb      	str	r3, [r1, #12]


  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 80010e2:	4b21      	ldr	r3, [pc, #132]	@ (8001168 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2232      	movs	r2, #50	@ 0x32
 80010e8:	fb02 f303 	mul.w	r3, r2, r3
 80010ec:	4a1f      	ldr	r2, [pc, #124]	@ (800116c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	0c9b      	lsrs	r3, r3, #18
 80010f4:	3301      	adds	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80010f8:	e002      	b.n	8001100 <HAL_PWREx_ControlVoltageScaling+0x4c>
  {
    timeout--;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001100:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <HAL_PWREx_ControlVoltageScaling+0x5e>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f3      	bne.n	80010fa <HAL_PWREx_ControlVoltageScaling+0x46>
  }

  /* Check time out  */
  if (timeout == 0U)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <HAL_PWREx_ControlVoltageScaling+0x68>
  {
    return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e01d      	b.n	8001158 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Wait until ACTVOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 800111c:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2232      	movs	r2, #50	@ 0x32
 8001122:	fb02 f303 	mul.w	r3, r2, r3
 8001126:	4a11      	ldr	r2, [pc, #68]	@ (800116c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8001128:	fba2 2303 	umull	r2, r3, r2, r3
 800112c:	0c9b      	lsrs	r3, r3, #18
 800112e:	3301      	adds	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001132:	e002      	b.n	800113a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	3b01      	subs	r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800113c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800113e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d102      	bne.n	800114c <HAL_PWREx_ControlVoltageScaling+0x98>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f3      	bne.n	8001134 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out  */
  if (timeout == 0U)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_PWREx_ControlVoltageScaling+0xa2>
  {
    return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e000      	b.n	8001158 <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	46020800 	.word	0x46020800
 8001168:	20000030 	.word	0x20000030
 800116c:	431bde83 	.word	0x431bde83

08001170 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	@ 0x30
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t mask;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e3d9      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001182:	4b90      	ldr	r3, [pc, #576]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	623b      	str	r3, [r7, #32]
  pllsrc = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800118c:	4b8d      	ldr	r3, [pc, #564]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 800118e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d072      	beq.n	8001288 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL1 in these cases it is not allowed to be disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d005      	beq.n	80011b4 <HAL_RCC_OscConfig+0x44>
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	2b0c      	cmp	r3, #12
 80011ac:	d12a      	bne.n	8001204 <HAL_RCC_OscConfig+0x94>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSE)))
 80011ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d127      	bne.n	8001204 <HAL_RCC_OscConfig+0x94>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <HAL_RCC_OscConfig+0x50>
      {
        return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e3ba      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Otherwise, applying divider is allowed */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d15f      	bne.n	8001286 <HAL_RCC_OscConfig+0x116>
        {
          assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

          /* Adjust the HSE division factor */
          __HAL_RCC_HSE_CONFIG(RCC_HSE_ON | RCC_OscInitStruct->HSEDiv);
 80011c6:	4b7f      	ldr	r3, [pc, #508]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	4a7b      	ldr	r2, [pc, #492]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 80011d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011da:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSE value */
          SystemCoreClock = (HSE_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSEPRE)) >> RCC_CR_HSEPRE_Pos)));
 80011dc:	4b79      	ldr	r3, [pc, #484]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	0d1b      	lsrs	r3, r3, #20
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	4a78      	ldr	r2, [pc, #480]	@ (80013c8 <HAL_RCC_OscConfig+0x258>)
 80011e8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ec:	4a77      	ldr	r2, [pc, #476]	@ (80013cc <HAL_RCC_OscConfig+0x25c>)
 80011ee:	6013      	str	r3, [r2, #0]

          /* Adapt Systick interrupt period */
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80011f0:	4b77      	ldr	r3, [pc, #476]	@ (80013d0 <HAL_RCC_OscConfig+0x260>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fb81 	bl	80008fc <HAL_InitTick>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d042      	beq.n	8001286 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e398      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d01f      	beq.n	800124c <HAL_RCC_OscConfig+0xdc>
      {
        assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG((RCC_OscInitStruct->HSEState | RCC_OscInitStruct->HSEDiv));
 800120c:	4b6d      	ldr	r3, [pc, #436]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6859      	ldr	r1, [r3, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	430b      	orrs	r3, r1
 800121e:	4969      	ldr	r1, [pc, #420]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 8001220:	4313      	orrs	r3, r2
 8001222:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001224:	f7ff fbfc 	bl	8000a20 <HAL_GetTick>
 8001228:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0xce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800122c:	f7ff fbf8 	bl	8000a20 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b64      	cmp	r3, #100	@ 0x64
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e37b      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800123e:	4b61      	ldr	r3, [pc, #388]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0xbc>
 800124a:	e01d      	b.n	8001288 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124c:	4b5d      	ldr	r3, [pc, #372]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	495a      	ldr	r1, [pc, #360]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 800125a:	4313      	orrs	r3, r2
 800125c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125e:	f7ff fbdf 	bl	8000a20 <HAL_GetTick>
 8001262:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001266:	f7ff fbdb 	bl	8000a20 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b64      	cmp	r3, #100	@ 0x64
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e35e      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001278:	4b52      	ldr	r3, [pc, #328]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f0      	bne.n	8001266 <HAL_RCC_OscConfig+0xf6>
 8001284:	e000      	b.n	8001288 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001286:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d05a      	beq.n	800134a <HAL_RCC_OscConfig+0x1da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d005      	beq.n	80012a6 <HAL_RCC_OscConfig+0x136>
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	2b0c      	cmp	r3, #12
 800129e:	d113      	bne.n	80012c8 <HAL_RCC_OscConfig+0x158>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSI)))
 80012a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d110      	bne.n	80012c8 <HAL_RCC_OscConfig+0x158>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x142>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e341      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b2:	4b44      	ldr	r3, [pc, #272]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	041b      	lsls	r3, r3, #16
 80012c0:	4940      	ldr	r1, [pc, #256]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	610b      	str	r3, [r1, #16]
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80012c6:	e040      	b.n	800134a <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d023      	beq.n	8001318 <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d0:	4b3c      	ldr	r3, [pc, #240]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a3b      	ldr	r2, [pc, #236]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 80012d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff fba0 	bl	8000a20 <HAL_GetTick>
 80012e0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e4:	f7ff fb9c 	bl	8000a20 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e31f      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012f6:	4b33      	ldr	r3, [pc, #204]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f0      	beq.n	80012e4 <HAL_RCC_OscConfig+0x174>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001302:	4b30      	ldr	r3, [pc, #192]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	041b      	lsls	r3, r3, #16
 8001310:	492c      	ldr	r1, [pc, #176]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 8001312:	4313      	orrs	r3, r2
 8001314:	610b      	str	r3, [r1, #16]
 8001316:	e018      	b.n	800134a <HAL_RCC_OscConfig+0x1da>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001318:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a29      	ldr	r2, [pc, #164]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 800131e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001324:	f7ff fb7c 	bl	8000a20 <HAL_GetTick>
 8001328:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x1ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800132c:	f7ff fb78 	bl	8000a20 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e2fb      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800133e:	4b21      	ldr	r3, [pc, #132]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0x1bc>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 80d2 	beq.w	80014fc <HAL_RCC_OscConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Update LSI1 configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 800135e:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 8001360:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d111      	bne.n	8001390 <HAL_RCC_OscConfig+0x220>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800136c:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 800136e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001372:	4a14      	ldr	r2, [pc, #80]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <HAL_RCC_OscConfig+0x254>)
 800137e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800138a:	2301      	movs	r3, #1
 800138c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001390:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 8001392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	d123      	bne.n	80013e4 <HAL_RCC_OscConfig+0x274>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800139c:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 800139e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a0:	4a0c      	ldr	r2, [pc, #48]	@ (80013d4 <HAL_RCC_OscConfig+0x264>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a8:	f7ff fb3a 	bl	8000a20 <HAL_GetTick>
 80013ac:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80013ae:	e013      	b.n	80013d8 <HAL_RCC_OscConfig+0x268>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b0:	f7ff fb36 	bl	8000a20 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d90c      	bls.n	80013d8 <HAL_RCC_OscConfig+0x268>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e2b9      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
 80013c2:	bf00      	nop
 80013c4:	46020c00 	.word	0x46020c00
 80013c8:	01e84800 	.word	0x01e84800
 80013cc:	20000030 	.word	0x20000030
 80013d0:	20000034 	.word	0x20000034
 80013d4:	46020800 	.word	0x46020800
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80013d8:	4ba4      	ldr	r3, [pc, #656]	@ (800166c <HAL_RCC_OscConfig+0x4fc>)
 80013da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0e5      	beq.n	80013b0 <HAL_RCC_OscConfig+0x240>
        }
      }
    }

    /* Get BDCR1 register value */
    tmpreg1 = RCC->BDCR1;
 80013e4:	4ba2      	ldr	r3, [pc, #648]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 80013e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013ea:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Define mask depending on LSI presence */
    mask = RCC_BDCR1_LSI1ON;
 80013ec:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80013f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_LSI2_SUPPORT)
    mask |= RCC_BDCR1_LSI2ON;
#endif /* RCC_LSI2_SUPPORT */

    /* Check the LSI1 State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d056      	beq.n	80014a8 <HAL_RCC_OscConfig+0x338>
    {
      if ((RCC_OscInitStruct->LSIState & RCC_LSI1_ON) != 0x00u)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d030      	beq.n	8001468 <HAL_RCC_OscConfig+0x2f8>
      {
        /* Check LSI1 division factor */
        assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

        /* Check is LSIDiv is requested to be changed and LSI is already ON */
        if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_BDCR1_LSI1PREDIV)) && ((tmpreg1 & RCC_BDCR1_LSI1RDY) != 0x00u))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69da      	ldr	r2, [r3, #28]
 800140a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800140c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001410:	429a      	cmp	r2, r3
 8001412:	d020      	beq.n	8001456 <HAL_RCC_OscConfig+0x2e6>
 8001414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001416:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d01b      	beq.n	8001456 <HAL_RCC_OscConfig+0x2e6>
        {
          /* Disable LSI1 */
          tmpreg1 &= ~RCC_BDCR1_LSI1ON;
 800141e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001420:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28
          RCC->BDCR1 = tmpreg1;
 8001426:	4a92      	ldr	r2, [pc, #584]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 8001428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800142a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800142e:	f7ff faf7 	bl	8000a20 <HAL_GetTick>
 8001432:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is disabled */
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x2d8>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001436:	f7ff faf3 	bl	8000a20 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b14      	cmp	r3, #20
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x2d8>
            {
              /* LSI1 may be forced ON by IWDG */
              return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e276      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8001448:	4b89      	ldr	r3, [pc, #548]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 800144a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800144e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1ef      	bne.n	8001436 <HAL_RCC_OscConfig+0x2c6>
          HAL_Delay(1);
#endif
        }

        /* Set LSI1 division factor */
        tmpreg1 &= ~RCC_BDCR1_LSI1PREDIV;
 8001456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001458:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800145c:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001464:	4313      	orrs	r3, r2
 8001466:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Enable Concerned LSI */
      tmpreg1 |= RCC_OscInitStruct->LSIState;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800146e:	4313      	orrs	r3, r2
 8001470:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 8001472:	4a7f      	ldr	r2, [pc, #508]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 8001474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001476:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147a:	f7ff fad1 	bl	8000a20 <HAL_GetTick>
 800147e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready : LSIRDY bit is position ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x324>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001482:	f7ff facd 	bl	8000a20 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b14      	cmp	r3, #20
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x324>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e250      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8001494:	4b76      	ldr	r3, [pc, #472]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 8001496:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0ed      	beq.n	8001482 <HAL_RCC_OscConfig+0x312>
 80014a6:	e01d      	b.n	80014e4 <HAL_RCC_OscConfig+0x374>
#endif
    }
    else
    {
      /* Disable the Internal Low Speed oscillator LSI1 and LSI2 is available */
      tmpreg1 &= ~mask;
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014ae:	4013      	ands	r3, r2
 80014b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 80014b2:	4a6f      	ldr	r2, [pc, #444]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 80014b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ba:	f7ff fab1 	bl	8000a20 <HAL_GetTick>
 80014be:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is disabled : LSIRDY bit position is ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x364>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c2:	f7ff faad 	bl	8000a20 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b14      	cmp	r3, #20
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x364>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e230      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 80014d4:	4b66      	ldr	r3, [pc, #408]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 80014d6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4013      	ands	r3, r2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1ee      	bne.n	80014c2 <HAL_RCC_OscConfig+0x352>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d107      	bne.n	80014fc <HAL_RCC_OscConfig+0x38c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ec:	4b60      	ldr	r3, [pc, #384]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 80014ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014f2:	4a5f      	ldr	r2, [pc, #380]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 80014f4:	f023 0304 	bic.w	r3, r3, #4
 80014f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 80e2 	beq.w	80016ce <HAL_RCC_OscConfig+0x55e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8001510:	4b57      	ldr	r3, [pc, #348]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 8001512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	2b00      	cmp	r3, #0
 800151c:	d111      	bne.n	8001542 <HAL_RCC_OscConfig+0x3d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	4b54      	ldr	r3, [pc, #336]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 8001520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001524:	4a52      	ldr	r2, [pc, #328]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800152e:	4b50      	ldr	r3, [pc, #320]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 8001530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800153c:	2301      	movs	r3, #1
 800153e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001542:	4b4a      	ldr	r3, [pc, #296]	@ (800166c <HAL_RCC_OscConfig+0x4fc>)
 8001544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d118      	bne.n	8001580 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800154e:	4b47      	ldr	r3, [pc, #284]	@ (800166c <HAL_RCC_OscConfig+0x4fc>)
 8001550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001552:	4a46      	ldr	r2, [pc, #280]	@ (800166c <HAL_RCC_OscConfig+0x4fc>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155a:	f7ff fa61 	bl	8000a20 <HAL_GetTick>
 800155e:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001562:	f7ff fa5d 	bl	8000a20 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e1e0      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001574:	4b3d      	ldr	r3, [pc, #244]	@ (800166c <HAL_RCC_OscConfig+0x4fc>)
 8001576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x3f2>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d051      	beq.n	800162c <HAL_RCC_OscConfig+0x4bc>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_LSESYSEN);
 8001588:	4b39      	ldr	r3, [pc, #228]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 800158a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800158e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001592:	62bb      	str	r3, [r7, #40]	@ 0x28
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800159a:	4313      	orrs	r3, r2
 800159c:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 800159e:	4a34      	ldr	r2, [pc, #208]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 80015a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a6:	f7ff fa3b 	bl	8000a20 <HAL_GetTick>
 80015aa:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 80015ac:	e00a      	b.n	80015c4 <HAL_RCC_OscConfig+0x454>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ae:	f7ff fa37 	bl	8000a20 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015bc:	4293      	cmp	r3, r2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x454>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e1b8      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 80015c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 80015c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0ed      	beq.n	80015ae <HAL_RCC_OscConfig+0x43e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR1_LSESYSEN) != 0U)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d01e      	beq.n	800161c <HAL_RCC_OscConfig+0x4ac>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_OscConfig+0x486>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e0:	f7ff fa1e 	bl	8000a20 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x486>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e19f      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 80015f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 80015f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0ed      	beq.n	80015e0 <HAL_RCC_OscConfig+0x470>
 8001604:	e057      	b.n	80016b6 <HAL_RCC_OscConfig+0x546>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001606:	f7ff fa0b 	bl	8000a20 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001614:	4293      	cmp	r3, r2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e18c      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 800161c:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 800161e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001622:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1ed      	bne.n	8001606 <HAL_RCC_OscConfig+0x496>
 800162a:	e044      	b.n	80016b6 <HAL_RCC_OscConfig+0x546>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR1, (RCC_BDCR1_LSEON | RCC_BDCR1_LSESYSEN));
 800162c:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 800162e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001632:	4a0f      	ldr	r2, [pc, #60]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 8001634:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8001638:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR1, RCC_BDCR1_LSEBYP);
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 800163e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001642:	4a0b      	ldr	r2, [pc, #44]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 8001644:	f023 0304 	bic.w	r3, r3, #4
 8001648:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164c:	f7ff f9e8 	bl	8000a20 <HAL_GetTick>
 8001650:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8001652:	e00f      	b.n	8001674 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001654:	f7ff f9e4 	bl	8000a20 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d906      	bls.n	8001674 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e165      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
 800166a:	bf00      	nop
 800166c:	46020800 	.word	0x46020800
 8001670:	46020c00 	.word	0x46020c00
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8001674:	4b98      	ldr	r3, [pc, #608]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 8001676:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1e8      	bne.n	8001654 <HAL_RCC_OscConfig+0x4e4>
        }
      }

      if (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSEN) != 0U)
 8001682:	4b95      	ldr	r3, [pc, #596]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 8001684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800168c:	2b00      	cmp	r3, #0
 800168e:	d012      	beq.n	80016b6 <HAL_RCC_OscConfig+0x546>
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8001690:	e00a      	b.n	80016a8 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001692:	f7ff f9c5 	bl	8000a20 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e146      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 80016a8:	4b8b      	ldr	r3, [pc, #556]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 80016aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1ed      	bne.n	8001692 <HAL_RCC_OscConfig+0x522>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016be:	4b86      	ldr	r3, [pc, #536]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 80016c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c4:	4a84      	ldr	r2, [pc, #528]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 80016c6:	f023 0304 	bic.w	r3, r3, #4
 80016ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if ((RCC_OscInitStruct->PLL1.PLLState) != RCC_PLL_NONE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 812e 	beq.w	8001934 <HAL_RCC_OscConfig+0x7c4>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	2b0c      	cmp	r3, #12
 80016dc:	f000 80ba 	beq.w	8001854 <HAL_RCC_OscConfig+0x6e4>
    {
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_ON)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	f040 8093 	bne.w	8001810 <HAL_RCC_OscConfig+0x6a0>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL1.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL1.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL1.PLLR));

        /* Disable the main PLL1. */
        tmpreg1 = (RCC->CR & ~RCC_CR_PLL1ON);
 80016ea:	4b7b      	ldr	r3, [pc, #492]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
        RCC->CR = tmpreg1;
 80016f4:	4a78      	ldr	r2, [pc, #480]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 80016f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fa:	f7ff f991 	bl	8000a20 <HAL_GetTick>
 80016fe:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        do
        {
          tmpreg1 = RCC->CR;
 8001700:	4b75      	ldr	r3, [pc, #468]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	62bb      	str	r3, [r7, #40]	@ 0x28
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001706:	f7ff f98b 	bl	8000a20 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e10e      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
          }
        } while ((tmpreg1 & RCC_CR_PLL1RDY) != 0U);
 8001718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800171a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1ee      	bne.n	8001700 <HAL_RCC_OscConfig+0x590>

        /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
        if (RCC_OscInitStruct->PLL1.PLLSource == RCC_PLLSOURCE_HSE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001726:	2b03      	cmp	r3, #3
 8001728:	d108      	bne.n	800173c <HAL_RCC_OscConfig+0x5cc>
        {
          /* Clock source is HSE or HSE/2 */
          pllsrc = HSE_VALUE >> ((tmpreg1 & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos);
 800172a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172c:	0d1b      	lsrs	r3, r3, #20
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	4a6a      	ldr	r2, [pc, #424]	@ (80018dc <HAL_RCC_OscConfig+0x76c>)
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
 8001738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800173a:	e001      	b.n	8001740 <HAL_RCC_OscConfig+0x5d0>
        }
        else
        {
          /* Clock source is HSI */
          pllsrc = HSI_VALUE;
 800173c:	4b68      	ldr	r3, [pc, #416]	@ (80018e0 <HAL_RCC_OscConfig+0x770>)
 800173e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Compute VCO input frequency depending on M divider */
        pllsrc = (pllsrc / RCC_OscInitStruct->PLL1.PLLM);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001744:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllsrc));

        if (pllsrc > PLL_INPUTRANGE0_FREQMAX)
 800174c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800174e:	4a65      	ldr	r2, [pc, #404]	@ (80018e4 <HAL_RCC_OscConfig+0x774>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d902      	bls.n	800175a <HAL_RCC_OscConfig+0x5ea>
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE1;
 8001754:	230c      	movs	r3, #12
 8001756:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001758:	e001      	b.n	800175e <HAL_RCC_OscConfig+0x5ee>
        }
        else
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE0;
 800175a:	2300      	movs	r3, #0
 800175c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Configure PLL1 source, PLLM divider, VCO input range and enable PLL1R output. Clear also FRACEN*/
        tmpreg2 = RCC->PLL1CFGR;
 800175e:	4b5e      	ldr	r3, [pc, #376]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 8001760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001762:	617b      	str	r3, [r7, #20]
        tmpreg2 &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1RGE | RCC_PLL1CFGR_PLL1FRACEN | RCC_PLL1CFGR_PLL1M);
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f423 63e3 	bic.w	r3, r3, #1816	@ 0x718
 800176a:	f023 0307 	bic.w	r3, r3, #7
 800176e:	617b      	str	r3, [r7, #20]
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001776:	431a      	orrs	r2, r3
                    ((RCC_OscInitStruct->PLL1.PLLM - 1u) << RCC_PLL1CFGR_PLL1M_Pos) | RCC_PLL1CFGR_PLL1REN);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177c:	3b01      	subs	r3, #1
 800177e:	021b      	lsls	r3, r3, #8
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 8001780:	431a      	orrs	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	4313      	orrs	r3, r2
 8001786:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800178a:	617b      	str	r3, [r7, #20]
        RCC->PLL1CFGR = tmpreg2;
 800178c:	4a52      	ldr	r2, [pc, #328]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLLN multiplication factor and PLLP, PLLQ, PLLR dividers */
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001796:	1e5a      	subs	r2, r3, #1
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179c:	3b01      	subs	r3, #1
 800179e:	025b      	lsls	r3, r3, #9
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 80017a0:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLQ - 1u) << RCC_PLL1DIVR_PLL1Q_Pos) |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a6:	3b01      	subs	r3, #1
 80017a8:	041b      	lsls	r3, r3, #16
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 80017aa:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLR - 1u) << RCC_PLL1DIVR_PLL1R_Pos));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017b0:	3b01      	subs	r3, #1
 80017b2:	061b      	lsls	r3, r3, #24
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 80017b4:	4313      	orrs	r3, r2
 80017b6:	617b      	str	r3, [r7, #20]
        RCC->PLL1DIVR = tmpreg2;
 80017b8:	4a47      	ldr	r2, [pc, #284]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	6353      	str	r3, [r2, #52]	@ 0x34

        if (RCC_OscInitStruct->PLL1.PLLFractional != 0x00u)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00a      	beq.n	80017dc <HAL_RCC_OscConfig+0x66c>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017ca:	4a43      	ldr	r2, [pc, #268]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	6393      	str	r3, [r2, #56]	@ 0x38

          /* Enable PLL1FRACEN */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 80017d0:	4b41      	ldr	r3, [pc, #260]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 80017d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d4:	4a40      	ldr	r2, [pc, #256]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 80017d6:	f043 0310 	orr.w	r3, r3, #16
 80017da:	6293      	str	r3, [r2, #40]	@ 0x28
        }

        /* Enable the main PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80017dc:	4b3e      	ldr	r3, [pc, #248]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a3d      	ldr	r2, [pc, #244]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 80017e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff f91a 	bl	8000a20 <HAL_GetTick>
 80017ec:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x692>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff f916 	bl	8000a20 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e099      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001802:	4b35      	ldr	r3, [pc, #212]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x680>
 800180e:	e091      	b.n	8001934 <HAL_RCC_OscConfig+0x7c4>
        }
      }
      else
      {
        /* Disable the main PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001810:	4b31      	ldr	r3, [pc, #196]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a30      	ldr	r2, [pc, #192]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 8001816:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800181a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff f900 	bl	8000a20 <HAL_GetTick>
 8001820:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x6c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff f8fc 	bl	8000a20 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x6c6>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e07f      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001836:	4b28      	ldr	r3, [pc, #160]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x6b4>
          }
        }

        /* CLear the PLL1 source and disable outputs to save power when PLL1 is off */
        CLEAR_BIT(RCC->PLL1CFGR, (RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | \
 8001842:	4b25      	ldr	r3, [pc, #148]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 8001844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001846:	4a24      	ldr	r2, [pc, #144]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 8001848:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800184c:	f023 0303 	bic.w	r3, r3, #3
 8001850:	6293      	str	r3, [r2, #40]	@ 0x28
 8001852:	e06f      	b.n	8001934 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL1 used as System clock source */
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <HAL_RCC_OscConfig+0x6f0>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e06a      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        tmpreg1 = RCC->PLL1CFGR;
 8001860:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 8001862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001864:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg2 = RCC->PLL1DIVR;
 8001866:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <HAL_RCC_OscConfig+0x768>)
 8001868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800186a:	617b      	str	r3, [r7, #20]

        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 800186c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800186e:	f003 0203 	and.w	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001876:	429a      	cmp	r2, r3
 8001878:	d12b      	bne.n	80018d2 <HAL_RCC_OscConfig+0x762>
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 800187a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800187c:	0a1b      	lsrs	r3, r3, #8
 800187e:	f003 0207 	and.w	r2, r3, #7
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001886:	3b01      	subs	r3, #1
        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d122      	bne.n	80018d2 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	3b01      	subs	r3, #1
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d11a      	bne.n	80018d2 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	0a5b      	lsrs	r3, r3, #9
 80018a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a8:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d111      	bne.n	80018d2 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	0c1b      	lsrs	r3, r3, #16
 80018b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ba:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d108      	bne.n	80018d2 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) != (RCC_OscInitStruct->PLL1.PLLR - 1u)))
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	0e1b      	lsrs	r3, r3, #24
 80018c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018cc:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d00a      	beq.n	80018e8 <HAL_RCC_OscConfig+0x778>
        {
          return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e02f      	b.n	8001936 <HAL_RCC_OscConfig+0x7c6>
 80018d6:	bf00      	nop
 80018d8:	46020c00 	.word	0x46020c00
 80018dc:	01e84800 	.word	0x01e84800
 80018e0:	00f42400 	.word	0x00f42400
 80018e4:	007a1200 	.word	0x007a1200
        }
        else
        {
          /* Check if only fractional part needs to be updated  */
          tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 80018e8:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <HAL_RCC_OscConfig+0x7d0>)
 80018ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ec:	08db      	lsrs	r3, r3, #3
 80018ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80018f2:	62bb      	str	r3, [r7, #40]	@ 0x28

          if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d01a      	beq.n	8001934 <HAL_RCC_OscConfig+0x7c4>
          {
            assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

            /* Disable PLL1FRACEN */
            __HAL_RCC_PLL1_FRACN_DISABLE();
 80018fe:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <HAL_RCC_OscConfig+0x7d0>)
 8001900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001902:	4a0f      	ldr	r2, [pc, #60]	@ (8001940 <HAL_RCC_OscConfig+0x7d0>)
 8001904:	f023 0310 	bic.w	r3, r3, #16
 8001908:	6293      	str	r3, [r2, #40]	@ 0x28

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800190a:	f7ff f889 	bl	8000a20 <HAL_GetTick>
 800190e:	61f8      	str	r0, [r7, #28]

            /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
            while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8001910:	bf00      	nop
 8001912:	f7ff f885 	bl	8000a20 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	4293      	cmp	r3, r2
 800191c:	d0f9      	beq.n	8001912 <HAL_RCC_OscConfig+0x7a2>
            {
            }

            /* Configure PLL1 PLL1FRACN */
            __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001922:	4a07      	ldr	r2, [pc, #28]	@ (8001940 <HAL_RCC_OscConfig+0x7d0>)
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	6393      	str	r3, [r2, #56]	@ 0x38

            /* Enable PLL1FRACEN to latch new value. */
            __HAL_RCC_PLL1_FRACN_ENABLE();
 8001928:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <HAL_RCC_OscConfig+0x7d0>)
 800192a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192c:	4a04      	ldr	r2, [pc, #16]	@ (8001940 <HAL_RCC_OscConfig+0x7d0>)
 800192e:	f043 0310 	orr.w	r3, r3, #16
 8001932:	6293      	str	r3, [r2, #40]	@ 0x28
          }
        }
      }
    }
  }
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3730      	adds	r7, #48	@ 0x30
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	46020c00 	.word	0x46020c00

08001944 <HAL_RCC_ClockConfig>:
  *         HCLK5 prescaler is switched automatically by hardware, but configuration shall
  *         always be performed before setting new PLL1 source as Sysclk source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e115      	b.n	8001b84 <HAL_RCC_ClockConfig+0x240>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001958:	4b8c      	ldr	r3, [pc, #560]	@ (8001b8c <HAL_RCC_ClockConfig+0x248>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d910      	bls.n	8001988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b89      	ldr	r3, [pc, #548]	@ (8001b8c <HAL_RCC_ClockConfig+0x248>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 020f 	bic.w	r2, r3, #15
 800196e:	4987      	ldr	r1, [pc, #540]	@ (8001b8c <HAL_RCC_ClockConfig+0x248>)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b85      	ldr	r3, [pc, #532]	@ (8001b8c <HAL_RCC_ClockConfig+0x248>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0fd      	b.n	8001b84 <HAL_RCC_ClockConfig+0x240>
  }

  /*-------------------------- HCLK5 Configuration --------------------------*/
  /* HCLK5 prescaler is switched automatically by hardware, but configuration shall
    always be performed before setting new PLL1 source as Sysclk source. */
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK5) == RCC_CLOCKTYPE_HCLK5)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0320 	and.w	r3, r3, #32
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00d      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x6c>
  {
    assert_param(IS_RCC_HCLK5_HSEHSI(RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
    assert_param(IS_RCC_HCLK5_PLL1(RCC_ClkInitStruct->AHB5_PLL1_CLKDivider));
    MODIFY_REG(RCC->CFGR4, (RCC_CFGR4_HDIV5 | RCC_CFGR4_HPRE5),
 8001994:	4b7e      	ldr	r3, [pc, #504]	@ (8001b90 <HAL_RCC_ClockConfig+0x24c>)
 8001996:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800199a:	f023 0217 	bic.w	r2, r3, #23
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6999      	ldr	r1, [r3, #24]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	430b      	orrs	r3, r1
 80019a8:	4979      	ldr	r1, [pc, #484]	@ (8001b90 <HAL_RCC_ClockConfig+0x24c>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
               (RCC_ClkInitStruct->AHB5_PLL1_CLKDivider | RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d06f      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 80019bc:	4b74      	ldr	r3, [pc, #464]	@ (8001b90 <HAL_RCC_ClockConfig+0x24c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	617b      	str	r3, [r7, #20]

    /* PLL1 is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d118      	bne.n	80019fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the PLL1 ready flag */
      if ((tmpreg1 & RCC_CR_PLL1RDY) == 0U)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0d5      	b.n	8001b84 <HAL_RCC_ClockConfig+0x240>
      }
      else
      {
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 80019d8:	4b6d      	ldr	r3, [pc, #436]	@ (8001b90 <HAL_RCC_ClockConfig+0x24c>)
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	f003 020c 	and.w	r2, r3, #12
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d01a      	beq.n	8001a20 <HAL_RCC_ClockConfig+0xdc>
        {
          /* Whatever is PLL frequency, use step prediv to reach maximum frequency. */
          /* Select pll1r to be prediv with 2-step divider when selected as Sysclk source */
          MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRESTEP, RCC_PLL1CFGR_PLL1RCLKPRE);
 80019ea:	4b69      	ldr	r3, [pc, #420]	@ (8001b90 <HAL_RCC_ClockConfig+0x24c>)
 80019ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ee:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80019f2:	4a67      	ldr	r2, [pc, #412]	@ (8001b90 <HAL_RCC_ClockConfig+0x24c>)
 80019f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80019f8:	6293      	str	r3, [r2, #40]	@ 0x28
 80019fa:	e011      	b.n	8001a20 <HAL_RCC_ClockConfig+0xdc>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d106      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xce>
      {
        /* Check the HSE ready flag */
        if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d108      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0b8      	b.n	8001b84 <HAL_RCC_ClockConfig+0x240>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0b1      	b.n	8001b84 <HAL_RCC_ClockConfig+0x240>
        }
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a20:	4b5b      	ldr	r3, [pc, #364]	@ (8001b90 <HAL_RCC_ClockConfig+0x24c>)
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	f023 0203 	bic.w	r2, r3, #3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	4958      	ldr	r1, [pc, #352]	@ (8001b90 <HAL_RCC_ClockConfig+0x24c>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a32:	f7fe fff5 	bl	8000a20 <HAL_GetTick>
 8001a36:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8001a38:	e00a      	b.n	8001a50 <HAL_RCC_ClockConfig+0x10c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3a:	f7fe fff1 	bl	8000a20 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e099      	b.n	8001b84 <HAL_RCC_ClockConfig+0x240>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8001a50:	4b4f      	ldr	r3, [pc, #316]	@ (8001b90 <HAL_RCC_ClockConfig+0x24c>)
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	f003 020c 	and.w	r2, r3, #12
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d1eb      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xf6>
      }
    }

    /* If PLL1rCLK is asked to be SYSCLK source, clear prediv. */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d118      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x158>
    {
      /* Set PLL1R prediv to not divided */
      CLEAR_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRE);
 8001a6a:	4b49      	ldr	r3, [pc, #292]	@ (8001b90 <HAL_RCC_ClockConfig+0x24c>)
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6e:	4a48      	ldr	r2, [pc, #288]	@ (8001b90 <HAL_RCC_ClockConfig+0x24c>)
 8001a70:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001a74:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a76:	f7fe ffd3 	bl	8000a20 <HAL_GetTick>
 8001a7a:	60f8      	str	r0, [r7, #12]

      /* Wait until PLL1 not divided is ready */
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_ClockConfig+0x14c>
      {
        if ((HAL_GetTick() - tickstart) > PLL1_NDIV_TIMEOUT_VALUE)
 8001a7e:	f7fe ffcf 	bl	8000a20 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b0a      	cmp	r3, #10
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_ClockConfig+0x14c>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e079      	b.n	8001b84 <HAL_RCC_ClockConfig+0x240>
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8001a90:	4b3f      	ldr	r3, [pc, #252]	@ (8001b90 <HAL_RCC_ClockConfig+0x24c>)
 8001a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 8001a9c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b90 <HAL_RCC_ClockConfig+0x24c>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00a      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f023 0307 	bic.w	r3, r3, #7
 8001ab8:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00a      	beq.n	8001aea <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ada:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00b      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x1ca>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001afc:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x1d6>
  {
    RCC->CFGR2 = tmpreg1;
 8001b14:	4a1e      	ldr	r2, [pc, #120]	@ (8001b90 <HAL_RCC_ClockConfig+0x24c>)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK7 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK7) == RCC_CLOCKTYPE_PCLK7)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB7CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB7CLKDivider);
 8001b26:	4a1a      	ldr	r2, [pc, #104]	@ (8001b90 <HAL_RCC_ClockConfig+0x24c>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2e:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <HAL_RCC_ClockConfig+0x248>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d210      	bcs.n	8001b5e <HAL_RCC_ClockConfig+0x21a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3c:	4b13      	ldr	r3, [pc, #76]	@ (8001b8c <HAL_RCC_ClockConfig+0x248>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 020f 	bic.w	r2, r3, #15
 8001b44:	4911      	ldr	r1, [pc, #68]	@ (8001b8c <HAL_RCC_ClockConfig+0x248>)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <HAL_RCC_ClockConfig+0x248>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 030f 	and.w	r3, r3, #15
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x21a>
    {
      return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e012      	b.n	8001b84 <HAL_RCC_ClockConfig+0x240>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001b5e:	f000 f81f 	bl	8001ba0 <HAL_RCC_GetSysClockFreq>
 8001b62:	4602      	mov	r2, r0
 8001b64:	4b0a      	ldr	r3, [pc, #40]	@ (8001b90 <HAL_RCC_ClockConfig+0x24c>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	4909      	ldr	r1, [pc, #36]	@ (8001b94 <HAL_RCC_ClockConfig+0x250>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
 8001b74:	4a08      	ldr	r2, [pc, #32]	@ (8001b98 <HAL_RCC_ClockConfig+0x254>)
 8001b76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <HAL_RCC_ClockConfig+0x258>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe febd 	bl	80008fc <HAL_InitTick>
 8001b82:	4603      	mov	r3, r0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40022000 	.word	0x40022000
 8001b90:	46020c00 	.word	0x46020c00
 8001b94:	080026b8 	.word	0x080026b8
 8001b98:	20000030 	.word	0x20000030
 8001b9c:	20000034 	.word	0x20000034

08001ba0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
  uint32_t sysclk;

  /* Get SYSCLK source */
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <HAL_RCC_GetSysClockFreq+0x48>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	607b      	str	r3, [r7, #4]

  if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bec <HAL_RCC_GetSysClockFreq+0x4c>)
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	e00f      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d109      	bne.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x36>
  {
    /* HSE used as system clock source. Check if HSE is divided by 2 */
    sysclk = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8001bc2:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <HAL_RCC_GetSysClockFreq+0x48>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	0d1b      	lsrs	r3, r3, #20
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	4a08      	ldr	r2, [pc, #32]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x50>)
 8001bce:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	e002      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else
  {
    /* PLL1 used as system clock source */
    sysclk = HAL_RCC_GetPLL1RFreq();
 8001bd6:	f000 f80d 	bl	8001bf4 <HAL_RCC_GetPLL1RFreq>
 8001bda:	6078      	str	r0, [r7, #4]
  }

  return sysclk;
 8001bdc:	687b      	ldr	r3, [r7, #4]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	46020c00 	.word	0x46020c00
 8001bec:	00f42400 	.word	0x00f42400
 8001bf0:	01e84800 	.word	0x01e84800

08001bf4 <HAL_RCC_GetPLL1RFreq>:
/**
  * @brief  Return the PLL1R frequency.
  * @retval PLL1R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL1RFreq(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL1R divider */
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_RCC_GetPLL1RFreq+0x34>)
 8001bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bfe:	0e1b      	lsrs	r3, r3, #24
 8001c00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c04:	3301      	adds	r3, #1
 8001c06:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL1R one */
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 8001c08:	f000 f810 	bl	8001c2c <RCC_PLL1_GetVCOOutputFreq>
 8001c0c:	eef0 7a40 	vmov.f32	s15, s0
 8001c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c14:	ee17 2a90 	vmov	r2, s15
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	46020c00 	.word	0x46020c00

08001c2c <RCC_PLL1_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL1 VCO output frequency
  * @retval Value of PLL1 VCO output frequency
  */
static float_t RCC_PLL1_GetVCOOutputFreq(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
  float_t pllm;
  float_t plln;
  float_t pllfracn;

  /* Get PLL1 DIVR register value */
  tmpreg1 = RCC->PLL1DIVR;
 8001c32:	4b36      	ldr	r3, [pc, #216]	@ (8001d0c <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8001c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c36:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 multiplication factor */
  tmp = (tmpreg1 & RCC_PLL1DIVR_PLL1N) + 1U;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c3e:	3301      	adds	r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
  plln = (float_t) tmp;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c4c:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Get PLL1 CFGR register value */
  tmpreg1 = RCC->PLL1CFGR;
 8001c50:	4b2e      	ldr	r3, [pc, #184]	@ (8001d0c <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8001c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 divider */
  tmp = ((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	3301      	adds	r3, #1
 8001c60:	617b      	str	r3, [r7, #20]
  pllm = (float_t) tmp;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c6c:	edc7 7a01 	vstr	s15, [r7, #4]

  /* Check if fractional part is enable */
  if ((tmpreg1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d006      	beq.n	8001c88 <RCC_PLL1_GetVCOOutputFreq+0x5c>
  {
    tmp = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 8001c7a:	4b24      	ldr	r3, [pc, #144]	@ (8001d0c <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c7e:	08db      	lsrs	r3, r3, #3
 8001c80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	e001      	b.n	8001c8c <RCC_PLL1_GetVCOOutputFreq+0x60>
  }
  else
  {
    tmp = 0u;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  }
  pllfracn = (float_t)tmp;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c96:	edc7 7a00 	vstr	s15, [r7]

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLL1CFGR_PLL1SRC)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d002      	beq.n	8001caa <RCC_PLL1_GetVCOOutputFreq+0x7e>
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d003      	beq.n	8001cb0 <RCC_PLL1_GetVCOOutputFreq+0x84>
 8001ca8:	e013      	b.n	8001cd2 <RCC_PLL1_GetVCOOutputFreq+0xa6>
  {
    /* HSI used as PLL1 clock source */
    case RCC_PLLSOURCE_HSI:
      pllsrc = (float_t)HSI_VALUE;
 8001caa:	4b19      	ldr	r3, [pc, #100]	@ (8001d10 <RCC_PLL1_GetVCOOutputFreq+0xe4>)
 8001cac:	613b      	str	r3, [r7, #16]
      break;
 8001cae:	e014      	b.n	8001cda <RCC_PLL1_GetVCOOutputFreq+0xae>

    /* HSE used as PLL1 clock source */
    case RCC_PLLSOURCE_HSE:
      tmp = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8001cb0:	4b16      	ldr	r3, [pc, #88]	@ (8001d0c <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0d1b      	lsrs	r3, r3, #20
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	4a16      	ldr	r2, [pc, #88]	@ (8001d14 <RCC_PLL1_GetVCOOutputFreq+0xe8>)
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	617b      	str	r3, [r7, #20]
      pllsrc = (float_t)tmp;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	ee07 3a90 	vmov	s15, r3
 8001cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ccc:	edc7 7a04 	vstr	s15, [r7, #16]
      break;
 8001cd0:	e003      	b.n	8001cda <RCC_PLL1_GetVCOOutputFreq+0xae>

    default:
      pllsrc = (float_t)0;
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	613b      	str	r3, [r7, #16]
      break;
 8001cd8:	bf00      	nop
  }

  /* Compute VCO output frequency */
  return ((pllsrc / pllm) * (plln + (pllfracn / (float_t)0x2000u)));
 8001cda:	edd7 6a04 	vldr	s13, [r7, #16]
 8001cde:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ce6:	edd7 7a00 	vldr	s15, [r7]
 8001cea:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8001d18 <RCC_PLL1_GetVCOOutputFreq+0xec>
 8001cee:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001cf2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001d02:	371c      	adds	r7, #28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	46020c00 	.word	0x46020c00
 8001d10:	4b742400 	.word	0x4b742400
 8001d14:	01e84800 	.word	0x01e84800
 8001d18:	46000000 	.word	0x46000000

08001d1c <siprintf>:
 8001d1c:	b40e      	push	{r1, r2, r3}
 8001d1e:	b500      	push	{lr}
 8001d20:	b09c      	sub	sp, #112	@ 0x70
 8001d22:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001d26:	ab1d      	add	r3, sp, #116	@ 0x74
 8001d28:	9002      	str	r0, [sp, #8]
 8001d2a:	9006      	str	r0, [sp, #24]
 8001d2c:	9107      	str	r1, [sp, #28]
 8001d2e:	9104      	str	r1, [sp, #16]
 8001d30:	4808      	ldr	r0, [pc, #32]	@ (8001d54 <siprintf+0x38>)
 8001d32:	4909      	ldr	r1, [pc, #36]	@ (8001d58 <siprintf+0x3c>)
 8001d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8001d38:	9105      	str	r1, [sp, #20]
 8001d3a:	a902      	add	r1, sp, #8
 8001d3c:	6800      	ldr	r0, [r0, #0]
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	f000 f994 	bl	800206c <_svfiprintf_r>
 8001d44:	9b02      	ldr	r3, [sp, #8]
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	b01c      	add	sp, #112	@ 0x70
 8001d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001d50:	b003      	add	sp, #12
 8001d52:	4770      	bx	lr
 8001d54:	2000003c 	.word	0x2000003c
 8001d58:	ffff0208 	.word	0xffff0208

08001d5c <memset>:
 8001d5c:	4402      	add	r2, r0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d100      	bne.n	8001d66 <memset+0xa>
 8001d64:	4770      	bx	lr
 8001d66:	f803 1b01 	strb.w	r1, [r3], #1
 8001d6a:	e7f9      	b.n	8001d60 <memset+0x4>

08001d6c <__errno>:
 8001d6c:	4b01      	ldr	r3, [pc, #4]	@ (8001d74 <__errno+0x8>)
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	2000003c 	.word	0x2000003c

08001d78 <__libc_init_array>:
 8001d78:	b570      	push	{r4, r5, r6, lr}
 8001d7a:	4d0d      	ldr	r5, [pc, #52]	@ (8001db0 <__libc_init_array+0x38>)
 8001d7c:	2600      	movs	r6, #0
 8001d7e:	4c0d      	ldr	r4, [pc, #52]	@ (8001db4 <__libc_init_array+0x3c>)
 8001d80:	1b64      	subs	r4, r4, r5
 8001d82:	10a4      	asrs	r4, r4, #2
 8001d84:	42a6      	cmp	r6, r4
 8001d86:	d109      	bne.n	8001d9c <__libc_init_array+0x24>
 8001d88:	4d0b      	ldr	r5, [pc, #44]	@ (8001db8 <__libc_init_array+0x40>)
 8001d8a:	2600      	movs	r6, #0
 8001d8c:	4c0b      	ldr	r4, [pc, #44]	@ (8001dbc <__libc_init_array+0x44>)
 8001d8e:	f000 fc77 	bl	8002680 <_init>
 8001d92:	1b64      	subs	r4, r4, r5
 8001d94:	10a4      	asrs	r4, r4, #2
 8001d96:	42a6      	cmp	r6, r4
 8001d98:	d105      	bne.n	8001da6 <__libc_init_array+0x2e>
 8001d9a:	bd70      	pop	{r4, r5, r6, pc}
 8001d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001da0:	3601      	adds	r6, #1
 8001da2:	4798      	blx	r3
 8001da4:	e7ee      	b.n	8001d84 <__libc_init_array+0xc>
 8001da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001daa:	3601      	adds	r6, #1
 8001dac:	4798      	blx	r3
 8001dae:	e7f2      	b.n	8001d96 <__libc_init_array+0x1e>
 8001db0:	080026f4 	.word	0x080026f4
 8001db4:	080026f4 	.word	0x080026f4
 8001db8:	080026f4 	.word	0x080026f4
 8001dbc:	080026f8 	.word	0x080026f8

08001dc0 <__retarget_lock_acquire_recursive>:
 8001dc0:	4770      	bx	lr

08001dc2 <__retarget_lock_release_recursive>:
 8001dc2:	4770      	bx	lr

08001dc4 <_free_r>:
 8001dc4:	b538      	push	{r3, r4, r5, lr}
 8001dc6:	4605      	mov	r5, r0
 8001dc8:	2900      	cmp	r1, #0
 8001dca:	d041      	beq.n	8001e50 <_free_r+0x8c>
 8001dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001dd0:	1f0c      	subs	r4, r1, #4
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bfb8      	it	lt
 8001dd6:	18e4      	addlt	r4, r4, r3
 8001dd8:	f000 f8e0 	bl	8001f9c <__malloc_lock>
 8001ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8001e54 <_free_r+0x90>)
 8001dde:	6813      	ldr	r3, [r2, #0]
 8001de0:	b933      	cbnz	r3, 8001df0 <_free_r+0x2c>
 8001de2:	6063      	str	r3, [r4, #4]
 8001de4:	6014      	str	r4, [r2, #0]
 8001de6:	4628      	mov	r0, r5
 8001de8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001dec:	f000 b8dc 	b.w	8001fa8 <__malloc_unlock>
 8001df0:	42a3      	cmp	r3, r4
 8001df2:	d908      	bls.n	8001e06 <_free_r+0x42>
 8001df4:	6820      	ldr	r0, [r4, #0]
 8001df6:	1821      	adds	r1, r4, r0
 8001df8:	428b      	cmp	r3, r1
 8001dfa:	bf01      	itttt	eq
 8001dfc:	6819      	ldreq	r1, [r3, #0]
 8001dfe:	685b      	ldreq	r3, [r3, #4]
 8001e00:	1809      	addeq	r1, r1, r0
 8001e02:	6021      	streq	r1, [r4, #0]
 8001e04:	e7ed      	b.n	8001de2 <_free_r+0x1e>
 8001e06:	461a      	mov	r2, r3
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	b10b      	cbz	r3, 8001e10 <_free_r+0x4c>
 8001e0c:	42a3      	cmp	r3, r4
 8001e0e:	d9fa      	bls.n	8001e06 <_free_r+0x42>
 8001e10:	6811      	ldr	r1, [r2, #0]
 8001e12:	1850      	adds	r0, r2, r1
 8001e14:	42a0      	cmp	r0, r4
 8001e16:	d10b      	bne.n	8001e30 <_free_r+0x6c>
 8001e18:	6820      	ldr	r0, [r4, #0]
 8001e1a:	4401      	add	r1, r0
 8001e1c:	1850      	adds	r0, r2, r1
 8001e1e:	6011      	str	r1, [r2, #0]
 8001e20:	4283      	cmp	r3, r0
 8001e22:	d1e0      	bne.n	8001de6 <_free_r+0x22>
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4408      	add	r0, r1
 8001e2a:	6053      	str	r3, [r2, #4]
 8001e2c:	6010      	str	r0, [r2, #0]
 8001e2e:	e7da      	b.n	8001de6 <_free_r+0x22>
 8001e30:	d902      	bls.n	8001e38 <_free_r+0x74>
 8001e32:	230c      	movs	r3, #12
 8001e34:	602b      	str	r3, [r5, #0]
 8001e36:	e7d6      	b.n	8001de6 <_free_r+0x22>
 8001e38:	6820      	ldr	r0, [r4, #0]
 8001e3a:	1821      	adds	r1, r4, r0
 8001e3c:	428b      	cmp	r3, r1
 8001e3e:	bf02      	ittt	eq
 8001e40:	6819      	ldreq	r1, [r3, #0]
 8001e42:	685b      	ldreq	r3, [r3, #4]
 8001e44:	1809      	addeq	r1, r1, r0
 8001e46:	6063      	str	r3, [r4, #4]
 8001e48:	bf08      	it	eq
 8001e4a:	6021      	streq	r1, [r4, #0]
 8001e4c:	6054      	str	r4, [r2, #4]
 8001e4e:	e7ca      	b.n	8001de6 <_free_r+0x22>
 8001e50:	bd38      	pop	{r3, r4, r5, pc}
 8001e52:	bf00      	nop
 8001e54:	200001f4 	.word	0x200001f4

08001e58 <sbrk_aligned>:
 8001e58:	b570      	push	{r4, r5, r6, lr}
 8001e5a:	4e0f      	ldr	r6, [pc, #60]	@ (8001e98 <sbrk_aligned+0x40>)
 8001e5c:	460c      	mov	r4, r1
 8001e5e:	4605      	mov	r5, r0
 8001e60:	6831      	ldr	r1, [r6, #0]
 8001e62:	b911      	cbnz	r1, 8001e6a <sbrk_aligned+0x12>
 8001e64:	f000 fbaa 	bl	80025bc <_sbrk_r>
 8001e68:	6030      	str	r0, [r6, #0]
 8001e6a:	4621      	mov	r1, r4
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	f000 fba5 	bl	80025bc <_sbrk_r>
 8001e72:	1c43      	adds	r3, r0, #1
 8001e74:	d103      	bne.n	8001e7e <sbrk_aligned+0x26>
 8001e76:	f04f 34ff 	mov.w	r4, #4294967295
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
 8001e7e:	1cc4      	adds	r4, r0, #3
 8001e80:	f024 0403 	bic.w	r4, r4, #3
 8001e84:	42a0      	cmp	r0, r4
 8001e86:	d0f8      	beq.n	8001e7a <sbrk_aligned+0x22>
 8001e88:	1a21      	subs	r1, r4, r0
 8001e8a:	4628      	mov	r0, r5
 8001e8c:	f000 fb96 	bl	80025bc <_sbrk_r>
 8001e90:	3001      	adds	r0, #1
 8001e92:	d1f2      	bne.n	8001e7a <sbrk_aligned+0x22>
 8001e94:	e7ef      	b.n	8001e76 <sbrk_aligned+0x1e>
 8001e96:	bf00      	nop
 8001e98:	200001f0 	.word	0x200001f0

08001e9c <_malloc_r>:
 8001e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ea0:	1ccd      	adds	r5, r1, #3
 8001ea2:	4606      	mov	r6, r0
 8001ea4:	f025 0503 	bic.w	r5, r5, #3
 8001ea8:	3508      	adds	r5, #8
 8001eaa:	2d0c      	cmp	r5, #12
 8001eac:	bf38      	it	cc
 8001eae:	250c      	movcc	r5, #12
 8001eb0:	2d00      	cmp	r5, #0
 8001eb2:	db01      	blt.n	8001eb8 <_malloc_r+0x1c>
 8001eb4:	42a9      	cmp	r1, r5
 8001eb6:	d904      	bls.n	8001ec2 <_malloc_r+0x26>
 8001eb8:	230c      	movs	r3, #12
 8001eba:	6033      	str	r3, [r6, #0]
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ec2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001f98 <_malloc_r+0xfc>
 8001ec6:	f000 f869 	bl	8001f9c <__malloc_lock>
 8001eca:	f8d8 3000 	ldr.w	r3, [r8]
 8001ece:	461c      	mov	r4, r3
 8001ed0:	bb44      	cbnz	r4, 8001f24 <_malloc_r+0x88>
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	4630      	mov	r0, r6
 8001ed6:	f7ff ffbf 	bl	8001e58 <sbrk_aligned>
 8001eda:	1c43      	adds	r3, r0, #1
 8001edc:	4604      	mov	r4, r0
 8001ede:	d158      	bne.n	8001f92 <_malloc_r+0xf6>
 8001ee0:	f8d8 4000 	ldr.w	r4, [r8]
 8001ee4:	4627      	mov	r7, r4
 8001ee6:	2f00      	cmp	r7, #0
 8001ee8:	d143      	bne.n	8001f72 <_malloc_r+0xd6>
 8001eea:	2c00      	cmp	r4, #0
 8001eec:	d04b      	beq.n	8001f86 <_malloc_r+0xea>
 8001eee:	6823      	ldr	r3, [r4, #0]
 8001ef0:	4639      	mov	r1, r7
 8001ef2:	4630      	mov	r0, r6
 8001ef4:	eb04 0903 	add.w	r9, r4, r3
 8001ef8:	f000 fb60 	bl	80025bc <_sbrk_r>
 8001efc:	4581      	cmp	r9, r0
 8001efe:	d142      	bne.n	8001f86 <_malloc_r+0xea>
 8001f00:	6821      	ldr	r1, [r4, #0]
 8001f02:	4630      	mov	r0, r6
 8001f04:	1a6d      	subs	r5, r5, r1
 8001f06:	4629      	mov	r1, r5
 8001f08:	f7ff ffa6 	bl	8001e58 <sbrk_aligned>
 8001f0c:	3001      	adds	r0, #1
 8001f0e:	d03a      	beq.n	8001f86 <_malloc_r+0xea>
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	442b      	add	r3, r5
 8001f14:	6023      	str	r3, [r4, #0]
 8001f16:	f8d8 3000 	ldr.w	r3, [r8]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	bb62      	cbnz	r2, 8001f78 <_malloc_r+0xdc>
 8001f1e:	f8c8 7000 	str.w	r7, [r8]
 8001f22:	e00f      	b.n	8001f44 <_malloc_r+0xa8>
 8001f24:	6822      	ldr	r2, [r4, #0]
 8001f26:	1b52      	subs	r2, r2, r5
 8001f28:	d420      	bmi.n	8001f6c <_malloc_r+0xd0>
 8001f2a:	2a0b      	cmp	r2, #11
 8001f2c:	d917      	bls.n	8001f5e <_malloc_r+0xc2>
 8001f2e:	1961      	adds	r1, r4, r5
 8001f30:	42a3      	cmp	r3, r4
 8001f32:	6025      	str	r5, [r4, #0]
 8001f34:	bf18      	it	ne
 8001f36:	6059      	strne	r1, [r3, #4]
 8001f38:	6863      	ldr	r3, [r4, #4]
 8001f3a:	bf08      	it	eq
 8001f3c:	f8c8 1000 	streq.w	r1, [r8]
 8001f40:	5162      	str	r2, [r4, r5]
 8001f42:	604b      	str	r3, [r1, #4]
 8001f44:	4630      	mov	r0, r6
 8001f46:	f000 f82f 	bl	8001fa8 <__malloc_unlock>
 8001f4a:	f104 000b 	add.w	r0, r4, #11
 8001f4e:	1d23      	adds	r3, r4, #4
 8001f50:	f020 0007 	bic.w	r0, r0, #7
 8001f54:	1ac2      	subs	r2, r0, r3
 8001f56:	bf1c      	itt	ne
 8001f58:	1a1b      	subne	r3, r3, r0
 8001f5a:	50a3      	strne	r3, [r4, r2]
 8001f5c:	e7af      	b.n	8001ebe <_malloc_r+0x22>
 8001f5e:	6862      	ldr	r2, [r4, #4]
 8001f60:	42a3      	cmp	r3, r4
 8001f62:	bf0c      	ite	eq
 8001f64:	f8c8 2000 	streq.w	r2, [r8]
 8001f68:	605a      	strne	r2, [r3, #4]
 8001f6a:	e7eb      	b.n	8001f44 <_malloc_r+0xa8>
 8001f6c:	4623      	mov	r3, r4
 8001f6e:	6864      	ldr	r4, [r4, #4]
 8001f70:	e7ae      	b.n	8001ed0 <_malloc_r+0x34>
 8001f72:	463c      	mov	r4, r7
 8001f74:	687f      	ldr	r7, [r7, #4]
 8001f76:	e7b6      	b.n	8001ee6 <_malloc_r+0x4a>
 8001f78:	461a      	mov	r2, r3
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	42a3      	cmp	r3, r4
 8001f7e:	d1fb      	bne.n	8001f78 <_malloc_r+0xdc>
 8001f80:	2300      	movs	r3, #0
 8001f82:	6053      	str	r3, [r2, #4]
 8001f84:	e7de      	b.n	8001f44 <_malloc_r+0xa8>
 8001f86:	230c      	movs	r3, #12
 8001f88:	4630      	mov	r0, r6
 8001f8a:	6033      	str	r3, [r6, #0]
 8001f8c:	f000 f80c 	bl	8001fa8 <__malloc_unlock>
 8001f90:	e794      	b.n	8001ebc <_malloc_r+0x20>
 8001f92:	6005      	str	r5, [r0, #0]
 8001f94:	e7d6      	b.n	8001f44 <_malloc_r+0xa8>
 8001f96:	bf00      	nop
 8001f98:	200001f4 	.word	0x200001f4

08001f9c <__malloc_lock>:
 8001f9c:	4801      	ldr	r0, [pc, #4]	@ (8001fa4 <__malloc_lock+0x8>)
 8001f9e:	f7ff bf0f 	b.w	8001dc0 <__retarget_lock_acquire_recursive>
 8001fa2:	bf00      	nop
 8001fa4:	200001ec 	.word	0x200001ec

08001fa8 <__malloc_unlock>:
 8001fa8:	4801      	ldr	r0, [pc, #4]	@ (8001fb0 <__malloc_unlock+0x8>)
 8001faa:	f7ff bf0a 	b.w	8001dc2 <__retarget_lock_release_recursive>
 8001fae:	bf00      	nop
 8001fb0:	200001ec 	.word	0x200001ec

08001fb4 <__ssputs_r>:
 8001fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fb8:	461f      	mov	r7, r3
 8001fba:	688e      	ldr	r6, [r1, #8]
 8001fbc:	4682      	mov	sl, r0
 8001fbe:	460c      	mov	r4, r1
 8001fc0:	42be      	cmp	r6, r7
 8001fc2:	4690      	mov	r8, r2
 8001fc4:	680b      	ldr	r3, [r1, #0]
 8001fc6:	d82d      	bhi.n	8002024 <__ssputs_r+0x70>
 8001fc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001fcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001fd0:	d026      	beq.n	8002020 <__ssputs_r+0x6c>
 8001fd2:	6965      	ldr	r5, [r4, #20]
 8001fd4:	6909      	ldr	r1, [r1, #16]
 8001fd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001fda:	eba3 0901 	sub.w	r9, r3, r1
 8001fde:	1c7b      	adds	r3, r7, #1
 8001fe0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001fe4:	444b      	add	r3, r9
 8001fe6:	106d      	asrs	r5, r5, #1
 8001fe8:	429d      	cmp	r5, r3
 8001fea:	bf38      	it	cc
 8001fec:	461d      	movcc	r5, r3
 8001fee:	0553      	lsls	r3, r2, #21
 8001ff0:	d527      	bpl.n	8002042 <__ssputs_r+0x8e>
 8001ff2:	4629      	mov	r1, r5
 8001ff4:	f7ff ff52 	bl	8001e9c <_malloc_r>
 8001ff8:	4606      	mov	r6, r0
 8001ffa:	b360      	cbz	r0, 8002056 <__ssputs_r+0xa2>
 8001ffc:	464a      	mov	r2, r9
 8001ffe:	6921      	ldr	r1, [r4, #16]
 8002000:	f000 fafa 	bl	80025f8 <memcpy>
 8002004:	89a3      	ldrh	r3, [r4, #12]
 8002006:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800200a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800200e:	81a3      	strh	r3, [r4, #12]
 8002010:	6126      	str	r6, [r4, #16]
 8002012:	444e      	add	r6, r9
 8002014:	6165      	str	r5, [r4, #20]
 8002016:	eba5 0509 	sub.w	r5, r5, r9
 800201a:	6026      	str	r6, [r4, #0]
 800201c:	463e      	mov	r6, r7
 800201e:	60a5      	str	r5, [r4, #8]
 8002020:	42be      	cmp	r6, r7
 8002022:	d900      	bls.n	8002026 <__ssputs_r+0x72>
 8002024:	463e      	mov	r6, r7
 8002026:	4632      	mov	r2, r6
 8002028:	4641      	mov	r1, r8
 800202a:	6820      	ldr	r0, [r4, #0]
 800202c:	f000 faac 	bl	8002588 <memmove>
 8002030:	68a3      	ldr	r3, [r4, #8]
 8002032:	2000      	movs	r0, #0
 8002034:	1b9b      	subs	r3, r3, r6
 8002036:	60a3      	str	r3, [r4, #8]
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	4433      	add	r3, r6
 800203c:	6023      	str	r3, [r4, #0]
 800203e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002042:	462a      	mov	r2, r5
 8002044:	f000 fae5 	bl	8002612 <_realloc_r>
 8002048:	4606      	mov	r6, r0
 800204a:	2800      	cmp	r0, #0
 800204c:	d1e0      	bne.n	8002010 <__ssputs_r+0x5c>
 800204e:	6921      	ldr	r1, [r4, #16]
 8002050:	4650      	mov	r0, sl
 8002052:	f7ff feb7 	bl	8001dc4 <_free_r>
 8002056:	230c      	movs	r3, #12
 8002058:	f04f 30ff 	mov.w	r0, #4294967295
 800205c:	f8ca 3000 	str.w	r3, [sl]
 8002060:	89a3      	ldrh	r3, [r4, #12]
 8002062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002066:	81a3      	strh	r3, [r4, #12]
 8002068:	e7e9      	b.n	800203e <__ssputs_r+0x8a>
	...

0800206c <_svfiprintf_r>:
 800206c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002070:	4698      	mov	r8, r3
 8002072:	898b      	ldrh	r3, [r1, #12]
 8002074:	b09d      	sub	sp, #116	@ 0x74
 8002076:	4607      	mov	r7, r0
 8002078:	061b      	lsls	r3, r3, #24
 800207a:	460d      	mov	r5, r1
 800207c:	4614      	mov	r4, r2
 800207e:	d510      	bpl.n	80020a2 <_svfiprintf_r+0x36>
 8002080:	690b      	ldr	r3, [r1, #16]
 8002082:	b973      	cbnz	r3, 80020a2 <_svfiprintf_r+0x36>
 8002084:	2140      	movs	r1, #64	@ 0x40
 8002086:	f7ff ff09 	bl	8001e9c <_malloc_r>
 800208a:	6028      	str	r0, [r5, #0]
 800208c:	6128      	str	r0, [r5, #16]
 800208e:	b930      	cbnz	r0, 800209e <_svfiprintf_r+0x32>
 8002090:	230c      	movs	r3, #12
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	b01d      	add	sp, #116	@ 0x74
 800209a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800209e:	2340      	movs	r3, #64	@ 0x40
 80020a0:	616b      	str	r3, [r5, #20]
 80020a2:	2300      	movs	r3, #0
 80020a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80020a8:	f04f 0901 	mov.w	r9, #1
 80020ac:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8002250 <_svfiprintf_r+0x1e4>
 80020b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80020b2:	2320      	movs	r3, #32
 80020b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80020b8:	2330      	movs	r3, #48	@ 0x30
 80020ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80020be:	4623      	mov	r3, r4
 80020c0:	469a      	mov	sl, r3
 80020c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020c6:	b10a      	cbz	r2, 80020cc <_svfiprintf_r+0x60>
 80020c8:	2a25      	cmp	r2, #37	@ 0x25
 80020ca:	d1f9      	bne.n	80020c0 <_svfiprintf_r+0x54>
 80020cc:	ebba 0b04 	subs.w	fp, sl, r4
 80020d0:	d00b      	beq.n	80020ea <_svfiprintf_r+0x7e>
 80020d2:	465b      	mov	r3, fp
 80020d4:	4622      	mov	r2, r4
 80020d6:	4629      	mov	r1, r5
 80020d8:	4638      	mov	r0, r7
 80020da:	f7ff ff6b 	bl	8001fb4 <__ssputs_r>
 80020de:	3001      	adds	r0, #1
 80020e0:	f000 80a7 	beq.w	8002232 <_svfiprintf_r+0x1c6>
 80020e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80020e6:	445a      	add	r2, fp
 80020e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80020ea:	f89a 3000 	ldrb.w	r3, [sl]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 809f 	beq.w	8002232 <_svfiprintf_r+0x1c6>
 80020f4:	2300      	movs	r3, #0
 80020f6:	f04f 32ff 	mov.w	r2, #4294967295
 80020fa:	f10a 0a01 	add.w	sl, sl, #1
 80020fe:	9304      	str	r3, [sp, #16]
 8002100:	9307      	str	r3, [sp, #28]
 8002102:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002106:	931a      	str	r3, [sp, #104]	@ 0x68
 8002108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800210c:	4654      	mov	r4, sl
 800210e:	2205      	movs	r2, #5
 8002110:	484f      	ldr	r0, [pc, #316]	@ (8002250 <_svfiprintf_r+0x1e4>)
 8002112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002116:	f000 fa61 	bl	80025dc <memchr>
 800211a:	9a04      	ldr	r2, [sp, #16]
 800211c:	b9d8      	cbnz	r0, 8002156 <_svfiprintf_r+0xea>
 800211e:	06d0      	lsls	r0, r2, #27
 8002120:	bf44      	itt	mi
 8002122:	2320      	movmi	r3, #32
 8002124:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002128:	0711      	lsls	r1, r2, #28
 800212a:	bf44      	itt	mi
 800212c:	232b      	movmi	r3, #43	@ 0x2b
 800212e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002132:	f89a 3000 	ldrb.w	r3, [sl]
 8002136:	2b2a      	cmp	r3, #42	@ 0x2a
 8002138:	d015      	beq.n	8002166 <_svfiprintf_r+0xfa>
 800213a:	9a07      	ldr	r2, [sp, #28]
 800213c:	4654      	mov	r4, sl
 800213e:	2000      	movs	r0, #0
 8002140:	f04f 0c0a 	mov.w	ip, #10
 8002144:	4621      	mov	r1, r4
 8002146:	f811 3b01 	ldrb.w	r3, [r1], #1
 800214a:	3b30      	subs	r3, #48	@ 0x30
 800214c:	2b09      	cmp	r3, #9
 800214e:	d94b      	bls.n	80021e8 <_svfiprintf_r+0x17c>
 8002150:	b1b0      	cbz	r0, 8002180 <_svfiprintf_r+0x114>
 8002152:	9207      	str	r2, [sp, #28]
 8002154:	e014      	b.n	8002180 <_svfiprintf_r+0x114>
 8002156:	eba0 0308 	sub.w	r3, r0, r8
 800215a:	46a2      	mov	sl, r4
 800215c:	fa09 f303 	lsl.w	r3, r9, r3
 8002160:	4313      	orrs	r3, r2
 8002162:	9304      	str	r3, [sp, #16]
 8002164:	e7d2      	b.n	800210c <_svfiprintf_r+0xa0>
 8002166:	9b03      	ldr	r3, [sp, #12]
 8002168:	1d19      	adds	r1, r3, #4
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	9103      	str	r1, [sp, #12]
 8002170:	bfbb      	ittet	lt
 8002172:	425b      	neglt	r3, r3
 8002174:	f042 0202 	orrlt.w	r2, r2, #2
 8002178:	9307      	strge	r3, [sp, #28]
 800217a:	9307      	strlt	r3, [sp, #28]
 800217c:	bfb8      	it	lt
 800217e:	9204      	strlt	r2, [sp, #16]
 8002180:	7823      	ldrb	r3, [r4, #0]
 8002182:	2b2e      	cmp	r3, #46	@ 0x2e
 8002184:	d10a      	bne.n	800219c <_svfiprintf_r+0x130>
 8002186:	7863      	ldrb	r3, [r4, #1]
 8002188:	2b2a      	cmp	r3, #42	@ 0x2a
 800218a:	d132      	bne.n	80021f2 <_svfiprintf_r+0x186>
 800218c:	9b03      	ldr	r3, [sp, #12]
 800218e:	3402      	adds	r4, #2
 8002190:	1d1a      	adds	r2, r3, #4
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002198:	9203      	str	r2, [sp, #12]
 800219a:	9305      	str	r3, [sp, #20]
 800219c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002260 <_svfiprintf_r+0x1f4>
 80021a0:	2203      	movs	r2, #3
 80021a2:	7821      	ldrb	r1, [r4, #0]
 80021a4:	4650      	mov	r0, sl
 80021a6:	f000 fa19 	bl	80025dc <memchr>
 80021aa:	b138      	cbz	r0, 80021bc <_svfiprintf_r+0x150>
 80021ac:	eba0 000a 	sub.w	r0, r0, sl
 80021b0:	2240      	movs	r2, #64	@ 0x40
 80021b2:	9b04      	ldr	r3, [sp, #16]
 80021b4:	3401      	adds	r4, #1
 80021b6:	4082      	lsls	r2, r0
 80021b8:	4313      	orrs	r3, r2
 80021ba:	9304      	str	r3, [sp, #16]
 80021bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021c0:	2206      	movs	r2, #6
 80021c2:	4824      	ldr	r0, [pc, #144]	@ (8002254 <_svfiprintf_r+0x1e8>)
 80021c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80021c8:	f000 fa08 	bl	80025dc <memchr>
 80021cc:	2800      	cmp	r0, #0
 80021ce:	d036      	beq.n	800223e <_svfiprintf_r+0x1d2>
 80021d0:	4b21      	ldr	r3, [pc, #132]	@ (8002258 <_svfiprintf_r+0x1ec>)
 80021d2:	bb1b      	cbnz	r3, 800221c <_svfiprintf_r+0x1b0>
 80021d4:	9b03      	ldr	r3, [sp, #12]
 80021d6:	3307      	adds	r3, #7
 80021d8:	f023 0307 	bic.w	r3, r3, #7
 80021dc:	3308      	adds	r3, #8
 80021de:	9303      	str	r3, [sp, #12]
 80021e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80021e2:	4433      	add	r3, r6
 80021e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80021e6:	e76a      	b.n	80020be <_svfiprintf_r+0x52>
 80021e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80021ec:	460c      	mov	r4, r1
 80021ee:	2001      	movs	r0, #1
 80021f0:	e7a8      	b.n	8002144 <_svfiprintf_r+0xd8>
 80021f2:	2300      	movs	r3, #0
 80021f4:	3401      	adds	r4, #1
 80021f6:	f04f 0c0a 	mov.w	ip, #10
 80021fa:	4619      	mov	r1, r3
 80021fc:	9305      	str	r3, [sp, #20]
 80021fe:	4620      	mov	r0, r4
 8002200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002204:	3a30      	subs	r2, #48	@ 0x30
 8002206:	2a09      	cmp	r2, #9
 8002208:	d903      	bls.n	8002212 <_svfiprintf_r+0x1a6>
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0c6      	beq.n	800219c <_svfiprintf_r+0x130>
 800220e:	9105      	str	r1, [sp, #20]
 8002210:	e7c4      	b.n	800219c <_svfiprintf_r+0x130>
 8002212:	fb0c 2101 	mla	r1, ip, r1, r2
 8002216:	4604      	mov	r4, r0
 8002218:	2301      	movs	r3, #1
 800221a:	e7f0      	b.n	80021fe <_svfiprintf_r+0x192>
 800221c:	ab03      	add	r3, sp, #12
 800221e:	462a      	mov	r2, r5
 8002220:	a904      	add	r1, sp, #16
 8002222:	4638      	mov	r0, r7
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	4b0d      	ldr	r3, [pc, #52]	@ (800225c <_svfiprintf_r+0x1f0>)
 8002228:	f3af 8000 	nop.w
 800222c:	1c42      	adds	r2, r0, #1
 800222e:	4606      	mov	r6, r0
 8002230:	d1d6      	bne.n	80021e0 <_svfiprintf_r+0x174>
 8002232:	89ab      	ldrh	r3, [r5, #12]
 8002234:	065b      	lsls	r3, r3, #25
 8002236:	f53f af2d 	bmi.w	8002094 <_svfiprintf_r+0x28>
 800223a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800223c:	e72c      	b.n	8002098 <_svfiprintf_r+0x2c>
 800223e:	ab03      	add	r3, sp, #12
 8002240:	462a      	mov	r2, r5
 8002242:	a904      	add	r1, sp, #16
 8002244:	4638      	mov	r0, r7
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	4b04      	ldr	r3, [pc, #16]	@ (800225c <_svfiprintf_r+0x1f0>)
 800224a:	f000 f87d 	bl	8002348 <_printf_i>
 800224e:	e7ed      	b.n	800222c <_svfiprintf_r+0x1c0>
 8002250:	080026c0 	.word	0x080026c0
 8002254:	080026ca 	.word	0x080026ca
 8002258:	00000000 	.word	0x00000000
 800225c:	08001fb5 	.word	0x08001fb5
 8002260:	080026c6 	.word	0x080026c6

08002264 <_printf_common>:
 8002264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002268:	4616      	mov	r6, r2
 800226a:	4698      	mov	r8, r3
 800226c:	688a      	ldr	r2, [r1, #8]
 800226e:	4607      	mov	r7, r0
 8002270:	690b      	ldr	r3, [r1, #16]
 8002272:	460c      	mov	r4, r1
 8002274:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002278:	4293      	cmp	r3, r2
 800227a:	bfb8      	it	lt
 800227c:	4613      	movlt	r3, r2
 800227e:	6033      	str	r3, [r6, #0]
 8002280:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002284:	b10a      	cbz	r2, 800228a <_printf_common+0x26>
 8002286:	3301      	adds	r3, #1
 8002288:	6033      	str	r3, [r6, #0]
 800228a:	6823      	ldr	r3, [r4, #0]
 800228c:	0699      	lsls	r1, r3, #26
 800228e:	bf42      	ittt	mi
 8002290:	6833      	ldrmi	r3, [r6, #0]
 8002292:	3302      	addmi	r3, #2
 8002294:	6033      	strmi	r3, [r6, #0]
 8002296:	6825      	ldr	r5, [r4, #0]
 8002298:	f015 0506 	ands.w	r5, r5, #6
 800229c:	d106      	bne.n	80022ac <_printf_common+0x48>
 800229e:	f104 0a19 	add.w	sl, r4, #25
 80022a2:	68e3      	ldr	r3, [r4, #12]
 80022a4:	6832      	ldr	r2, [r6, #0]
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	42ab      	cmp	r3, r5
 80022aa:	dc2b      	bgt.n	8002304 <_printf_common+0xa0>
 80022ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80022b0:	6822      	ldr	r2, [r4, #0]
 80022b2:	3b00      	subs	r3, #0
 80022b4:	bf18      	it	ne
 80022b6:	2301      	movne	r3, #1
 80022b8:	0692      	lsls	r2, r2, #26
 80022ba:	d430      	bmi.n	800231e <_printf_common+0xba>
 80022bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80022c0:	4641      	mov	r1, r8
 80022c2:	4638      	mov	r0, r7
 80022c4:	47c8      	blx	r9
 80022c6:	3001      	adds	r0, #1
 80022c8:	d023      	beq.n	8002312 <_printf_common+0xae>
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	341a      	adds	r4, #26
 80022ce:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80022d2:	f003 0306 	and.w	r3, r3, #6
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	bf0a      	itet	eq
 80022da:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80022de:	2500      	movne	r5, #0
 80022e0:	6833      	ldreq	r3, [r6, #0]
 80022e2:	f04f 0600 	mov.w	r6, #0
 80022e6:	bf08      	it	eq
 80022e8:	1aed      	subeq	r5, r5, r3
 80022ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80022ee:	bf08      	it	eq
 80022f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022f4:	4293      	cmp	r3, r2
 80022f6:	bfc4      	itt	gt
 80022f8:	1a9b      	subgt	r3, r3, r2
 80022fa:	18ed      	addgt	r5, r5, r3
 80022fc:	42b5      	cmp	r5, r6
 80022fe:	d11a      	bne.n	8002336 <_printf_common+0xd2>
 8002300:	2000      	movs	r0, #0
 8002302:	e008      	b.n	8002316 <_printf_common+0xb2>
 8002304:	2301      	movs	r3, #1
 8002306:	4652      	mov	r2, sl
 8002308:	4641      	mov	r1, r8
 800230a:	4638      	mov	r0, r7
 800230c:	47c8      	blx	r9
 800230e:	3001      	adds	r0, #1
 8002310:	d103      	bne.n	800231a <_printf_common+0xb6>
 8002312:	f04f 30ff 	mov.w	r0, #4294967295
 8002316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800231a:	3501      	adds	r5, #1
 800231c:	e7c1      	b.n	80022a2 <_printf_common+0x3e>
 800231e:	18e1      	adds	r1, r4, r3
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	2030      	movs	r0, #48	@ 0x30
 8002324:	3302      	adds	r3, #2
 8002326:	4422      	add	r2, r4
 8002328:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800232c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002330:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002334:	e7c2      	b.n	80022bc <_printf_common+0x58>
 8002336:	2301      	movs	r3, #1
 8002338:	4622      	mov	r2, r4
 800233a:	4641      	mov	r1, r8
 800233c:	4638      	mov	r0, r7
 800233e:	47c8      	blx	r9
 8002340:	3001      	adds	r0, #1
 8002342:	d0e6      	beq.n	8002312 <_printf_common+0xae>
 8002344:	3601      	adds	r6, #1
 8002346:	e7d9      	b.n	80022fc <_printf_common+0x98>

08002348 <_printf_i>:
 8002348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800234c:	7e0f      	ldrb	r7, [r1, #24]
 800234e:	4691      	mov	r9, r2
 8002350:	4680      	mov	r8, r0
 8002352:	460c      	mov	r4, r1
 8002354:	2f78      	cmp	r7, #120	@ 0x78
 8002356:	469a      	mov	sl, r3
 8002358:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800235a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800235e:	d807      	bhi.n	8002370 <_printf_i+0x28>
 8002360:	2f62      	cmp	r7, #98	@ 0x62
 8002362:	d80a      	bhi.n	800237a <_printf_i+0x32>
 8002364:	2f00      	cmp	r7, #0
 8002366:	f000 80d2 	beq.w	800250e <_printf_i+0x1c6>
 800236a:	2f58      	cmp	r7, #88	@ 0x58
 800236c:	f000 80b9 	beq.w	80024e2 <_printf_i+0x19a>
 8002370:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002374:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002378:	e03a      	b.n	80023f0 <_printf_i+0xa8>
 800237a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800237e:	2b15      	cmp	r3, #21
 8002380:	d8f6      	bhi.n	8002370 <_printf_i+0x28>
 8002382:	a101      	add	r1, pc, #4	@ (adr r1, 8002388 <_printf_i+0x40>)
 8002384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002388:	080023e1 	.word	0x080023e1
 800238c:	080023f5 	.word	0x080023f5
 8002390:	08002371 	.word	0x08002371
 8002394:	08002371 	.word	0x08002371
 8002398:	08002371 	.word	0x08002371
 800239c:	08002371 	.word	0x08002371
 80023a0:	080023f5 	.word	0x080023f5
 80023a4:	08002371 	.word	0x08002371
 80023a8:	08002371 	.word	0x08002371
 80023ac:	08002371 	.word	0x08002371
 80023b0:	08002371 	.word	0x08002371
 80023b4:	080024f5 	.word	0x080024f5
 80023b8:	0800241f 	.word	0x0800241f
 80023bc:	080024af 	.word	0x080024af
 80023c0:	08002371 	.word	0x08002371
 80023c4:	08002371 	.word	0x08002371
 80023c8:	08002517 	.word	0x08002517
 80023cc:	08002371 	.word	0x08002371
 80023d0:	0800241f 	.word	0x0800241f
 80023d4:	08002371 	.word	0x08002371
 80023d8:	08002371 	.word	0x08002371
 80023dc:	080024b7 	.word	0x080024b7
 80023e0:	6833      	ldr	r3, [r6, #0]
 80023e2:	1d1a      	adds	r2, r3, #4
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6032      	str	r2, [r6, #0]
 80023e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80023ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80023f0:	2301      	movs	r3, #1
 80023f2:	e09d      	b.n	8002530 <_printf_i+0x1e8>
 80023f4:	6833      	ldr	r3, [r6, #0]
 80023f6:	6820      	ldr	r0, [r4, #0]
 80023f8:	1d19      	adds	r1, r3, #4
 80023fa:	6031      	str	r1, [r6, #0]
 80023fc:	0606      	lsls	r6, r0, #24
 80023fe:	d501      	bpl.n	8002404 <_printf_i+0xbc>
 8002400:	681d      	ldr	r5, [r3, #0]
 8002402:	e003      	b.n	800240c <_printf_i+0xc4>
 8002404:	0645      	lsls	r5, r0, #25
 8002406:	d5fb      	bpl.n	8002400 <_printf_i+0xb8>
 8002408:	f9b3 5000 	ldrsh.w	r5, [r3]
 800240c:	2d00      	cmp	r5, #0
 800240e:	da03      	bge.n	8002418 <_printf_i+0xd0>
 8002410:	232d      	movs	r3, #45	@ 0x2d
 8002412:	426d      	negs	r5, r5
 8002414:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002418:	4859      	ldr	r0, [pc, #356]	@ (8002580 <_printf_i+0x238>)
 800241a:	230a      	movs	r3, #10
 800241c:	e011      	b.n	8002442 <_printf_i+0xfa>
 800241e:	6821      	ldr	r1, [r4, #0]
 8002420:	6833      	ldr	r3, [r6, #0]
 8002422:	0608      	lsls	r0, r1, #24
 8002424:	f853 5b04 	ldr.w	r5, [r3], #4
 8002428:	d402      	bmi.n	8002430 <_printf_i+0xe8>
 800242a:	0649      	lsls	r1, r1, #25
 800242c:	bf48      	it	mi
 800242e:	b2ad      	uxthmi	r5, r5
 8002430:	2f6f      	cmp	r7, #111	@ 0x6f
 8002432:	6033      	str	r3, [r6, #0]
 8002434:	4852      	ldr	r0, [pc, #328]	@ (8002580 <_printf_i+0x238>)
 8002436:	bf14      	ite	ne
 8002438:	230a      	movne	r3, #10
 800243a:	2308      	moveq	r3, #8
 800243c:	2100      	movs	r1, #0
 800243e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002442:	6866      	ldr	r6, [r4, #4]
 8002444:	2e00      	cmp	r6, #0
 8002446:	60a6      	str	r6, [r4, #8]
 8002448:	bfa2      	ittt	ge
 800244a:	6821      	ldrge	r1, [r4, #0]
 800244c:	f021 0104 	bicge.w	r1, r1, #4
 8002450:	6021      	strge	r1, [r4, #0]
 8002452:	b90d      	cbnz	r5, 8002458 <_printf_i+0x110>
 8002454:	2e00      	cmp	r6, #0
 8002456:	d04b      	beq.n	80024f0 <_printf_i+0x1a8>
 8002458:	4616      	mov	r6, r2
 800245a:	fbb5 f1f3 	udiv	r1, r5, r3
 800245e:	fb03 5711 	mls	r7, r3, r1, r5
 8002462:	5dc7      	ldrb	r7, [r0, r7]
 8002464:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002468:	462f      	mov	r7, r5
 800246a:	460d      	mov	r5, r1
 800246c:	42bb      	cmp	r3, r7
 800246e:	d9f4      	bls.n	800245a <_printf_i+0x112>
 8002470:	2b08      	cmp	r3, #8
 8002472:	d10b      	bne.n	800248c <_printf_i+0x144>
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	07df      	lsls	r7, r3, #31
 8002478:	d508      	bpl.n	800248c <_printf_i+0x144>
 800247a:	6923      	ldr	r3, [r4, #16]
 800247c:	6861      	ldr	r1, [r4, #4]
 800247e:	4299      	cmp	r1, r3
 8002480:	bfde      	ittt	le
 8002482:	2330      	movle	r3, #48	@ 0x30
 8002484:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002488:	f106 36ff 	addle.w	r6, r6, #4294967295
 800248c:	1b92      	subs	r2, r2, r6
 800248e:	6122      	str	r2, [r4, #16]
 8002490:	464b      	mov	r3, r9
 8002492:	aa03      	add	r2, sp, #12
 8002494:	4621      	mov	r1, r4
 8002496:	4640      	mov	r0, r8
 8002498:	f8cd a000 	str.w	sl, [sp]
 800249c:	f7ff fee2 	bl	8002264 <_printf_common>
 80024a0:	3001      	adds	r0, #1
 80024a2:	d14a      	bne.n	800253a <_printf_i+0x1f2>
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295
 80024a8:	b004      	add	sp, #16
 80024aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024ae:	6823      	ldr	r3, [r4, #0]
 80024b0:	f043 0320 	orr.w	r3, r3, #32
 80024b4:	6023      	str	r3, [r4, #0]
 80024b6:	2778      	movs	r7, #120	@ 0x78
 80024b8:	4832      	ldr	r0, [pc, #200]	@ (8002584 <_printf_i+0x23c>)
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80024c0:	061f      	lsls	r7, r3, #24
 80024c2:	6831      	ldr	r1, [r6, #0]
 80024c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80024c8:	d402      	bmi.n	80024d0 <_printf_i+0x188>
 80024ca:	065f      	lsls	r7, r3, #25
 80024cc:	bf48      	it	mi
 80024ce:	b2ad      	uxthmi	r5, r5
 80024d0:	6031      	str	r1, [r6, #0]
 80024d2:	07d9      	lsls	r1, r3, #31
 80024d4:	bf44      	itt	mi
 80024d6:	f043 0320 	orrmi.w	r3, r3, #32
 80024da:	6023      	strmi	r3, [r4, #0]
 80024dc:	b11d      	cbz	r5, 80024e6 <_printf_i+0x19e>
 80024de:	2310      	movs	r3, #16
 80024e0:	e7ac      	b.n	800243c <_printf_i+0xf4>
 80024e2:	4827      	ldr	r0, [pc, #156]	@ (8002580 <_printf_i+0x238>)
 80024e4:	e7e9      	b.n	80024ba <_printf_i+0x172>
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	f023 0320 	bic.w	r3, r3, #32
 80024ec:	6023      	str	r3, [r4, #0]
 80024ee:	e7f6      	b.n	80024de <_printf_i+0x196>
 80024f0:	4616      	mov	r6, r2
 80024f2:	e7bd      	b.n	8002470 <_printf_i+0x128>
 80024f4:	6833      	ldr	r3, [r6, #0]
 80024f6:	6825      	ldr	r5, [r4, #0]
 80024f8:	1d18      	adds	r0, r3, #4
 80024fa:	6961      	ldr	r1, [r4, #20]
 80024fc:	6030      	str	r0, [r6, #0]
 80024fe:	062e      	lsls	r6, r5, #24
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	d501      	bpl.n	8002508 <_printf_i+0x1c0>
 8002504:	6019      	str	r1, [r3, #0]
 8002506:	e002      	b.n	800250e <_printf_i+0x1c6>
 8002508:	0668      	lsls	r0, r5, #25
 800250a:	d5fb      	bpl.n	8002504 <_printf_i+0x1bc>
 800250c:	8019      	strh	r1, [r3, #0]
 800250e:	2300      	movs	r3, #0
 8002510:	4616      	mov	r6, r2
 8002512:	6123      	str	r3, [r4, #16]
 8002514:	e7bc      	b.n	8002490 <_printf_i+0x148>
 8002516:	6833      	ldr	r3, [r6, #0]
 8002518:	2100      	movs	r1, #0
 800251a:	1d1a      	adds	r2, r3, #4
 800251c:	6032      	str	r2, [r6, #0]
 800251e:	681e      	ldr	r6, [r3, #0]
 8002520:	6862      	ldr	r2, [r4, #4]
 8002522:	4630      	mov	r0, r6
 8002524:	f000 f85a 	bl	80025dc <memchr>
 8002528:	b108      	cbz	r0, 800252e <_printf_i+0x1e6>
 800252a:	1b80      	subs	r0, r0, r6
 800252c:	6060      	str	r0, [r4, #4]
 800252e:	6863      	ldr	r3, [r4, #4]
 8002530:	6123      	str	r3, [r4, #16]
 8002532:	2300      	movs	r3, #0
 8002534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002538:	e7aa      	b.n	8002490 <_printf_i+0x148>
 800253a:	6923      	ldr	r3, [r4, #16]
 800253c:	4632      	mov	r2, r6
 800253e:	4649      	mov	r1, r9
 8002540:	4640      	mov	r0, r8
 8002542:	47d0      	blx	sl
 8002544:	3001      	adds	r0, #1
 8002546:	d0ad      	beq.n	80024a4 <_printf_i+0x15c>
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	079b      	lsls	r3, r3, #30
 800254c:	d413      	bmi.n	8002576 <_printf_i+0x22e>
 800254e:	68e0      	ldr	r0, [r4, #12]
 8002550:	9b03      	ldr	r3, [sp, #12]
 8002552:	4298      	cmp	r0, r3
 8002554:	bfb8      	it	lt
 8002556:	4618      	movlt	r0, r3
 8002558:	e7a6      	b.n	80024a8 <_printf_i+0x160>
 800255a:	2301      	movs	r3, #1
 800255c:	4632      	mov	r2, r6
 800255e:	4649      	mov	r1, r9
 8002560:	4640      	mov	r0, r8
 8002562:	47d0      	blx	sl
 8002564:	3001      	adds	r0, #1
 8002566:	d09d      	beq.n	80024a4 <_printf_i+0x15c>
 8002568:	3501      	adds	r5, #1
 800256a:	68e3      	ldr	r3, [r4, #12]
 800256c:	9903      	ldr	r1, [sp, #12]
 800256e:	1a5b      	subs	r3, r3, r1
 8002570:	42ab      	cmp	r3, r5
 8002572:	dcf2      	bgt.n	800255a <_printf_i+0x212>
 8002574:	e7eb      	b.n	800254e <_printf_i+0x206>
 8002576:	2500      	movs	r5, #0
 8002578:	f104 0619 	add.w	r6, r4, #25
 800257c:	e7f5      	b.n	800256a <_printf_i+0x222>
 800257e:	bf00      	nop
 8002580:	080026d1 	.word	0x080026d1
 8002584:	080026e2 	.word	0x080026e2

08002588 <memmove>:
 8002588:	4288      	cmp	r0, r1
 800258a:	b510      	push	{r4, lr}
 800258c:	eb01 0402 	add.w	r4, r1, r2
 8002590:	d902      	bls.n	8002598 <memmove+0x10>
 8002592:	4284      	cmp	r4, r0
 8002594:	4623      	mov	r3, r4
 8002596:	d807      	bhi.n	80025a8 <memmove+0x20>
 8002598:	1e43      	subs	r3, r0, #1
 800259a:	42a1      	cmp	r1, r4
 800259c:	d008      	beq.n	80025b0 <memmove+0x28>
 800259e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80025a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80025a6:	e7f8      	b.n	800259a <memmove+0x12>
 80025a8:	4402      	add	r2, r0
 80025aa:	4601      	mov	r1, r0
 80025ac:	428a      	cmp	r2, r1
 80025ae:	d100      	bne.n	80025b2 <memmove+0x2a>
 80025b0:	bd10      	pop	{r4, pc}
 80025b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80025b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80025ba:	e7f7      	b.n	80025ac <memmove+0x24>

080025bc <_sbrk_r>:
 80025bc:	b538      	push	{r3, r4, r5, lr}
 80025be:	2300      	movs	r3, #0
 80025c0:	4d05      	ldr	r5, [pc, #20]	@ (80025d8 <_sbrk_r+0x1c>)
 80025c2:	4604      	mov	r4, r0
 80025c4:	4608      	mov	r0, r1
 80025c6:	602b      	str	r3, [r5, #0]
 80025c8:	f7fe f858 	bl	800067c <_sbrk>
 80025cc:	1c43      	adds	r3, r0, #1
 80025ce:	d102      	bne.n	80025d6 <_sbrk_r+0x1a>
 80025d0:	682b      	ldr	r3, [r5, #0]
 80025d2:	b103      	cbz	r3, 80025d6 <_sbrk_r+0x1a>
 80025d4:	6023      	str	r3, [r4, #0]
 80025d6:	bd38      	pop	{r3, r4, r5, pc}
 80025d8:	200001e8 	.word	0x200001e8

080025dc <memchr>:
 80025dc:	b2c9      	uxtb	r1, r1
 80025de:	4603      	mov	r3, r0
 80025e0:	4402      	add	r2, r0
 80025e2:	b510      	push	{r4, lr}
 80025e4:	4293      	cmp	r3, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	d101      	bne.n	80025ee <memchr+0x12>
 80025ea:	2000      	movs	r0, #0
 80025ec:	e003      	b.n	80025f6 <memchr+0x1a>
 80025ee:	7804      	ldrb	r4, [r0, #0]
 80025f0:	3301      	adds	r3, #1
 80025f2:	428c      	cmp	r4, r1
 80025f4:	d1f6      	bne.n	80025e4 <memchr+0x8>
 80025f6:	bd10      	pop	{r4, pc}

080025f8 <memcpy>:
 80025f8:	440a      	add	r2, r1
 80025fa:	1e43      	subs	r3, r0, #1
 80025fc:	4291      	cmp	r1, r2
 80025fe:	d100      	bne.n	8002602 <memcpy+0xa>
 8002600:	4770      	bx	lr
 8002602:	b510      	push	{r4, lr}
 8002604:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002608:	4291      	cmp	r1, r2
 800260a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800260e:	d1f9      	bne.n	8002604 <memcpy+0xc>
 8002610:	bd10      	pop	{r4, pc}

08002612 <_realloc_r>:
 8002612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002616:	4680      	mov	r8, r0
 8002618:	4615      	mov	r5, r2
 800261a:	460c      	mov	r4, r1
 800261c:	b921      	cbnz	r1, 8002628 <_realloc_r+0x16>
 800261e:	4611      	mov	r1, r2
 8002620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002624:	f7ff bc3a 	b.w	8001e9c <_malloc_r>
 8002628:	b92a      	cbnz	r2, 8002636 <_realloc_r+0x24>
 800262a:	f7ff fbcb 	bl	8001dc4 <_free_r>
 800262e:	2400      	movs	r4, #0
 8002630:	4620      	mov	r0, r4
 8002632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002636:	f000 f81a 	bl	800266e <_malloc_usable_size_r>
 800263a:	4285      	cmp	r5, r0
 800263c:	4606      	mov	r6, r0
 800263e:	d802      	bhi.n	8002646 <_realloc_r+0x34>
 8002640:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002644:	d8f4      	bhi.n	8002630 <_realloc_r+0x1e>
 8002646:	4629      	mov	r1, r5
 8002648:	4640      	mov	r0, r8
 800264a:	f7ff fc27 	bl	8001e9c <_malloc_r>
 800264e:	4607      	mov	r7, r0
 8002650:	2800      	cmp	r0, #0
 8002652:	d0ec      	beq.n	800262e <_realloc_r+0x1c>
 8002654:	42b5      	cmp	r5, r6
 8002656:	462a      	mov	r2, r5
 8002658:	4621      	mov	r1, r4
 800265a:	bf28      	it	cs
 800265c:	4632      	movcs	r2, r6
 800265e:	f7ff ffcb 	bl	80025f8 <memcpy>
 8002662:	4621      	mov	r1, r4
 8002664:	4640      	mov	r0, r8
 8002666:	463c      	mov	r4, r7
 8002668:	f7ff fbac 	bl	8001dc4 <_free_r>
 800266c:	e7e0      	b.n	8002630 <_realloc_r+0x1e>

0800266e <_malloc_usable_size_r>:
 800266e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002672:	1f18      	subs	r0, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	bfbc      	itt	lt
 8002678:	580b      	ldrlt	r3, [r1, r0]
 800267a:	18c0      	addlt	r0, r0, r3
 800267c:	4770      	bx	lr
	...

08002680 <_init>:
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	bf00      	nop
 8002684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002686:	bc08      	pop	{r3}
 8002688:	469e      	mov	lr, r3
 800268a:	4770      	bx	lr

0800268c <_fini>:
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268e:	bf00      	nop
 8002690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002692:	bc08      	pop	{r3}
 8002694:	469e      	mov	lr, r3
 8002696:	4770      	bx	lr
