
dht111.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000015c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eec  08000160  08000160  00001160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08006050  08006050  00007050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006400  08006400  00008204  2**0
                  CONTENTS
  4 .ARM          00000008  08006400  08006400  00007400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006408  08006408  00008204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006408  08006408  00007408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800640c  0800640c  0000740c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  08006410  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000204  08006614  00008204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  08006614  00008470  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ef4  00000000  00000000  0000823a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b4  00000000  00000000  0001b12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  0001d6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d20  00000000  00000000  0001e7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ed3  00000000  00000000  0001f4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001437f  00000000  00000000  000423c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc759  00000000  00000000  00056742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132e9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058d8  00000000  00000000  00132ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001387b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000160 <__do_global_dtors_aux>:
 8000160:	b510      	push	{r4, lr}
 8000162:	4c05      	ldr	r4, [pc, #20]	@ (8000178 <__do_global_dtors_aux+0x18>)
 8000164:	7823      	ldrb	r3, [r4, #0]
 8000166:	b933      	cbnz	r3, 8000176 <__do_global_dtors_aux+0x16>
 8000168:	4b04      	ldr	r3, [pc, #16]	@ (800017c <__do_global_dtors_aux+0x1c>)
 800016a:	b113      	cbz	r3, 8000172 <__do_global_dtors_aux+0x12>
 800016c:	4804      	ldr	r0, [pc, #16]	@ (8000180 <__do_global_dtors_aux+0x20>)
 800016e:	f3af 8000 	nop.w
 8000172:	2301      	movs	r3, #1
 8000174:	7023      	strb	r3, [r4, #0]
 8000176:	bd10      	pop	{r4, pc}
 8000178:	20000204 	.word	0x20000204
 800017c:	00000000 	.word	0x00000000
 8000180:	08006034 	.word	0x08006034

08000184 <frame_dummy>:
 8000184:	b508      	push	{r3, lr}
 8000186:	4b03      	ldr	r3, [pc, #12]	@ (8000194 <frame_dummy+0x10>)
 8000188:	b11b      	cbz	r3, 8000192 <frame_dummy+0xe>
 800018a:	4903      	ldr	r1, [pc, #12]	@ (8000198 <frame_dummy+0x14>)
 800018c:	4803      	ldr	r0, [pc, #12]	@ (800019c <frame_dummy+0x18>)
 800018e:	f3af 8000 	nop.w
 8000192:	bd08      	pop	{r3, pc}
 8000194:	00000000 	.word	0x00000000
 8000198:	20000208 	.word	0x20000208
 800019c:	08006034 	.word	0x08006034

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <__aeabi_drsub>:
 80001b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001b4:	e002      	b.n	80001bc <__adddf3>
 80001b6:	bf00      	nop

080001b8 <__aeabi_dsub>:
 80001b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001bc <__adddf3>:
 80001bc:	b530      	push	{r4, r5, lr}
 80001be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001c6:	ea94 0f05 	teq	r4, r5
 80001ca:	bf08      	it	eq
 80001cc:	ea90 0f02 	teqeq	r0, r2
 80001d0:	bf1f      	itttt	ne
 80001d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001e2:	f000 80e2 	beq.w	80003aa <__adddf3+0x1ee>
 80001e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ee:	bfb8      	it	lt
 80001f0:	426d      	neglt	r5, r5
 80001f2:	dd0c      	ble.n	800020e <__adddf3+0x52>
 80001f4:	442c      	add	r4, r5
 80001f6:	ea80 0202 	eor.w	r2, r0, r2
 80001fa:	ea81 0303 	eor.w	r3, r1, r3
 80001fe:	ea82 0000 	eor.w	r0, r2, r0
 8000202:	ea83 0101 	eor.w	r1, r3, r1
 8000206:	ea80 0202 	eor.w	r2, r0, r2
 800020a:	ea81 0303 	eor.w	r3, r1, r3
 800020e:	2d36      	cmp	r5, #54	@ 0x36
 8000210:	bf88      	it	hi
 8000212:	bd30      	pophi	{r4, r5, pc}
 8000214:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000218:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800021c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000220:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000224:	d002      	beq.n	800022c <__adddf3+0x70>
 8000226:	4240      	negs	r0, r0
 8000228:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800022c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000230:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000234:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000238:	d002      	beq.n	8000240 <__adddf3+0x84>
 800023a:	4252      	negs	r2, r2
 800023c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000240:	ea94 0f05 	teq	r4, r5
 8000244:	f000 80a7 	beq.w	8000396 <__adddf3+0x1da>
 8000248:	f1a4 0401 	sub.w	r4, r4, #1
 800024c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000250:	db0d      	blt.n	800026e <__adddf3+0xb2>
 8000252:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000256:	fa22 f205 	lsr.w	r2, r2, r5
 800025a:	1880      	adds	r0, r0, r2
 800025c:	f141 0100 	adc.w	r1, r1, #0
 8000260:	fa03 f20e 	lsl.w	r2, r3, lr
 8000264:	1880      	adds	r0, r0, r2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	4159      	adcs	r1, r3
 800026c:	e00e      	b.n	800028c <__adddf3+0xd0>
 800026e:	f1a5 0520 	sub.w	r5, r5, #32
 8000272:	f10e 0e20 	add.w	lr, lr, #32
 8000276:	2a01      	cmp	r2, #1
 8000278:	fa03 fc0e 	lsl.w	ip, r3, lr
 800027c:	bf28      	it	cs
 800027e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	18c0      	adds	r0, r0, r3
 8000288:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800028c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000290:	d507      	bpl.n	80002a2 <__adddf3+0xe6>
 8000292:	f04f 0e00 	mov.w	lr, #0
 8000296:	f1dc 0c00 	rsbs	ip, ip, #0
 800029a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800029e:	eb6e 0101 	sbc.w	r1, lr, r1
 80002a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002a6:	d31b      	bcc.n	80002e0 <__adddf3+0x124>
 80002a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ac:	d30c      	bcc.n	80002c8 <__adddf3+0x10c>
 80002ae:	0849      	lsrs	r1, r1, #1
 80002b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002b8:	f104 0401 	add.w	r4, r4, #1
 80002bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002c4:	f080 809a 	bcs.w	80003fc <__adddf3+0x240>
 80002c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	ea41 0105 	orr.w	r1, r1, r5
 80002de:	bd30      	pop	{r4, r5, pc}
 80002e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002e4:	4140      	adcs	r0, r0
 80002e6:	eb41 0101 	adc.w	r1, r1, r1
 80002ea:	3c01      	subs	r4, #1
 80002ec:	bf28      	it	cs
 80002ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002f2:	d2e9      	bcs.n	80002c8 <__adddf3+0x10c>
 80002f4:	f091 0f00 	teq	r1, #0
 80002f8:	bf04      	itt	eq
 80002fa:	4601      	moveq	r1, r0
 80002fc:	2000      	moveq	r0, #0
 80002fe:	fab1 f381 	clz	r3, r1
 8000302:	bf08      	it	eq
 8000304:	3320      	addeq	r3, #32
 8000306:	f1a3 030b 	sub.w	r3, r3, #11
 800030a:	f1b3 0220 	subs.w	r2, r3, #32
 800030e:	da0c      	bge.n	800032a <__adddf3+0x16e>
 8000310:	320c      	adds	r2, #12
 8000312:	dd08      	ble.n	8000326 <__adddf3+0x16a>
 8000314:	f102 0c14 	add.w	ip, r2, #20
 8000318:	f1c2 020c 	rsb	r2, r2, #12
 800031c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000320:	fa21 f102 	lsr.w	r1, r1, r2
 8000324:	e00c      	b.n	8000340 <__adddf3+0x184>
 8000326:	f102 0214 	add.w	r2, r2, #20
 800032a:	bfd8      	it	le
 800032c:	f1c2 0c20 	rsble	ip, r2, #32
 8000330:	fa01 f102 	lsl.w	r1, r1, r2
 8000334:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000338:	bfdc      	itt	le
 800033a:	ea41 010c 	orrle.w	r1, r1, ip
 800033e:	4090      	lslle	r0, r2
 8000340:	1ae4      	subs	r4, r4, r3
 8000342:	bfa2      	ittt	ge
 8000344:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000348:	4329      	orrge	r1, r5
 800034a:	bd30      	popge	{r4, r5, pc}
 800034c:	ea6f 0404 	mvn.w	r4, r4
 8000350:	3c1f      	subs	r4, #31
 8000352:	da1c      	bge.n	800038e <__adddf3+0x1d2>
 8000354:	340c      	adds	r4, #12
 8000356:	dc0e      	bgt.n	8000376 <__adddf3+0x1ba>
 8000358:	f104 0414 	add.w	r4, r4, #20
 800035c:	f1c4 0220 	rsb	r2, r4, #32
 8000360:	fa20 f004 	lsr.w	r0, r0, r4
 8000364:	fa01 f302 	lsl.w	r3, r1, r2
 8000368:	ea40 0003 	orr.w	r0, r0, r3
 800036c:	fa21 f304 	lsr.w	r3, r1, r4
 8000370:	ea45 0103 	orr.w	r1, r5, r3
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f1c4 040c 	rsb	r4, r4, #12
 800037a:	f1c4 0220 	rsb	r2, r4, #32
 800037e:	fa20 f002 	lsr.w	r0, r0, r2
 8000382:	fa01 f304 	lsl.w	r3, r1, r4
 8000386:	ea40 0003 	orr.w	r0, r0, r3
 800038a:	4629      	mov	r1, r5
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	fa21 f004 	lsr.w	r0, r1, r4
 8000392:	4629      	mov	r1, r5
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f094 0f00 	teq	r4, #0
 800039a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800039e:	bf06      	itte	eq
 80003a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003a4:	3401      	addeq	r4, #1
 80003a6:	3d01      	subne	r5, #1
 80003a8:	e74e      	b.n	8000248 <__adddf3+0x8c>
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf18      	it	ne
 80003b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b4:	d029      	beq.n	800040a <__adddf3+0x24e>
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	d005      	beq.n	80003ce <__adddf3+0x212>
 80003c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003c6:	bf04      	itt	eq
 80003c8:	4619      	moveq	r1, r3
 80003ca:	4610      	moveq	r0, r2
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea91 0f03 	teq	r1, r3
 80003d2:	bf1e      	ittt	ne
 80003d4:	2100      	movne	r1, #0
 80003d6:	2000      	movne	r0, #0
 80003d8:	bd30      	popne	{r4, r5, pc}
 80003da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003de:	d105      	bne.n	80003ec <__adddf3+0x230>
 80003e0:	0040      	lsls	r0, r0, #1
 80003e2:	4149      	adcs	r1, r1
 80003e4:	bf28      	it	cs
 80003e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ea:	bd30      	pop	{r4, r5, pc}
 80003ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003f0:	bf3c      	itt	cc
 80003f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003f6:	bd30      	popcc	{r4, r5, pc}
 80003f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000400:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000404:	f04f 0000 	mov.w	r0, #0
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf1a      	itte	ne
 8000410:	4619      	movne	r1, r3
 8000412:	4610      	movne	r0, r2
 8000414:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000418:	bf1c      	itt	ne
 800041a:	460b      	movne	r3, r1
 800041c:	4602      	movne	r2, r0
 800041e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000422:	bf06      	itte	eq
 8000424:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000428:	ea91 0f03 	teqeq	r1, r3
 800042c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	bf00      	nop

08000434 <__aeabi_ui2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f04f 0500 	mov.w	r5, #0
 800044c:	f04f 0100 	mov.w	r1, #0
 8000450:	e750      	b.n	80002f4 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_i2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800046c:	bf48      	it	mi
 800046e:	4240      	negmi	r0, r0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e73e      	b.n	80002f4 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_f2d>:
 8000478:	0042      	lsls	r2, r0, #1
 800047a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800047e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000482:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000486:	bf1f      	itttt	ne
 8000488:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800048c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000490:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000494:	4770      	bxne	lr
 8000496:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800049a:	bf08      	it	eq
 800049c:	4770      	bxeq	lr
 800049e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004a2:	bf04      	itt	eq
 80004a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004b8:	e71c      	b.n	80002f4 <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_ul2d>:
 80004bc:	ea50 0201 	orrs.w	r2, r0, r1
 80004c0:	bf08      	it	eq
 80004c2:	4770      	bxeq	lr
 80004c4:	b530      	push	{r4, r5, lr}
 80004c6:	f04f 0500 	mov.w	r5, #0
 80004ca:	e00a      	b.n	80004e2 <__aeabi_l2d+0x16>

080004cc <__aeabi_l2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004da:	d502      	bpl.n	80004e2 <__aeabi_l2d+0x16>
 80004dc:	4240      	negs	r0, r0
 80004de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ee:	f43f aed8 	beq.w	80002a2 <__adddf3+0xe6>
 80004f2:	f04f 0203 	mov.w	r2, #3
 80004f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004fa:	bf18      	it	ne
 80004fc:	3203      	addne	r2, #3
 80004fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000502:	bf18      	it	ne
 8000504:	3203      	addne	r2, #3
 8000506:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000512:	fa20 f002 	lsr.w	r0, r0, r2
 8000516:	fa01 fe03 	lsl.w	lr, r1, r3
 800051a:	ea40 000e 	orr.w	r0, r0, lr
 800051e:	fa21 f102 	lsr.w	r1, r1, r2
 8000522:	4414      	add	r4, r2
 8000524:	e6bd      	b.n	80002a2 <__adddf3+0xe6>
 8000526:	bf00      	nop

08000528 <__aeabi_dmul>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800052e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000532:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000536:	bf1d      	ittte	ne
 8000538:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800053c:	ea94 0f0c 	teqne	r4, ip
 8000540:	ea95 0f0c 	teqne	r5, ip
 8000544:	f000 f8de 	bleq	8000704 <__aeabi_dmul+0x1dc>
 8000548:	442c      	add	r4, r5
 800054a:	ea81 0603 	eor.w	r6, r1, r3
 800054e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000552:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000556:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800055a:	bf18      	it	ne
 800055c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000560:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000564:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000568:	d038      	beq.n	80005dc <__aeabi_dmul+0xb4>
 800056a:	fba0 ce02 	umull	ip, lr, r0, r2
 800056e:	f04f 0500 	mov.w	r5, #0
 8000572:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000576:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800057a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800057e:	f04f 0600 	mov.w	r6, #0
 8000582:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000586:	f09c 0f00 	teq	ip, #0
 800058a:	bf18      	it	ne
 800058c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000590:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000594:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000598:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800059c:	d204      	bcs.n	80005a8 <__aeabi_dmul+0x80>
 800059e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005a2:	416d      	adcs	r5, r5
 80005a4:	eb46 0606 	adc.w	r6, r6, r6
 80005a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005c0:	bf88      	it	hi
 80005c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005c6:	d81e      	bhi.n	8000606 <__aeabi_dmul+0xde>
 80005c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005cc:	bf08      	it	eq
 80005ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005d2:	f150 0000 	adcs.w	r0, r0, #0
 80005d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005e0:	ea46 0101 	orr.w	r1, r6, r1
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	ea81 0103 	eor.w	r1, r1, r3
 80005ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005f0:	bfc2      	ittt	gt
 80005f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	popgt	{r4, r5, r6, pc}
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000600:	f04f 0e00 	mov.w	lr, #0
 8000604:	3c01      	subs	r4, #1
 8000606:	f300 80ab 	bgt.w	8000760 <__aeabi_dmul+0x238>
 800060a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800060e:	bfde      	ittt	le
 8000610:	2000      	movle	r0, #0
 8000612:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000616:	bd70      	pople	{r4, r5, r6, pc}
 8000618:	f1c4 0400 	rsb	r4, r4, #0
 800061c:	3c20      	subs	r4, #32
 800061e:	da35      	bge.n	800068c <__aeabi_dmul+0x164>
 8000620:	340c      	adds	r4, #12
 8000622:	dc1b      	bgt.n	800065c <__aeabi_dmul+0x134>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f305 	lsl.w	r3, r0, r5
 8000630:	fa20 f004 	lsr.w	r0, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000640:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000644:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000648:	fa21 f604 	lsr.w	r6, r1, r4
 800064c:	eb42 0106 	adc.w	r1, r2, r6
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 040c 	rsb	r4, r4, #12
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f304 	lsl.w	r3, r0, r4
 8000668:	fa20 f005 	lsr.w	r0, r0, r5
 800066c:	fa01 f204 	lsl.w	r2, r1, r4
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	f141 0100 	adc.w	r1, r1, #0
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f205 	lsl.w	r2, r0, r5
 8000694:	ea4e 0e02 	orr.w	lr, lr, r2
 8000698:	fa20 f304 	lsr.w	r3, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea43 0302 	orr.w	r3, r3, r2
 80006a4:	fa21 f004 	lsr.w	r0, r1, r4
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	fa21 f204 	lsr.w	r2, r1, r4
 80006b0:	ea20 0002 	bic.w	r0, r0, r2
 80006b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f094 0f00 	teq	r4, #0
 80006c8:	d10f      	bne.n	80006ea <__aeabi_dmul+0x1c2>
 80006ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ce:	0040      	lsls	r0, r0, #1
 80006d0:	eb41 0101 	adc.w	r1, r1, r1
 80006d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3c01      	subeq	r4, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1a6>
 80006de:	ea41 0106 	orr.w	r1, r1, r6
 80006e2:	f095 0f00 	teq	r5, #0
 80006e6:	bf18      	it	ne
 80006e8:	4770      	bxne	lr
 80006ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ee:	0052      	lsls	r2, r2, #1
 80006f0:	eb43 0303 	adc.w	r3, r3, r3
 80006f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3d01      	subeq	r5, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1c6>
 80006fe:	ea43 0306 	orr.w	r3, r3, r6
 8000702:	4770      	bx	lr
 8000704:	ea94 0f0c 	teq	r4, ip
 8000708:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800070c:	bf18      	it	ne
 800070e:	ea95 0f0c 	teqne	r5, ip
 8000712:	d00c      	beq.n	800072e <__aeabi_dmul+0x206>
 8000714:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000718:	bf18      	it	ne
 800071a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071e:	d1d1      	bne.n	80006c4 <__aeabi_dmul+0x19c>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd70      	pop	{r4, r5, r6, pc}
 800072e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000732:	bf06      	itte	eq
 8000734:	4610      	moveq	r0, r2
 8000736:	4619      	moveq	r1, r3
 8000738:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073c:	d019      	beq.n	8000772 <__aeabi_dmul+0x24a>
 800073e:	ea94 0f0c 	teq	r4, ip
 8000742:	d102      	bne.n	800074a <__aeabi_dmul+0x222>
 8000744:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000748:	d113      	bne.n	8000772 <__aeabi_dmul+0x24a>
 800074a:	ea95 0f0c 	teq	r5, ip
 800074e:	d105      	bne.n	800075c <__aeabi_dmul+0x234>
 8000750:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000754:	bf1c      	itt	ne
 8000756:	4610      	movne	r0, r2
 8000758:	4619      	movne	r1, r3
 800075a:	d10a      	bne.n	8000772 <__aeabi_dmul+0x24a>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000768:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800076c:	f04f 0000 	mov.w	r0, #0
 8000770:	bd70      	pop	{r4, r5, r6, pc}
 8000772:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000776:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800077a:	bd70      	pop	{r4, r5, r6, pc}

0800077c <__aeabi_ddiv>:
 800077c:	b570      	push	{r4, r5, r6, lr}
 800077e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000782:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000786:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800078a:	bf1d      	ittte	ne
 800078c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000790:	ea94 0f0c 	teqne	r4, ip
 8000794:	ea95 0f0c 	teqne	r5, ip
 8000798:	f000 f8a7 	bleq	80008ea <__aeabi_ddiv+0x16e>
 800079c:	eba4 0405 	sub.w	r4, r4, r5
 80007a0:	ea81 0e03 	eor.w	lr, r1, r3
 80007a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ac:	f000 8088 	beq.w	80008c0 <__aeabi_ddiv+0x144>
 80007b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007d4:	429d      	cmp	r5, r3
 80007d6:	bf08      	it	eq
 80007d8:	4296      	cmpeq	r6, r2
 80007da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007e2:	d202      	bcs.n	80007ea <__aeabi_ddiv+0x6e>
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	1ab6      	subs	r6, r6, r2
 80007ec:	eb65 0503 	sbc.w	r5, r5, r3
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000858:	ea55 0e06 	orrs.w	lr, r5, r6
 800085c:	d018      	beq.n	8000890 <__aeabi_ddiv+0x114>
 800085e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000862:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000866:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800086a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800086e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000872:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000876:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800087a:	d1c0      	bne.n	80007fe <__aeabi_ddiv+0x82>
 800087c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000880:	d10b      	bne.n	800089a <__aeabi_ddiv+0x11e>
 8000882:	ea41 0100 	orr.w	r1, r1, r0
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800088e:	e7b6      	b.n	80007fe <__aeabi_ddiv+0x82>
 8000890:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000894:	bf04      	itt	eq
 8000896:	4301      	orreq	r1, r0
 8000898:	2000      	moveq	r0, #0
 800089a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800089e:	bf88      	it	hi
 80008a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008a4:	f63f aeaf 	bhi.w	8000606 <__aeabi_dmul+0xde>
 80008a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ac:	bf04      	itt	eq
 80008ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008b6:	f150 0000 	adcs.w	r0, r0, #0
 80008ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008be:	bd70      	pop	{r4, r5, r6, pc}
 80008c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008cc:	bfc2      	ittt	gt
 80008ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	popgt	{r4, r5, r6, pc}
 80008d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008dc:	f04f 0e00 	mov.w	lr, #0
 80008e0:	3c01      	subs	r4, #1
 80008e2:	e690      	b.n	8000606 <__aeabi_dmul+0xde>
 80008e4:	ea45 0e06 	orr.w	lr, r5, r6
 80008e8:	e68d      	b.n	8000606 <__aeabi_dmul+0xde>
 80008ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ee:	ea94 0f0c 	teq	r4, ip
 80008f2:	bf08      	it	eq
 80008f4:	ea95 0f0c 	teqeq	r5, ip
 80008f8:	f43f af3b 	beq.w	8000772 <__aeabi_dmul+0x24a>
 80008fc:	ea94 0f0c 	teq	r4, ip
 8000900:	d10a      	bne.n	8000918 <__aeabi_ddiv+0x19c>
 8000902:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000906:	f47f af34 	bne.w	8000772 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	f47f af25 	bne.w	800075c <__aeabi_dmul+0x234>
 8000912:	4610      	mov	r0, r2
 8000914:	4619      	mov	r1, r3
 8000916:	e72c      	b.n	8000772 <__aeabi_dmul+0x24a>
 8000918:	ea95 0f0c 	teq	r5, ip
 800091c:	d106      	bne.n	800092c <__aeabi_ddiv+0x1b0>
 800091e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000922:	f43f aefd 	beq.w	8000720 <__aeabi_dmul+0x1f8>
 8000926:	4610      	mov	r0, r2
 8000928:	4619      	mov	r1, r3
 800092a:	e722      	b.n	8000772 <__aeabi_dmul+0x24a>
 800092c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000936:	f47f aec5 	bne.w	80006c4 <__aeabi_dmul+0x19c>
 800093a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800093e:	f47f af0d 	bne.w	800075c <__aeabi_dmul+0x234>
 8000942:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000946:	f47f aeeb 	bne.w	8000720 <__aeabi_dmul+0x1f8>
 800094a:	e712      	b.n	8000772 <__aeabi_dmul+0x24a>

0800094c <__gedf2>:
 800094c:	f04f 3cff 	mov.w	ip, #4294967295
 8000950:	e006      	b.n	8000960 <__cmpdf2+0x4>
 8000952:	bf00      	nop

08000954 <__ledf2>:
 8000954:	f04f 0c01 	mov.w	ip, #1
 8000958:	e002      	b.n	8000960 <__cmpdf2+0x4>
 800095a:	bf00      	nop

0800095c <__cmpdf2>:
 800095c:	f04f 0c01 	mov.w	ip, #1
 8000960:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000964:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800096c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000976:	d01b      	beq.n	80009b0 <__cmpdf2+0x54>
 8000978:	b001      	add	sp, #4
 800097a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800097e:	bf0c      	ite	eq
 8000980:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000984:	ea91 0f03 	teqne	r1, r3
 8000988:	bf02      	ittt	eq
 800098a:	ea90 0f02 	teqeq	r0, r2
 800098e:	2000      	moveq	r0, #0
 8000990:	4770      	bxeq	lr
 8000992:	f110 0f00 	cmn.w	r0, #0
 8000996:	ea91 0f03 	teq	r1, r3
 800099a:	bf58      	it	pl
 800099c:	4299      	cmppl	r1, r3
 800099e:	bf08      	it	eq
 80009a0:	4290      	cmpeq	r0, r2
 80009a2:	bf2c      	ite	cs
 80009a4:	17d8      	asrcs	r0, r3, #31
 80009a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009aa:	f040 0001 	orr.w	r0, r0, #1
 80009ae:	4770      	bx	lr
 80009b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b8:	d102      	bne.n	80009c0 <__cmpdf2+0x64>
 80009ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009be:	d107      	bne.n	80009d0 <__cmpdf2+0x74>
 80009c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d1d6      	bne.n	8000978 <__cmpdf2+0x1c>
 80009ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ce:	d0d3      	beq.n	8000978 <__cmpdf2+0x1c>
 80009d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <__aeabi_cdrcmple>:
 80009d8:	4684      	mov	ip, r0
 80009da:	4610      	mov	r0, r2
 80009dc:	4662      	mov	r2, ip
 80009de:	468c      	mov	ip, r1
 80009e0:	4619      	mov	r1, r3
 80009e2:	4663      	mov	r3, ip
 80009e4:	e000      	b.n	80009e8 <__aeabi_cdcmpeq>
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdcmpeq>:
 80009e8:	b501      	push	{r0, lr}
 80009ea:	f7ff ffb7 	bl	800095c <__cmpdf2>
 80009ee:	2800      	cmp	r0, #0
 80009f0:	bf48      	it	mi
 80009f2:	f110 0f00 	cmnmi.w	r0, #0
 80009f6:	bd01      	pop	{r0, pc}

080009f8 <__aeabi_dcmpeq>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff fff4 	bl	80009e8 <__aeabi_cdcmpeq>
 8000a00:	bf0c      	ite	eq
 8000a02:	2001      	moveq	r0, #1
 8000a04:	2000      	movne	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmplt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffea 	bl	80009e8 <__aeabi_cdcmpeq>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmple>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffe0 	bl	80009e8 <__aeabi_cdcmpeq>
 8000a28:	bf94      	ite	ls
 8000a2a:	2001      	movls	r0, #1
 8000a2c:	2000      	movhi	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmpge>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffce 	bl	80009d8 <__aeabi_cdrcmple>
 8000a3c:	bf94      	ite	ls
 8000a3e:	2001      	movls	r0, #1
 8000a40:	2000      	movhi	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmpgt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffc4 	bl	80009d8 <__aeabi_cdrcmple>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpun>:
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d102      	bne.n	8000a6c <__aeabi_dcmpun+0x10>
 8000a66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a6a:	d10a      	bne.n	8000a82 <__aeabi_dcmpun+0x26>
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x20>
 8000a76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a7a:	d102      	bne.n	8000a82 <__aeabi_dcmpun+0x26>
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	f04f 0001 	mov.w	r0, #1
 8000a86:	4770      	bx	lr

08000a88 <__aeabi_d2iz>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d215      	bcs.n	8000abe <__aeabi_d2iz+0x36>
 8000a92:	d511      	bpl.n	8000ab8 <__aeabi_d2iz+0x30>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d912      	bls.n	8000ac4 <__aeabi_d2iz+0x3c>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	bf18      	it	ne
 8000ab4:	4240      	negne	r0, r0
 8000ab6:	4770      	bx	lr
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac2:	d105      	bne.n	8000ad0 <__aeabi_d2iz+0x48>
 8000ac4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	bf08      	it	eq
 8000aca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <LCD_cmd>:
uint16_t data_pins[8] = {GPIO_PIN_14, GPIO_PIN_0, GPIO_PIN_9, GPIO_PIN_15, GPIO_PIN_9, GPIO_PIN_12, GPIO_PIN_15, GPIO_PIN_3};

// Function to wait until the LCD is not busy

// Function to send a command to the LCD
void LCD_cmd(unsigned char cmd) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]


	// Send the command to the data pins
    for (int i = 0; i < 8; i++) {
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	e017      	b.n	8000b18 <LCD_cmd+0x40>
        HAL_GPIO_WritePin(data_ports[i], data_pins[i], (cmd & (1 << i)));
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b58 <LCD_cmd+0x80>)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000af0:	4a1a      	ldr	r2, [pc, #104]	@ (8000b5c <LCD_cmd+0x84>)
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000af8:	2201      	movs	r2, #1
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	b25a      	sxtb	r2, r3
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	4013      	ands	r3, r2
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	f001 f967 	bl	8001de0 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++) {
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	3301      	adds	r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2b07      	cmp	r3, #7
 8000b1c:	dde4      	ble.n	8000ae8 <LCD_cmd+0x10>
    }

    HAL_GPIO_WritePin(GPIOB, RS_Pin, GPIO_PIN_RESET); // Command mode
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2180      	movs	r1, #128	@ 0x80
 8000b22:	480f      	ldr	r0, [pc, #60]	@ (8000b60 <LCD_cmd+0x88>)
 8000b24:	f001 f95c 	bl	8001de0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, RW_Pin, GPIO_PIN_RESET); // Write mode
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2140      	movs	r1, #64	@ 0x40
 8000b2c:	480c      	ldr	r0, [pc, #48]	@ (8000b60 <LCD_cmd+0x88>)
 8000b2e:	f001 f957 	bl	8001de0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, EN_Pin, GPIO_PIN_SET);   // Enable
 8000b32:	2201      	movs	r2, #1
 8000b34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b38:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <LCD_cmd+0x88>)
 8000b3a:	f001 f951 	bl	8001de0 <HAL_GPIO_WritePin>
    HAL_Delay(1);                                     // Short delay
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f000 fe94 	bl	800186c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, EN_Pin, GPIO_PIN_RESET); // Disable
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b4a:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <LCD_cmd+0x88>)
 8000b4c:	f001 f948 	bl	8001de0 <HAL_GPIO_WritePin>
}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	20000020 	.word	0x20000020
 8000b60:	42020400 	.word	0x42020400

08000b64 <LCD_data>:

// Function to send data to the LCD
void LCD_data(unsigned char data) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]

    // Send the data to the data pins
    for (int i = 0; i < 8; i++) {
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	e017      	b.n	8000ba4 <LCD_data+0x40>
        HAL_GPIO_WritePin(data_ports[i], data_pins[i], (data & (1 << i)));
 8000b74:	4a1b      	ldr	r2, [pc, #108]	@ (8000be4 <LCD_data+0x80>)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8000be8 <LCD_data+0x84>)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000b84:	2201      	movs	r2, #1
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	b25a      	sxtb	r2, r3
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	4013      	ands	r3, r2
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	461a      	mov	r2, r3
 8000b9a:	f001 f921 	bl	8001de0 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++) {
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b07      	cmp	r3, #7
 8000ba8:	dde4      	ble.n	8000b74 <LCD_data+0x10>
    }

    HAL_GPIO_WritePin(GPIOB, RS_Pin, GPIO_PIN_SET);   // Data mode
 8000baa:	2201      	movs	r2, #1
 8000bac:	2180      	movs	r1, #128	@ 0x80
 8000bae:	480f      	ldr	r0, [pc, #60]	@ (8000bec <LCD_data+0x88>)
 8000bb0:	f001 f916 	bl	8001de0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, RW_Pin, GPIO_PIN_RESET); // Write mode
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2140      	movs	r1, #64	@ 0x40
 8000bb8:	480c      	ldr	r0, [pc, #48]	@ (8000bec <LCD_data+0x88>)
 8000bba:	f001 f911 	bl	8001de0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, EN_Pin, GPIO_PIN_SET);   // Enable
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bc4:	4809      	ldr	r0, [pc, #36]	@ (8000bec <LCD_data+0x88>)
 8000bc6:	f001 f90b 	bl	8001de0 <HAL_GPIO_WritePin>
    HAL_Delay(1);                                     // Short delay
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f000 fe4e 	bl	800186c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, EN_Pin, GPIO_PIN_RESET); // Disable
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bd6:	4805      	ldr	r0, [pc, #20]	@ (8000bec <LCD_data+0x88>)
 8000bd8:	f001 f902 	bl	8001de0 <HAL_GPIO_WritePin>
}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000020 	.word	0x20000020
 8000bec:	42020400 	.word	0x42020400

08000bf0 <LCD_init>:

// Function to initialize the LCD
void LCD_init() {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
    unsigned char init_cmds[5] = {0x01, 0x0C, 0x06, 0x38, 0x80}; // Clear, Display ON, Entry mode, Function set, Set cursor
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c34 <LCD_init+0x44>)
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bfe:	6018      	str	r0, [r3, #0]
 8000c00:	3304      	adds	r3, #4
 8000c02:	7019      	strb	r1, [r3, #0]

    // Initialize the LCD with commands
    for (int i = 0; i < 5; i++) {
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	e00c      	b.n	8000c24 <LCD_init+0x34>
        LCD_cmd(init_cmds[i]);
 8000c0a:	1d3a      	adds	r2, r7, #4
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff60 	bl	8000ad8 <LCD_cmd>
        HAL_Delay(10); // Wait for initialization commands to complete
 8000c18:	200a      	movs	r0, #10
 8000c1a:	f000 fe27 	bl	800186c <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3301      	adds	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	ddef      	ble.n	8000c0a <LCD_init+0x1a>
    }
}
 8000c2a:	bf00      	nop
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	08006050 	.word	0x08006050

08000c38 <LCD_Print>:

// Function to print a string to the LCD
void LCD_Print(const char *str) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000c40:	e006      	b.n	8000c50 <LCD_Print+0x18>
        LCD_data(*str++);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	1c5a      	adds	r2, r3, #1
 8000c46:	607a      	str	r2, [r7, #4]
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff8a 	bl	8000b64 <LCD_data>
    while (*str) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f4      	bne.n	8000c42 <LCD_Print+0xa>
    }
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay (uint16_t time)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <delay+0x30>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2200      	movs	r2, #0
 8000c74:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8000c76:	bf00      	nop
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <delay+0x30>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d3f9      	bcc.n	8000c78 <delay+0x14>
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000220 	.word	0x20000220

08000c98 <Display_Temp>:

void Display_Temp (float Temp)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[20] = {0};
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	f107 0310 	add.w	r3, r7, #16
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
	LCD_cmd(0x80);
 8000cb4:	2080      	movs	r0, #128	@ 0x80
 8000cb6:	f7ff ff0f 	bl	8000ad8 <LCD_cmd>

	sprintf (str, "TEMP:- %.2f ", Temp);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff fbdc 	bl	8000478 <__aeabi_f2d>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	f107 000c 	add.w	r0, r7, #12
 8000cc8:	4907      	ldr	r1, [pc, #28]	@ (8000ce8 <Display_Temp+0x50>)
 8000cca:	f003 f86f 	bl	8003dac <siprintf>
	LCD_Print(str);
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ffb0 	bl	8000c38 <LCD_Print>
	LCD_data('C');
 8000cd8:	2043      	movs	r0, #67	@ 0x43
 8000cda:	f7ff ff43 	bl	8000b64 <LCD_data>
}
 8000cde:	bf00      	nop
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	08006058 	.word	0x08006058

08000cec <Display_Rh>:

void Display_Rh (float Rh)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[20] = {0};
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
	LCD_cmd(0xc0);
 8000d08:	20c0      	movs	r0, #192	@ 0xc0
 8000d0a:	f7ff fee5 	bl	8000ad8 <LCD_cmd>
	sprintf (str, "RH:- %.2f ", Rh);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff fbb2 	bl	8000478 <__aeabi_f2d>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	f107 000c 	add.w	r0, r7, #12
 8000d1c:	4907      	ldr	r1, [pc, #28]	@ (8000d3c <Display_Rh+0x50>)
 8000d1e:	f003 f845 	bl	8003dac <siprintf>
	LCD_Print(str);
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ff86 	bl	8000c38 <LCD_Print>
	LCD_data('H');
 8000d2c:	2048      	movs	r0, #72	@ 0x48
 8000d2e:	f7ff ff19 	bl	8000b64 <LCD_data>
}
 8000d32:	bf00      	nop
 8000d34:	3720      	adds	r7, #32
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	08006068 	.word	0x08006068

08000d40 <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d5c:	887b      	ldrh	r3, [r7, #2]
 8000d5e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 fed2 	bl	8001b18 <HAL_GPIO_Init>
}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d98:	887b      	ldrh	r3, [r7, #2]
 8000d9a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	4619      	mov	r1, r3
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f000 feb4 	bl	8001b18 <HAL_GPIO_Init>
}
 8000db0:	bf00      	nop
 8000db2:	3720      	adds	r7, #32
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <DHT11_Start>:

#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_1

void DHT11_Start (void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <DHT11_Start+0x3c>)
 8000dc0:	f7ff ffbe 	bl	8000d40 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	480a      	ldr	r0, [pc, #40]	@ (8000df4 <DHT11_Start+0x3c>)
 8000dca:	f001 f809 	bl	8001de0 <HAL_GPIO_WritePin>
	delay (18000);   // wait for 18ms
 8000dce:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000dd2:	f7ff ff47 	bl	8000c64 <delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2102      	movs	r1, #2
 8000dda:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <DHT11_Start+0x3c>)
 8000ddc:	f001 f800 	bl	8001de0 <HAL_GPIO_WritePin>
	delay (20);   // wait for 20us
 8000de0:	2014      	movs	r0, #20
 8000de2:	f7ff ff3f 	bl	8000c64 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8000de6:	2102      	movs	r1, #2
 8000de8:	4802      	ldr	r0, [pc, #8]	@ (8000df4 <DHT11_Start+0x3c>)
 8000dea:	f7ff ffc7 	bl	8000d7c <Set_Pin_Input>
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	42020000 	.word	0x42020000

08000df8 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000e02:	2028      	movs	r0, #40	@ 0x28
 8000e04:	f7ff ff2e 	bl	8000c64 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000e08:	2102      	movs	r1, #2
 8000e0a:	4811      	ldr	r0, [pc, #68]	@ (8000e50 <DHT11_Check_Response+0x58>)
 8000e0c:	f000 ffd0 	bl	8001db0 <HAL_GPIO_ReadPin>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10e      	bne.n	8000e34 <DHT11_Check_Response+0x3c>
	{
		delay (80);
 8000e16:	2050      	movs	r0, #80	@ 0x50
 8000e18:	f7ff ff24 	bl	8000c64 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	480c      	ldr	r0, [pc, #48]	@ (8000e50 <DHT11_Check_Response+0x58>)
 8000e20:	f000 ffc6 	bl	8001db0 <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d002      	beq.n	8000e30 <DHT11_Check_Response+0x38>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	71fb      	strb	r3, [r7, #7]
 8000e2e:	e001      	b.n	8000e34 <DHT11_Check_Response+0x3c>
		else Response = -1; // 255
 8000e30:	23ff      	movs	r3, #255	@ 0xff
 8000e32:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8000e34:	bf00      	nop
 8000e36:	2102      	movs	r1, #2
 8000e38:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <DHT11_Check_Response+0x58>)
 8000e3a:	f000 ffb9 	bl	8001db0 <HAL_GPIO_ReadPin>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1f8      	bne.n	8000e36 <DHT11_Check_Response+0x3e>

	return Response;
 8000e44:	79fb      	ldrb	r3, [r7, #7]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	42020000 	.word	0x42020000

08000e54 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	71bb      	strb	r3, [r7, #6]
 8000e5e:	e037      	b.n	8000ed0 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8000e60:	bf00      	nop
 8000e62:	2102      	movs	r1, #2
 8000e64:	481e      	ldr	r0, [pc, #120]	@ (8000ee0 <DHT11_Read+0x8c>)
 8000e66:	f000 ffa3 	bl	8001db0 <HAL_GPIO_ReadPin>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f8      	beq.n	8000e62 <DHT11_Read+0xe>
		delay (40);   // wait for 40 us
 8000e70:	2028      	movs	r0, #40	@ 0x28
 8000e72:	f7ff fef7 	bl	8000c64 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000e76:	2102      	movs	r1, #2
 8000e78:	4819      	ldr	r0, [pc, #100]	@ (8000ee0 <DHT11_Read+0x8c>)
 8000e7a:	f000 ff99 	bl	8001db0 <HAL_GPIO_ReadPin>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10e      	bne.n	8000ea2 <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000e84:	79bb      	ldrb	r3, [r7, #6]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	b25a      	sxtb	r2, r3
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	b25b      	sxtb	r3, r3
 8000e9e:	71fb      	strb	r3, [r7, #7]
 8000ea0:	e00b      	b.n	8000eba <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000ea2:	79bb      	ldrb	r3, [r7, #6]
 8000ea4:	f1c3 0307 	rsb	r3, r3, #7
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	b25a      	sxtb	r2, r3
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8000eba:	bf00      	nop
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	4808      	ldr	r0, [pc, #32]	@ (8000ee0 <DHT11_Read+0x8c>)
 8000ec0:	f000 ff76 	bl	8001db0 <HAL_GPIO_ReadPin>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f8      	bne.n	8000ebc <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 8000eca:	79bb      	ldrb	r3, [r7, #6]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	71bb      	strb	r3, [r7, #6]
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	d9c4      	bls.n	8000e60 <DHT11_Read+0xc>
	}
	return i;
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	42020000 	.word	0x42020000

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f000 fc02 	bl	80016f0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f87e 	bl	8000fec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f000 f93c 	bl	800116c <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000ef4:	f000 f8d3 	bl	800109e <MX_ICACHE_Init>
  MX_TIM1_Init();
 8000ef8:	f000 f8e4 	bl	80010c4 <MX_TIM1_Init>
  LCD_init();
 8000efc:	f7ff fe78 	bl	8000bf0 <LCD_init>
  /* USER CODE BEGIN 2 */
    LCD_Print("INITIALISING>>>>");
 8000f00:	482f      	ldr	r0, [pc, #188]	@ (8000fc0 <main+0xdc>)
 8000f02:	f7ff fe99 	bl	8000c38 <LCD_Print>
    HAL_Delay(2000);
 8000f06:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f0a:	f000 fcaf 	bl	800186c <HAL_Delay>
    LCD_cmd(0x01);
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f7ff fde2 	bl	8000ad8 <LCD_cmd>
     {
       /* USER CODE END WHILE */

       /* USER CODE BEGIN 3 */

   	  Display_Temp(Temperature);
 8000f14:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc4 <main+0xe0>)
 8000f16:	edd3 7a00 	vldr	s15, [r3]
 8000f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1e:	f7ff febb 	bl	8000c98 <Display_Temp>
   	  Display_Rh(Humidity);
 8000f22:	4b29      	ldr	r3, [pc, #164]	@ (8000fc8 <main+0xe4>)
 8000f24:	edd3 7a00 	vldr	s15, [r3]
 8000f28:	eeb0 0a67 	vmov.f32	s0, s15
 8000f2c:	f7ff fede 	bl	8000cec <Display_Rh>

   	  DHT11_Start();
 8000f30:	f7ff ff42 	bl	8000db8 <DHT11_Start>
   	  Presence = DHT11_Check_Response();
 8000f34:	f7ff ff60 	bl	8000df8 <DHT11_Check_Response>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b23      	ldr	r3, [pc, #140]	@ (8000fcc <main+0xe8>)
 8000f3e:	701a      	strb	r2, [r3, #0]
   	  Rh_byte1 = DHT11_Read ();
 8000f40:	f7ff ff88 	bl	8000e54 <DHT11_Read>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <main+0xec>)
 8000f4a:	701a      	strb	r2, [r3, #0]
   	  Rh_byte2 = DHT11_Read ();
 8000f4c:	f7ff ff82 	bl	8000e54 <DHT11_Read>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <main+0xf0>)
 8000f56:	701a      	strb	r2, [r3, #0]
   	  Temp_byte1 = DHT11_Read ();
 8000f58:	f7ff ff7c 	bl	8000e54 <DHT11_Read>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd8 <main+0xf4>)
 8000f62:	701a      	strb	r2, [r3, #0]
   	  Temp_byte2 = DHT11_Read ();
 8000f64:	f7ff ff76 	bl	8000e54 <DHT11_Read>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <main+0xf8>)
 8000f6e:	701a      	strb	r2, [r3, #0]
   	  SUM = DHT11_Read();
 8000f70:	f7ff ff70 	bl	8000e54 <DHT11_Read>
 8000f74:	4603      	mov	r3, r0
 8000f76:	461a      	mov	r2, r3
 8000f78:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <main+0xfc>)
 8000f7a:	801a      	strh	r2, [r3, #0]

   	  TEMP = Temp_byte1;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <main+0xf4>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <main+0x100>)
 8000f84:	801a      	strh	r2, [r3, #0]
   	  RH = Rh_byte1;
 8000f86:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <main+0xec>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <main+0x104>)
 8000f8e:	801a      	strh	r2, [r3, #0]

   	  Temperature = (float) TEMP;
 8000f90:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <main+0x100>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	ee07 3a90 	vmov	s15, r3
 8000f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f9c:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <main+0xe0>)
 8000f9e:	edc3 7a00 	vstr	s15, [r3]
   	  Humidity = (float) RH;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <main+0x104>)
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <main+0xe4>)
 8000fb0:	edc3 7a00 	vstr	s15, [r3]


   	  HAL_Delay(1000);
 8000fb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fb8:	f000 fc58 	bl	800186c <HAL_Delay>
   	  Display_Temp(Temperature);
 8000fbc:	bf00      	nop
 8000fbe:	e7a9      	b.n	8000f14 <main+0x30>
 8000fc0:	08006074 	.word	0x08006074
 8000fc4:	20000278 	.word	0x20000278
 8000fc8:	2000027c 	.word	0x2000027c
 8000fcc:	20000280 	.word	0x20000280
 8000fd0:	2000026c 	.word	0x2000026c
 8000fd4:	2000026d 	.word	0x2000026d
 8000fd8:	2000026e 	.word	0x2000026e
 8000fdc:	2000026f 	.word	0x2000026f
 8000fe0:	20000270 	.word	0x20000270
 8000fe4:	20000274 	.word	0x20000274
 8000fe8:	20000272 	.word	0x20000272

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b098      	sub	sp, #96	@ 0x60
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 0320 	add.w	r3, r7, #32
 8000ff6:	2240      	movs	r2, #64	@ 0x40
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 ff39 	bl	8003e72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	463b      	mov	r3, r7
 8001002:	2220      	movs	r2, #32
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f002 ff33 	bl	8003e72 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800100c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001010:	f000 ff6a 	bl	8001ee8 <HAL_PWREx_ControlVoltageScaling>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800101a:	f000 f913 	bl	8001244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800101e:	2301      	movs	r3, #1
 8001020:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001022:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
 800102c:	2302      	movs	r3, #2
 800102e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSE;
 8001030:	2303      	movs	r3, #3
 8001032:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL1.PLLM = 2;
 8001034:	2302      	movs	r3, #2
 8001036:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL1.PLLN = 9;
 8001038:	2309      	movs	r3, #9
 800103a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL1.PLLP = 2;
 800103c:	2302      	movs	r3, #2
 800103e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL1.PLLQ = 2;
 8001040:	2302      	movs	r3, #2
 8001042:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLR = 3;
 8001044:	2303      	movs	r3, #3
 8001046:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL1.PLLFractional = 3072;
 8001048:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800104c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104e:	f107 0320 	add.w	r3, r7, #32
 8001052:	4618      	mov	r0, r3
 8001054:	f000 ffa6 	bl	8001fa4 <HAL_RCC_OscConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800105e:	f000 f8f1 	bl	8001244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001062:	233f      	movs	r3, #63	@ 0x3f
 8001064:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK7|RCC_CLOCKTYPE_HCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001066:	2303      	movs	r3, #3
 8001068:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB7CLKDivider = RCC_HCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHB5_PLL1_CLKDivider = RCC_SYSCLK_PLL1_DIV2;
 800107a:	2304      	movs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHB5_HSEHSI_CLKDivider = RCC_SYSCLK_HSEHSI_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001082:	463b      	mov	r3, r7
 8001084:	2101      	movs	r1, #1
 8001086:	4618      	mov	r0, r3
 8001088:	f001 fb76 	bl	8002778 <HAL_RCC_ClockConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001092:	f000 f8d7 	bl	8001244 <Error_Handler>
  }
}
 8001096:	bf00      	nop
 8001098:	3760      	adds	r7, #96	@ 0x60
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_Init 1 */
  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 fef0 	bl	8001e88 <HAL_ICACHE_ConfigAssociativityMode>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80010ae:	f000 f8c9 	bl	8001244 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80010b2:	f000 ff09 	bl	8001ec8 <HAL_ICACHE_Enable>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80010bc:	f000 f8c2 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */
  /* USER CODE END ICACHE_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010e2:	4b20      	ldr	r3, [pc, #128]	@ (8001164 <MX_TIM1_Init+0xa0>)
 80010e4:	4a20      	ldr	r2, [pc, #128]	@ (8001168 <MX_TIM1_Init+0xa4>)
 80010e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80010e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001164 <MX_TIM1_Init+0xa0>)
 80010ea:	2231      	movs	r2, #49	@ 0x31
 80010ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001164 <MX_TIM1_Init+0xa0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <MX_TIM1_Init+0xa0>)
 80010f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fc:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <MX_TIM1_Init+0xa0>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001102:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <MX_TIM1_Init+0xa0>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001108:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <MX_TIM1_Init+0xa0>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800110e:	4815      	ldr	r0, [pc, #84]	@ (8001164 <MX_TIM1_Init+0xa0>)
 8001110:	f001 fd1e 	bl	8002b50 <HAL_TIM_Base_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800111a:	f000 f893 	bl	8001244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800111e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001122:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	4619      	mov	r1, r3
 800112a:	480e      	ldr	r0, [pc, #56]	@ (8001164 <MX_TIM1_Init+0xa0>)
 800112c:	f001 fd68 	bl	8002c00 <HAL_TIM_ConfigClockSource>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001136:	f000 f885 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	@ (8001164 <MX_TIM1_Init+0xa0>)
 800114c:	f001 ff48 	bl	8002fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001156:	f000 f875 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3720      	adds	r7, #32
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000220 	.word	0x20000220
 8001168:	40012c00 	.word	0x40012c00

0800116c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b2d      	ldr	r3, [pc, #180]	@ (8001238 <MX_GPIO_Init+0xcc>)
 8001184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001188:	4a2b      	ldr	r2, [pc, #172]	@ (8001238 <MX_GPIO_Init+0xcc>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001192:	4b29      	ldr	r3, [pc, #164]	@ (8001238 <MX_GPIO_Init+0xcc>)
 8001194:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a0:	4b25      	ldr	r3, [pc, #148]	@ (8001238 <MX_GPIO_Init+0xcc>)
 80011a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011a6:	4a24      	ldr	r2, [pc, #144]	@ (8001238 <MX_GPIO_Init+0xcc>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011b0:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <MX_GPIO_Init+0xcc>)
 80011b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	4b1e      	ldr	r3, [pc, #120]	@ (8001238 <MX_GPIO_Init+0xcc>)
 80011c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001238 <MX_GPIO_Init+0xcc>)
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <MX_GPIO_Init+0xcc>)
 80011d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT11_Pin|D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f249 2102 	movw	r1, #37378	@ 0x9202
 80011e2:	4816      	ldr	r0, [pc, #88]	@ (800123c <MX_GPIO_Init+0xd0>)
 80011e4:	f000 fdfc 	bl	8001de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D2_Pin|RS_Pin|RW_Pin|D7_Pin
 80011e8:	2200      	movs	r2, #0
 80011ea:	f24e 21c9 	movw	r1, #58057	@ 0xe2c9
 80011ee:	4814      	ldr	r0, [pc, #80]	@ (8001240 <MX_GPIO_Init+0xd4>)
 80011f0:	f000 fdf6 	bl	8001de0 <HAL_GPIO_WritePin>
                          |D1_Pin|D3_Pin|D0_Pin|EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DHT11_Pin D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin|D6_Pin|D5_Pin|D4_Pin;
 80011f4:	f249 2302 	movw	r3, #37378	@ 0x9202
 80011f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	4619      	mov	r1, r3
 800120c:	480b      	ldr	r0, [pc, #44]	@ (800123c <MX_GPIO_Init+0xd0>)
 800120e:	f000 fc83 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin RS_Pin RW_Pin D7_Pin
                           D1_Pin D3_Pin D0_Pin EN_Pin */
  GPIO_InitStruct.Pin = D2_Pin|RS_Pin|RW_Pin|D7_Pin
 8001212:	f24e 23c9 	movw	r3, #58057	@ 0xe2c9
 8001216:	60fb      	str	r3, [r7, #12]
                          |D1_Pin|D3_Pin|D0_Pin|EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4619      	mov	r1, r3
 800122a:	4805      	ldr	r0, [pc, #20]	@ (8001240 <MX_GPIO_Init+0xd4>)
 800122c:	f000 fc74 	bl	8001b18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	46020c00 	.word	0x46020c00
 800123c:	42020000 	.word	0x42020000
 8001240:	42020400 	.word	0x42020400

08001244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <HAL_MspInit+0x30>)
 800125c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001260:	4a08      	ldr	r2, [pc, #32]	@ (8001284 <HAL_MspInit+0x30>)
 8001262:	f043 0304 	orr.w	r3, r3, #4
 8001266:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_MspInit+0x30>)
 800126c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	46020c00 	.word	0x46020c00

08001288 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0b      	ldr	r2, [pc, #44]	@ (80012c4 <HAL_TIM_Base_MspInit+0x3c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d10e      	bne.n	80012b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <HAL_TIM_Base_MspInit+0x40>)
 800129c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80012a0:	4a09      	ldr	r2, [pc, #36]	@ (80012c8 <HAL_TIM_Base_MspInit+0x40>)
 80012a2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012a6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80012aa:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <HAL_TIM_Base_MspInit+0x40>)
 80012ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80012b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	40012c00 	.word	0x40012c00
 80012c8:	46020c00 	.word	0x46020c00

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <NMI_Handler+0x4>

080012d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <HardFault_Handler+0x4>

080012dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <MemManage_Handler+0x4>

080012e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001322:	f000 fa83 	bl	800182c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}

0800132a <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_PIN);
 800132e:	2040      	movs	r0, #64	@ 0x40
 8001330:	f000 fd6e 	bl	8001e10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}

08001338 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_PIN);
 800133c:	2080      	movs	r0, #128	@ 0x80
 800133e:	f000 fd67 	bl	8001e10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}

08001346 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_PIN);
 800134a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800134e:	f000 fd5f 	bl	8001e10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}

08001356 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  return 1;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_kill>:

int _kill(int pid, int sig)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001370:	f002 fdd2 	bl	8003f18 <__errno>
 8001374:	4603      	mov	r3, r0
 8001376:	2216      	movs	r2, #22
 8001378:	601a      	str	r2, [r3, #0]
  return -1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <_exit>:

void _exit (int status)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800138e:	f04f 31ff 	mov.w	r1, #4294967295
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ffe7 	bl	8001366 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <_exit+0x12>

0800139c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	e00a      	b.n	80013c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ae:	f3af 8000 	nop.w
 80013b2:	4601      	mov	r1, r0
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	60ba      	str	r2, [r7, #8]
 80013ba:	b2ca      	uxtb	r2, r1
 80013bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	3301      	adds	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dbf0      	blt.n	80013ae <_read+0x12>
  }

  return len;
 80013cc:	687b      	ldr	r3, [r7, #4]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	60f8      	str	r0, [r7, #12]
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	e009      	b.n	80013fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	60ba      	str	r2, [r7, #8]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 f961 	bl	80016b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	dbf1      	blt.n	80013e8 <_write+0x12>
  }
  return len;
 8001404:	687b      	ldr	r3, [r7, #4]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <_close>:

int _close(int file)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001436:	605a      	str	r2, [r3, #4]
  return 0;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <_isatty>:

int _isatty(int file)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001480:	4a14      	ldr	r2, [pc, #80]	@ (80014d4 <_sbrk+0x5c>)
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <_sbrk+0x60>)
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800148c:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <_sbrk+0x64>)
 8001496:	4a12      	ldr	r2, [pc, #72]	@ (80014e0 <_sbrk+0x68>)
 8001498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d207      	bcs.n	80014b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a8:	f002 fd36 	bl	8003f18 <__errno>
 80014ac:	4603      	mov	r3, r0
 80014ae:	220c      	movs	r2, #12
 80014b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	e009      	b.n	80014cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b8:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014be:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <_sbrk+0x64>)
 80014c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ca:	68fb      	ldr	r3, [r7, #12]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20020000 	.word	0x20020000
 80014d8:	00000400 	.word	0x00000400
 80014dc:	20000284 	.word	0x20000284
 80014e0:	20000470 	.word	0x20000470

080014e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  __IO uint32_t tmpreg;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <SystemInit+0x20>)
 80014ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ee:	4a05      	ldr	r2, [pc, #20]	@ (8001504 <SystemInit+0x20>)
 80014f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  CLEAR_BIT(ADC4->CR, ADC_CR_ADVREGEN);

  /* Disable ADC kernel clock */
  CLEAR_BIT(RCC->AHB4ENR, RCC_AHB4ENR_ADC4EN);
#endif
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	@ 0x24
 800150c:	af00      	add	r7, sp, #0
  uint32_t plln;
  float_t fracn;
  float_t pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 800150e:	4b4f      	ldr	r3, [pc, #316]	@ (800164c <SystemCoreClockUpdate+0x144>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b08      	cmp	r3, #8
 8001518:	d002      	beq.n	8001520 <SystemCoreClockUpdate+0x18>
 800151a:	2b0c      	cmp	r3, #12
 800151c:	d00b      	beq.n	8001536 <SystemCoreClockUpdate+0x2e>
 800151e:	e07d      	b.n	800161c <SystemCoreClockUpdate+0x114>
  {
    case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
      SystemCoreClock = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8001520:	4b4a      	ldr	r3, [pc, #296]	@ (800164c <SystemCoreClockUpdate+0x144>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	0d1b      	lsrs	r3, r3, #20
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	4a49      	ldr	r2, [pc, #292]	@ (8001650 <SystemCoreClockUpdate+0x148>)
 800152c:	fa22 f303 	lsr.w	r3, r2, r3
 8001530:	4a48      	ldr	r2, [pc, #288]	@ (8001654 <SystemCoreClockUpdate+0x14c>)
 8001532:	6013      	str	r3, [r2, #0]
      break;
 8001534:	e076      	b.n	8001624 <SystemCoreClockUpdate+0x11c>

    case (RCC_CFGR1_SWS_0 | RCC_CFGR1_SWS_1):  /* PLL1 used as system clock source */
      /* PLL_VCO = (PLLsource / PLLM) * PLLN * FractionnalPart
          SYSCLK = PLL_VCO / PLLR */
      /* Get PLL1 CFGR and DIVR register values */
      tmp1 = RCC->PLL1CFGR;
 8001536:	4b45      	ldr	r3, [pc, #276]	@ (800164c <SystemCoreClockUpdate+0x144>)
 8001538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153a:	61fb      	str	r3, [r7, #28]
      tmp2 = RCC->PLL1DIVR;
 800153c:	4b43      	ldr	r3, [pc, #268]	@ (800164c <SystemCoreClockUpdate+0x144>)
 800153e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001540:	617b      	str	r3, [r7, #20]

      /* Retrieve PLL1 multiplication factor and divider */
      pllm = ((tmp1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	3301      	adds	r3, #1
 800154c:	613b      	str	r3, [r7, #16]
      plln = (tmp2 & RCC_PLL1DIVR_PLL1N) + 1U;
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001554:	3301      	adds	r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
      pllr = ((tmp2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	0e1b      	lsrs	r3, r3, #24
 800155c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001560:	3301      	adds	r3, #1
 8001562:	60bb      	str	r3, [r7, #8]

      /* Check if fractional part is enable */
      if ((tmp1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00b      	beq.n	8001586 <SystemCoreClockUpdate+0x7e>
      {
        fracn = (float_t)((uint32_t)((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800156e:	4b37      	ldr	r3, [pc, #220]	@ (800164c <SystemCoreClockUpdate+0x144>)
 8001570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001572:	08db      	lsrs	r3, r3, #3
 8001574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001580:	edc7 7a06 	vstr	s15, [r7, #24]
 8001584:	e002      	b.n	800158c <SystemCoreClockUpdate+0x84>
      }
      else
      {
        fracn = (float_t)0U;
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
      }

      /* determine PLL source */
      pllsource = (tmp1 & RCC_PLL1CFGR_PLL1SRC);
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b02      	cmp	r3, #2
 8001598:	d003      	beq.n	80015a2 <SystemCoreClockUpdate+0x9a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b03      	cmp	r3, #3
 800159e:	d003      	beq.n	80015a8 <SystemCoreClockUpdate+0xa0>
 80015a0:	e00c      	b.n	80015bc <SystemCoreClockUpdate+0xb4>
      switch (pllsource)
      {
        /* HSI used as PLL1 clock source */
        case RCC_PLL1CFGR_PLL1SRC_1:
          tmp1 = HSI_VALUE;
 80015a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001658 <SystemCoreClockUpdate+0x150>)
 80015a4:	61fb      	str	r3, [r7, #28]
          break;
 80015a6:	e00c      	b.n	80015c2 <SystemCoreClockUpdate+0xba>

        /* HSE used as PLL1 clock source */
        case (RCC_PLL1CFGR_PLL1SRC_0 | RCC_PLL1CFGR_PLL1SRC_1):
          tmp1 = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 80015a8:	4b28      	ldr	r3, [pc, #160]	@ (800164c <SystemCoreClockUpdate+0x144>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0d1b      	lsrs	r3, r3, #20
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	4a27      	ldr	r2, [pc, #156]	@ (8001650 <SystemCoreClockUpdate+0x148>)
 80015b4:	fa22 f303 	lsr.w	r3, r2, r3
 80015b8:	61fb      	str	r3, [r7, #28]
          break;
 80015ba:	e002      	b.n	80015c2 <SystemCoreClockUpdate+0xba>

        default:
          tmp1 = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
          break;
 80015c0:	bf00      	nop
      }

      /* Compute VCO output frequency */
      pllvco = ((float_t) tmp1 / (float_t)pllm) * (((float_t)plln + (float_t)(fracn / (float_t)0x2000U)));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	ee07 3a90 	vmov	s15, r3
 80015d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80015e4:	ed97 6a06 	vldr	s12, [r7, #24]
 80015e8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800165c <SystemCoreClockUpdate+0x154>
 80015ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80015f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80015f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f8:	edc7 7a00 	vstr	s15, [r7]
      SystemCoreClock = (uint32_t)((float_t)(pllvco / (float_t)pllr));
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	ee07 3a90 	vmov	s15, r3
 8001602:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001606:	edd7 6a00 	vldr	s13, [r7]
 800160a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800160e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001612:	ee17 2a90 	vmov	r2, s15
 8001616:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <SystemCoreClockUpdate+0x14c>)
 8001618:	601a      	str	r2, [r3, #0]
      break;
 800161a:	e003      	b.n	8001624 <SystemCoreClockUpdate+0x11c>

    case 0x00u:  /* HSI used as system clock source */
    default:
      SystemCoreClock = HSI_VALUE;
 800161c:	4b0d      	ldr	r3, [pc, #52]	@ (8001654 <SystemCoreClockUpdate+0x14c>)
 800161e:	4a0e      	ldr	r2, [pc, #56]	@ (8001658 <SystemCoreClockUpdate+0x150>)
 8001620:	601a      	str	r2, [r3, #0]
      break;
 8001622:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp1 = AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)];
 8001624:	4b09      	ldr	r3, [pc, #36]	@ (800164c <SystemCoreClockUpdate+0x144>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	4a0c      	ldr	r2, [pc, #48]	@ (8001660 <SystemCoreClockUpdate+0x158>)
 800162e:	5cd3      	ldrb	r3, [r2, r3]
 8001630:	61fb      	str	r3, [r7, #28]

  /* HCLK clock frequency */
  SystemCoreClock >>= tmp1;
 8001632:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <SystemCoreClockUpdate+0x14c>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	fa22 f303 	lsr.w	r3, r2, r3
 800163c:	4a05      	ldr	r2, [pc, #20]	@ (8001654 <SystemCoreClockUpdate+0x14c>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	3724      	adds	r7, #36	@ 0x24
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	46020c00 	.word	0x46020c00
 8001650:	01e84800 	.word	0x01e84800
 8001654:	20000030 	.word	0x20000030
 8001658:	00f42400 	.word	0x00f42400
 800165c:	46000000 	.word	0x46000000
 8001660:	08006088 	.word	0x08006088

08001664 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001664:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800169c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001668:	f7ff ff3c 	bl	80014e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800166c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800166e:	e003      	b.n	8001678 <LoopCopyDataInit>

08001670 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001670:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001672:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001674:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001676:	3104      	adds	r1, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001678:	480a      	ldr	r0, [pc, #40]	@ (80016a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800167a:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800167c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800167e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001680:	d3f6      	bcc.n	8001670 <CopyDataInit>
	ldr	r2, =_sbss
 8001682:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8001684:	e002      	b.n	800168c <LoopFillZerobss>

08001686 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001686:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001688:	f842 3b04 	str.w	r3, [r2], #4

0800168c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800168c:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <LoopForever+0x16>)
	cmp	r2, r3
 800168e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001690:	d3f9      	bcc.n	8001686 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001692:	f002 fc47 	bl	8003f24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001696:	f7ff fc25 	bl	8000ee4 <main>

0800169a <LoopForever>:

LoopForever:
    b LoopForever
 800169a:	e7fe      	b.n	800169a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800169c:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 80016a0:	08006410 	.word	0x08006410
	ldr	r0, =_sdata
 80016a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016a8:	20000204 	.word	0x20000204
	ldr	r2, =_sbss
 80016ac:	20000204 	.word	0x20000204
	ldr	r3, = _ebss
 80016b0:	20000470 	.word	0x20000470

080016b4 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC4_IRQHandler>
	...

080016b8 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80016c0:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <__io_putchar+0x30>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	2394      	movs	r3, #148	@ 0x94
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	4a07      	ldr	r2, [pc, #28]	@ (80016ec <__io_putchar+0x34>)
 80016ce:	1898      	adds	r0, r3, r2
 80016d0:	1d39      	adds	r1, r7, #4
 80016d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d6:	2201      	movs	r2, #1
 80016d8:	f001 fcea 	bl	80030b0 <HAL_UART_Transmit>
  return ch;
 80016dc:	687b      	ldr	r3, [r7, #4]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000031c 	.word	0x2000031c
 80016ec:	20000288 	.word	0x20000288

080016f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f4:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <HAL_Init+0x3c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0c      	ldr	r2, [pc, #48]	@ (800172c <HAL_Init+0x3c>)
 80016fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001700:	2003      	movs	r0, #3
 8001702:	f000 f966 	bl	80019d2 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 8001706:	f7ff feff 	bl	8001508 <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800170a:	2004      	movs	r0, #4
 800170c:	f000 f9ac 	bl	8001a68 <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001710:	200f      	movs	r0, #15
 8001712:	f000 f80d 	bl	8001730 <HAL_InitTick>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_Init+0x30>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e002      	b.n	8001726 <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001720:	f7ff fd98 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40022000 	.word	0x40022000

08001730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800173c:	4b36      	ldr	r3, [pc, #216]	@ (8001818 <HAL_InitTick+0xe8>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e062      	b.n	800180e <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001748:	4b34      	ldr	r3, [pc, #208]	@ (800181c <HAL_InitTick+0xec>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b04      	cmp	r3, #4
 8001752:	d10c      	bne.n	800176e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001754:	4b32      	ldr	r3, [pc, #200]	@ (8001820 <HAL_InitTick+0xf0>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b2f      	ldr	r3, [pc, #188]	@ (8001818 <HAL_InitTick+0xe8>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001762:	fbb3 f3f1 	udiv	r3, r3, r1
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	e03d      	b.n	80017ea <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 800176e:	4b2d      	ldr	r3, [pc, #180]	@ (8001824 <HAL_InitTick+0xf4>)
 8001770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001774:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001778:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001780:	d025      	beq.n	80017ce <HAL_InitTick+0x9e>
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001788:	d82e      	bhi.n	80017e8 <HAL_InitTick+0xb8>
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <HAL_InitTick+0x6a>
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001796:	d00d      	beq.n	80017b4 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8001798:	e026      	b.n	80017e8 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800179a:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <HAL_InitTick+0xf0>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <HAL_InitTick+0xe8>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	4619      	mov	r1, r3
 80017a4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80017a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b0:	60fb      	str	r3, [r7, #12]
        break;
 80017b2:	e01a      	b.n	80017ea <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80017b4:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <HAL_InitTick+0xe8>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017be:	fbb3 f3f2 	udiv	r3, r3, r2
 80017c2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80017c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ca:	60fb      	str	r3, [r7, #12]
        break;
 80017cc:	e00d      	b.n	80017ea <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80017ce:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <HAL_InitTick+0xe8>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80017dc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e4:	60fb      	str	r3, [r7, #12]
        break;
 80017e6:	e000      	b.n	80017ea <HAL_InitTick+0xba>
        break;
 80017e8:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 f91a 	bl	8001a24 <HAL_SYSTICK_Config>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e009      	b.n	800180e <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fa:	2200      	movs	r2, #0
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001802:	f000 f8f1 	bl	80019e8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001806:	4a08      	ldr	r2, [pc, #32]	@ (8001828 <HAL_InitTick+0xf8>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000038 	.word	0x20000038
 800181c:	e000e010 	.word	0xe000e010
 8001820:	20000030 	.word	0x20000030
 8001824:	46020c00 	.word	0x46020c00
 8001828:	20000034 	.word	0x20000034

0800182c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <HAL_IncTick+0x20>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <HAL_IncTick+0x24>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4413      	add	r3, r2
 800183c:	4a04      	ldr	r2, [pc, #16]	@ (8001850 <HAL_IncTick+0x24>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000038 	.word	0x20000038
 8001850:	20000320 	.word	0x20000320

08001854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return uwTick;
 8001858:	4b03      	ldr	r3, [pc, #12]	@ (8001868 <HAL_GetTick+0x14>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000320 	.word	0x20000320

0800186c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff ffee 	bl	8001854 <HAL_GetTick>
 8001878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001884:	d005      	beq.n	8001892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001886:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <HAL_Delay+0x44>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001892:	bf00      	nop
 8001894:	f7ff ffde 	bl	8001854 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d8f7      	bhi.n	8001894 <HAL_Delay+0x28>
  {
  }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000038 	.word	0x20000038

080018b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c4:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018d0:	4013      	ands	r3, r2
 80018d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e6:	4a04      	ldr	r2, [pc, #16]	@ (80018f8 <__NVIC_SetPriorityGrouping+0x44>)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	60d3      	str	r3, [r2, #12]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001900:	4b04      	ldr	r3, [pc, #16]	@ (8001914 <__NVIC_GetPriorityGrouping+0x18>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	f003 0307 	and.w	r3, r3, #7
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	db0a      	blt.n	8001942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	490c      	ldr	r1, [pc, #48]	@ (8001964 <__NVIC_SetPriority+0x4c>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	440b      	add	r3, r1
 800193c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001940:	e00a      	b.n	8001958 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4908      	ldr	r1, [pc, #32]	@ (8001968 <__NVIC_SetPriority+0x50>)
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	3b04      	subs	r3, #4
 8001950:	0112      	lsls	r2, r2, #4
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	440b      	add	r3, r1
 8001956:	761a      	strb	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	@ 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f1c3 0307 	rsb	r3, r3, #7
 8001986:	2b04      	cmp	r3, #4
 8001988:	bf28      	it	cs
 800198a:	2304      	movcs	r3, #4
 800198c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3304      	adds	r3, #4
 8001992:	2b06      	cmp	r3, #6
 8001994:	d902      	bls.n	800199c <NVIC_EncodePriority+0x30>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3b03      	subs	r3, #3
 800199a:	e000      	b.n	800199e <NVIC_EncodePriority+0x32>
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	f04f 32ff 	mov.w	r2, #4294967295
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43d9      	mvns	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	4313      	orrs	r3, r2
         );
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	@ 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ff6a 	bl	80018b4 <__NVIC_SetPriorityGrouping>
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
 80019f6:	f7ff ff81 	bl	80018fc <__NVIC_GetPriorityGrouping>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	6978      	ldr	r0, [r7, #20]
 8001a08:	f7ff ffb0 	bl	800196c <NVIC_EncodePriority>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff7f 	bl	8001918 <__NVIC_SetPriority>
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00d      	b.n	8001a56 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <HAL_SYSTICK_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001a42:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <HAL_SYSTICK_Config+0x40>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001a48:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_SYSTICK_Config+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a05      	ldr	r2, [pc, #20]	@ (8001a64 <HAL_SYSTICK_Config+0x40>)
 8001a4e:	f043 0303 	orr.w	r3, r3, #3
 8001a52:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d844      	bhi.n	8001b00 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001a76:	a201      	add	r2, pc, #4	@ (adr r2, 8001a7c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7c:	08001a9f 	.word	0x08001a9f
 8001a80:	08001abd 	.word	0x08001abd
 8001a84:	08001adf 	.word	0x08001adf
 8001a88:	08001b01 	.word	0x08001b01
 8001a8c:	08001a91 	.word	0x08001a91
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001a90:	4b1f      	ldr	r3, [pc, #124]	@ (8001b10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1e      	ldr	r2, [pc, #120]	@ (8001b10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	6013      	str	r3, [r2, #0]
      break;
 8001a9c:	e031      	b.n	8001b02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8001b10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001aa4:	f023 0304 	bic.w	r3, r3, #4
 8001aa8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab0:	4a18      	ldr	r2, [pc, #96]	@ (8001b14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ab2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001aba:	e022      	b.n	8001b02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001abc:	4b14      	ldr	r3, [pc, #80]	@ (8001b10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a13      	ldr	r2, [pc, #76]	@ (8001b10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ac2:	f023 0304 	bic.w	r3, r3, #4
 8001ac6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ace:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001ad2:	4a10      	ldr	r2, [pc, #64]	@ (8001b14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ad4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001adc:	e011      	b.n	8001b02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001ade:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a0b      	ldr	r2, [pc, #44]	@ (8001b10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ae4:	f023 0304 	bic.w	r3, r3, #4
 8001ae8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001aea:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001af4:	4a07      	ldr	r2, [pc, #28]	@ (8001b14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001af6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001afa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001afe:	e000      	b.n	8001b02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001b00:	bf00      	nop
  }
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000e010 	.word	0xe000e010
 8001b14:	46020c00 	.word	0x46020c00

08001b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b26:	e130      	b.n	8001d8a <HAL_GPIO_Init+0x272>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	fa01 f303 	lsl.w	r3, r1, r3
 8001b34:	4013      	ands	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 8122 	beq.w	8001d84 <HAL_GPIO_Init+0x26c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d005      	beq.n	8001b58 <HAL_GPIO_Init+0x40>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d130      	bne.n	8001bba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b8e:	2201      	movs	r2, #1
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	091b      	lsrs	r3, r3, #4
 8001ba4:	f003 0201 	and.w	r2, r3, #1
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d017      	beq.n	8001bf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d123      	bne.n	8001c4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	08da      	lsrs	r2, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3208      	adds	r2, #8
 8001c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	220f      	movs	r2, #15
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	691a      	ldr	r2, [r3, #16]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	08da      	lsrs	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3208      	adds	r2, #8
 8001c44:	6939      	ldr	r1, [r7, #16]
 8001c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	2203      	movs	r2, #3
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0203 	and.w	r2, r3, #3
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d07c      	beq.n	8001d84 <HAL_GPIO_Init+0x26c>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001c8a:	4a47      	ldr	r2, [pc, #284]	@ (8001da8 <HAL_GPIO_Init+0x290>)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3318      	adds	r3, #24
 8001c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	0a9a      	lsrs	r2, r3, #10
 8001cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8001dac <HAL_GPIO_Init+0x294>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	f002 0203 	and.w	r2, r2, #3
 8001cbc:	00d2      	lsls	r2, r2, #3
 8001cbe:	4093      	lsls	r3, r2
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001cc6:	4938      	ldr	r1, [pc, #224]	@ (8001da8 <HAL_GPIO_Init+0x290>)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3318      	adds	r3, #24
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cd4:	4b34      	ldr	r3, [pc, #208]	@ (8001da8 <HAL_GPIO_Init+0x290>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x1e0>
        {
          temp |= iocurrent;
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cf8:	4a2b      	ldr	r2, [pc, #172]	@ (8001da8 <HAL_GPIO_Init+0x290>)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8001da8 <HAL_GPIO_Init+0x290>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x20a>
        {
          temp |= iocurrent;
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d22:	4a21      	ldr	r2, [pc, #132]	@ (8001da8 <HAL_GPIO_Init+0x290>)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d28:	4b1f      	ldr	r3, [pc, #124]	@ (8001da8 <HAL_GPIO_Init+0x290>)
 8001d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d4e:	4a16      	ldr	r2, [pc, #88]	@ (8001da8 <HAL_GPIO_Init+0x290>)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8001d56:	4b14      	ldr	r3, [pc, #80]	@ (8001da8 <HAL_GPIO_Init+0x290>)
 8001d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <HAL_GPIO_Init+0x290>)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3301      	adds	r3, #1
 8001d88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f47f aec7 	bne.w	8001b28 <HAL_GPIO_Init+0x10>
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	bf00      	nop
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	46022000 	.word	0x46022000
 8001dac:	002f7f7f 	.word	0x002f7f7f

08001db0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	887b      	ldrh	r3, [r7, #2]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	e001      	b.n	8001dd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
 8001dec:	4613      	mov	r3, r2
 8001dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001df0:	787b      	ldrb	r3, [r7, #1]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001df6:	887a      	ldrh	r2, [r7, #2]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dfc:	e002      	b.n	8001e04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00U)
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e58 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d006      	beq.n	8001e34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001e26:	4a0c      	ldr	r2, [pc, #48]	@ (8001e58 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001e2c:	88fb      	ldrh	r3, [r7, #6]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f814 	bl	8001e5c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00U)
 8001e34:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d006      	beq.n	8001e4e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001e40:	4a05      	ldr	r2, [pc, #20]	@ (8001e58 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f812 	bl	8001e72 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	46022000 	.word	0x46022000

08001e5c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001e94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
 8001ea4:	e007      	b.n	8001eb6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001ea6:	4b07      	ldr	r3, [pc, #28]	@ (8001ec4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 0204 	bic.w	r2, r3, #4
 8001eae:	4905      	ldr	r1, [pc, #20]	@ (8001ec4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	40030400 	.word	0x40030400

08001ec8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001ecc:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_ICACHE_Enable+0x1c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a04      	ldr	r2, [pc, #16]	@ (8001ee4 <HAL_ICACHE_Enable+0x1c>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	40030400 	.word	0x40030400

08001ee8 <HAL_PWREx_ControlVoltageScaling>:
  *        only take effect after the 2.4 GHz RADIO has entered Sleep or Deepsleep mode.
  * @note  In range 2, the 2.4 GHz RADIO shall not transmit nor receive.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  uint32_t vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001ef0:	4b29      	ldr	r3, [pc, #164]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d101      	bne.n	8001f06 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e042      	b.n	8001f8c <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Set voltage scaling level */
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 8001f06:	4b24      	ldr	r3, [pc, #144]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8001f0e:	4922      	ldr	r1, [pc, #136]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60cb      	str	r3, [r1, #12]


  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8001f16:	4b21      	ldr	r3, [pc, #132]	@ (8001f9c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2232      	movs	r2, #50	@ 0x32
 8001f1c:	fb02 f303 	mul.w	r3, r2, r3
 8001f20:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8001f22:	fba2 2303 	umull	r2, r3, r2, r3
 8001f26:	0c9b      	lsrs	r3, r3, #18
 8001f28:	3301      	adds	r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001f2c:	e002      	b.n	8001f34 <HAL_PWREx_ControlVoltageScaling+0x4c>
  {
    timeout--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001f34:	4b18      	ldr	r3, [pc, #96]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <HAL_PWREx_ControlVoltageScaling+0x5e>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f3      	bne.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x46>
  }

  /* Check time out  */
  if (timeout == 0U)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_PWREx_ControlVoltageScaling+0x68>
  {
    return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e01d      	b.n	8001f8c <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  /* Wait until ACTVOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8001f50:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2232      	movs	r2, #50	@ 0x32
 8001f56:	fb02 f303 	mul.w	r3, r2, r3
 8001f5a:	4a11      	ldr	r2, [pc, #68]	@ (8001fa0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8001f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f60:	0c9b      	lsrs	r3, r3, #18
 8001f62:	3301      	adds	r3, #1
 8001f64:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001f66:	e002      	b.n	8001f6e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d102      	bne.n	8001f80 <HAL_PWREx_ControlVoltageScaling+0x98>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f3      	bne.n	8001f68 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out  */
  if (timeout == 0U)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_PWREx_ControlVoltageScaling+0xa2>
  {
    return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e000      	b.n	8001f8c <HAL_PWREx_ControlVoltageScaling+0xa4>
  }

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	46020800 	.word	0x46020800
 8001f9c:	20000030 	.word	0x20000030
 8001fa0:	431bde83 	.word	0x431bde83

08001fa4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	@ 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t mask;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e3d9      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb6:	4b90      	ldr	r3, [pc, #576]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	623b      	str	r3, [r7, #32]
  pllsrc = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001fc0:	4b8d      	ldr	r3, [pc, #564]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d072      	beq.n	80020bc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL1 in these cases it is not allowed to be disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x44>
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	2b0c      	cmp	r3, #12
 8001fe0:	d12a      	bne.n	8002038 <HAL_RCC_OscConfig+0x94>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSE)))
 8001fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d127      	bne.n	8002038 <HAL_RCC_OscConfig+0x94>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x50>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e3ba      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Otherwise, applying divider is allowed */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d15f      	bne.n	80020ba <HAL_RCC_OscConfig+0x116>
        {
          assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

          /* Adjust the HSE division factor */
          __HAL_RCC_HSE_CONFIG(RCC_HSE_ON | RCC_OscInitStruct->HSEDiv);
 8001ffa:	4b7f      	ldr	r3, [pc, #508]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	4313      	orrs	r3, r2
 8002008:	4a7b      	ldr	r2, [pc, #492]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 800200a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800200e:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSE value */
          SystemCoreClock = (HSE_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSEPRE)) >> RCC_CR_HSEPRE_Pos)));
 8002010:	4b79      	ldr	r3, [pc, #484]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0d1b      	lsrs	r3, r3, #20
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	4a78      	ldr	r2, [pc, #480]	@ (80021fc <HAL_RCC_OscConfig+0x258>)
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
 8002020:	4a77      	ldr	r2, [pc, #476]	@ (8002200 <HAL_RCC_OscConfig+0x25c>)
 8002022:	6013      	str	r3, [r2, #0]

          /* Adapt Systick interrupt period */
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002024:	4b77      	ldr	r3, [pc, #476]	@ (8002204 <HAL_RCC_OscConfig+0x260>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fb81 	bl	8001730 <HAL_InitTick>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d042      	beq.n	80020ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e398      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d01f      	beq.n	8002080 <HAL_RCC_OscConfig+0xdc>
      {
        assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG((RCC_OscInitStruct->HSEState | RCC_OscInitStruct->HSEDiv));
 8002040:	4b6d      	ldr	r3, [pc, #436]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	430b      	orrs	r3, r1
 8002052:	4969      	ldr	r1, [pc, #420]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7ff fbfc 	bl	8001854 <HAL_GetTick>
 800205c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0xce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002060:	f7ff fbf8 	bl	8001854 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	@ 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e37b      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002072:	4b61      	ldr	r3, [pc, #388]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0xbc>
 800207e:	e01d      	b.n	80020bc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002080:	4b5d      	ldr	r3, [pc, #372]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f423 1288 	bic.w	r2, r3, #1114112	@ 0x110000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	495a      	ldr	r1, [pc, #360]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7ff fbdf 	bl	8001854 <HAL_GetTick>
 8002096:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800209a:	f7ff fbdb 	bl	8001854 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b64      	cmp	r3, #100	@ 0x64
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e35e      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ac:	4b52      	ldr	r3, [pc, #328]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0xf6>
 80020b8:	e000      	b.n	80020bc <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80020ba:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d05a      	beq.n	800217e <HAL_RCC_OscConfig+0x1da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_RCC_OscConfig+0x136>
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	2b0c      	cmp	r3, #12
 80020d2:	d113      	bne.n	80020fc <HAL_RCC_OscConfig+0x158>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSI)))
 80020d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d110      	bne.n	80020fc <HAL_RCC_OscConfig+0x158>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_OscConfig+0x142>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e341      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e6:	4b44      	ldr	r3, [pc, #272]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	041b      	lsls	r3, r3, #16
 80020f4:	4940      	ldr	r1, [pc, #256]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	610b      	str	r3, [r1, #16]
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80020fa:	e040      	b.n	800217e <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d023      	beq.n	800214c <HAL_RCC_OscConfig+0x1a8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002104:	4b3c      	ldr	r3, [pc, #240]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a3b      	ldr	r2, [pc, #236]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 800210a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800210e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7ff fba0 	bl	8001854 <HAL_GetTick>
 8002114:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002118:	f7ff fb9c 	bl	8001854 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e31f      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800212a:	4b33      	ldr	r3, [pc, #204]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x174>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002136:	4b30      	ldr	r3, [pc, #192]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	041b      	lsls	r3, r3, #16
 8002144:	492c      	ldr	r1, [pc, #176]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 8002146:	4313      	orrs	r3, r2
 8002148:	610b      	str	r3, [r1, #16]
 800214a:	e018      	b.n	800217e <HAL_RCC_OscConfig+0x1da>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214c:	4b2a      	ldr	r3, [pc, #168]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a29      	ldr	r2, [pc, #164]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 8002152:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7ff fb7c 	bl	8001854 <HAL_GetTick>
 800215c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x1ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002160:	f7ff fb78 	bl	8001854 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e2fb      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002172:	4b21      	ldr	r3, [pc, #132]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x1bc>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 80d2 	beq.w	8002330 <HAL_RCC_OscConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Update LSI1 configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8002192:	4b19      	ldr	r3, [pc, #100]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 8002194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d111      	bne.n	80021c4 <HAL_RCC_OscConfig+0x220>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a0:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 80021a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021a6:	4a14      	ldr	r2, [pc, #80]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 80021a8:	f043 0304 	orr.w	r3, r3, #4
 80021ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80021b0:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <HAL_RCC_OscConfig+0x254>)
 80021b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80021be:	2301      	movs	r3, #1
 80021c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80021c4:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <HAL_RCC_OscConfig+0x264>)
 80021c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d123      	bne.n	8002218 <HAL_RCC_OscConfig+0x274>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80021d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002208 <HAL_RCC_OscConfig+0x264>)
 80021d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002208 <HAL_RCC_OscConfig+0x264>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021dc:	f7ff fb3a 	bl	8001854 <HAL_GetTick>
 80021e0:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80021e2:	e013      	b.n	800220c <HAL_RCC_OscConfig+0x268>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e4:	f7ff fb36 	bl	8001854 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d90c      	bls.n	800220c <HAL_RCC_OscConfig+0x268>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e2b9      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
 80021f6:	bf00      	nop
 80021f8:	46020c00 	.word	0x46020c00
 80021fc:	01e84800 	.word	0x01e84800
 8002200:	20000030 	.word	0x20000030
 8002204:	20000034 	.word	0x20000034
 8002208:	46020800 	.word	0x46020800
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800220c:	4ba4      	ldr	r3, [pc, #656]	@ (80024a0 <HAL_RCC_OscConfig+0x4fc>)
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0e5      	beq.n	80021e4 <HAL_RCC_OscConfig+0x240>
        }
      }
    }

    /* Get BDCR1 register value */
    tmpreg1 = RCC->BDCR1;
 8002218:	4ba2      	ldr	r3, [pc, #648]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 800221a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800221e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Define mask depending on LSI presence */
    mask = RCC_BDCR1_LSI1ON;
 8002220:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002224:	61bb      	str	r3, [r7, #24]
#if defined(RCC_LSI2_SUPPORT)
    mask |= RCC_BDCR1_LSI2ON;
#endif /* RCC_LSI2_SUPPORT */

    /* Check the LSI1 State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d056      	beq.n	80022dc <HAL_RCC_OscConfig+0x338>
    {
      if ((RCC_OscInitStruct->LSIState & RCC_LSI1_ON) != 0x00u)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d030      	beq.n	800229c <HAL_RCC_OscConfig+0x2f8>
      {
        /* Check LSI1 division factor */
        assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

        /* Check is LSIDiv is requested to be changed and LSI is already ON */
        if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_BDCR1_LSI1PREDIV)) && ((tmpreg1 & RCC_BDCR1_LSI1RDY) != 0x00u))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69da      	ldr	r2, [r3, #28]
 800223e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002244:	429a      	cmp	r2, r3
 8002246:	d020      	beq.n	800228a <HAL_RCC_OscConfig+0x2e6>
 8002248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800224a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d01b      	beq.n	800228a <HAL_RCC_OscConfig+0x2e6>
        {
          /* Disable LSI1 */
          tmpreg1 &= ~RCC_BDCR1_LSI1ON;
 8002252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002254:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002258:	62bb      	str	r3, [r7, #40]	@ 0x28
          RCC->BDCR1 = tmpreg1;
 800225a:	4a92      	ldr	r2, [pc, #584]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 800225c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002262:	f7ff faf7 	bl	8001854 <HAL_GetTick>
 8002266:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is disabled */
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x2d8>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226a:	f7ff faf3 	bl	8001854 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b14      	cmp	r3, #20
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x2d8>
            {
              /* LSI1 may be forced ON by IWDG */
              return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e276      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 800227c:	4b89      	ldr	r3, [pc, #548]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 800227e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002282:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1ef      	bne.n	800226a <HAL_RCC_OscConfig+0x2c6>
          HAL_Delay(1);
#endif
        }

        /* Set LSI1 division factor */
        tmpreg1 &= ~RCC_BDCR1_LSI1PREDIV;
 800228a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002290:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002298:	4313      	orrs	r3, r2
 800229a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Enable Concerned LSI */
      tmpreg1 |= RCC_OscInitStruct->LSIState;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022a2:	4313      	orrs	r3, r2
 80022a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 80022a6:	4a7f      	ldr	r2, [pc, #508]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 80022a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ae:	f7ff fad1 	bl	8001854 <HAL_GetTick>
 80022b2:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready : LSIRDY bit is position ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x324>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b6:	f7ff facd 	bl	8001854 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b14      	cmp	r3, #20
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x324>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e250      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 80022c8:	4b76      	ldr	r3, [pc, #472]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 80022ca:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0ed      	beq.n	80022b6 <HAL_RCC_OscConfig+0x312>
 80022da:	e01d      	b.n	8002318 <HAL_RCC_OscConfig+0x374>
#endif
    }
    else
    {
      /* Disable the Internal Low Speed oscillator LSI1 and LSI2 is available */
      tmpreg1 &= ~mask;
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	43db      	mvns	r3, r3
 80022e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022e2:	4013      	ands	r3, r2
 80022e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 80022e6:	4a6f      	ldr	r2, [pc, #444]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 80022e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ee:	f7ff fab1 	bl	8001854 <HAL_GetTick>
 80022f2:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is disabled : LSIRDY bit position is ON shifted by 1 */
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x364>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f6:	f7ff faad 	bl	8001854 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b14      	cmp	r3, #20
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x364>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e230      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8002308:	4b66      	ldr	r3, [pc, #408]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 800230a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4013      	ands	r3, r2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1ee      	bne.n	80022f6 <HAL_RCC_OscConfig+0x352>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002318:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800231c:	2b01      	cmp	r3, #1
 800231e:	d107      	bne.n	8002330 <HAL_RCC_OscConfig+0x38c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002320:	4b60      	ldr	r3, [pc, #384]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 8002322:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002326:	4a5f      	ldr	r2, [pc, #380]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 8002328:	f023 0304 	bic.w	r3, r3, #4
 800232c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80e2 	beq.w	8002502 <HAL_RCC_OscConfig+0x55e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8002344:	4b57      	ldr	r3, [pc, #348]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 8002346:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	d111      	bne.n	8002376 <HAL_RCC_OscConfig+0x3d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	4b54      	ldr	r3, [pc, #336]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 8002354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002358:	4a52      	ldr	r2, [pc, #328]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 800235a:	f043 0304 	orr.w	r3, r3, #4
 800235e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002362:	4b50      	ldr	r3, [pc, #320]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 8002364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002370:	2301      	movs	r3, #1
 8002372:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002376:	4b4a      	ldr	r3, [pc, #296]	@ (80024a0 <HAL_RCC_OscConfig+0x4fc>)
 8002378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d118      	bne.n	80023b4 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002382:	4b47      	ldr	r3, [pc, #284]	@ (80024a0 <HAL_RCC_OscConfig+0x4fc>)
 8002384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002386:	4a46      	ldr	r2, [pc, #280]	@ (80024a0 <HAL_RCC_OscConfig+0x4fc>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238e:	f7ff fa61 	bl	8001854 <HAL_GetTick>
 8002392:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002396:	f7ff fa5d 	bl	8001854 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e1e0      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80023a8:	4b3d      	ldr	r3, [pc, #244]	@ (80024a0 <HAL_RCC_OscConfig+0x4fc>)
 80023aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x3f2>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d051      	beq.n	8002460 <HAL_RCC_OscConfig+0x4bc>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_LSESYSEN);
 80023bc:	4b39      	ldr	r3, [pc, #228]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 80023be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023ce:	4313      	orrs	r3, r2
 80023d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      RCC->BDCR1 = tmpreg1;
 80023d2:	4a34      	ldr	r2, [pc, #208]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 80023d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023da:	f7ff fa3b 	bl	8001854 <HAL_GetTick>
 80023de:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 80023e0:	e00a      	b.n	80023f8 <HAL_RCC_OscConfig+0x454>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e2:	f7ff fa37 	bl	8001854 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x454>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e1b8      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 80023f8:	4b2a      	ldr	r3, [pc, #168]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 80023fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0ed      	beq.n	80023e2 <HAL_RCC_OscConfig+0x43e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR1_LSESYSEN) != 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800240e:	2b00      	cmp	r3, #0
 8002410:	d01e      	beq.n	8002450 <HAL_RCC_OscConfig+0x4ac>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 8002412:	e00a      	b.n	800242a <HAL_RCC_OscConfig+0x486>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f7ff fa1e 	bl	8001854 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x486>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e19f      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 800242a:	4b1e      	ldr	r3, [pc, #120]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 800242c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0ed      	beq.n	8002414 <HAL_RCC_OscConfig+0x470>
 8002438:	e057      	b.n	80024ea <HAL_RCC_OscConfig+0x546>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7ff fa0b 	bl	8001854 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e18c      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8002450:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 8002452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002456:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1ed      	bne.n	800243a <HAL_RCC_OscConfig+0x496>
 800245e:	e044      	b.n	80024ea <HAL_RCC_OscConfig+0x546>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR1, (RCC_BDCR1_LSEON | RCC_BDCR1_LSESYSEN));
 8002460:	4b10      	ldr	r3, [pc, #64]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 8002462:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002466:	4a0f      	ldr	r2, [pc, #60]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 8002468:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 800246c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR1, RCC_BDCR1_LSEBYP);
 8002470:	4b0c      	ldr	r3, [pc, #48]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 8002472:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002476:	4a0b      	ldr	r2, [pc, #44]	@ (80024a4 <HAL_RCC_OscConfig+0x500>)
 8002478:	f023 0304 	bic.w	r3, r3, #4
 800247c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002480:	f7ff f9e8 	bl	8001854 <HAL_GetTick>
 8002484:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8002486:	e00f      	b.n	80024a8 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002488:	f7ff f9e4 	bl	8001854 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d906      	bls.n	80024a8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e165      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
 800249e:	bf00      	nop
 80024a0:	46020800 	.word	0x46020800
 80024a4:	46020c00 	.word	0x46020c00
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 80024a8:	4b98      	ldr	r3, [pc, #608]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 80024aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1e8      	bne.n	8002488 <HAL_RCC_OscConfig+0x4e4>
        }
      }

      if (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSEN) != 0U)
 80024b6:	4b95      	ldr	r3, [pc, #596]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 80024b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d012      	beq.n	80024ea <HAL_RCC_OscConfig+0x546>
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7ff f9c5 	bl	8001854 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e146      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 80024dc:	4b8b      	ldr	r3, [pc, #556]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 80024de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1ed      	bne.n	80024c6 <HAL_RCC_OscConfig+0x522>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f2:	4b86      	ldr	r3, [pc, #536]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 80024f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024f8:	4a84      	ldr	r2, [pc, #528]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 80024fa:	f023 0304 	bic.w	r3, r3, #4
 80024fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if ((RCC_OscInitStruct->PLL1.PLLState) != RCC_PLL_NONE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 812e 	beq.w	8002768 <HAL_RCC_OscConfig+0x7c4>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	2b0c      	cmp	r3, #12
 8002510:	f000 80ba 	beq.w	8002688 <HAL_RCC_OscConfig+0x6e4>
    {
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_ON)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	2b02      	cmp	r3, #2
 800251a:	f040 8093 	bne.w	8002644 <HAL_RCC_OscConfig+0x6a0>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL1.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL1.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL1.PLLR));

        /* Disable the main PLL1. */
        tmpreg1 = (RCC->CR & ~RCC_CR_PLL1ON);
 800251e:	4b7b      	ldr	r3, [pc, #492]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002526:	62bb      	str	r3, [r7, #40]	@ 0x28
        RCC->CR = tmpreg1;
 8002528:	4a78      	ldr	r2, [pc, #480]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 800252a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800252c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252e:	f7ff f991 	bl	8001854 <HAL_GetTick>
 8002532:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        do
        {
          tmpreg1 = RCC->CR;
 8002534:	4b75      	ldr	r3, [pc, #468]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	62bb      	str	r3, [r7, #40]	@ 0x28
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253a:	f7ff f98b 	bl	8001854 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e10e      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
          }
        } while ((tmpreg1 & RCC_CR_PLL1RDY) != 0U);
 800254c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1ee      	bne.n	8002534 <HAL_RCC_OscConfig+0x590>

        /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
        if (RCC_OscInitStruct->PLL1.PLLSource == RCC_PLLSOURCE_HSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255a:	2b03      	cmp	r3, #3
 800255c:	d108      	bne.n	8002570 <HAL_RCC_OscConfig+0x5cc>
        {
          /* Clock source is HSE or HSE/2 */
          pllsrc = HSE_VALUE >> ((tmpreg1 & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos);
 800255e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002560:	0d1b      	lsrs	r3, r3, #20
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	4a6a      	ldr	r2, [pc, #424]	@ (8002710 <HAL_RCC_OscConfig+0x76c>)
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
 800256c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800256e:	e001      	b.n	8002574 <HAL_RCC_OscConfig+0x5d0>
        }
        else
        {
          /* Clock source is HSI */
          pllsrc = HSI_VALUE;
 8002570:	4b68      	ldr	r3, [pc, #416]	@ (8002714 <HAL_RCC_OscConfig+0x770>)
 8002572:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Compute VCO input frequency depending on M divider */
        pllsrc = (pllsrc / RCC_OscInitStruct->PLL1.PLLM);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800257a:	fbb2 f3f3 	udiv	r3, r2, r3
 800257e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllsrc));

        if (pllsrc > PLL_INPUTRANGE0_FREQMAX)
 8002580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002582:	4a65      	ldr	r2, [pc, #404]	@ (8002718 <HAL_RCC_OscConfig+0x774>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d902      	bls.n	800258e <HAL_RCC_OscConfig+0x5ea>
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE1;
 8002588:	230c      	movs	r3, #12
 800258a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800258c:	e001      	b.n	8002592 <HAL_RCC_OscConfig+0x5ee>
        }
        else
        {
          /* Reuse pllsrc local variable to store range */
          pllsrc = RCC_PLL_VCOINPUT_RANGE0;
 800258e:	2300      	movs	r3, #0
 8002590:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Configure PLL1 source, PLLM divider, VCO input range and enable PLL1R output. Clear also FRACEN*/
        tmpreg2 = RCC->PLL1CFGR;
 8002592:	4b5e      	ldr	r3, [pc, #376]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 8002594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002596:	617b      	str	r3, [r7, #20]
        tmpreg2 &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1RGE | RCC_PLL1CFGR_PLL1FRACEN | RCC_PLL1CFGR_PLL1M);
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f423 63e3 	bic.w	r3, r3, #1816	@ 0x718
 800259e:	f023 0307 	bic.w	r3, r3, #7
 80025a2:	617b      	str	r3, [r7, #20]
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025aa:	431a      	orrs	r2, r3
                    ((RCC_OscInitStruct->PLL1.PLLM - 1u) << RCC_PLL1CFGR_PLL1M_Pos) | RCC_PLL1CFGR_PLL1REN);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b0:	3b01      	subs	r3, #1
 80025b2:	021b      	lsls	r3, r3, #8
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 80025b4:	431a      	orrs	r2, r3
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025be:	617b      	str	r3, [r7, #20]
        RCC->PLL1CFGR = tmpreg2;
 80025c0:	4a52      	ldr	r2, [pc, #328]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLLN multiplication factor and PLLP, PLLQ, PLLR dividers */
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ca:	1e5a      	subs	r2, r3, #1
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d0:	3b01      	subs	r3, #1
 80025d2:	025b      	lsls	r3, r3, #9
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 80025d4:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLQ - 1u) << RCC_PLL1DIVR_PLL1Q_Pos) |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025da:	3b01      	subs	r3, #1
 80025dc:	041b      	lsls	r3, r3, #16
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 80025de:	431a      	orrs	r2, r3
                   ((RCC_OscInitStruct->PLL1.PLLR - 1u) << RCC_PLL1DIVR_PLL1R_Pos));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e4:	3b01      	subs	r3, #1
 80025e6:	061b      	lsls	r3, r3, #24
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
        RCC->PLL1DIVR = tmpreg2;
 80025ec:	4a47      	ldr	r2, [pc, #284]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	6353      	str	r3, [r2, #52]	@ 0x34

        if (RCC_OscInitStruct->PLL1.PLLFractional != 0x00u)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00a      	beq.n	8002610 <HAL_RCC_OscConfig+0x66c>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fe:	4a43      	ldr	r2, [pc, #268]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	6393      	str	r3, [r2, #56]	@ 0x38

          /* Enable PLL1FRACEN */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 8002604:	4b41      	ldr	r3, [pc, #260]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 8002606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002608:	4a40      	ldr	r2, [pc, #256]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 800260a:	f043 0310 	orr.w	r3, r3, #16
 800260e:	6293      	str	r3, [r2, #40]	@ 0x28
        }

        /* Enable the main PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002610:	4b3e      	ldr	r3, [pc, #248]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a3d      	ldr	r2, [pc, #244]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 8002616:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800261a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7ff f91a 	bl	8001854 <HAL_GetTick>
 8002620:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x692>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002624:	f7ff f916 	bl	8001854 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e099      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002636:	4b35      	ldr	r3, [pc, #212]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x680>
 8002642:	e091      	b.n	8002768 <HAL_RCC_OscConfig+0x7c4>
        }
      }
      else
      {
        /* Disable the main PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002644:	4b31      	ldr	r3, [pc, #196]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a30      	ldr	r2, [pc, #192]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 800264a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800264e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7ff f900 	bl	8001854 <HAL_GetTick>
 8002654:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x6c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002658:	f7ff f8fc 	bl	8001854 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x6c6>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e07f      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800266a:	4b28      	ldr	r3, [pc, #160]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x6b4>
          }
        }

        /* CLear the PLL1 source and disable outputs to save power when PLL1 is off */
        CLEAR_BIT(RCC->PLL1CFGR, (RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | \
 8002676:	4b25      	ldr	r3, [pc, #148]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 8002678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267a:	4a24      	ldr	r2, [pc, #144]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 800267c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002680:	f023 0303 	bic.w	r3, r3, #3
 8002684:	6293      	str	r3, [r2, #40]	@ 0x28
 8002686:	e06f      	b.n	8002768 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL1 used as System clock source */
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_RCC_OscConfig+0x6f0>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e06a      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        tmpreg1 = RCC->PLL1CFGR;
 8002694:	4b1d      	ldr	r3, [pc, #116]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 8002696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002698:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmpreg2 = RCC->PLL1DIVR;
 800269a:	4b1c      	ldr	r3, [pc, #112]	@ (800270c <HAL_RCC_OscConfig+0x768>)
 800269c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800269e:	617b      	str	r3, [r7, #20]

        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 80026a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a2:	f003 0203 	and.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d12b      	bne.n	8002706 <HAL_RCC_OscConfig+0x762>
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 80026ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	f003 0207 	and.w	r2, r3, #7
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ba:	3b01      	subs	r3, #1
        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d122      	bne.n	8002706 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ca:	3b01      	subs	r3, #1
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d11a      	bne.n	8002706 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	0a5b      	lsrs	r3, r3, #9
 80026d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026dc:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d111      	bne.n	8002706 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	0c1b      	lsrs	r3, r3, #16
 80026e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ee:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d108      	bne.n	8002706 <HAL_RCC_OscConfig+0x762>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) != (RCC_OscInitStruct->PLL1.PLLR - 1u)))
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	0e1b      	lsrs	r3, r3, #24
 80026f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002700:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 8002702:	429a      	cmp	r2, r3
 8002704:	d00a      	beq.n	800271c <HAL_RCC_OscConfig+0x778>
        {
          return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e02f      	b.n	800276a <HAL_RCC_OscConfig+0x7c6>
 800270a:	bf00      	nop
 800270c:	46020c00 	.word	0x46020c00
 8002710:	01e84800 	.word	0x01e84800
 8002714:	00f42400 	.word	0x00f42400
 8002718:	007a1200 	.word	0x007a1200
        }
        else
        {
          /* Check if only fractional part needs to be updated  */
          tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 800271c:	4b15      	ldr	r3, [pc, #84]	@ (8002774 <HAL_RCC_OscConfig+0x7d0>)
 800271e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002720:	08db      	lsrs	r3, r3, #3
 8002722:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002726:	62bb      	str	r3, [r7, #40]	@ 0x28

          if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800272c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800272e:	429a      	cmp	r2, r3
 8002730:	d01a      	beq.n	8002768 <HAL_RCC_OscConfig+0x7c4>
          {
            assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

            /* Disable PLL1FRACEN */
            __HAL_RCC_PLL1_FRACN_DISABLE();
 8002732:	4b10      	ldr	r3, [pc, #64]	@ (8002774 <HAL_RCC_OscConfig+0x7d0>)
 8002734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002736:	4a0f      	ldr	r2, [pc, #60]	@ (8002774 <HAL_RCC_OscConfig+0x7d0>)
 8002738:	f023 0310 	bic.w	r3, r3, #16
 800273c:	6293      	str	r3, [r2, #40]	@ 0x28

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800273e:	f7ff f889 	bl	8001854 <HAL_GetTick>
 8002742:	61f8      	str	r0, [r7, #28]

            /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
            while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002744:	bf00      	nop
 8002746:	f7ff f885 	bl	8001854 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	4293      	cmp	r3, r2
 8002750:	d0f9      	beq.n	8002746 <HAL_RCC_OscConfig+0x7a2>
            {
            }

            /* Configure PLL1 PLL1FRACN */
            __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002756:	4a07      	ldr	r2, [pc, #28]	@ (8002774 <HAL_RCC_OscConfig+0x7d0>)
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	6393      	str	r3, [r2, #56]	@ 0x38

            /* Enable PLL1FRACEN to latch new value. */
            __HAL_RCC_PLL1_FRACN_ENABLE();
 800275c:	4b05      	ldr	r3, [pc, #20]	@ (8002774 <HAL_RCC_OscConfig+0x7d0>)
 800275e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002760:	4a04      	ldr	r2, [pc, #16]	@ (8002774 <HAL_RCC_OscConfig+0x7d0>)
 8002762:	f043 0310 	orr.w	r3, r3, #16
 8002766:	6293      	str	r3, [r2, #40]	@ 0x28
          }
        }
      }
    }
  }
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3730      	adds	r7, #48	@ 0x30
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	46020c00 	.word	0x46020c00

08002778 <HAL_RCC_ClockConfig>:
  *         HCLK5 prescaler is switched automatically by hardware, but configuration shall
  *         always be performed before setting new PLL1 source as Sysclk source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e115      	b.n	80029b8 <HAL_RCC_ClockConfig+0x240>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800278c:	4b8c      	ldr	r3, [pc, #560]	@ (80029c0 <HAL_RCC_ClockConfig+0x248>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d910      	bls.n	80027bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b89      	ldr	r3, [pc, #548]	@ (80029c0 <HAL_RCC_ClockConfig+0x248>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 020f 	bic.w	r2, r3, #15
 80027a2:	4987      	ldr	r1, [pc, #540]	@ (80029c0 <HAL_RCC_ClockConfig+0x248>)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b85      	ldr	r3, [pc, #532]	@ (80029c0 <HAL_RCC_ClockConfig+0x248>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0fd      	b.n	80029b8 <HAL_RCC_ClockConfig+0x240>
  }

  /*-------------------------- HCLK5 Configuration --------------------------*/
  /* HCLK5 prescaler is switched automatically by hardware, but configuration shall
    always be performed before setting new PLL1 source as Sysclk source. */
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK5) == RCC_CLOCKTYPE_HCLK5)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00d      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x6c>
  {
    assert_param(IS_RCC_HCLK5_HSEHSI(RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
    assert_param(IS_RCC_HCLK5_PLL1(RCC_ClkInitStruct->AHB5_PLL1_CLKDivider));
    MODIFY_REG(RCC->CFGR4, (RCC_CFGR4_HDIV5 | RCC_CFGR4_HPRE5),
 80027c8:	4b7e      	ldr	r3, [pc, #504]	@ (80029c4 <HAL_RCC_ClockConfig+0x24c>)
 80027ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80027ce:	f023 0217 	bic.w	r2, r3, #23
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6999      	ldr	r1, [r3, #24]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	430b      	orrs	r3, r1
 80027dc:	4979      	ldr	r1, [pc, #484]	@ (80029c4 <HAL_RCC_ClockConfig+0x24c>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
               (RCC_ClkInitStruct->AHB5_PLL1_CLKDivider | RCC_ClkInitStruct->AHB5_HSEHSI_CLKDivider));
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d06f      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 80027f0:	4b74      	ldr	r3, [pc, #464]	@ (80029c4 <HAL_RCC_ClockConfig+0x24c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	617b      	str	r3, [r7, #20]

    /* PLL1 is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d118      	bne.n	8002830 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the PLL1 ready flag */
      if ((tmpreg1 & RCC_CR_PLL1RDY) == 0U)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0d5      	b.n	80029b8 <HAL_RCC_ClockConfig+0x240>
      }
      else
      {
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 800280c:	4b6d      	ldr	r3, [pc, #436]	@ (80029c4 <HAL_RCC_ClockConfig+0x24c>)
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	f003 020c 	and.w	r2, r3, #12
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	429a      	cmp	r2, r3
 800281c:	d01a      	beq.n	8002854 <HAL_RCC_ClockConfig+0xdc>
        {
          /* Whatever is PLL frequency, use step prediv to reach maximum frequency. */
          /* Select pll1r to be prediv with 2-step divider when selected as Sysclk source */
          MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRESTEP, RCC_PLL1CFGR_PLL1RCLKPRE);
 800281e:	4b69      	ldr	r3, [pc, #420]	@ (80029c4 <HAL_RCC_ClockConfig+0x24c>)
 8002820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002822:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002826:	4a67      	ldr	r2, [pc, #412]	@ (80029c4 <HAL_RCC_ClockConfig+0x24c>)
 8002828:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800282c:	6293      	str	r3, [r2, #40]	@ 0x28
 800282e:	e011      	b.n	8002854 <HAL_RCC_ClockConfig+0xdc>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d106      	bne.n	8002846 <HAL_RCC_ClockConfig+0xce>
      {
        /* Check the HSE ready flag */
        if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d108      	bne.n	8002854 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e0b8      	b.n	80029b8 <HAL_RCC_ClockConfig+0x240>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0b1      	b.n	80029b8 <HAL_RCC_ClockConfig+0x240>
        }
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002854:	4b5b      	ldr	r3, [pc, #364]	@ (80029c4 <HAL_RCC_ClockConfig+0x24c>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	f023 0203 	bic.w	r2, r3, #3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4958      	ldr	r1, [pc, #352]	@ (80029c4 <HAL_RCC_ClockConfig+0x24c>)
 8002862:	4313      	orrs	r3, r2
 8002864:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002866:	f7fe fff5 	bl	8001854 <HAL_GetTick>
 800286a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 800286c:	e00a      	b.n	8002884 <HAL_RCC_ClockConfig+0x10c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286e:	f7fe fff1 	bl	8001854 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e099      	b.n	80029b8 <HAL_RCC_ClockConfig+0x240>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8002884:	4b4f      	ldr	r3, [pc, #316]	@ (80029c4 <HAL_RCC_ClockConfig+0x24c>)
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	f003 020c 	and.w	r2, r3, #12
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	429a      	cmp	r2, r3
 8002894:	d1eb      	bne.n	800286e <HAL_RCC_ClockConfig+0xf6>
      }
    }

    /* If PLL1rCLK is asked to be SYSCLK source, clear prediv. */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d118      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x158>
    {
      /* Set PLL1R prediv to not divided */
      CLEAR_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRE);
 800289e:	4b49      	ldr	r3, [pc, #292]	@ (80029c4 <HAL_RCC_ClockConfig+0x24c>)
 80028a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a2:	4a48      	ldr	r2, [pc, #288]	@ (80029c4 <HAL_RCC_ClockConfig+0x24c>)
 80028a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80028a8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7fe ffd3 	bl	8001854 <HAL_GetTick>
 80028ae:	60f8      	str	r0, [r7, #12]

      /* Wait until PLL1 not divided is ready */
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_ClockConfig+0x14c>
      {
        if ((HAL_GetTick() - tickstart) > PLL1_NDIV_TIMEOUT_VALUE)
 80028b2:	f7fe ffcf 	bl	8001854 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b0a      	cmp	r3, #10
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_ClockConfig+0x14c>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e079      	b.n	80029b8 <HAL_RCC_ClockConfig+0x240>
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 80028c4:	4b3f      	ldr	r3, [pc, #252]	@ (80029c4 <HAL_RCC_ClockConfig+0x24c>)
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 80028d0:	4b3c      	ldr	r3, [pc, #240]	@ (80029c4 <HAL_RCC_ClockConfig+0x24c>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f023 0307 	bic.w	r3, r3, #7
 80028ec:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80028f8:	2301      	movs	r3, #1
 80028fa:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800290e:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 800291a:	2301      	movs	r3, #1
 800291c:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <HAL_RCC_ClockConfig+0x1ca>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002930:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 800293e:	2301      	movs	r3, #1
 8002940:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <HAL_RCC_ClockConfig+0x1d6>
  {
    RCC->CFGR2 = tmpreg1;
 8002948:	4a1e      	ldr	r2, [pc, #120]	@ (80029c4 <HAL_RCC_ClockConfig+0x24c>)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK7 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK7) == RCC_CLOCKTYPE_PCLK7)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB7CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB7CLKDivider);
 800295a:	4a1a      	ldr	r2, [pc, #104]	@ (80029c4 <HAL_RCC_ClockConfig+0x24c>)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002962:	4b17      	ldr	r3, [pc, #92]	@ (80029c0 <HAL_RCC_ClockConfig+0x248>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d210      	bcs.n	8002992 <HAL_RCC_ClockConfig+0x21a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002970:	4b13      	ldr	r3, [pc, #76]	@ (80029c0 <HAL_RCC_ClockConfig+0x248>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 020f 	bic.w	r2, r3, #15
 8002978:	4911      	ldr	r1, [pc, #68]	@ (80029c0 <HAL_RCC_ClockConfig+0x248>)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002980:	4b0f      	ldr	r3, [pc, #60]	@ (80029c0 <HAL_RCC_ClockConfig+0x248>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d001      	beq.n	8002992 <HAL_RCC_ClockConfig+0x21a>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e012      	b.n	80029b8 <HAL_RCC_ClockConfig+0x240>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002992:	f000 f81f 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 8002996:	4602      	mov	r2, r0
 8002998:	4b0a      	ldr	r3, [pc, #40]	@ (80029c4 <HAL_RCC_ClockConfig+0x24c>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4909      	ldr	r1, [pc, #36]	@ (80029c8 <HAL_RCC_ClockConfig+0x250>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
 80029a8:	4a08      	ldr	r2, [pc, #32]	@ (80029cc <HAL_RCC_ClockConfig+0x254>)
 80029aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029ac:	4b08      	ldr	r3, [pc, #32]	@ (80029d0 <HAL_RCC_ClockConfig+0x258>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe febd 	bl	8001730 <HAL_InitTick>
 80029b6:	4603      	mov	r3, r0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40022000 	.word	0x40022000
 80029c4:	46020c00 	.word	0x46020c00
 80029c8:	08006088 	.word	0x08006088
 80029cc:	20000030 	.word	0x20000030
 80029d0:	20000034 	.word	0x20000034

080029d4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
  uint32_t sysclk;

  /* Get SYSCLK source */
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029da:	4b10      	ldr	r3, [pc, #64]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x48>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	607b      	str	r3, [r7, #4]

  if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d102      	bne.n	80029f0 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 80029ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002a20 <HAL_RCC_GetSysClockFreq+0x4c>)
 80029ec:	607b      	str	r3, [r7, #4]
 80029ee:	e00f      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d109      	bne.n	8002a0a <HAL_RCC_GetSysClockFreq+0x36>
  {
    /* HSE used as system clock source. Check if HSE is divided by 2 */
    sysclk = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 80029f6:	4b09      	ldr	r3, [pc, #36]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x48>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	0d1b      	lsrs	r3, r3, #20
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	4a08      	ldr	r2, [pc, #32]	@ (8002a24 <HAL_RCC_GetSysClockFreq+0x50>)
 8002a02:	fa22 f303 	lsr.w	r3, r2, r3
 8002a06:	607b      	str	r3, [r7, #4]
 8002a08:	e002      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x3c>
  }
  else
  {
    /* PLL1 used as system clock source */
    sysclk = HAL_RCC_GetPLL1RFreq();
 8002a0a:	f000 f80d 	bl	8002a28 <HAL_RCC_GetPLL1RFreq>
 8002a0e:	6078      	str	r0, [r7, #4]
  }

  return sysclk;
 8002a10:	687b      	ldr	r3, [r7, #4]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	46020c00 	.word	0x46020c00
 8002a20:	00f42400 	.word	0x00f42400
 8002a24:	01e84800 	.word	0x01e84800

08002a28 <HAL_RCC_GetPLL1RFreq>:
/**
  * @brief  Return the PLL1R frequency.
  * @retval PLL1R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL1RFreq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL1R divider */
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <HAL_RCC_GetPLL1RFreq+0x34>)
 8002a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a32:	0e1b      	lsrs	r3, r3, #24
 8002a34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a38:	3301      	adds	r3, #1
 8002a3a:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL1R one */
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 8002a3c:	f000 f810 	bl	8002a60 <RCC_PLL1_GetVCOOutputFreq>
 8002a40:	eef0 7a40 	vmov.f32	s15, s0
 8002a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a48:	ee17 2a90 	vmov	r2, s15
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	46020c00 	.word	0x46020c00

08002a60 <RCC_PLL1_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL1 VCO output frequency
  * @retval Value of PLL1 VCO output frequency
  */
static float_t RCC_PLL1_GetVCOOutputFreq(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
  float_t pllm;
  float_t plln;
  float_t pllfracn;

  /* Get PLL1 DIVR register value */
  tmpreg1 = RCC->PLL1DIVR;
 8002a66:	4b36      	ldr	r3, [pc, #216]	@ (8002b40 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8002a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 multiplication factor */
  tmp = (tmpreg1 & RCC_PLL1DIVR_PLL1N) + 1U;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a72:	3301      	adds	r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
  plln = (float_t) tmp;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	ee07 3a90 	vmov	s15, r3
 8002a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a80:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Get PLL1 CFGR register value */
  tmpreg1 = RCC->PLL1CFGR;
 8002a84:	4b2e      	ldr	r3, [pc, #184]	@ (8002b40 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8002a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Retrieve PLL1 divider */
  tmp = ((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	3301      	adds	r3, #1
 8002a94:	617b      	str	r3, [r7, #20]
  pllm = (float_t) tmp;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	ee07 3a90 	vmov	s15, r3
 8002a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa0:	edc7 7a01 	vstr	s15, [r7, #4]

  /* Check if fractional part is enable */
  if ((tmpreg1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d006      	beq.n	8002abc <RCC_PLL1_GetVCOOutputFreq+0x5c>
  {
    tmp = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 8002aae:	4b24      	ldr	r3, [pc, #144]	@ (8002b40 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab2:	08db      	lsrs	r3, r3, #3
 8002ab4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	e001      	b.n	8002ac0 <RCC_PLL1_GetVCOOutputFreq+0x60>
  }
  else
  {
    tmp = 0u;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
  }
  pllfracn = (float_t)tmp;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	ee07 3a90 	vmov	s15, r3
 8002ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aca:	edc7 7a00 	vstr	s15, [r7]

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLL1CFGR_PLL1SRC)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d002      	beq.n	8002ade <RCC_PLL1_GetVCOOutputFreq+0x7e>
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d003      	beq.n	8002ae4 <RCC_PLL1_GetVCOOutputFreq+0x84>
 8002adc:	e013      	b.n	8002b06 <RCC_PLL1_GetVCOOutputFreq+0xa6>
  {
    /* HSI used as PLL1 clock source */
    case RCC_PLLSOURCE_HSI:
      pllsrc = (float_t)HSI_VALUE;
 8002ade:	4b19      	ldr	r3, [pc, #100]	@ (8002b44 <RCC_PLL1_GetVCOOutputFreq+0xe4>)
 8002ae0:	613b      	str	r3, [r7, #16]
      break;
 8002ae2:	e014      	b.n	8002b0e <RCC_PLL1_GetVCOOutputFreq+0xae>

    /* HSE used as PLL1 clock source */
    case RCC_PLLSOURCE_HSE:
      tmp = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8002ae4:	4b16      	ldr	r3, [pc, #88]	@ (8002b40 <RCC_PLL1_GetVCOOutputFreq+0xe0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	0d1b      	lsrs	r3, r3, #20
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	4a16      	ldr	r2, [pc, #88]	@ (8002b48 <RCC_PLL1_GetVCOOutputFreq+0xe8>)
 8002af0:	fa22 f303 	lsr.w	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]
      pllsrc = (float_t)tmp;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	ee07 3a90 	vmov	s15, r3
 8002afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b00:	edc7 7a04 	vstr	s15, [r7, #16]
      break;
 8002b04:	e003      	b.n	8002b0e <RCC_PLL1_GetVCOOutputFreq+0xae>

    default:
      pllsrc = (float_t)0;
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
      break;
 8002b0c:	bf00      	nop
  }

  /* Compute VCO output frequency */
  return ((pllsrc / pllm) * (plln + (pllfracn / (float_t)0x2000u)));
 8002b0e:	edd7 6a04 	vldr	s13, [r7, #16]
 8002b12:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b1a:	edd7 7a00 	vldr	s15, [r7]
 8002b1e:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8002b4c <RCC_PLL1_GetVCOOutputFreq+0xec>
 8002b22:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002b26:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002b32:	eeb0 0a67 	vmov.f32	s0, s15
 8002b36:	371c      	adds	r7, #28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	46020c00 	.word	0x46020c00
 8002b44:	4b742400 	.word	0x4b742400
 8002b48:	01e84800 	.word	0x01e84800
 8002b4c:	46000000 	.word	0x46000000

08002b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e049      	b.n	8002bf6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe fb86 	bl	8001288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4610      	mov	r0, r2
 8002b90:	f000 f910 	bl	8002db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_TIM_ConfigClockSource+0x1c>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e0c2      	b.n	8002da2 <HAL_TIM_ConfigClockSource+0x1a2>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002c3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a55      	ldr	r2, [pc, #340]	@ (8002dac <HAL_TIM_ConfigClockSource+0x1ac>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	f000 808d 	beq.w	8002d76 <HAL_TIM_ConfigClockSource+0x176>
 8002c5c:	4a53      	ldr	r2, [pc, #332]	@ (8002dac <HAL_TIM_ConfigClockSource+0x1ac>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	f200 8092 	bhi.w	8002d88 <HAL_TIM_ConfigClockSource+0x188>
 8002c64:	4a52      	ldr	r2, [pc, #328]	@ (8002db0 <HAL_TIM_ConfigClockSource+0x1b0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	f000 8085 	beq.w	8002d76 <HAL_TIM_ConfigClockSource+0x176>
 8002c6c:	4a50      	ldr	r2, [pc, #320]	@ (8002db0 <HAL_TIM_ConfigClockSource+0x1b0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	f200 808a 	bhi.w	8002d88 <HAL_TIM_ConfigClockSource+0x188>
 8002c74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c78:	d03a      	beq.n	8002cf0 <HAL_TIM_ConfigClockSource+0xf0>
 8002c7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c7e:	f200 8083 	bhi.w	8002d88 <HAL_TIM_ConfigClockSource+0x188>
 8002c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c86:	f000 8082 	beq.w	8002d8e <HAL_TIM_ConfigClockSource+0x18e>
 8002c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c8e:	d87b      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x188>
 8002c90:	2b70      	cmp	r3, #112	@ 0x70
 8002c92:	d016      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0xc2>
 8002c94:	2b70      	cmp	r3, #112	@ 0x70
 8002c96:	d877      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x188>
 8002c98:	2b60      	cmp	r3, #96	@ 0x60
 8002c9a:	d04c      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x136>
 8002c9c:	2b60      	cmp	r3, #96	@ 0x60
 8002c9e:	d873      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x188>
 8002ca0:	2b50      	cmp	r3, #80	@ 0x50
 8002ca2:	d038      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0x116>
 8002ca4:	2b50      	cmp	r3, #80	@ 0x50
 8002ca6:	d86f      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x188>
 8002ca8:	2b40      	cmp	r3, #64	@ 0x40
 8002caa:	d054      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x156>
 8002cac:	2b40      	cmp	r3, #64	@ 0x40
 8002cae:	d86b      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x188>
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d060      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x176>
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d867      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x188>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d05c      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x176>
 8002cbc:	2b10      	cmp	r3, #16
 8002cbe:	d05a      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x176>
 8002cc0:	e062      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x188>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cd2:	f000 f965 	bl	8002fa0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ce4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	609a      	str	r2, [r3, #8]
      break;
 8002cee:	e04f      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x190>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d00:	f000 f94e 	bl	8002fa0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d12:	609a      	str	r2, [r3, #8]
      break;
 8002d14:	e03c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x190>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d22:	461a      	mov	r2, r3
 8002d24:	f000 f8c0 	bl	8002ea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2150      	movs	r1, #80	@ 0x50
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f919 	bl	8002f66 <TIM_ITRx_SetConfig>
      break;
 8002d34:	e02c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x190>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d42:	461a      	mov	r2, r3
 8002d44:	f000 f8df 	bl	8002f06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2160      	movs	r1, #96	@ 0x60
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f909 	bl	8002f66 <TIM_ITRx_SetConfig>
      break;
 8002d54:	e01c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x190>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 f8a0 	bl	8002ea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2140      	movs	r1, #64	@ 0x40
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f8f9 	bl	8002f66 <TIM_ITRx_SetConfig>
      break;
 8002d74:	e00c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x190>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4610      	mov	r0, r2
 8002d82:	f000 f8f0 	bl	8002f66 <TIM_ITRx_SetConfig>
      break;
 8002d86:	e003      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x190>
    }

    default:
      status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8c:	e000      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x190>
      break;
 8002d8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	00100040 	.word	0x00100040
 8002db0:	00100030 	.word	0x00100030

08002db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a34      	ldr	r2, [pc, #208]	@ (8002e98 <TIM_Base_SetConfig+0xe4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d007      	beq.n	8002ddc <TIM_Base_SetConfig+0x28>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd2:	d003      	beq.n	8002ddc <TIM_Base_SetConfig+0x28>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a31      	ldr	r2, [pc, #196]	@ (8002e9c <TIM_Base_SetConfig+0xe8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d108      	bne.n	8002dee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a29      	ldr	r2, [pc, #164]	@ (8002e98 <TIM_Base_SetConfig+0xe4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00f      	beq.n	8002e16 <TIM_Base_SetConfig+0x62>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dfc:	d00b      	beq.n	8002e16 <TIM_Base_SetConfig+0x62>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a26      	ldr	r2, [pc, #152]	@ (8002e9c <TIM_Base_SetConfig+0xe8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d007      	beq.n	8002e16 <TIM_Base_SetConfig+0x62>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a25      	ldr	r2, [pc, #148]	@ (8002ea0 <TIM_Base_SetConfig+0xec>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d003      	beq.n	8002e16 <TIM_Base_SetConfig+0x62>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a24      	ldr	r2, [pc, #144]	@ (8002ea4 <TIM_Base_SetConfig+0xf0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d108      	bne.n	8002e28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a12      	ldr	r2, [pc, #72]	@ (8002e98 <TIM_Base_SetConfig+0xe4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d007      	beq.n	8002e64 <TIM_Base_SetConfig+0xb0>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a12      	ldr	r2, [pc, #72]	@ (8002ea0 <TIM_Base_SetConfig+0xec>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d003      	beq.n	8002e64 <TIM_Base_SetConfig+0xb0>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a11      	ldr	r2, [pc, #68]	@ (8002ea4 <TIM_Base_SetConfig+0xf0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d103      	bne.n	8002e6c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d105      	bne.n	8002e8a <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f023 0201 	bic.w	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	611a      	str	r2, [r3, #16]
  }
}
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40012c00 	.word	0x40012c00
 8002e9c:	40000400 	.word	0x40000400
 8002ea0:	40014400 	.word	0x40014400
 8002ea4:	40014800 	.word	0x40014800

08002ea8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	f023 0201 	bic.w	r2, r3, #1
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f023 030a 	bic.w	r3, r3, #10
 8002ee4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	621a      	str	r2, [r3, #32]
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b087      	sub	sp, #28
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	f023 0210 	bic.w	r2, r3, #16
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	031b      	lsls	r3, r3, #12
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	621a      	str	r2, [r3, #32]
}
 8002f5a:	bf00      	nop
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b085      	sub	sp, #20
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002f7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f043 0307 	orr.w	r3, r3, #7
 8002f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	609a      	str	r2, [r3, #8]
}
 8002f94:	bf00      	nop
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	021a      	lsls	r2, r3, #8
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	609a      	str	r2, [r3, #8]
}
 8002fd4:	bf00      	nop
 8002fd6:	371c      	adds	r7, #28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e051      	b.n	800309c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a22      	ldr	r2, [pc, #136]	@ (80030a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d108      	bne.n	8003034 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003028:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800303a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800303e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a14      	ldr	r2, [pc, #80]	@ (80030a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d009      	beq.n	8003070 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003064:	d004      	beq.n	8003070 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a10      	ldr	r2, [pc, #64]	@ (80030ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d10c      	bne.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003076:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	4313      	orrs	r3, r2
 8003080:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	40012c00 	.word	0x40012c00
 80030ac:	40000400 	.word	0x40000400

080030b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	@ 0x28
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d17b      	bne.n	80031c2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <HAL_UART_Transmit+0x26>
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e074      	b.n	80031c4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2221      	movs	r2, #33	@ 0x21
 80030e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030ea:	f7fe fbb3 	bl	8001854 <HAL_GetTick>
 80030ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	88fa      	ldrh	r2, [r7, #6]
 80030f4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	88fa      	ldrh	r2, [r7, #6]
 80030fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003108:	d108      	bne.n	800311c <HAL_UART_Transmit+0x6c>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d104      	bne.n	800311c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	e003      	b.n	8003124 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003120:	2300      	movs	r3, #0
 8003122:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003124:	e030      	b.n	8003188 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2200      	movs	r2, #0
 800312e:	2180      	movs	r1, #128	@ 0x80
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f84b 	bl	80031cc <UART_WaitOnFlagUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e03d      	b.n	80031c4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10b      	bne.n	8003166 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800315c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	3302      	adds	r3, #2
 8003162:	61bb      	str	r3, [r7, #24]
 8003164:	e007      	b.n	8003176 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	781a      	ldrb	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	3301      	adds	r3, #1
 8003174:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1c8      	bne.n	8003126 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2200      	movs	r2, #0
 800319c:	2140      	movs	r1, #64	@ 0x40
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f814 	bl	80031cc <UART_WaitOnFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e006      	b.n	80031c4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	e000      	b.n	80031c4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80031c2:	2302      	movs	r3, #2
  }
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3720      	adds	r7, #32
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	4613      	mov	r3, r2
 80031da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031dc:	e04f      	b.n	800327e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d04b      	beq.n	800327e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e6:	f7fe fb35 	bl	8001854 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d302      	bcc.n	80031fc <UART_WaitOnFlagUntilTimeout+0x30>
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e04e      	b.n	800329e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b00      	cmp	r3, #0
 800320c:	d037      	beq.n	800327e <UART_WaitOnFlagUntilTimeout+0xb2>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2b80      	cmp	r3, #128	@ 0x80
 8003212:	d034      	beq.n	800327e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b40      	cmp	r3, #64	@ 0x40
 8003218:	d031      	beq.n	800327e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b08      	cmp	r3, #8
 8003226:	d110      	bne.n	800324a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2208      	movs	r2, #8
 800322e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 f838 	bl	80032a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2208      	movs	r2, #8
 800323a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e029      	b.n	800329e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003254:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003258:	d111      	bne.n	800327e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003262:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f81e 	bl	80032a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e00f      	b.n	800329e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69da      	ldr	r2, [r3, #28]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4013      	ands	r3, r2
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	429a      	cmp	r2, r3
 800328c:	bf0c      	ite	eq
 800328e:	2301      	moveq	r3, #1
 8003290:	2300      	movne	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	429a      	cmp	r2, r3
 800329a:	d0a0      	beq.n	80031de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b095      	sub	sp, #84	@ 0x54
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b6:	e853 3f00 	ldrex	r3, [r3]
 80032ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80032ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032d4:	e841 2300 	strex	r3, r2, [r1]
 80032d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e6      	bne.n	80032ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3308      	adds	r3, #8
 80032e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	e853 3f00 	ldrex	r3, [r3]
 80032ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032f6:	f023 0301 	bic.w	r3, r3, #1
 80032fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3308      	adds	r3, #8
 8003302:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003304:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003306:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003308:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800330a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800330c:	e841 2300 	strex	r3, r2, [r1]
 8003310:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e3      	bne.n	80032e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800331c:	2b01      	cmp	r3, #1
 800331e:	d118      	bne.n	8003352 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	e853 3f00 	ldrex	r3, [r3]
 800332c:	60bb      	str	r3, [r7, #8]
   return(result);
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f023 0310 	bic.w	r3, r3, #16
 8003334:	647b      	str	r3, [r7, #68]	@ 0x44
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800333e:	61bb      	str	r3, [r7, #24]
 8003340:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003342:	6979      	ldr	r1, [r7, #20]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	e841 2300 	strex	r3, r2, [r1]
 800334a:	613b      	str	r3, [r7, #16]
   return(result);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1e6      	bne.n	8003320 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2220      	movs	r2, #32
 8003356:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003366:	bf00      	nop
 8003368:	3754      	adds	r7, #84	@ 0x54
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <__cvt>:
 8003372:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003376:	ec57 6b10 	vmov	r6, r7, d0
 800337a:	2f00      	cmp	r7, #0
 800337c:	460c      	mov	r4, r1
 800337e:	4619      	mov	r1, r3
 8003380:	463b      	mov	r3, r7
 8003382:	bfb4      	ite	lt
 8003384:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003388:	2300      	movge	r3, #0
 800338a:	4691      	mov	r9, r2
 800338c:	bfbf      	itttt	lt
 800338e:	4632      	movlt	r2, r6
 8003390:	461f      	movlt	r7, r3
 8003392:	232d      	movlt	r3, #45	@ 0x2d
 8003394:	4616      	movlt	r6, r2
 8003396:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800339a:	700b      	strb	r3, [r1, #0]
 800339c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800339e:	f023 0820 	bic.w	r8, r3, #32
 80033a2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80033a6:	d005      	beq.n	80033b4 <__cvt+0x42>
 80033a8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80033ac:	d100      	bne.n	80033b0 <__cvt+0x3e>
 80033ae:	3401      	adds	r4, #1
 80033b0:	2102      	movs	r1, #2
 80033b2:	e000      	b.n	80033b6 <__cvt+0x44>
 80033b4:	2103      	movs	r1, #3
 80033b6:	ab03      	add	r3, sp, #12
 80033b8:	4622      	mov	r2, r4
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	ab02      	add	r3, sp, #8
 80033be:	ec47 6b10 	vmov	d0, r6, r7
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	4653      	mov	r3, sl
 80033c6:	f000 fe6f 	bl	80040a8 <_dtoa_r>
 80033ca:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80033ce:	4605      	mov	r5, r0
 80033d0:	d119      	bne.n	8003406 <__cvt+0x94>
 80033d2:	f019 0f01 	tst.w	r9, #1
 80033d6:	d00e      	beq.n	80033f6 <__cvt+0x84>
 80033d8:	eb00 0904 	add.w	r9, r0, r4
 80033dc:	2200      	movs	r2, #0
 80033de:	2300      	movs	r3, #0
 80033e0:	4630      	mov	r0, r6
 80033e2:	4639      	mov	r1, r7
 80033e4:	f7fd fb08 	bl	80009f8 <__aeabi_dcmpeq>
 80033e8:	b108      	cbz	r0, 80033ee <__cvt+0x7c>
 80033ea:	f8cd 900c 	str.w	r9, [sp, #12]
 80033ee:	2230      	movs	r2, #48	@ 0x30
 80033f0:	9b03      	ldr	r3, [sp, #12]
 80033f2:	454b      	cmp	r3, r9
 80033f4:	d31e      	bcc.n	8003434 <__cvt+0xc2>
 80033f6:	9b03      	ldr	r3, [sp, #12]
 80033f8:	4628      	mov	r0, r5
 80033fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80033fc:	1b5b      	subs	r3, r3, r5
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	b004      	add	sp, #16
 8003402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003406:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800340a:	eb00 0904 	add.w	r9, r0, r4
 800340e:	d1e5      	bne.n	80033dc <__cvt+0x6a>
 8003410:	7803      	ldrb	r3, [r0, #0]
 8003412:	2b30      	cmp	r3, #48	@ 0x30
 8003414:	d10a      	bne.n	800342c <__cvt+0xba>
 8003416:	2200      	movs	r2, #0
 8003418:	2300      	movs	r3, #0
 800341a:	4630      	mov	r0, r6
 800341c:	4639      	mov	r1, r7
 800341e:	f7fd faeb 	bl	80009f8 <__aeabi_dcmpeq>
 8003422:	b918      	cbnz	r0, 800342c <__cvt+0xba>
 8003424:	f1c4 0401 	rsb	r4, r4, #1
 8003428:	f8ca 4000 	str.w	r4, [sl]
 800342c:	f8da 3000 	ldr.w	r3, [sl]
 8003430:	4499      	add	r9, r3
 8003432:	e7d3      	b.n	80033dc <__cvt+0x6a>
 8003434:	1c59      	adds	r1, r3, #1
 8003436:	9103      	str	r1, [sp, #12]
 8003438:	701a      	strb	r2, [r3, #0]
 800343a:	e7d9      	b.n	80033f0 <__cvt+0x7e>

0800343c <__exponent>:
 800343c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800343e:	2900      	cmp	r1, #0
 8003440:	7002      	strb	r2, [r0, #0]
 8003442:	bfba      	itte	lt
 8003444:	4249      	neglt	r1, r1
 8003446:	232d      	movlt	r3, #45	@ 0x2d
 8003448:	232b      	movge	r3, #43	@ 0x2b
 800344a:	2909      	cmp	r1, #9
 800344c:	7043      	strb	r3, [r0, #1]
 800344e:	dd28      	ble.n	80034a2 <__exponent+0x66>
 8003450:	f10d 0307 	add.w	r3, sp, #7
 8003454:	270a      	movs	r7, #10
 8003456:	461d      	mov	r5, r3
 8003458:	461a      	mov	r2, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003460:	fb07 1416 	mls	r4, r7, r6, r1
 8003464:	3430      	adds	r4, #48	@ 0x30
 8003466:	f802 4c01 	strb.w	r4, [r2, #-1]
 800346a:	460c      	mov	r4, r1
 800346c:	4631      	mov	r1, r6
 800346e:	2c63      	cmp	r4, #99	@ 0x63
 8003470:	dcf2      	bgt.n	8003458 <__exponent+0x1c>
 8003472:	3130      	adds	r1, #48	@ 0x30
 8003474:	1e94      	subs	r4, r2, #2
 8003476:	f803 1c01 	strb.w	r1, [r3, #-1]
 800347a:	1c41      	adds	r1, r0, #1
 800347c:	4623      	mov	r3, r4
 800347e:	42ab      	cmp	r3, r5
 8003480:	d30a      	bcc.n	8003498 <__exponent+0x5c>
 8003482:	f10d 0309 	add.w	r3, sp, #9
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	42ac      	cmp	r4, r5
 800348a:	bf88      	it	hi
 800348c:	2300      	movhi	r3, #0
 800348e:	3302      	adds	r3, #2
 8003490:	4403      	add	r3, r0
 8003492:	1a18      	subs	r0, r3, r0
 8003494:	b003      	add	sp, #12
 8003496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003498:	f813 6b01 	ldrb.w	r6, [r3], #1
 800349c:	f801 6f01 	strb.w	r6, [r1, #1]!
 80034a0:	e7ed      	b.n	800347e <__exponent+0x42>
 80034a2:	2330      	movs	r3, #48	@ 0x30
 80034a4:	3130      	adds	r1, #48	@ 0x30
 80034a6:	7083      	strb	r3, [r0, #2]
 80034a8:	1d03      	adds	r3, r0, #4
 80034aa:	70c1      	strb	r1, [r0, #3]
 80034ac:	e7f1      	b.n	8003492 <__exponent+0x56>
	...

080034b0 <_printf_float>:
 80034b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b4:	b08d      	sub	sp, #52	@ 0x34
 80034b6:	460c      	mov	r4, r1
 80034b8:	4616      	mov	r6, r2
 80034ba:	461f      	mov	r7, r3
 80034bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80034c0:	4605      	mov	r5, r0
 80034c2:	f000 fcdf 	bl	8003e84 <_localeconv_r>
 80034c6:	6803      	ldr	r3, [r0, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	9304      	str	r3, [sp, #16]
 80034cc:	f7fc fe68 	bl	80001a0 <strlen>
 80034d0:	2300      	movs	r3, #0
 80034d2:	9005      	str	r0, [sp, #20]
 80034d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80034d6:	f8d8 3000 	ldr.w	r3, [r8]
 80034da:	f894 a018 	ldrb.w	sl, [r4, #24]
 80034de:	3307      	adds	r3, #7
 80034e0:	f8d4 b000 	ldr.w	fp, [r4]
 80034e4:	f023 0307 	bic.w	r3, r3, #7
 80034e8:	f103 0208 	add.w	r2, r3, #8
 80034ec:	f8c8 2000 	str.w	r2, [r8]
 80034f0:	f04f 32ff 	mov.w	r2, #4294967295
 80034f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80034f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80034fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8003500:	9307      	str	r3, [sp, #28]
 8003502:	4b9d      	ldr	r3, [pc, #628]	@ (8003778 <_printf_float+0x2c8>)
 8003504:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003508:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800350c:	f7fd faa6 	bl	8000a5c <__aeabi_dcmpun>
 8003510:	bb70      	cbnz	r0, 8003570 <_printf_float+0xc0>
 8003512:	f04f 32ff 	mov.w	r2, #4294967295
 8003516:	4b98      	ldr	r3, [pc, #608]	@ (8003778 <_printf_float+0x2c8>)
 8003518:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800351c:	f7fd fa80 	bl	8000a20 <__aeabi_dcmple>
 8003520:	bb30      	cbnz	r0, 8003570 <_printf_float+0xc0>
 8003522:	2200      	movs	r2, #0
 8003524:	2300      	movs	r3, #0
 8003526:	4640      	mov	r0, r8
 8003528:	4649      	mov	r1, r9
 800352a:	f7fd fa6f 	bl	8000a0c <__aeabi_dcmplt>
 800352e:	b110      	cbz	r0, 8003536 <_printf_float+0x86>
 8003530:	232d      	movs	r3, #45	@ 0x2d
 8003532:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003536:	4a91      	ldr	r2, [pc, #580]	@ (800377c <_printf_float+0x2cc>)
 8003538:	4b91      	ldr	r3, [pc, #580]	@ (8003780 <_printf_float+0x2d0>)
 800353a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800353e:	bf94      	ite	ls
 8003540:	4690      	movls	r8, r2
 8003542:	4698      	movhi	r8, r3
 8003544:	2303      	movs	r3, #3
 8003546:	f04f 0900 	mov.w	r9, #0
 800354a:	6123      	str	r3, [r4, #16]
 800354c:	f02b 0304 	bic.w	r3, fp, #4
 8003550:	6023      	str	r3, [r4, #0]
 8003552:	4633      	mov	r3, r6
 8003554:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003556:	4621      	mov	r1, r4
 8003558:	4628      	mov	r0, r5
 800355a:	9700      	str	r7, [sp, #0]
 800355c:	f000 f9d2 	bl	8003904 <_printf_common>
 8003560:	3001      	adds	r0, #1
 8003562:	f040 808d 	bne.w	8003680 <_printf_float+0x1d0>
 8003566:	f04f 30ff 	mov.w	r0, #4294967295
 800356a:	b00d      	add	sp, #52	@ 0x34
 800356c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003570:	4642      	mov	r2, r8
 8003572:	464b      	mov	r3, r9
 8003574:	4640      	mov	r0, r8
 8003576:	4649      	mov	r1, r9
 8003578:	f7fd fa70 	bl	8000a5c <__aeabi_dcmpun>
 800357c:	b140      	cbz	r0, 8003590 <_printf_float+0xe0>
 800357e:	464b      	mov	r3, r9
 8003580:	4a80      	ldr	r2, [pc, #512]	@ (8003784 <_printf_float+0x2d4>)
 8003582:	2b00      	cmp	r3, #0
 8003584:	bfbc      	itt	lt
 8003586:	232d      	movlt	r3, #45	@ 0x2d
 8003588:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800358c:	4b7e      	ldr	r3, [pc, #504]	@ (8003788 <_printf_float+0x2d8>)
 800358e:	e7d4      	b.n	800353a <_printf_float+0x8a>
 8003590:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003594:	6863      	ldr	r3, [r4, #4]
 8003596:	9206      	str	r2, [sp, #24]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	d13b      	bne.n	8003614 <_printf_float+0x164>
 800359c:	2306      	movs	r3, #6
 800359e:	6063      	str	r3, [r4, #4]
 80035a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80035a4:	2300      	movs	r3, #0
 80035a6:	4628      	mov	r0, r5
 80035a8:	6022      	str	r2, [r4, #0]
 80035aa:	9303      	str	r3, [sp, #12]
 80035ac:	ab0a      	add	r3, sp, #40	@ 0x28
 80035ae:	e9cd a301 	strd	sl, r3, [sp, #4]
 80035b2:	ab09      	add	r3, sp, #36	@ 0x24
 80035b4:	ec49 8b10 	vmov	d0, r8, r9
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80035be:	6861      	ldr	r1, [r4, #4]
 80035c0:	f7ff fed7 	bl	8003372 <__cvt>
 80035c4:	9b06      	ldr	r3, [sp, #24]
 80035c6:	4680      	mov	r8, r0
 80035c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80035ca:	2b47      	cmp	r3, #71	@ 0x47
 80035cc:	d129      	bne.n	8003622 <_printf_float+0x172>
 80035ce:	1cc8      	adds	r0, r1, #3
 80035d0:	db02      	blt.n	80035d8 <_printf_float+0x128>
 80035d2:	6863      	ldr	r3, [r4, #4]
 80035d4:	4299      	cmp	r1, r3
 80035d6:	dd41      	ble.n	800365c <_printf_float+0x1ac>
 80035d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80035dc:	fa5f fa8a 	uxtb.w	sl, sl
 80035e0:	3901      	subs	r1, #1
 80035e2:	4652      	mov	r2, sl
 80035e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80035e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80035ea:	f7ff ff27 	bl	800343c <__exponent>
 80035ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80035f0:	4681      	mov	r9, r0
 80035f2:	1813      	adds	r3, r2, r0
 80035f4:	2a01      	cmp	r2, #1
 80035f6:	6123      	str	r3, [r4, #16]
 80035f8:	dc02      	bgt.n	8003600 <_printf_float+0x150>
 80035fa:	6822      	ldr	r2, [r4, #0]
 80035fc:	07d2      	lsls	r2, r2, #31
 80035fe:	d501      	bpl.n	8003604 <_printf_float+0x154>
 8003600:	3301      	adds	r3, #1
 8003602:	6123      	str	r3, [r4, #16]
 8003604:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0a2      	beq.n	8003552 <_printf_float+0xa2>
 800360c:	232d      	movs	r3, #45	@ 0x2d
 800360e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003612:	e79e      	b.n	8003552 <_printf_float+0xa2>
 8003614:	9a06      	ldr	r2, [sp, #24]
 8003616:	2a47      	cmp	r2, #71	@ 0x47
 8003618:	d1c2      	bne.n	80035a0 <_printf_float+0xf0>
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1c0      	bne.n	80035a0 <_printf_float+0xf0>
 800361e:	2301      	movs	r3, #1
 8003620:	e7bd      	b.n	800359e <_printf_float+0xee>
 8003622:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003626:	d9db      	bls.n	80035e0 <_printf_float+0x130>
 8003628:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800362c:	d118      	bne.n	8003660 <_printf_float+0x1b0>
 800362e:	2900      	cmp	r1, #0
 8003630:	6863      	ldr	r3, [r4, #4]
 8003632:	dd0b      	ble.n	800364c <_printf_float+0x19c>
 8003634:	6121      	str	r1, [r4, #16]
 8003636:	b913      	cbnz	r3, 800363e <_printf_float+0x18e>
 8003638:	6822      	ldr	r2, [r4, #0]
 800363a:	07d0      	lsls	r0, r2, #31
 800363c:	d502      	bpl.n	8003644 <_printf_float+0x194>
 800363e:	3301      	adds	r3, #1
 8003640:	440b      	add	r3, r1
 8003642:	6123      	str	r3, [r4, #16]
 8003644:	f04f 0900 	mov.w	r9, #0
 8003648:	65a1      	str	r1, [r4, #88]	@ 0x58
 800364a:	e7db      	b.n	8003604 <_printf_float+0x154>
 800364c:	b913      	cbnz	r3, 8003654 <_printf_float+0x1a4>
 800364e:	6822      	ldr	r2, [r4, #0]
 8003650:	07d2      	lsls	r2, r2, #31
 8003652:	d501      	bpl.n	8003658 <_printf_float+0x1a8>
 8003654:	3302      	adds	r3, #2
 8003656:	e7f4      	b.n	8003642 <_printf_float+0x192>
 8003658:	2301      	movs	r3, #1
 800365a:	e7f2      	b.n	8003642 <_printf_float+0x192>
 800365c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003662:	4299      	cmp	r1, r3
 8003664:	db05      	blt.n	8003672 <_printf_float+0x1c2>
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	6121      	str	r1, [r4, #16]
 800366a:	07d8      	lsls	r0, r3, #31
 800366c:	d5ea      	bpl.n	8003644 <_printf_float+0x194>
 800366e:	1c4b      	adds	r3, r1, #1
 8003670:	e7e7      	b.n	8003642 <_printf_float+0x192>
 8003672:	2900      	cmp	r1, #0
 8003674:	bfd4      	ite	le
 8003676:	f1c1 0202 	rsble	r2, r1, #2
 800367a:	2201      	movgt	r2, #1
 800367c:	4413      	add	r3, r2
 800367e:	e7e0      	b.n	8003642 <_printf_float+0x192>
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	055a      	lsls	r2, r3, #21
 8003684:	d407      	bmi.n	8003696 <_printf_float+0x1e6>
 8003686:	6923      	ldr	r3, [r4, #16]
 8003688:	4642      	mov	r2, r8
 800368a:	4631      	mov	r1, r6
 800368c:	4628      	mov	r0, r5
 800368e:	47b8      	blx	r7
 8003690:	3001      	adds	r0, #1
 8003692:	d12b      	bne.n	80036ec <_printf_float+0x23c>
 8003694:	e767      	b.n	8003566 <_printf_float+0xb6>
 8003696:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800369a:	f240 80dd 	bls.w	8003858 <_printf_float+0x3a8>
 800369e:	2200      	movs	r2, #0
 80036a0:	2300      	movs	r3, #0
 80036a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80036a6:	f7fd f9a7 	bl	80009f8 <__aeabi_dcmpeq>
 80036aa:	2800      	cmp	r0, #0
 80036ac:	d033      	beq.n	8003716 <_printf_float+0x266>
 80036ae:	2301      	movs	r3, #1
 80036b0:	4a36      	ldr	r2, [pc, #216]	@ (800378c <_printf_float+0x2dc>)
 80036b2:	4631      	mov	r1, r6
 80036b4:	4628      	mov	r0, r5
 80036b6:	47b8      	blx	r7
 80036b8:	3001      	adds	r0, #1
 80036ba:	f43f af54 	beq.w	8003566 <_printf_float+0xb6>
 80036be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80036c2:	4543      	cmp	r3, r8
 80036c4:	db02      	blt.n	80036cc <_printf_float+0x21c>
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	07d8      	lsls	r0, r3, #31
 80036ca:	d50f      	bpl.n	80036ec <_printf_float+0x23c>
 80036cc:	4631      	mov	r1, r6
 80036ce:	4628      	mov	r0, r5
 80036d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036d4:	47b8      	blx	r7
 80036d6:	3001      	adds	r0, #1
 80036d8:	f43f af45 	beq.w	8003566 <_printf_float+0xb6>
 80036dc:	f04f 0900 	mov.w	r9, #0
 80036e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80036e4:	f104 0a1a 	add.w	sl, r4, #26
 80036e8:	45c8      	cmp	r8, r9
 80036ea:	dc09      	bgt.n	8003700 <_printf_float+0x250>
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	079b      	lsls	r3, r3, #30
 80036f0:	f100 8103 	bmi.w	80038fa <_printf_float+0x44a>
 80036f4:	68e0      	ldr	r0, [r4, #12]
 80036f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80036f8:	4298      	cmp	r0, r3
 80036fa:	bfb8      	it	lt
 80036fc:	4618      	movlt	r0, r3
 80036fe:	e734      	b.n	800356a <_printf_float+0xba>
 8003700:	2301      	movs	r3, #1
 8003702:	4652      	mov	r2, sl
 8003704:	4631      	mov	r1, r6
 8003706:	4628      	mov	r0, r5
 8003708:	47b8      	blx	r7
 800370a:	3001      	adds	r0, #1
 800370c:	f43f af2b 	beq.w	8003566 <_printf_float+0xb6>
 8003710:	f109 0901 	add.w	r9, r9, #1
 8003714:	e7e8      	b.n	80036e8 <_printf_float+0x238>
 8003716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003718:	2b00      	cmp	r3, #0
 800371a:	dc39      	bgt.n	8003790 <_printf_float+0x2e0>
 800371c:	2301      	movs	r3, #1
 800371e:	4a1b      	ldr	r2, [pc, #108]	@ (800378c <_printf_float+0x2dc>)
 8003720:	4631      	mov	r1, r6
 8003722:	4628      	mov	r0, r5
 8003724:	47b8      	blx	r7
 8003726:	3001      	adds	r0, #1
 8003728:	f43f af1d 	beq.w	8003566 <_printf_float+0xb6>
 800372c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003730:	ea59 0303 	orrs.w	r3, r9, r3
 8003734:	d102      	bne.n	800373c <_printf_float+0x28c>
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	07d9      	lsls	r1, r3, #31
 800373a:	d5d7      	bpl.n	80036ec <_printf_float+0x23c>
 800373c:	4631      	mov	r1, r6
 800373e:	4628      	mov	r0, r5
 8003740:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003744:	47b8      	blx	r7
 8003746:	3001      	adds	r0, #1
 8003748:	f43f af0d 	beq.w	8003566 <_printf_float+0xb6>
 800374c:	f04f 0a00 	mov.w	sl, #0
 8003750:	f104 0b1a 	add.w	fp, r4, #26
 8003754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003756:	425b      	negs	r3, r3
 8003758:	4553      	cmp	r3, sl
 800375a:	dc01      	bgt.n	8003760 <_printf_float+0x2b0>
 800375c:	464b      	mov	r3, r9
 800375e:	e793      	b.n	8003688 <_printf_float+0x1d8>
 8003760:	2301      	movs	r3, #1
 8003762:	465a      	mov	r2, fp
 8003764:	4631      	mov	r1, r6
 8003766:	4628      	mov	r0, r5
 8003768:	47b8      	blx	r7
 800376a:	3001      	adds	r0, #1
 800376c:	f43f aefb 	beq.w	8003566 <_printf_float+0xb6>
 8003770:	f10a 0a01 	add.w	sl, sl, #1
 8003774:	e7ee      	b.n	8003754 <_printf_float+0x2a4>
 8003776:	bf00      	nop
 8003778:	7fefffff 	.word	0x7fefffff
 800377c:	08006090 	.word	0x08006090
 8003780:	08006094 	.word	0x08006094
 8003784:	08006098 	.word	0x08006098
 8003788:	0800609c 	.word	0x0800609c
 800378c:	080060a0 	.word	0x080060a0
 8003790:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003792:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003796:	4553      	cmp	r3, sl
 8003798:	bfa8      	it	ge
 800379a:	4653      	movge	r3, sl
 800379c:	2b00      	cmp	r3, #0
 800379e:	4699      	mov	r9, r3
 80037a0:	dc36      	bgt.n	8003810 <_printf_float+0x360>
 80037a2:	f04f 0b00 	mov.w	fp, #0
 80037a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037aa:	f104 021a 	add.w	r2, r4, #26
 80037ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80037b0:	9306      	str	r3, [sp, #24]
 80037b2:	eba3 0309 	sub.w	r3, r3, r9
 80037b6:	455b      	cmp	r3, fp
 80037b8:	dc31      	bgt.n	800381e <_printf_float+0x36e>
 80037ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037bc:	459a      	cmp	sl, r3
 80037be:	dc3a      	bgt.n	8003836 <_printf_float+0x386>
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	07da      	lsls	r2, r3, #31
 80037c4:	d437      	bmi.n	8003836 <_printf_float+0x386>
 80037c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037c8:	ebaa 0903 	sub.w	r9, sl, r3
 80037cc:	9b06      	ldr	r3, [sp, #24]
 80037ce:	ebaa 0303 	sub.w	r3, sl, r3
 80037d2:	4599      	cmp	r9, r3
 80037d4:	bfa8      	it	ge
 80037d6:	4699      	movge	r9, r3
 80037d8:	f1b9 0f00 	cmp.w	r9, #0
 80037dc:	dc33      	bgt.n	8003846 <_printf_float+0x396>
 80037de:	f04f 0800 	mov.w	r8, #0
 80037e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037e6:	f104 0b1a 	add.w	fp, r4, #26
 80037ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037ec:	ebaa 0303 	sub.w	r3, sl, r3
 80037f0:	eba3 0309 	sub.w	r3, r3, r9
 80037f4:	4543      	cmp	r3, r8
 80037f6:	f77f af79 	ble.w	80036ec <_printf_float+0x23c>
 80037fa:	2301      	movs	r3, #1
 80037fc:	465a      	mov	r2, fp
 80037fe:	4631      	mov	r1, r6
 8003800:	4628      	mov	r0, r5
 8003802:	47b8      	blx	r7
 8003804:	3001      	adds	r0, #1
 8003806:	f43f aeae 	beq.w	8003566 <_printf_float+0xb6>
 800380a:	f108 0801 	add.w	r8, r8, #1
 800380e:	e7ec      	b.n	80037ea <_printf_float+0x33a>
 8003810:	4642      	mov	r2, r8
 8003812:	4631      	mov	r1, r6
 8003814:	4628      	mov	r0, r5
 8003816:	47b8      	blx	r7
 8003818:	3001      	adds	r0, #1
 800381a:	d1c2      	bne.n	80037a2 <_printf_float+0x2f2>
 800381c:	e6a3      	b.n	8003566 <_printf_float+0xb6>
 800381e:	2301      	movs	r3, #1
 8003820:	4631      	mov	r1, r6
 8003822:	4628      	mov	r0, r5
 8003824:	9206      	str	r2, [sp, #24]
 8003826:	47b8      	blx	r7
 8003828:	3001      	adds	r0, #1
 800382a:	f43f ae9c 	beq.w	8003566 <_printf_float+0xb6>
 800382e:	f10b 0b01 	add.w	fp, fp, #1
 8003832:	9a06      	ldr	r2, [sp, #24]
 8003834:	e7bb      	b.n	80037ae <_printf_float+0x2fe>
 8003836:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800383a:	4631      	mov	r1, r6
 800383c:	4628      	mov	r0, r5
 800383e:	47b8      	blx	r7
 8003840:	3001      	adds	r0, #1
 8003842:	d1c0      	bne.n	80037c6 <_printf_float+0x316>
 8003844:	e68f      	b.n	8003566 <_printf_float+0xb6>
 8003846:	9a06      	ldr	r2, [sp, #24]
 8003848:	464b      	mov	r3, r9
 800384a:	4631      	mov	r1, r6
 800384c:	4628      	mov	r0, r5
 800384e:	4442      	add	r2, r8
 8003850:	47b8      	blx	r7
 8003852:	3001      	adds	r0, #1
 8003854:	d1c3      	bne.n	80037de <_printf_float+0x32e>
 8003856:	e686      	b.n	8003566 <_printf_float+0xb6>
 8003858:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800385c:	f1ba 0f01 	cmp.w	sl, #1
 8003860:	dc01      	bgt.n	8003866 <_printf_float+0x3b6>
 8003862:	07db      	lsls	r3, r3, #31
 8003864:	d536      	bpl.n	80038d4 <_printf_float+0x424>
 8003866:	2301      	movs	r3, #1
 8003868:	4642      	mov	r2, r8
 800386a:	4631      	mov	r1, r6
 800386c:	4628      	mov	r0, r5
 800386e:	47b8      	blx	r7
 8003870:	3001      	adds	r0, #1
 8003872:	f43f ae78 	beq.w	8003566 <_printf_float+0xb6>
 8003876:	4631      	mov	r1, r6
 8003878:	4628      	mov	r0, r5
 800387a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800387e:	47b8      	blx	r7
 8003880:	3001      	adds	r0, #1
 8003882:	f43f ae70 	beq.w	8003566 <_printf_float+0xb6>
 8003886:	2200      	movs	r2, #0
 8003888:	2300      	movs	r3, #0
 800388a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800388e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003892:	f7fd f8b1 	bl	80009f8 <__aeabi_dcmpeq>
 8003896:	b9c0      	cbnz	r0, 80038ca <_printf_float+0x41a>
 8003898:	4653      	mov	r3, sl
 800389a:	f108 0201 	add.w	r2, r8, #1
 800389e:	4631      	mov	r1, r6
 80038a0:	4628      	mov	r0, r5
 80038a2:	47b8      	blx	r7
 80038a4:	3001      	adds	r0, #1
 80038a6:	d10c      	bne.n	80038c2 <_printf_float+0x412>
 80038a8:	e65d      	b.n	8003566 <_printf_float+0xb6>
 80038aa:	2301      	movs	r3, #1
 80038ac:	465a      	mov	r2, fp
 80038ae:	4631      	mov	r1, r6
 80038b0:	4628      	mov	r0, r5
 80038b2:	47b8      	blx	r7
 80038b4:	3001      	adds	r0, #1
 80038b6:	f43f ae56 	beq.w	8003566 <_printf_float+0xb6>
 80038ba:	f108 0801 	add.w	r8, r8, #1
 80038be:	45d0      	cmp	r8, sl
 80038c0:	dbf3      	blt.n	80038aa <_printf_float+0x3fa>
 80038c2:	464b      	mov	r3, r9
 80038c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80038c8:	e6df      	b.n	800368a <_printf_float+0x1da>
 80038ca:	f04f 0800 	mov.w	r8, #0
 80038ce:	f104 0b1a 	add.w	fp, r4, #26
 80038d2:	e7f4      	b.n	80038be <_printf_float+0x40e>
 80038d4:	2301      	movs	r3, #1
 80038d6:	4642      	mov	r2, r8
 80038d8:	e7e1      	b.n	800389e <_printf_float+0x3ee>
 80038da:	2301      	movs	r3, #1
 80038dc:	464a      	mov	r2, r9
 80038de:	4631      	mov	r1, r6
 80038e0:	4628      	mov	r0, r5
 80038e2:	47b8      	blx	r7
 80038e4:	3001      	adds	r0, #1
 80038e6:	f43f ae3e 	beq.w	8003566 <_printf_float+0xb6>
 80038ea:	f108 0801 	add.w	r8, r8, #1
 80038ee:	68e3      	ldr	r3, [r4, #12]
 80038f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80038f2:	1a5b      	subs	r3, r3, r1
 80038f4:	4543      	cmp	r3, r8
 80038f6:	dcf0      	bgt.n	80038da <_printf_float+0x42a>
 80038f8:	e6fc      	b.n	80036f4 <_printf_float+0x244>
 80038fa:	f04f 0800 	mov.w	r8, #0
 80038fe:	f104 0919 	add.w	r9, r4, #25
 8003902:	e7f4      	b.n	80038ee <_printf_float+0x43e>

08003904 <_printf_common>:
 8003904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003908:	4616      	mov	r6, r2
 800390a:	4698      	mov	r8, r3
 800390c:	688a      	ldr	r2, [r1, #8]
 800390e:	4607      	mov	r7, r0
 8003910:	690b      	ldr	r3, [r1, #16]
 8003912:	460c      	mov	r4, r1
 8003914:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003918:	4293      	cmp	r3, r2
 800391a:	bfb8      	it	lt
 800391c:	4613      	movlt	r3, r2
 800391e:	6033      	str	r3, [r6, #0]
 8003920:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003924:	b10a      	cbz	r2, 800392a <_printf_common+0x26>
 8003926:	3301      	adds	r3, #1
 8003928:	6033      	str	r3, [r6, #0]
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	0699      	lsls	r1, r3, #26
 800392e:	bf42      	ittt	mi
 8003930:	6833      	ldrmi	r3, [r6, #0]
 8003932:	3302      	addmi	r3, #2
 8003934:	6033      	strmi	r3, [r6, #0]
 8003936:	6825      	ldr	r5, [r4, #0]
 8003938:	f015 0506 	ands.w	r5, r5, #6
 800393c:	d106      	bne.n	800394c <_printf_common+0x48>
 800393e:	f104 0a19 	add.w	sl, r4, #25
 8003942:	68e3      	ldr	r3, [r4, #12]
 8003944:	6832      	ldr	r2, [r6, #0]
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	42ab      	cmp	r3, r5
 800394a:	dc2b      	bgt.n	80039a4 <_printf_common+0xa0>
 800394c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003950:	6822      	ldr	r2, [r4, #0]
 8003952:	3b00      	subs	r3, #0
 8003954:	bf18      	it	ne
 8003956:	2301      	movne	r3, #1
 8003958:	0692      	lsls	r2, r2, #26
 800395a:	d430      	bmi.n	80039be <_printf_common+0xba>
 800395c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003960:	4641      	mov	r1, r8
 8003962:	4638      	mov	r0, r7
 8003964:	47c8      	blx	r9
 8003966:	3001      	adds	r0, #1
 8003968:	d023      	beq.n	80039b2 <_printf_common+0xae>
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	341a      	adds	r4, #26
 800396e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8003972:	f003 0306 	and.w	r3, r3, #6
 8003976:	2b04      	cmp	r3, #4
 8003978:	bf0a      	itet	eq
 800397a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800397e:	2500      	movne	r5, #0
 8003980:	6833      	ldreq	r3, [r6, #0]
 8003982:	f04f 0600 	mov.w	r6, #0
 8003986:	bf08      	it	eq
 8003988:	1aed      	subeq	r5, r5, r3
 800398a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800398e:	bf08      	it	eq
 8003990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003994:	4293      	cmp	r3, r2
 8003996:	bfc4      	itt	gt
 8003998:	1a9b      	subgt	r3, r3, r2
 800399a:	18ed      	addgt	r5, r5, r3
 800399c:	42b5      	cmp	r5, r6
 800399e:	d11a      	bne.n	80039d6 <_printf_common+0xd2>
 80039a0:	2000      	movs	r0, #0
 80039a2:	e008      	b.n	80039b6 <_printf_common+0xb2>
 80039a4:	2301      	movs	r3, #1
 80039a6:	4652      	mov	r2, sl
 80039a8:	4641      	mov	r1, r8
 80039aa:	4638      	mov	r0, r7
 80039ac:	47c8      	blx	r9
 80039ae:	3001      	adds	r0, #1
 80039b0:	d103      	bne.n	80039ba <_printf_common+0xb6>
 80039b2:	f04f 30ff 	mov.w	r0, #4294967295
 80039b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ba:	3501      	adds	r5, #1
 80039bc:	e7c1      	b.n	8003942 <_printf_common+0x3e>
 80039be:	18e1      	adds	r1, r4, r3
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	2030      	movs	r0, #48	@ 0x30
 80039c4:	3302      	adds	r3, #2
 80039c6:	4422      	add	r2, r4
 80039c8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80039cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80039d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80039d4:	e7c2      	b.n	800395c <_printf_common+0x58>
 80039d6:	2301      	movs	r3, #1
 80039d8:	4622      	mov	r2, r4
 80039da:	4641      	mov	r1, r8
 80039dc:	4638      	mov	r0, r7
 80039de:	47c8      	blx	r9
 80039e0:	3001      	adds	r0, #1
 80039e2:	d0e6      	beq.n	80039b2 <_printf_common+0xae>
 80039e4:	3601      	adds	r6, #1
 80039e6:	e7d9      	b.n	800399c <_printf_common+0x98>

080039e8 <_printf_i>:
 80039e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039ec:	7e0f      	ldrb	r7, [r1, #24]
 80039ee:	4691      	mov	r9, r2
 80039f0:	4680      	mov	r8, r0
 80039f2:	460c      	mov	r4, r1
 80039f4:	2f78      	cmp	r7, #120	@ 0x78
 80039f6:	469a      	mov	sl, r3
 80039f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80039fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80039fe:	d807      	bhi.n	8003a10 <_printf_i+0x28>
 8003a00:	2f62      	cmp	r7, #98	@ 0x62
 8003a02:	d80a      	bhi.n	8003a1a <_printf_i+0x32>
 8003a04:	2f00      	cmp	r7, #0
 8003a06:	f000 80d2 	beq.w	8003bae <_printf_i+0x1c6>
 8003a0a:	2f58      	cmp	r7, #88	@ 0x58
 8003a0c:	f000 80b9 	beq.w	8003b82 <_printf_i+0x19a>
 8003a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a18:	e03a      	b.n	8003a90 <_printf_i+0xa8>
 8003a1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a1e:	2b15      	cmp	r3, #21
 8003a20:	d8f6      	bhi.n	8003a10 <_printf_i+0x28>
 8003a22:	a101      	add	r1, pc, #4	@ (adr r1, 8003a28 <_printf_i+0x40>)
 8003a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a28:	08003a81 	.word	0x08003a81
 8003a2c:	08003a95 	.word	0x08003a95
 8003a30:	08003a11 	.word	0x08003a11
 8003a34:	08003a11 	.word	0x08003a11
 8003a38:	08003a11 	.word	0x08003a11
 8003a3c:	08003a11 	.word	0x08003a11
 8003a40:	08003a95 	.word	0x08003a95
 8003a44:	08003a11 	.word	0x08003a11
 8003a48:	08003a11 	.word	0x08003a11
 8003a4c:	08003a11 	.word	0x08003a11
 8003a50:	08003a11 	.word	0x08003a11
 8003a54:	08003b95 	.word	0x08003b95
 8003a58:	08003abf 	.word	0x08003abf
 8003a5c:	08003b4f 	.word	0x08003b4f
 8003a60:	08003a11 	.word	0x08003a11
 8003a64:	08003a11 	.word	0x08003a11
 8003a68:	08003bb7 	.word	0x08003bb7
 8003a6c:	08003a11 	.word	0x08003a11
 8003a70:	08003abf 	.word	0x08003abf
 8003a74:	08003a11 	.word	0x08003a11
 8003a78:	08003a11 	.word	0x08003a11
 8003a7c:	08003b57 	.word	0x08003b57
 8003a80:	6833      	ldr	r3, [r6, #0]
 8003a82:	1d1a      	adds	r2, r3, #4
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6032      	str	r2, [r6, #0]
 8003a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a90:	2301      	movs	r3, #1
 8003a92:	e09d      	b.n	8003bd0 <_printf_i+0x1e8>
 8003a94:	6833      	ldr	r3, [r6, #0]
 8003a96:	6820      	ldr	r0, [r4, #0]
 8003a98:	1d19      	adds	r1, r3, #4
 8003a9a:	6031      	str	r1, [r6, #0]
 8003a9c:	0606      	lsls	r6, r0, #24
 8003a9e:	d501      	bpl.n	8003aa4 <_printf_i+0xbc>
 8003aa0:	681d      	ldr	r5, [r3, #0]
 8003aa2:	e003      	b.n	8003aac <_printf_i+0xc4>
 8003aa4:	0645      	lsls	r5, r0, #25
 8003aa6:	d5fb      	bpl.n	8003aa0 <_printf_i+0xb8>
 8003aa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003aac:	2d00      	cmp	r5, #0
 8003aae:	da03      	bge.n	8003ab8 <_printf_i+0xd0>
 8003ab0:	232d      	movs	r3, #45	@ 0x2d
 8003ab2:	426d      	negs	r5, r5
 8003ab4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ab8:	4859      	ldr	r0, [pc, #356]	@ (8003c20 <_printf_i+0x238>)
 8003aba:	230a      	movs	r3, #10
 8003abc:	e011      	b.n	8003ae2 <_printf_i+0xfa>
 8003abe:	6821      	ldr	r1, [r4, #0]
 8003ac0:	6833      	ldr	r3, [r6, #0]
 8003ac2:	0608      	lsls	r0, r1, #24
 8003ac4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ac8:	d402      	bmi.n	8003ad0 <_printf_i+0xe8>
 8003aca:	0649      	lsls	r1, r1, #25
 8003acc:	bf48      	it	mi
 8003ace:	b2ad      	uxthmi	r5, r5
 8003ad0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ad2:	6033      	str	r3, [r6, #0]
 8003ad4:	4852      	ldr	r0, [pc, #328]	@ (8003c20 <_printf_i+0x238>)
 8003ad6:	bf14      	ite	ne
 8003ad8:	230a      	movne	r3, #10
 8003ada:	2308      	moveq	r3, #8
 8003adc:	2100      	movs	r1, #0
 8003ade:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ae2:	6866      	ldr	r6, [r4, #4]
 8003ae4:	2e00      	cmp	r6, #0
 8003ae6:	60a6      	str	r6, [r4, #8]
 8003ae8:	bfa2      	ittt	ge
 8003aea:	6821      	ldrge	r1, [r4, #0]
 8003aec:	f021 0104 	bicge.w	r1, r1, #4
 8003af0:	6021      	strge	r1, [r4, #0]
 8003af2:	b90d      	cbnz	r5, 8003af8 <_printf_i+0x110>
 8003af4:	2e00      	cmp	r6, #0
 8003af6:	d04b      	beq.n	8003b90 <_printf_i+0x1a8>
 8003af8:	4616      	mov	r6, r2
 8003afa:	fbb5 f1f3 	udiv	r1, r5, r3
 8003afe:	fb03 5711 	mls	r7, r3, r1, r5
 8003b02:	5dc7      	ldrb	r7, [r0, r7]
 8003b04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b08:	462f      	mov	r7, r5
 8003b0a:	460d      	mov	r5, r1
 8003b0c:	42bb      	cmp	r3, r7
 8003b0e:	d9f4      	bls.n	8003afa <_printf_i+0x112>
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d10b      	bne.n	8003b2c <_printf_i+0x144>
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	07df      	lsls	r7, r3, #31
 8003b18:	d508      	bpl.n	8003b2c <_printf_i+0x144>
 8003b1a:	6923      	ldr	r3, [r4, #16]
 8003b1c:	6861      	ldr	r1, [r4, #4]
 8003b1e:	4299      	cmp	r1, r3
 8003b20:	bfde      	ittt	le
 8003b22:	2330      	movle	r3, #48	@ 0x30
 8003b24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b2c:	1b92      	subs	r2, r2, r6
 8003b2e:	6122      	str	r2, [r4, #16]
 8003b30:	464b      	mov	r3, r9
 8003b32:	aa03      	add	r2, sp, #12
 8003b34:	4621      	mov	r1, r4
 8003b36:	4640      	mov	r0, r8
 8003b38:	f8cd a000 	str.w	sl, [sp]
 8003b3c:	f7ff fee2 	bl	8003904 <_printf_common>
 8003b40:	3001      	adds	r0, #1
 8003b42:	d14a      	bne.n	8003bda <_printf_i+0x1f2>
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	b004      	add	sp, #16
 8003b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	f043 0320 	orr.w	r3, r3, #32
 8003b54:	6023      	str	r3, [r4, #0]
 8003b56:	2778      	movs	r7, #120	@ 0x78
 8003b58:	4832      	ldr	r0, [pc, #200]	@ (8003c24 <_printf_i+0x23c>)
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b60:	061f      	lsls	r7, r3, #24
 8003b62:	6831      	ldr	r1, [r6, #0]
 8003b64:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b68:	d402      	bmi.n	8003b70 <_printf_i+0x188>
 8003b6a:	065f      	lsls	r7, r3, #25
 8003b6c:	bf48      	it	mi
 8003b6e:	b2ad      	uxthmi	r5, r5
 8003b70:	6031      	str	r1, [r6, #0]
 8003b72:	07d9      	lsls	r1, r3, #31
 8003b74:	bf44      	itt	mi
 8003b76:	f043 0320 	orrmi.w	r3, r3, #32
 8003b7a:	6023      	strmi	r3, [r4, #0]
 8003b7c:	b11d      	cbz	r5, 8003b86 <_printf_i+0x19e>
 8003b7e:	2310      	movs	r3, #16
 8003b80:	e7ac      	b.n	8003adc <_printf_i+0xf4>
 8003b82:	4827      	ldr	r0, [pc, #156]	@ (8003c20 <_printf_i+0x238>)
 8003b84:	e7e9      	b.n	8003b5a <_printf_i+0x172>
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	f023 0320 	bic.w	r3, r3, #32
 8003b8c:	6023      	str	r3, [r4, #0]
 8003b8e:	e7f6      	b.n	8003b7e <_printf_i+0x196>
 8003b90:	4616      	mov	r6, r2
 8003b92:	e7bd      	b.n	8003b10 <_printf_i+0x128>
 8003b94:	6833      	ldr	r3, [r6, #0]
 8003b96:	6825      	ldr	r5, [r4, #0]
 8003b98:	1d18      	adds	r0, r3, #4
 8003b9a:	6961      	ldr	r1, [r4, #20]
 8003b9c:	6030      	str	r0, [r6, #0]
 8003b9e:	062e      	lsls	r6, r5, #24
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	d501      	bpl.n	8003ba8 <_printf_i+0x1c0>
 8003ba4:	6019      	str	r1, [r3, #0]
 8003ba6:	e002      	b.n	8003bae <_printf_i+0x1c6>
 8003ba8:	0668      	lsls	r0, r5, #25
 8003baa:	d5fb      	bpl.n	8003ba4 <_printf_i+0x1bc>
 8003bac:	8019      	strh	r1, [r3, #0]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	4616      	mov	r6, r2
 8003bb2:	6123      	str	r3, [r4, #16]
 8003bb4:	e7bc      	b.n	8003b30 <_printf_i+0x148>
 8003bb6:	6833      	ldr	r3, [r6, #0]
 8003bb8:	2100      	movs	r1, #0
 8003bba:	1d1a      	adds	r2, r3, #4
 8003bbc:	6032      	str	r2, [r6, #0]
 8003bbe:	681e      	ldr	r6, [r3, #0]
 8003bc0:	6862      	ldr	r2, [r4, #4]
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	f000 f9d5 	bl	8003f72 <memchr>
 8003bc8:	b108      	cbz	r0, 8003bce <_printf_i+0x1e6>
 8003bca:	1b80      	subs	r0, r0, r6
 8003bcc:	6060      	str	r0, [r4, #4]
 8003bce:	6863      	ldr	r3, [r4, #4]
 8003bd0:	6123      	str	r3, [r4, #16]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bd8:	e7aa      	b.n	8003b30 <_printf_i+0x148>
 8003bda:	6923      	ldr	r3, [r4, #16]
 8003bdc:	4632      	mov	r2, r6
 8003bde:	4649      	mov	r1, r9
 8003be0:	4640      	mov	r0, r8
 8003be2:	47d0      	blx	sl
 8003be4:	3001      	adds	r0, #1
 8003be6:	d0ad      	beq.n	8003b44 <_printf_i+0x15c>
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	079b      	lsls	r3, r3, #30
 8003bec:	d413      	bmi.n	8003c16 <_printf_i+0x22e>
 8003bee:	68e0      	ldr	r0, [r4, #12]
 8003bf0:	9b03      	ldr	r3, [sp, #12]
 8003bf2:	4298      	cmp	r0, r3
 8003bf4:	bfb8      	it	lt
 8003bf6:	4618      	movlt	r0, r3
 8003bf8:	e7a6      	b.n	8003b48 <_printf_i+0x160>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	4632      	mov	r2, r6
 8003bfe:	4649      	mov	r1, r9
 8003c00:	4640      	mov	r0, r8
 8003c02:	47d0      	blx	sl
 8003c04:	3001      	adds	r0, #1
 8003c06:	d09d      	beq.n	8003b44 <_printf_i+0x15c>
 8003c08:	3501      	adds	r5, #1
 8003c0a:	68e3      	ldr	r3, [r4, #12]
 8003c0c:	9903      	ldr	r1, [sp, #12]
 8003c0e:	1a5b      	subs	r3, r3, r1
 8003c10:	42ab      	cmp	r3, r5
 8003c12:	dcf2      	bgt.n	8003bfa <_printf_i+0x212>
 8003c14:	e7eb      	b.n	8003bee <_printf_i+0x206>
 8003c16:	2500      	movs	r5, #0
 8003c18:	f104 0619 	add.w	r6, r4, #25
 8003c1c:	e7f5      	b.n	8003c0a <_printf_i+0x222>
 8003c1e:	bf00      	nop
 8003c20:	080060a2 	.word	0x080060a2
 8003c24:	080060b3 	.word	0x080060b3

08003c28 <std>:
 8003c28:	2300      	movs	r3, #0
 8003c2a:	b510      	push	{r4, lr}
 8003c2c:	4604      	mov	r4, r0
 8003c2e:	6083      	str	r3, [r0, #8]
 8003c30:	8181      	strh	r1, [r0, #12]
 8003c32:	4619      	mov	r1, r3
 8003c34:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c36:	81c2      	strh	r2, [r0, #14]
 8003c38:	2208      	movs	r2, #8
 8003c3a:	6183      	str	r3, [r0, #24]
 8003c3c:	e9c0 3300 	strd	r3, r3, [r0]
 8003c40:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c44:	305c      	adds	r0, #92	@ 0x5c
 8003c46:	f000 f914 	bl	8003e72 <memset>
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c80 <std+0x58>)
 8003c4c:	6224      	str	r4, [r4, #32]
 8003c4e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c50:	4b0c      	ldr	r3, [pc, #48]	@ (8003c84 <std+0x5c>)
 8003c52:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c54:	4b0c      	ldr	r3, [pc, #48]	@ (8003c88 <std+0x60>)
 8003c56:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c58:	4b0c      	ldr	r3, [pc, #48]	@ (8003c8c <std+0x64>)
 8003c5a:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c90 <std+0x68>)
 8003c5e:	429c      	cmp	r4, r3
 8003c60:	d006      	beq.n	8003c70 <std+0x48>
 8003c62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c66:	4294      	cmp	r4, r2
 8003c68:	d002      	beq.n	8003c70 <std+0x48>
 8003c6a:	33d0      	adds	r3, #208	@ 0xd0
 8003c6c:	429c      	cmp	r4, r3
 8003c6e:	d105      	bne.n	8003c7c <std+0x54>
 8003c70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c78:	f000 b978 	b.w	8003f6c <__retarget_lock_init_recursive>
 8003c7c:	bd10      	pop	{r4, pc}
 8003c7e:	bf00      	nop
 8003c80:	08003ded 	.word	0x08003ded
 8003c84:	08003e0f 	.word	0x08003e0f
 8003c88:	08003e47 	.word	0x08003e47
 8003c8c:	08003e6b 	.word	0x08003e6b
 8003c90:	20000324 	.word	0x20000324

08003c94 <stdio_exit_handler>:
 8003c94:	4a02      	ldr	r2, [pc, #8]	@ (8003ca0 <stdio_exit_handler+0xc>)
 8003c96:	4903      	ldr	r1, [pc, #12]	@ (8003ca4 <stdio_exit_handler+0x10>)
 8003c98:	4803      	ldr	r0, [pc, #12]	@ (8003ca8 <stdio_exit_handler+0x14>)
 8003c9a:	f000 b869 	b.w	8003d70 <_fwalk_sglue>
 8003c9e:	bf00      	nop
 8003ca0:	2000003c 	.word	0x2000003c
 8003ca4:	080058f9 	.word	0x080058f9
 8003ca8:	2000004c 	.word	0x2000004c

08003cac <cleanup_stdio>:
 8003cac:	6841      	ldr	r1, [r0, #4]
 8003cae:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce0 <cleanup_stdio+0x34>)
 8003cb0:	4299      	cmp	r1, r3
 8003cb2:	b510      	push	{r4, lr}
 8003cb4:	4604      	mov	r4, r0
 8003cb6:	d001      	beq.n	8003cbc <cleanup_stdio+0x10>
 8003cb8:	f001 fe1e 	bl	80058f8 <_fflush_r>
 8003cbc:	68a1      	ldr	r1, [r4, #8]
 8003cbe:	4b09      	ldr	r3, [pc, #36]	@ (8003ce4 <cleanup_stdio+0x38>)
 8003cc0:	4299      	cmp	r1, r3
 8003cc2:	d002      	beq.n	8003cca <cleanup_stdio+0x1e>
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f001 fe17 	bl	80058f8 <_fflush_r>
 8003cca:	68e1      	ldr	r1, [r4, #12]
 8003ccc:	4b06      	ldr	r3, [pc, #24]	@ (8003ce8 <cleanup_stdio+0x3c>)
 8003cce:	4299      	cmp	r1, r3
 8003cd0:	d004      	beq.n	8003cdc <cleanup_stdio+0x30>
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cd8:	f001 be0e 	b.w	80058f8 <_fflush_r>
 8003cdc:	bd10      	pop	{r4, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000324 	.word	0x20000324
 8003ce4:	2000038c 	.word	0x2000038c
 8003ce8:	200003f4 	.word	0x200003f4

08003cec <global_stdio_init.part.0>:
 8003cec:	b510      	push	{r4, lr}
 8003cee:	4b0b      	ldr	r3, [pc, #44]	@ (8003d1c <global_stdio_init.part.0+0x30>)
 8003cf0:	2104      	movs	r1, #4
 8003cf2:	4c0b      	ldr	r4, [pc, #44]	@ (8003d20 <global_stdio_init.part.0+0x34>)
 8003cf4:	4a0b      	ldr	r2, [pc, #44]	@ (8003d24 <global_stdio_init.part.0+0x38>)
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f7ff ff94 	bl	8003c28 <std>
 8003d00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d04:	2201      	movs	r2, #1
 8003d06:	2109      	movs	r1, #9
 8003d08:	f7ff ff8e 	bl	8003c28 <std>
 8003d0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d10:	2202      	movs	r2, #2
 8003d12:	2112      	movs	r1, #18
 8003d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d18:	f7ff bf86 	b.w	8003c28 <std>
 8003d1c:	2000045c 	.word	0x2000045c
 8003d20:	20000324 	.word	0x20000324
 8003d24:	08003c95 	.word	0x08003c95

08003d28 <__sfp_lock_acquire>:
 8003d28:	4801      	ldr	r0, [pc, #4]	@ (8003d30 <__sfp_lock_acquire+0x8>)
 8003d2a:	f000 b920 	b.w	8003f6e <__retarget_lock_acquire_recursive>
 8003d2e:	bf00      	nop
 8003d30:	20000465 	.word	0x20000465

08003d34 <__sfp_lock_release>:
 8003d34:	4801      	ldr	r0, [pc, #4]	@ (8003d3c <__sfp_lock_release+0x8>)
 8003d36:	f000 b91b 	b.w	8003f70 <__retarget_lock_release_recursive>
 8003d3a:	bf00      	nop
 8003d3c:	20000465 	.word	0x20000465

08003d40 <__sinit>:
 8003d40:	b510      	push	{r4, lr}
 8003d42:	4604      	mov	r4, r0
 8003d44:	f7ff fff0 	bl	8003d28 <__sfp_lock_acquire>
 8003d48:	6a23      	ldr	r3, [r4, #32]
 8003d4a:	b11b      	cbz	r3, 8003d54 <__sinit+0x14>
 8003d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d50:	f7ff bff0 	b.w	8003d34 <__sfp_lock_release>
 8003d54:	4b04      	ldr	r3, [pc, #16]	@ (8003d68 <__sinit+0x28>)
 8003d56:	6223      	str	r3, [r4, #32]
 8003d58:	4b04      	ldr	r3, [pc, #16]	@ (8003d6c <__sinit+0x2c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f5      	bne.n	8003d4c <__sinit+0xc>
 8003d60:	f7ff ffc4 	bl	8003cec <global_stdio_init.part.0>
 8003d64:	e7f2      	b.n	8003d4c <__sinit+0xc>
 8003d66:	bf00      	nop
 8003d68:	08003cad 	.word	0x08003cad
 8003d6c:	2000045c 	.word	0x2000045c

08003d70 <_fwalk_sglue>:
 8003d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d74:	4607      	mov	r7, r0
 8003d76:	4688      	mov	r8, r1
 8003d78:	4614      	mov	r4, r2
 8003d7a:	2600      	movs	r6, #0
 8003d7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d80:	f1b9 0901 	subs.w	r9, r9, #1
 8003d84:	d505      	bpl.n	8003d92 <_fwalk_sglue+0x22>
 8003d86:	6824      	ldr	r4, [r4, #0]
 8003d88:	2c00      	cmp	r4, #0
 8003d8a:	d1f7      	bne.n	8003d7c <_fwalk_sglue+0xc>
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d92:	89ab      	ldrh	r3, [r5, #12]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d907      	bls.n	8003da8 <_fwalk_sglue+0x38>
 8003d98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	d003      	beq.n	8003da8 <_fwalk_sglue+0x38>
 8003da0:	4629      	mov	r1, r5
 8003da2:	4638      	mov	r0, r7
 8003da4:	47c0      	blx	r8
 8003da6:	4306      	orrs	r6, r0
 8003da8:	3568      	adds	r5, #104	@ 0x68
 8003daa:	e7e9      	b.n	8003d80 <_fwalk_sglue+0x10>

08003dac <siprintf>:
 8003dac:	b40e      	push	{r1, r2, r3}
 8003dae:	b500      	push	{lr}
 8003db0:	b09c      	sub	sp, #112	@ 0x70
 8003db2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003db6:	ab1d      	add	r3, sp, #116	@ 0x74
 8003db8:	9002      	str	r0, [sp, #8]
 8003dba:	9006      	str	r0, [sp, #24]
 8003dbc:	9107      	str	r1, [sp, #28]
 8003dbe:	9104      	str	r1, [sp, #16]
 8003dc0:	4808      	ldr	r0, [pc, #32]	@ (8003de4 <siprintf+0x38>)
 8003dc2:	4909      	ldr	r1, [pc, #36]	@ (8003de8 <siprintf+0x3c>)
 8003dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dc8:	9105      	str	r1, [sp, #20]
 8003dca:	a902      	add	r1, sp, #8
 8003dcc:	6800      	ldr	r0, [r0, #0]
 8003dce:	9301      	str	r3, [sp, #4]
 8003dd0:	f001 fc12 	bl	80055f8 <_svfiprintf_r>
 8003dd4:	9b02      	ldr	r3, [sp, #8]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	b01c      	add	sp, #112	@ 0x70
 8003ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003de0:	b003      	add	sp, #12
 8003de2:	4770      	bx	lr
 8003de4:	20000048 	.word	0x20000048
 8003de8:	ffff0208 	.word	0xffff0208

08003dec <__sread>:
 8003dec:	b510      	push	{r4, lr}
 8003dee:	460c      	mov	r4, r1
 8003df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df4:	f000 f86c 	bl	8003ed0 <_read_r>
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	bfab      	itete	ge
 8003dfc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003dfe:	89a3      	ldrhlt	r3, [r4, #12]
 8003e00:	181b      	addge	r3, r3, r0
 8003e02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003e06:	bfac      	ite	ge
 8003e08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003e0a:	81a3      	strhlt	r3, [r4, #12]
 8003e0c:	bd10      	pop	{r4, pc}

08003e0e <__swrite>:
 8003e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e12:	461f      	mov	r7, r3
 8003e14:	898b      	ldrh	r3, [r1, #12]
 8003e16:	4605      	mov	r5, r0
 8003e18:	460c      	mov	r4, r1
 8003e1a:	05db      	lsls	r3, r3, #23
 8003e1c:	4616      	mov	r6, r2
 8003e1e:	d505      	bpl.n	8003e2c <__swrite+0x1e>
 8003e20:	2302      	movs	r3, #2
 8003e22:	2200      	movs	r2, #0
 8003e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e28:	f000 f840 	bl	8003eac <_lseek_r>
 8003e2c:	89a3      	ldrh	r3, [r4, #12]
 8003e2e:	4632      	mov	r2, r6
 8003e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e34:	4628      	mov	r0, r5
 8003e36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e3a:	81a3      	strh	r3, [r4, #12]
 8003e3c:	463b      	mov	r3, r7
 8003e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e42:	f000 b857 	b.w	8003ef4 <_write_r>

08003e46 <__sseek>:
 8003e46:	b510      	push	{r4, lr}
 8003e48:	460c      	mov	r4, r1
 8003e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e4e:	f000 f82d 	bl	8003eac <_lseek_r>
 8003e52:	1c43      	adds	r3, r0, #1
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	bf15      	itete	ne
 8003e58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e62:	81a3      	strheq	r3, [r4, #12]
 8003e64:	bf18      	it	ne
 8003e66:	81a3      	strhne	r3, [r4, #12]
 8003e68:	bd10      	pop	{r4, pc}

08003e6a <__sclose>:
 8003e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e6e:	f000 b80d 	b.w	8003e8c <_close_r>

08003e72 <memset>:
 8003e72:	4402      	add	r2, r0
 8003e74:	4603      	mov	r3, r0
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d100      	bne.n	8003e7c <memset+0xa>
 8003e7a:	4770      	bx	lr
 8003e7c:	f803 1b01 	strb.w	r1, [r3], #1
 8003e80:	e7f9      	b.n	8003e76 <memset+0x4>
	...

08003e84 <_localeconv_r>:
 8003e84:	4800      	ldr	r0, [pc, #0]	@ (8003e88 <_localeconv_r+0x4>)
 8003e86:	4770      	bx	lr
 8003e88:	20000188 	.word	0x20000188

08003e8c <_close_r>:
 8003e8c:	b538      	push	{r3, r4, r5, lr}
 8003e8e:	2300      	movs	r3, #0
 8003e90:	4d05      	ldr	r5, [pc, #20]	@ (8003ea8 <_close_r+0x1c>)
 8003e92:	4604      	mov	r4, r0
 8003e94:	4608      	mov	r0, r1
 8003e96:	602b      	str	r3, [r5, #0]
 8003e98:	f7fd fab9 	bl	800140e <_close>
 8003e9c:	1c43      	adds	r3, r0, #1
 8003e9e:	d102      	bne.n	8003ea6 <_close_r+0x1a>
 8003ea0:	682b      	ldr	r3, [r5, #0]
 8003ea2:	b103      	cbz	r3, 8003ea6 <_close_r+0x1a>
 8003ea4:	6023      	str	r3, [r4, #0]
 8003ea6:	bd38      	pop	{r3, r4, r5, pc}
 8003ea8:	20000460 	.word	0x20000460

08003eac <_lseek_r>:
 8003eac:	b538      	push	{r3, r4, r5, lr}
 8003eae:	4604      	mov	r4, r0
 8003eb0:	4d06      	ldr	r5, [pc, #24]	@ (8003ecc <_lseek_r+0x20>)
 8003eb2:	4608      	mov	r0, r1
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	602a      	str	r2, [r5, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f7fd face 	bl	800145c <_lseek>
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	d102      	bne.n	8003eca <_lseek_r+0x1e>
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	b103      	cbz	r3, 8003eca <_lseek_r+0x1e>
 8003ec8:	6023      	str	r3, [r4, #0]
 8003eca:	bd38      	pop	{r3, r4, r5, pc}
 8003ecc:	20000460 	.word	0x20000460

08003ed0 <_read_r>:
 8003ed0:	b538      	push	{r3, r4, r5, lr}
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	4d06      	ldr	r5, [pc, #24]	@ (8003ef0 <_read_r+0x20>)
 8003ed6:	4608      	mov	r0, r1
 8003ed8:	4611      	mov	r1, r2
 8003eda:	2200      	movs	r2, #0
 8003edc:	602a      	str	r2, [r5, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f7fd fa5c 	bl	800139c <_read>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d102      	bne.n	8003eee <_read_r+0x1e>
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	b103      	cbz	r3, 8003eee <_read_r+0x1e>
 8003eec:	6023      	str	r3, [r4, #0]
 8003eee:	bd38      	pop	{r3, r4, r5, pc}
 8003ef0:	20000460 	.word	0x20000460

08003ef4 <_write_r>:
 8003ef4:	b538      	push	{r3, r4, r5, lr}
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	4d06      	ldr	r5, [pc, #24]	@ (8003f14 <_write_r+0x20>)
 8003efa:	4608      	mov	r0, r1
 8003efc:	4611      	mov	r1, r2
 8003efe:	2200      	movs	r2, #0
 8003f00:	602a      	str	r2, [r5, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	f7fd fa67 	bl	80013d6 <_write>
 8003f08:	1c43      	adds	r3, r0, #1
 8003f0a:	d102      	bne.n	8003f12 <_write_r+0x1e>
 8003f0c:	682b      	ldr	r3, [r5, #0]
 8003f0e:	b103      	cbz	r3, 8003f12 <_write_r+0x1e>
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	bd38      	pop	{r3, r4, r5, pc}
 8003f14:	20000460 	.word	0x20000460

08003f18 <__errno>:
 8003f18:	4b01      	ldr	r3, [pc, #4]	@ (8003f20 <__errno+0x8>)
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	20000048 	.word	0x20000048

08003f24 <__libc_init_array>:
 8003f24:	b570      	push	{r4, r5, r6, lr}
 8003f26:	4d0d      	ldr	r5, [pc, #52]	@ (8003f5c <__libc_init_array+0x38>)
 8003f28:	2600      	movs	r6, #0
 8003f2a:	4c0d      	ldr	r4, [pc, #52]	@ (8003f60 <__libc_init_array+0x3c>)
 8003f2c:	1b64      	subs	r4, r4, r5
 8003f2e:	10a4      	asrs	r4, r4, #2
 8003f30:	42a6      	cmp	r6, r4
 8003f32:	d109      	bne.n	8003f48 <__libc_init_array+0x24>
 8003f34:	4d0b      	ldr	r5, [pc, #44]	@ (8003f64 <__libc_init_array+0x40>)
 8003f36:	2600      	movs	r6, #0
 8003f38:	4c0b      	ldr	r4, [pc, #44]	@ (8003f68 <__libc_init_array+0x44>)
 8003f3a:	f002 f87b 	bl	8006034 <_init>
 8003f3e:	1b64      	subs	r4, r4, r5
 8003f40:	10a4      	asrs	r4, r4, #2
 8003f42:	42a6      	cmp	r6, r4
 8003f44:	d105      	bne.n	8003f52 <__libc_init_array+0x2e>
 8003f46:	bd70      	pop	{r4, r5, r6, pc}
 8003f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f4c:	3601      	adds	r6, #1
 8003f4e:	4798      	blx	r3
 8003f50:	e7ee      	b.n	8003f30 <__libc_init_array+0xc>
 8003f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f56:	3601      	adds	r6, #1
 8003f58:	4798      	blx	r3
 8003f5a:	e7f2      	b.n	8003f42 <__libc_init_array+0x1e>
 8003f5c:	08006408 	.word	0x08006408
 8003f60:	08006408 	.word	0x08006408
 8003f64:	08006408 	.word	0x08006408
 8003f68:	0800640c 	.word	0x0800640c

08003f6c <__retarget_lock_init_recursive>:
 8003f6c:	4770      	bx	lr

08003f6e <__retarget_lock_acquire_recursive>:
 8003f6e:	4770      	bx	lr

08003f70 <__retarget_lock_release_recursive>:
 8003f70:	4770      	bx	lr

08003f72 <memchr>:
 8003f72:	b2c9      	uxtb	r1, r1
 8003f74:	4603      	mov	r3, r0
 8003f76:	4402      	add	r2, r0
 8003f78:	b510      	push	{r4, lr}
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	d101      	bne.n	8003f84 <memchr+0x12>
 8003f80:	2000      	movs	r0, #0
 8003f82:	e003      	b.n	8003f8c <memchr+0x1a>
 8003f84:	7804      	ldrb	r4, [r0, #0]
 8003f86:	3301      	adds	r3, #1
 8003f88:	428c      	cmp	r4, r1
 8003f8a:	d1f6      	bne.n	8003f7a <memchr+0x8>
 8003f8c:	bd10      	pop	{r4, pc}

08003f8e <quorem>:
 8003f8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f92:	6903      	ldr	r3, [r0, #16]
 8003f94:	4607      	mov	r7, r0
 8003f96:	690c      	ldr	r4, [r1, #16]
 8003f98:	42a3      	cmp	r3, r4
 8003f9a:	f2c0 8083 	blt.w	80040a4 <quorem+0x116>
 8003f9e:	3c01      	subs	r4, #1
 8003fa0:	f100 0514 	add.w	r5, r0, #20
 8003fa4:	f101 0814 	add.w	r8, r1, #20
 8003fa8:	00a3      	lsls	r3, r4, #2
 8003faa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003fae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003fb8:	9301      	str	r3, [sp, #4]
 8003fba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	fbb2 f6f3 	udiv	r6, r2, r3
 8003fc6:	d331      	bcc.n	800402c <quorem+0x9e>
 8003fc8:	f04f 0a00 	mov.w	sl, #0
 8003fcc:	46c4      	mov	ip, r8
 8003fce:	46ae      	mov	lr, r5
 8003fd0:	46d3      	mov	fp, sl
 8003fd2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003fd6:	b298      	uxth	r0, r3
 8003fd8:	45e1      	cmp	r9, ip
 8003fda:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8003fde:	fb06 a000 	mla	r0, r6, r0, sl
 8003fe2:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8003fe6:	b280      	uxth	r0, r0
 8003fe8:	fb06 2303 	mla	r3, r6, r3, r2
 8003fec:	f8de 2000 	ldr.w	r2, [lr]
 8003ff0:	b292      	uxth	r2, r2
 8003ff2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003ff6:	eba2 0200 	sub.w	r2, r2, r0
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	f8de 0000 	ldr.w	r0, [lr]
 8004000:	445a      	add	r2, fp
 8004002:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004006:	b292      	uxth	r2, r2
 8004008:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800400c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004010:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004014:	f84e 2b04 	str.w	r2, [lr], #4
 8004018:	d2db      	bcs.n	8003fd2 <quorem+0x44>
 800401a:	9b00      	ldr	r3, [sp, #0]
 800401c:	58eb      	ldr	r3, [r5, r3]
 800401e:	b92b      	cbnz	r3, 800402c <quorem+0x9e>
 8004020:	9b01      	ldr	r3, [sp, #4]
 8004022:	3b04      	subs	r3, #4
 8004024:	429d      	cmp	r5, r3
 8004026:	461a      	mov	r2, r3
 8004028:	d330      	bcc.n	800408c <quorem+0xfe>
 800402a:	613c      	str	r4, [r7, #16]
 800402c:	4638      	mov	r0, r7
 800402e:	f001 f97b 	bl	8005328 <__mcmp>
 8004032:	2800      	cmp	r0, #0
 8004034:	db26      	blt.n	8004084 <quorem+0xf6>
 8004036:	4629      	mov	r1, r5
 8004038:	2000      	movs	r0, #0
 800403a:	f858 2b04 	ldr.w	r2, [r8], #4
 800403e:	f8d1 c000 	ldr.w	ip, [r1]
 8004042:	fa1f fe82 	uxth.w	lr, r2
 8004046:	45c1      	cmp	r9, r8
 8004048:	fa1f f38c 	uxth.w	r3, ip
 800404c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8004050:	eba3 030e 	sub.w	r3, r3, lr
 8004054:	4403      	add	r3, r0
 8004056:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800405a:	b29b      	uxth	r3, r3
 800405c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004060:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004064:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004068:	f841 3b04 	str.w	r3, [r1], #4
 800406c:	d2e5      	bcs.n	800403a <quorem+0xac>
 800406e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004072:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004076:	b922      	cbnz	r2, 8004082 <quorem+0xf4>
 8004078:	3b04      	subs	r3, #4
 800407a:	429d      	cmp	r5, r3
 800407c:	461a      	mov	r2, r3
 800407e:	d30b      	bcc.n	8004098 <quorem+0x10a>
 8004080:	613c      	str	r4, [r7, #16]
 8004082:	3601      	adds	r6, #1
 8004084:	4630      	mov	r0, r6
 8004086:	b003      	add	sp, #12
 8004088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408c:	6812      	ldr	r2, [r2, #0]
 800408e:	3b04      	subs	r3, #4
 8004090:	2a00      	cmp	r2, #0
 8004092:	d1ca      	bne.n	800402a <quorem+0x9c>
 8004094:	3c01      	subs	r4, #1
 8004096:	e7c5      	b.n	8004024 <quorem+0x96>
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	3b04      	subs	r3, #4
 800409c:	2a00      	cmp	r2, #0
 800409e:	d1ef      	bne.n	8004080 <quorem+0xf2>
 80040a0:	3c01      	subs	r4, #1
 80040a2:	e7ea      	b.n	800407a <quorem+0xec>
 80040a4:	2000      	movs	r0, #0
 80040a6:	e7ee      	b.n	8004086 <quorem+0xf8>

080040a8 <_dtoa_r>:
 80040a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ac:	69c7      	ldr	r7, [r0, #28]
 80040ae:	b099      	sub	sp, #100	@ 0x64
 80040b0:	4683      	mov	fp, r0
 80040b2:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80040b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80040b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80040b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80040ba:	ec55 4b10 	vmov	r4, r5, d0
 80040be:	ed8d 0b02 	vstr	d0, [sp, #8]
 80040c2:	b97f      	cbnz	r7, 80040e4 <_dtoa_r+0x3c>
 80040c4:	2010      	movs	r0, #16
 80040c6:	f000 fdfd 	bl	8004cc4 <malloc>
 80040ca:	4602      	mov	r2, r0
 80040cc:	f8cb 001c 	str.w	r0, [fp, #28]
 80040d0:	b920      	cbnz	r0, 80040dc <_dtoa_r+0x34>
 80040d2:	4ba7      	ldr	r3, [pc, #668]	@ (8004370 <_dtoa_r+0x2c8>)
 80040d4:	21ef      	movs	r1, #239	@ 0xef
 80040d6:	48a7      	ldr	r0, [pc, #668]	@ (8004374 <_dtoa_r+0x2cc>)
 80040d8:	f001 fc6e 	bl	80059b8 <__assert_func>
 80040dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80040e0:	6007      	str	r7, [r0, #0]
 80040e2:	60c7      	str	r7, [r0, #12]
 80040e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80040e8:	6819      	ldr	r1, [r3, #0]
 80040ea:	b159      	cbz	r1, 8004104 <_dtoa_r+0x5c>
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	2301      	movs	r3, #1
 80040f0:	4658      	mov	r0, fp
 80040f2:	4093      	lsls	r3, r2
 80040f4:	604a      	str	r2, [r1, #4]
 80040f6:	608b      	str	r3, [r1, #8]
 80040f8:	f000 feda 	bl	8004eb0 <_Bfree>
 80040fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	1e2b      	subs	r3, r5, #0
 8004106:	bfb7      	itett	lt
 8004108:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800410c:	2300      	movge	r3, #0
 800410e:	2201      	movlt	r2, #1
 8004110:	9303      	strlt	r3, [sp, #12]
 8004112:	bfa8      	it	ge
 8004114:	6033      	strge	r3, [r6, #0]
 8004116:	9f03      	ldr	r7, [sp, #12]
 8004118:	4b97      	ldr	r3, [pc, #604]	@ (8004378 <_dtoa_r+0x2d0>)
 800411a:	bfb8      	it	lt
 800411c:	6032      	strlt	r2, [r6, #0]
 800411e:	43bb      	bics	r3, r7
 8004120:	d112      	bne.n	8004148 <_dtoa_r+0xa0>
 8004122:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004126:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800412e:	4323      	orrs	r3, r4
 8004130:	f000 854c 	beq.w	8004bcc <_dtoa_r+0xb24>
 8004134:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004136:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800438c <_dtoa_r+0x2e4>
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 854e 	beq.w	8004bdc <_dtoa_r+0xb34>
 8004140:	f10a 0303 	add.w	r3, sl, #3
 8004144:	f000 bd48 	b.w	8004bd8 <_dtoa_r+0xb30>
 8004148:	ed9d 7b02 	vldr	d7, [sp, #8]
 800414c:	2200      	movs	r2, #0
 800414e:	2300      	movs	r3, #0
 8004150:	ec51 0b17 	vmov	r0, r1, d7
 8004154:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004158:	f7fc fc4e 	bl	80009f8 <__aeabi_dcmpeq>
 800415c:	4680      	mov	r8, r0
 800415e:	b158      	cbz	r0, 8004178 <_dtoa_r+0xd0>
 8004160:	2301      	movs	r3, #1
 8004162:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004168:	b113      	cbz	r3, 8004170 <_dtoa_r+0xc8>
 800416a:	4b84      	ldr	r3, [pc, #528]	@ (800437c <_dtoa_r+0x2d4>)
 800416c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8004390 <_dtoa_r+0x2e8>
 8004174:	f000 bd32 	b.w	8004bdc <_dtoa_r+0xb34>
 8004178:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800417c:	aa16      	add	r2, sp, #88	@ 0x58
 800417e:	a917      	add	r1, sp, #92	@ 0x5c
 8004180:	4658      	mov	r0, fp
 8004182:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004186:	f001 f983 	bl	8005490 <__d2b>
 800418a:	4681      	mov	r9, r0
 800418c:	2e00      	cmp	r6, #0
 800418e:	d075      	beq.n	800427c <_dtoa_r+0x1d4>
 8004190:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004192:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004196:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800419a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800419e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80041a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80041a6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80041aa:	4619      	mov	r1, r3
 80041ac:	2200      	movs	r2, #0
 80041ae:	4b74      	ldr	r3, [pc, #464]	@ (8004380 <_dtoa_r+0x2d8>)
 80041b0:	f7fc f802 	bl	80001b8 <__aeabi_dsub>
 80041b4:	a368      	add	r3, pc, #416	@ (adr r3, 8004358 <_dtoa_r+0x2b0>)
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f7fc f9b5 	bl	8000528 <__aeabi_dmul>
 80041be:	a368      	add	r3, pc, #416	@ (adr r3, 8004360 <_dtoa_r+0x2b8>)
 80041c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c4:	f7fb fffa 	bl	80001bc <__adddf3>
 80041c8:	4604      	mov	r4, r0
 80041ca:	460d      	mov	r5, r1
 80041cc:	4630      	mov	r0, r6
 80041ce:	f7fc f941 	bl	8000454 <__aeabi_i2d>
 80041d2:	a365      	add	r3, pc, #404	@ (adr r3, 8004368 <_dtoa_r+0x2c0>)
 80041d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d8:	f7fc f9a6 	bl	8000528 <__aeabi_dmul>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4620      	mov	r0, r4
 80041e2:	4629      	mov	r1, r5
 80041e4:	f7fb ffea 	bl	80001bc <__adddf3>
 80041e8:	4604      	mov	r4, r0
 80041ea:	460d      	mov	r5, r1
 80041ec:	f7fc fc4c 	bl	8000a88 <__aeabi_d2iz>
 80041f0:	2200      	movs	r2, #0
 80041f2:	4607      	mov	r7, r0
 80041f4:	2300      	movs	r3, #0
 80041f6:	4620      	mov	r0, r4
 80041f8:	4629      	mov	r1, r5
 80041fa:	f7fc fc07 	bl	8000a0c <__aeabi_dcmplt>
 80041fe:	b140      	cbz	r0, 8004212 <_dtoa_r+0x16a>
 8004200:	4638      	mov	r0, r7
 8004202:	f7fc f927 	bl	8000454 <__aeabi_i2d>
 8004206:	4622      	mov	r2, r4
 8004208:	462b      	mov	r3, r5
 800420a:	f7fc fbf5 	bl	80009f8 <__aeabi_dcmpeq>
 800420e:	b900      	cbnz	r0, 8004212 <_dtoa_r+0x16a>
 8004210:	3f01      	subs	r7, #1
 8004212:	2f16      	cmp	r7, #22
 8004214:	d851      	bhi.n	80042ba <_dtoa_r+0x212>
 8004216:	4b5b      	ldr	r3, [pc, #364]	@ (8004384 <_dtoa_r+0x2dc>)
 8004218:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800421c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004224:	f7fc fbf2 	bl	8000a0c <__aeabi_dcmplt>
 8004228:	2800      	cmp	r0, #0
 800422a:	d048      	beq.n	80042be <_dtoa_r+0x216>
 800422c:	3f01      	subs	r7, #1
 800422e:	2300      	movs	r3, #0
 8004230:	9312      	str	r3, [sp, #72]	@ 0x48
 8004232:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004234:	1b9b      	subs	r3, r3, r6
 8004236:	1e5a      	subs	r2, r3, #1
 8004238:	bf46      	itte	mi
 800423a:	f1c3 0801 	rsbmi	r8, r3, #1
 800423e:	2300      	movmi	r3, #0
 8004240:	f04f 0800 	movpl.w	r8, #0
 8004244:	9208      	str	r2, [sp, #32]
 8004246:	bf48      	it	mi
 8004248:	9308      	strmi	r3, [sp, #32]
 800424a:	2f00      	cmp	r7, #0
 800424c:	db39      	blt.n	80042c2 <_dtoa_r+0x21a>
 800424e:	9b08      	ldr	r3, [sp, #32]
 8004250:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004252:	443b      	add	r3, r7
 8004254:	9308      	str	r3, [sp, #32]
 8004256:	2300      	movs	r3, #0
 8004258:	930a      	str	r3, [sp, #40]	@ 0x28
 800425a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800425c:	2b09      	cmp	r3, #9
 800425e:	d864      	bhi.n	800432a <_dtoa_r+0x282>
 8004260:	2b05      	cmp	r3, #5
 8004262:	bfc5      	ittet	gt
 8004264:	3b04      	subgt	r3, #4
 8004266:	2400      	movgt	r4, #0
 8004268:	2401      	movle	r4, #1
 800426a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800426c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800426e:	3b02      	subs	r3, #2
 8004270:	2b03      	cmp	r3, #3
 8004272:	d865      	bhi.n	8004340 <_dtoa_r+0x298>
 8004274:	e8df f003 	tbb	[pc, r3]
 8004278:	5737392c 	.word	0x5737392c
 800427c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004280:	441e      	add	r6, r3
 8004282:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004286:	2b20      	cmp	r3, #32
 8004288:	bfc9      	itett	gt
 800428a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800428e:	f1c3 0320 	rsble	r3, r3, #32
 8004292:	409f      	lslgt	r7, r3
 8004294:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004298:	bfd8      	it	le
 800429a:	fa04 f003 	lslle.w	r0, r4, r3
 800429e:	f106 36ff 	add.w	r6, r6, #4294967295
 80042a2:	bfc4      	itt	gt
 80042a4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80042a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80042ac:	f7fc f8c2 	bl	8000434 <__aeabi_ui2d>
 80042b0:	2201      	movs	r2, #1
 80042b2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80042b6:	9214      	str	r2, [sp, #80]	@ 0x50
 80042b8:	e777      	b.n	80041aa <_dtoa_r+0x102>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e7b8      	b.n	8004230 <_dtoa_r+0x188>
 80042be:	9012      	str	r0, [sp, #72]	@ 0x48
 80042c0:	e7b7      	b.n	8004232 <_dtoa_r+0x18a>
 80042c2:	427b      	negs	r3, r7
 80042c4:	eba8 0807 	sub.w	r8, r8, r7
 80042c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80042ca:	2300      	movs	r3, #0
 80042cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80042ce:	e7c4      	b.n	800425a <_dtoa_r+0x1b2>
 80042d0:	2300      	movs	r3, #0
 80042d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	dc35      	bgt.n	8004346 <_dtoa_r+0x29e>
 80042da:	2301      	movs	r3, #1
 80042dc:	461a      	mov	r2, r3
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	9307      	str	r3, [sp, #28]
 80042e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80042e4:	e00b      	b.n	80042fe <_dtoa_r+0x256>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e7f3      	b.n	80042d2 <_dtoa_r+0x22a>
 80042ea:	2300      	movs	r3, #0
 80042ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80042f0:	18fb      	adds	r3, r7, r3
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	3301      	adds	r3, #1
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	9307      	str	r3, [sp, #28]
 80042fa:	bfb8      	it	lt
 80042fc:	2301      	movlt	r3, #1
 80042fe:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004302:	2100      	movs	r1, #0
 8004304:	2204      	movs	r2, #4
 8004306:	f102 0514 	add.w	r5, r2, #20
 800430a:	429d      	cmp	r5, r3
 800430c:	d91f      	bls.n	800434e <_dtoa_r+0x2a6>
 800430e:	6041      	str	r1, [r0, #4]
 8004310:	4658      	mov	r0, fp
 8004312:	f000 fd8d 	bl	8004e30 <_Balloc>
 8004316:	4682      	mov	sl, r0
 8004318:	2800      	cmp	r0, #0
 800431a:	d13b      	bne.n	8004394 <_dtoa_r+0x2ec>
 800431c:	4b1a      	ldr	r3, [pc, #104]	@ (8004388 <_dtoa_r+0x2e0>)
 800431e:	4602      	mov	r2, r0
 8004320:	f240 11af 	movw	r1, #431	@ 0x1af
 8004324:	e6d7      	b.n	80040d6 <_dtoa_r+0x2e>
 8004326:	2301      	movs	r3, #1
 8004328:	e7e0      	b.n	80042ec <_dtoa_r+0x244>
 800432a:	2401      	movs	r4, #1
 800432c:	2300      	movs	r3, #0
 800432e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004330:	9309      	str	r3, [sp, #36]	@ 0x24
 8004332:	f04f 33ff 	mov.w	r3, #4294967295
 8004336:	2200      	movs	r2, #0
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	9307      	str	r3, [sp, #28]
 800433c:	2312      	movs	r3, #18
 800433e:	e7d0      	b.n	80042e2 <_dtoa_r+0x23a>
 8004340:	2301      	movs	r3, #1
 8004342:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004344:	e7f5      	b.n	8004332 <_dtoa_r+0x28a>
 8004346:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	9307      	str	r3, [sp, #28]
 800434c:	e7d7      	b.n	80042fe <_dtoa_r+0x256>
 800434e:	3101      	adds	r1, #1
 8004350:	0052      	lsls	r2, r2, #1
 8004352:	e7d8      	b.n	8004306 <_dtoa_r+0x25e>
 8004354:	f3af 8000 	nop.w
 8004358:	636f4361 	.word	0x636f4361
 800435c:	3fd287a7 	.word	0x3fd287a7
 8004360:	8b60c8b3 	.word	0x8b60c8b3
 8004364:	3fc68a28 	.word	0x3fc68a28
 8004368:	509f79fb 	.word	0x509f79fb
 800436c:	3fd34413 	.word	0x3fd34413
 8004370:	080060d1 	.word	0x080060d1
 8004374:	080060e8 	.word	0x080060e8
 8004378:	7ff00000 	.word	0x7ff00000
 800437c:	080060a1 	.word	0x080060a1
 8004380:	3ff80000 	.word	0x3ff80000
 8004384:	080061e0 	.word	0x080061e0
 8004388:	08006140 	.word	0x08006140
 800438c:	080060cd 	.word	0x080060cd
 8004390:	080060a0 	.word	0x080060a0
 8004394:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004398:	6018      	str	r0, [r3, #0]
 800439a:	9b07      	ldr	r3, [sp, #28]
 800439c:	2b0e      	cmp	r3, #14
 800439e:	f200 80a4 	bhi.w	80044ea <_dtoa_r+0x442>
 80043a2:	2c00      	cmp	r4, #0
 80043a4:	f000 80a1 	beq.w	80044ea <_dtoa_r+0x442>
 80043a8:	2f00      	cmp	r7, #0
 80043aa:	dd33      	ble.n	8004414 <_dtoa_r+0x36c>
 80043ac:	f007 020f 	and.w	r2, r7, #15
 80043b0:	4bac      	ldr	r3, [pc, #688]	@ (8004664 <_dtoa_r+0x5bc>)
 80043b2:	05f8      	lsls	r0, r7, #23
 80043b4:	ea4f 1427 	mov.w	r4, r7, asr #4
 80043b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80043bc:	ed93 7b00 	vldr	d7, [r3]
 80043c0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80043c4:	d516      	bpl.n	80043f4 <_dtoa_r+0x34c>
 80043c6:	4ba8      	ldr	r3, [pc, #672]	@ (8004668 <_dtoa_r+0x5c0>)
 80043c8:	f004 040f 	and.w	r4, r4, #15
 80043cc:	2603      	movs	r6, #3
 80043ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80043d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80043d6:	f7fc f9d1 	bl	800077c <__aeabi_ddiv>
 80043da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043de:	4da2      	ldr	r5, [pc, #648]	@ (8004668 <_dtoa_r+0x5c0>)
 80043e0:	b954      	cbnz	r4, 80043f8 <_dtoa_r+0x350>
 80043e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043ea:	f7fc f9c7 	bl	800077c <__aeabi_ddiv>
 80043ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043f2:	e028      	b.n	8004446 <_dtoa_r+0x39e>
 80043f4:	2602      	movs	r6, #2
 80043f6:	e7f2      	b.n	80043de <_dtoa_r+0x336>
 80043f8:	07e1      	lsls	r1, r4, #31
 80043fa:	d508      	bpl.n	800440e <_dtoa_r+0x366>
 80043fc:	3601      	adds	r6, #1
 80043fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004402:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004406:	f7fc f88f 	bl	8000528 <__aeabi_dmul>
 800440a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800440e:	1064      	asrs	r4, r4, #1
 8004410:	3508      	adds	r5, #8
 8004412:	e7e5      	b.n	80043e0 <_dtoa_r+0x338>
 8004414:	f000 80d2 	beq.w	80045bc <_dtoa_r+0x514>
 8004418:	427c      	negs	r4, r7
 800441a:	4b92      	ldr	r3, [pc, #584]	@ (8004664 <_dtoa_r+0x5bc>)
 800441c:	4d92      	ldr	r5, [pc, #584]	@ (8004668 <_dtoa_r+0x5c0>)
 800441e:	2602      	movs	r6, #2
 8004420:	f004 020f 	and.w	r2, r4, #15
 8004424:	1124      	asrs	r4, r4, #4
 8004426:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800442a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	f7fc f879 	bl	8000528 <__aeabi_dmul>
 8004436:	2300      	movs	r3, #0
 8004438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800443c:	2c00      	cmp	r4, #0
 800443e:	f040 80b2 	bne.w	80045a6 <_dtoa_r+0x4fe>
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1d3      	bne.n	80043ee <_dtoa_r+0x346>
 8004446:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004448:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 80b7 	beq.w	80045c0 <_dtoa_r+0x518>
 8004452:	2200      	movs	r2, #0
 8004454:	4b85      	ldr	r3, [pc, #532]	@ (800466c <_dtoa_r+0x5c4>)
 8004456:	4620      	mov	r0, r4
 8004458:	4629      	mov	r1, r5
 800445a:	f7fc fad7 	bl	8000a0c <__aeabi_dcmplt>
 800445e:	2800      	cmp	r0, #0
 8004460:	f000 80ae 	beq.w	80045c0 <_dtoa_r+0x518>
 8004464:	9b07      	ldr	r3, [sp, #28]
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 80aa 	beq.w	80045c0 <_dtoa_r+0x518>
 800446c:	9b00      	ldr	r3, [sp, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	dd37      	ble.n	80044e2 <_dtoa_r+0x43a>
 8004472:	1e7b      	subs	r3, r7, #1
 8004474:	4620      	mov	r0, r4
 8004476:	2200      	movs	r2, #0
 8004478:	4629      	mov	r1, r5
 800447a:	9304      	str	r3, [sp, #16]
 800447c:	3601      	adds	r6, #1
 800447e:	4b7c      	ldr	r3, [pc, #496]	@ (8004670 <_dtoa_r+0x5c8>)
 8004480:	f7fc f852 	bl	8000528 <__aeabi_dmul>
 8004484:	9c00      	ldr	r4, [sp, #0]
 8004486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800448a:	4630      	mov	r0, r6
 800448c:	f7fb ffe2 	bl	8000454 <__aeabi_i2d>
 8004490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004494:	f7fc f848 	bl	8000528 <__aeabi_dmul>
 8004498:	2200      	movs	r2, #0
 800449a:	4b76      	ldr	r3, [pc, #472]	@ (8004674 <_dtoa_r+0x5cc>)
 800449c:	f7fb fe8e 	bl	80001bc <__adddf3>
 80044a0:	4605      	mov	r5, r0
 80044a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80044a6:	2c00      	cmp	r4, #0
 80044a8:	f040 808d 	bne.w	80045c6 <_dtoa_r+0x51e>
 80044ac:	2200      	movs	r2, #0
 80044ae:	4b72      	ldr	r3, [pc, #456]	@ (8004678 <_dtoa_r+0x5d0>)
 80044b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044b4:	f7fb fe80 	bl	80001b8 <__aeabi_dsub>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044c0:	462a      	mov	r2, r5
 80044c2:	4633      	mov	r3, r6
 80044c4:	f7fc fac0 	bl	8000a48 <__aeabi_dcmpgt>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	f040 828b 	bne.w	80049e4 <_dtoa_r+0x93c>
 80044ce:	462a      	mov	r2, r5
 80044d0:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80044d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044d8:	f7fc fa98 	bl	8000a0c <__aeabi_dcmplt>
 80044dc:	2800      	cmp	r0, #0
 80044de:	f040 8128 	bne.w	8004732 <_dtoa_r+0x68a>
 80044e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80044e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80044ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f2c0 815a 	blt.w	80047a6 <_dtoa_r+0x6fe>
 80044f2:	2f0e      	cmp	r7, #14
 80044f4:	f300 8157 	bgt.w	80047a6 <_dtoa_r+0x6fe>
 80044f8:	4b5a      	ldr	r3, [pc, #360]	@ (8004664 <_dtoa_r+0x5bc>)
 80044fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80044fe:	ed93 7b00 	vldr	d7, [r3]
 8004502:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004504:	2b00      	cmp	r3, #0
 8004506:	ed8d 7b00 	vstr	d7, [sp]
 800450a:	da03      	bge.n	8004514 <_dtoa_r+0x46c>
 800450c:	9b07      	ldr	r3, [sp, #28]
 800450e:	2b00      	cmp	r3, #0
 8004510:	f340 8101 	ble.w	8004716 <_dtoa_r+0x66e>
 8004514:	4656      	mov	r6, sl
 8004516:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800451a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800451e:	4620      	mov	r0, r4
 8004520:	4629      	mov	r1, r5
 8004522:	f7fc f92b 	bl	800077c <__aeabi_ddiv>
 8004526:	f7fc faaf 	bl	8000a88 <__aeabi_d2iz>
 800452a:	4680      	mov	r8, r0
 800452c:	f7fb ff92 	bl	8000454 <__aeabi_i2d>
 8004530:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004534:	f7fb fff8 	bl	8000528 <__aeabi_dmul>
 8004538:	4602      	mov	r2, r0
 800453a:	4620      	mov	r0, r4
 800453c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004540:	460b      	mov	r3, r1
 8004542:	4629      	mov	r1, r5
 8004544:	f7fb fe38 	bl	80001b8 <__aeabi_dsub>
 8004548:	9d07      	ldr	r5, [sp, #28]
 800454a:	f806 4b01 	strb.w	r4, [r6], #1
 800454e:	eba6 040a 	sub.w	r4, r6, sl
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	42a5      	cmp	r5, r4
 8004558:	f040 8117 	bne.w	800478a <_dtoa_r+0x6e2>
 800455c:	f7fb fe2e 	bl	80001bc <__adddf3>
 8004560:	4604      	mov	r4, r0
 8004562:	460d      	mov	r5, r1
 8004564:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004568:	f7fc fa6e 	bl	8000a48 <__aeabi_dcmpgt>
 800456c:	2800      	cmp	r0, #0
 800456e:	f040 80f9 	bne.w	8004764 <_dtoa_r+0x6bc>
 8004572:	4620      	mov	r0, r4
 8004574:	4629      	mov	r1, r5
 8004576:	e9dd 2300 	ldrd	r2, r3, [sp]
 800457a:	f7fc fa3d 	bl	80009f8 <__aeabi_dcmpeq>
 800457e:	b118      	cbz	r0, 8004588 <_dtoa_r+0x4e0>
 8004580:	f018 0f01 	tst.w	r8, #1
 8004584:	f040 80ee 	bne.w	8004764 <_dtoa_r+0x6bc>
 8004588:	4649      	mov	r1, r9
 800458a:	4658      	mov	r0, fp
 800458c:	f000 fc90 	bl	8004eb0 <_Bfree>
 8004590:	2300      	movs	r3, #0
 8004592:	3701      	adds	r7, #1
 8004594:	7033      	strb	r3, [r6, #0]
 8004596:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004598:	601f      	str	r7, [r3, #0]
 800459a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 831d 	beq.w	8004bdc <_dtoa_r+0xb34>
 80045a2:	601e      	str	r6, [r3, #0]
 80045a4:	e31a      	b.n	8004bdc <_dtoa_r+0xb34>
 80045a6:	07e2      	lsls	r2, r4, #31
 80045a8:	d505      	bpl.n	80045b6 <_dtoa_r+0x50e>
 80045aa:	3601      	adds	r6, #1
 80045ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80045b0:	f7fb ffba 	bl	8000528 <__aeabi_dmul>
 80045b4:	2301      	movs	r3, #1
 80045b6:	1064      	asrs	r4, r4, #1
 80045b8:	3508      	adds	r5, #8
 80045ba:	e73f      	b.n	800443c <_dtoa_r+0x394>
 80045bc:	2602      	movs	r6, #2
 80045be:	e742      	b.n	8004446 <_dtoa_r+0x39e>
 80045c0:	9c07      	ldr	r4, [sp, #28]
 80045c2:	9704      	str	r7, [sp, #16]
 80045c4:	e761      	b.n	800448a <_dtoa_r+0x3e2>
 80045c6:	4b27      	ldr	r3, [pc, #156]	@ (8004664 <_dtoa_r+0x5bc>)
 80045c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80045ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80045ce:	4454      	add	r4, sl
 80045d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80045d4:	2900      	cmp	r1, #0
 80045d6:	d053      	beq.n	8004680 <_dtoa_r+0x5d8>
 80045d8:	2000      	movs	r0, #0
 80045da:	4928      	ldr	r1, [pc, #160]	@ (800467c <_dtoa_r+0x5d4>)
 80045dc:	f7fc f8ce 	bl	800077c <__aeabi_ddiv>
 80045e0:	4633      	mov	r3, r6
 80045e2:	4656      	mov	r6, sl
 80045e4:	462a      	mov	r2, r5
 80045e6:	f7fb fde7 	bl	80001b8 <__aeabi_dsub>
 80045ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80045ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045f2:	f7fc fa49 	bl	8000a88 <__aeabi_d2iz>
 80045f6:	4605      	mov	r5, r0
 80045f8:	f7fb ff2c 	bl	8000454 <__aeabi_i2d>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	3530      	adds	r5, #48	@ 0x30
 8004602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004606:	f7fb fdd7 	bl	80001b8 <__aeabi_dsub>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	f806 5b01 	strb.w	r5, [r6], #1
 8004612:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004616:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800461a:	f7fc f9f7 	bl	8000a0c <__aeabi_dcmplt>
 800461e:	2800      	cmp	r0, #0
 8004620:	d171      	bne.n	8004706 <_dtoa_r+0x65e>
 8004622:	2000      	movs	r0, #0
 8004624:	4911      	ldr	r1, [pc, #68]	@ (800466c <_dtoa_r+0x5c4>)
 8004626:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800462a:	f7fb fdc5 	bl	80001b8 <__aeabi_dsub>
 800462e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004632:	f7fc f9eb 	bl	8000a0c <__aeabi_dcmplt>
 8004636:	2800      	cmp	r0, #0
 8004638:	f040 8095 	bne.w	8004766 <_dtoa_r+0x6be>
 800463c:	42a6      	cmp	r6, r4
 800463e:	f43f af50 	beq.w	80044e2 <_dtoa_r+0x43a>
 8004642:	2200      	movs	r2, #0
 8004644:	4b0a      	ldr	r3, [pc, #40]	@ (8004670 <_dtoa_r+0x5c8>)
 8004646:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800464a:	f7fb ff6d 	bl	8000528 <__aeabi_dmul>
 800464e:	2200      	movs	r2, #0
 8004650:	4b07      	ldr	r3, [pc, #28]	@ (8004670 <_dtoa_r+0x5c8>)
 8004652:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800465a:	f7fb ff65 	bl	8000528 <__aeabi_dmul>
 800465e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004662:	e7c4      	b.n	80045ee <_dtoa_r+0x546>
 8004664:	080061e0 	.word	0x080061e0
 8004668:	080061b8 	.word	0x080061b8
 800466c:	3ff00000 	.word	0x3ff00000
 8004670:	40240000 	.word	0x40240000
 8004674:	401c0000 	.word	0x401c0000
 8004678:	40140000 	.word	0x40140000
 800467c:	3fe00000 	.word	0x3fe00000
 8004680:	4631      	mov	r1, r6
 8004682:	4656      	mov	r6, sl
 8004684:	4628      	mov	r0, r5
 8004686:	f7fb ff4f 	bl	8000528 <__aeabi_dmul>
 800468a:	9415      	str	r4, [sp, #84]	@ 0x54
 800468c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004694:	f7fc f9f8 	bl	8000a88 <__aeabi_d2iz>
 8004698:	4605      	mov	r5, r0
 800469a:	f7fb fedb 	bl	8000454 <__aeabi_i2d>
 800469e:	4602      	mov	r2, r0
 80046a0:	3530      	adds	r5, #48	@ 0x30
 80046a2:	460b      	mov	r3, r1
 80046a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046a8:	f7fb fd86 	bl	80001b8 <__aeabi_dsub>
 80046ac:	f806 5b01 	strb.w	r5, [r6], #1
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	42a6      	cmp	r6, r4
 80046b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	d124      	bne.n	800470a <_dtoa_r+0x662>
 80046c0:	4bac      	ldr	r3, [pc, #688]	@ (8004974 <_dtoa_r+0x8cc>)
 80046c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80046c6:	f7fb fd79 	bl	80001bc <__adddf3>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046d2:	f7fc f9b9 	bl	8000a48 <__aeabi_dcmpgt>
 80046d6:	2800      	cmp	r0, #0
 80046d8:	d145      	bne.n	8004766 <_dtoa_r+0x6be>
 80046da:	2000      	movs	r0, #0
 80046dc:	49a5      	ldr	r1, [pc, #660]	@ (8004974 <_dtoa_r+0x8cc>)
 80046de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80046e2:	f7fb fd69 	bl	80001b8 <__aeabi_dsub>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046ee:	f7fc f98d 	bl	8000a0c <__aeabi_dcmplt>
 80046f2:	2800      	cmp	r0, #0
 80046f4:	f43f aef5 	beq.w	80044e2 <_dtoa_r+0x43a>
 80046f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80046fa:	1e73      	subs	r3, r6, #1
 80046fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80046fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004702:	2b30      	cmp	r3, #48	@ 0x30
 8004704:	d0f8      	beq.n	80046f8 <_dtoa_r+0x650>
 8004706:	9f04      	ldr	r7, [sp, #16]
 8004708:	e73e      	b.n	8004588 <_dtoa_r+0x4e0>
 800470a:	4b9b      	ldr	r3, [pc, #620]	@ (8004978 <_dtoa_r+0x8d0>)
 800470c:	f7fb ff0c 	bl	8000528 <__aeabi_dmul>
 8004710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004714:	e7bc      	b.n	8004690 <_dtoa_r+0x5e8>
 8004716:	d10c      	bne.n	8004732 <_dtoa_r+0x68a>
 8004718:	2200      	movs	r2, #0
 800471a:	4b98      	ldr	r3, [pc, #608]	@ (800497c <_dtoa_r+0x8d4>)
 800471c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004720:	f7fb ff02 	bl	8000528 <__aeabi_dmul>
 8004724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004728:	f7fc f984 	bl	8000a34 <__aeabi_dcmpge>
 800472c:	2800      	cmp	r0, #0
 800472e:	f000 8157 	beq.w	80049e0 <_dtoa_r+0x938>
 8004732:	2400      	movs	r4, #0
 8004734:	4625      	mov	r5, r4
 8004736:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004738:	4656      	mov	r6, sl
 800473a:	43db      	mvns	r3, r3
 800473c:	9304      	str	r3, [sp, #16]
 800473e:	2700      	movs	r7, #0
 8004740:	4621      	mov	r1, r4
 8004742:	4658      	mov	r0, fp
 8004744:	f000 fbb4 	bl	8004eb0 <_Bfree>
 8004748:	2d00      	cmp	r5, #0
 800474a:	d0dc      	beq.n	8004706 <_dtoa_r+0x65e>
 800474c:	b12f      	cbz	r7, 800475a <_dtoa_r+0x6b2>
 800474e:	42af      	cmp	r7, r5
 8004750:	d003      	beq.n	800475a <_dtoa_r+0x6b2>
 8004752:	4639      	mov	r1, r7
 8004754:	4658      	mov	r0, fp
 8004756:	f000 fbab 	bl	8004eb0 <_Bfree>
 800475a:	4629      	mov	r1, r5
 800475c:	4658      	mov	r0, fp
 800475e:	f000 fba7 	bl	8004eb0 <_Bfree>
 8004762:	e7d0      	b.n	8004706 <_dtoa_r+0x65e>
 8004764:	9704      	str	r7, [sp, #16]
 8004766:	4633      	mov	r3, r6
 8004768:	461e      	mov	r6, r3
 800476a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800476e:	2a39      	cmp	r2, #57	@ 0x39
 8004770:	d107      	bne.n	8004782 <_dtoa_r+0x6da>
 8004772:	459a      	cmp	sl, r3
 8004774:	d1f8      	bne.n	8004768 <_dtoa_r+0x6c0>
 8004776:	9a04      	ldr	r2, [sp, #16]
 8004778:	3201      	adds	r2, #1
 800477a:	9204      	str	r2, [sp, #16]
 800477c:	2230      	movs	r2, #48	@ 0x30
 800477e:	f88a 2000 	strb.w	r2, [sl]
 8004782:	781a      	ldrb	r2, [r3, #0]
 8004784:	3201      	adds	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
 8004788:	e7bd      	b.n	8004706 <_dtoa_r+0x65e>
 800478a:	2200      	movs	r2, #0
 800478c:	4b7a      	ldr	r3, [pc, #488]	@ (8004978 <_dtoa_r+0x8d0>)
 800478e:	f7fb fecb 	bl	8000528 <__aeabi_dmul>
 8004792:	2200      	movs	r2, #0
 8004794:	2300      	movs	r3, #0
 8004796:	4604      	mov	r4, r0
 8004798:	460d      	mov	r5, r1
 800479a:	f7fc f92d 	bl	80009f8 <__aeabi_dcmpeq>
 800479e:	2800      	cmp	r0, #0
 80047a0:	f43f aebb 	beq.w	800451a <_dtoa_r+0x472>
 80047a4:	e6f0      	b.n	8004588 <_dtoa_r+0x4e0>
 80047a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80047a8:	2a00      	cmp	r2, #0
 80047aa:	f000 80db 	beq.w	8004964 <_dtoa_r+0x8bc>
 80047ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047b0:	2a01      	cmp	r2, #1
 80047b2:	f300 80bf 	bgt.w	8004934 <_dtoa_r+0x88c>
 80047b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80047b8:	2a00      	cmp	r2, #0
 80047ba:	f000 80b7 	beq.w	800492c <_dtoa_r+0x884>
 80047be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80047c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80047c4:	4646      	mov	r6, r8
 80047c6:	9a08      	ldr	r2, [sp, #32]
 80047c8:	2101      	movs	r1, #1
 80047ca:	4658      	mov	r0, fp
 80047cc:	4498      	add	r8, r3
 80047ce:	441a      	add	r2, r3
 80047d0:	9208      	str	r2, [sp, #32]
 80047d2:	f000 fc23 	bl	800501c <__i2b>
 80047d6:	4605      	mov	r5, r0
 80047d8:	b15e      	cbz	r6, 80047f2 <_dtoa_r+0x74a>
 80047da:	9b08      	ldr	r3, [sp, #32]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	dd08      	ble.n	80047f2 <_dtoa_r+0x74a>
 80047e0:	42b3      	cmp	r3, r6
 80047e2:	9a08      	ldr	r2, [sp, #32]
 80047e4:	bfa8      	it	ge
 80047e6:	4633      	movge	r3, r6
 80047e8:	eba8 0803 	sub.w	r8, r8, r3
 80047ec:	1af6      	subs	r6, r6, r3
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	9308      	str	r3, [sp, #32]
 80047f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80047f4:	b1f3      	cbz	r3, 8004834 <_dtoa_r+0x78c>
 80047f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 80b7 	beq.w	800496c <_dtoa_r+0x8c4>
 80047fe:	b18c      	cbz	r4, 8004824 <_dtoa_r+0x77c>
 8004800:	4629      	mov	r1, r5
 8004802:	4622      	mov	r2, r4
 8004804:	4658      	mov	r0, fp
 8004806:	f000 fcc9 	bl	800519c <__pow5mult>
 800480a:	464a      	mov	r2, r9
 800480c:	4601      	mov	r1, r0
 800480e:	4605      	mov	r5, r0
 8004810:	4658      	mov	r0, fp
 8004812:	f000 fc19 	bl	8005048 <__multiply>
 8004816:	4649      	mov	r1, r9
 8004818:	9004      	str	r0, [sp, #16]
 800481a:	4658      	mov	r0, fp
 800481c:	f000 fb48 	bl	8004eb0 <_Bfree>
 8004820:	9b04      	ldr	r3, [sp, #16]
 8004822:	4699      	mov	r9, r3
 8004824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004826:	1b1a      	subs	r2, r3, r4
 8004828:	d004      	beq.n	8004834 <_dtoa_r+0x78c>
 800482a:	4649      	mov	r1, r9
 800482c:	4658      	mov	r0, fp
 800482e:	f000 fcb5 	bl	800519c <__pow5mult>
 8004832:	4681      	mov	r9, r0
 8004834:	2101      	movs	r1, #1
 8004836:	4658      	mov	r0, fp
 8004838:	f000 fbf0 	bl	800501c <__i2b>
 800483c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800483e:	4604      	mov	r4, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 81cf 	beq.w	8004be4 <_dtoa_r+0xb3c>
 8004846:	461a      	mov	r2, r3
 8004848:	4601      	mov	r1, r0
 800484a:	4658      	mov	r0, fp
 800484c:	f000 fca6 	bl	800519c <__pow5mult>
 8004850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004852:	4604      	mov	r4, r0
 8004854:	2b01      	cmp	r3, #1
 8004856:	f300 8095 	bgt.w	8004984 <_dtoa_r+0x8dc>
 800485a:	9b02      	ldr	r3, [sp, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	f040 8087 	bne.w	8004970 <_dtoa_r+0x8c8>
 8004862:	9b03      	ldr	r3, [sp, #12]
 8004864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004868:	2b00      	cmp	r3, #0
 800486a:	f040 8089 	bne.w	8004980 <_dtoa_r+0x8d8>
 800486e:	9b03      	ldr	r3, [sp, #12]
 8004870:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004874:	0d1b      	lsrs	r3, r3, #20
 8004876:	051b      	lsls	r3, r3, #20
 8004878:	b12b      	cbz	r3, 8004886 <_dtoa_r+0x7de>
 800487a:	9b08      	ldr	r3, [sp, #32]
 800487c:	f108 0801 	add.w	r8, r8, #1
 8004880:	3301      	adds	r3, #1
 8004882:	9308      	str	r3, [sp, #32]
 8004884:	2301      	movs	r3, #1
 8004886:	930a      	str	r3, [sp, #40]	@ 0x28
 8004888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 81b0 	beq.w	8004bf0 <_dtoa_r+0xb48>
 8004890:	6923      	ldr	r3, [r4, #16]
 8004892:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004896:	6918      	ldr	r0, [r3, #16]
 8004898:	f000 fb74 	bl	8004f84 <__hi0bits>
 800489c:	f1c0 0020 	rsb	r0, r0, #32
 80048a0:	9b08      	ldr	r3, [sp, #32]
 80048a2:	4418      	add	r0, r3
 80048a4:	f010 001f 	ands.w	r0, r0, #31
 80048a8:	d077      	beq.n	800499a <_dtoa_r+0x8f2>
 80048aa:	f1c0 0320 	rsb	r3, r0, #32
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	dd6b      	ble.n	800498a <_dtoa_r+0x8e2>
 80048b2:	f1c0 001c 	rsb	r0, r0, #28
 80048b6:	9b08      	ldr	r3, [sp, #32]
 80048b8:	4480      	add	r8, r0
 80048ba:	4403      	add	r3, r0
 80048bc:	4406      	add	r6, r0
 80048be:	9308      	str	r3, [sp, #32]
 80048c0:	f1b8 0f00 	cmp.w	r8, #0
 80048c4:	dd05      	ble.n	80048d2 <_dtoa_r+0x82a>
 80048c6:	4649      	mov	r1, r9
 80048c8:	4642      	mov	r2, r8
 80048ca:	4658      	mov	r0, fp
 80048cc:	f000 fcc0 	bl	8005250 <__lshift>
 80048d0:	4681      	mov	r9, r0
 80048d2:	9b08      	ldr	r3, [sp, #32]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	dd05      	ble.n	80048e4 <_dtoa_r+0x83c>
 80048d8:	4621      	mov	r1, r4
 80048da:	461a      	mov	r2, r3
 80048dc:	4658      	mov	r0, fp
 80048de:	f000 fcb7 	bl	8005250 <__lshift>
 80048e2:	4604      	mov	r4, r0
 80048e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d059      	beq.n	800499e <_dtoa_r+0x8f6>
 80048ea:	4621      	mov	r1, r4
 80048ec:	4648      	mov	r0, r9
 80048ee:	f000 fd1b 	bl	8005328 <__mcmp>
 80048f2:	2800      	cmp	r0, #0
 80048f4:	da53      	bge.n	800499e <_dtoa_r+0x8f6>
 80048f6:	1e7b      	subs	r3, r7, #1
 80048f8:	4649      	mov	r1, r9
 80048fa:	220a      	movs	r2, #10
 80048fc:	4658      	mov	r0, fp
 80048fe:	9304      	str	r3, [sp, #16]
 8004900:	2300      	movs	r3, #0
 8004902:	f000 faf7 	bl	8004ef4 <__multadd>
 8004906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004908:	4681      	mov	r9, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 8172 	beq.w	8004bf4 <_dtoa_r+0xb4c>
 8004910:	2300      	movs	r3, #0
 8004912:	4629      	mov	r1, r5
 8004914:	220a      	movs	r2, #10
 8004916:	4658      	mov	r0, fp
 8004918:	f000 faec 	bl	8004ef4 <__multadd>
 800491c:	9b00      	ldr	r3, [sp, #0]
 800491e:	4605      	mov	r5, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	dc67      	bgt.n	80049f4 <_dtoa_r+0x94c>
 8004924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004926:	2b02      	cmp	r3, #2
 8004928:	dc41      	bgt.n	80049ae <_dtoa_r+0x906>
 800492a:	e063      	b.n	80049f4 <_dtoa_r+0x94c>
 800492c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800492e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004932:	e746      	b.n	80047c2 <_dtoa_r+0x71a>
 8004934:	9b07      	ldr	r3, [sp, #28]
 8004936:	1e5c      	subs	r4, r3, #1
 8004938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800493a:	42a3      	cmp	r3, r4
 800493c:	bfb7      	itett	lt
 800493e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004940:	1b1c      	subge	r4, r3, r4
 8004942:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004944:	1ae3      	sublt	r3, r4, r3
 8004946:	bfbe      	ittt	lt
 8004948:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800494a:	2400      	movlt	r4, #0
 800494c:	18d2      	addlt	r2, r2, r3
 800494e:	9b07      	ldr	r3, [sp, #28]
 8004950:	bfb8      	it	lt
 8004952:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004954:	2b00      	cmp	r3, #0
 8004956:	bfb5      	itete	lt
 8004958:	eba8 0603 	sublt.w	r6, r8, r3
 800495c:	4646      	movge	r6, r8
 800495e:	2300      	movlt	r3, #0
 8004960:	9b07      	ldrge	r3, [sp, #28]
 8004962:	e730      	b.n	80047c6 <_dtoa_r+0x71e>
 8004964:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004966:	4646      	mov	r6, r8
 8004968:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800496a:	e735      	b.n	80047d8 <_dtoa_r+0x730>
 800496c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800496e:	e75c      	b.n	800482a <_dtoa_r+0x782>
 8004970:	2300      	movs	r3, #0
 8004972:	e788      	b.n	8004886 <_dtoa_r+0x7de>
 8004974:	3fe00000 	.word	0x3fe00000
 8004978:	40240000 	.word	0x40240000
 800497c:	40140000 	.word	0x40140000
 8004980:	9b02      	ldr	r3, [sp, #8]
 8004982:	e780      	b.n	8004886 <_dtoa_r+0x7de>
 8004984:	2300      	movs	r3, #0
 8004986:	930a      	str	r3, [sp, #40]	@ 0x28
 8004988:	e782      	b.n	8004890 <_dtoa_r+0x7e8>
 800498a:	d099      	beq.n	80048c0 <_dtoa_r+0x818>
 800498c:	331c      	adds	r3, #28
 800498e:	9a08      	ldr	r2, [sp, #32]
 8004990:	441a      	add	r2, r3
 8004992:	4498      	add	r8, r3
 8004994:	441e      	add	r6, r3
 8004996:	9208      	str	r2, [sp, #32]
 8004998:	e792      	b.n	80048c0 <_dtoa_r+0x818>
 800499a:	4603      	mov	r3, r0
 800499c:	e7f6      	b.n	800498c <_dtoa_r+0x8e4>
 800499e:	9b07      	ldr	r3, [sp, #28]
 80049a0:	9704      	str	r7, [sp, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	dc20      	bgt.n	80049e8 <_dtoa_r+0x940>
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	dd1e      	ble.n	80049ec <_dtoa_r+0x944>
 80049ae:	9b00      	ldr	r3, [sp, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f47f aec0 	bne.w	8004736 <_dtoa_r+0x68e>
 80049b6:	4621      	mov	r1, r4
 80049b8:	2205      	movs	r2, #5
 80049ba:	4658      	mov	r0, fp
 80049bc:	f000 fa9a 	bl	8004ef4 <__multadd>
 80049c0:	4601      	mov	r1, r0
 80049c2:	4604      	mov	r4, r0
 80049c4:	4648      	mov	r0, r9
 80049c6:	f000 fcaf 	bl	8005328 <__mcmp>
 80049ca:	2800      	cmp	r0, #0
 80049cc:	f77f aeb3 	ble.w	8004736 <_dtoa_r+0x68e>
 80049d0:	2331      	movs	r3, #49	@ 0x31
 80049d2:	4656      	mov	r6, sl
 80049d4:	f806 3b01 	strb.w	r3, [r6], #1
 80049d8:	9b04      	ldr	r3, [sp, #16]
 80049da:	3301      	adds	r3, #1
 80049dc:	9304      	str	r3, [sp, #16]
 80049de:	e6ae      	b.n	800473e <_dtoa_r+0x696>
 80049e0:	9c07      	ldr	r4, [sp, #28]
 80049e2:	9704      	str	r7, [sp, #16]
 80049e4:	4625      	mov	r5, r4
 80049e6:	e7f3      	b.n	80049d0 <_dtoa_r+0x928>
 80049e8:	9b07      	ldr	r3, [sp, #28]
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 8104 	beq.w	8004bfc <_dtoa_r+0xb54>
 80049f4:	2e00      	cmp	r6, #0
 80049f6:	dd05      	ble.n	8004a04 <_dtoa_r+0x95c>
 80049f8:	4629      	mov	r1, r5
 80049fa:	4632      	mov	r2, r6
 80049fc:	4658      	mov	r0, fp
 80049fe:	f000 fc27 	bl	8005250 <__lshift>
 8004a02:	4605      	mov	r5, r0
 8004a04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d05a      	beq.n	8004ac0 <_dtoa_r+0xa18>
 8004a0a:	6869      	ldr	r1, [r5, #4]
 8004a0c:	4658      	mov	r0, fp
 8004a0e:	f000 fa0f 	bl	8004e30 <_Balloc>
 8004a12:	4606      	mov	r6, r0
 8004a14:	b928      	cbnz	r0, 8004a22 <_dtoa_r+0x97a>
 8004a16:	4b84      	ldr	r3, [pc, #528]	@ (8004c28 <_dtoa_r+0xb80>)
 8004a18:	4602      	mov	r2, r0
 8004a1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004a1e:	f7ff bb5a 	b.w	80040d6 <_dtoa_r+0x2e>
 8004a22:	692a      	ldr	r2, [r5, #16]
 8004a24:	f105 010c 	add.w	r1, r5, #12
 8004a28:	300c      	adds	r0, #12
 8004a2a:	3202      	adds	r2, #2
 8004a2c:	0092      	lsls	r2, r2, #2
 8004a2e:	f000 ffb5 	bl	800599c <memcpy>
 8004a32:	2201      	movs	r2, #1
 8004a34:	4631      	mov	r1, r6
 8004a36:	4658      	mov	r0, fp
 8004a38:	f000 fc0a 	bl	8005250 <__lshift>
 8004a3c:	f10a 0301 	add.w	r3, sl, #1
 8004a40:	462f      	mov	r7, r5
 8004a42:	4605      	mov	r5, r0
 8004a44:	9307      	str	r3, [sp, #28]
 8004a46:	9b00      	ldr	r3, [sp, #0]
 8004a48:	4453      	add	r3, sl
 8004a4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a4c:	9b02      	ldr	r3, [sp, #8]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a54:	9b07      	ldr	r3, [sp, #28]
 8004a56:	4621      	mov	r1, r4
 8004a58:	4648      	mov	r0, r9
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	f7ff fa96 	bl	8003f8e <quorem>
 8004a62:	4639      	mov	r1, r7
 8004a64:	9002      	str	r0, [sp, #8]
 8004a66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004a6a:	4648      	mov	r0, r9
 8004a6c:	f000 fc5c 	bl	8005328 <__mcmp>
 8004a70:	462a      	mov	r2, r5
 8004a72:	9008      	str	r0, [sp, #32]
 8004a74:	4621      	mov	r1, r4
 8004a76:	4658      	mov	r0, fp
 8004a78:	f000 fc72 	bl	8005360 <__mdiff>
 8004a7c:	68c2      	ldr	r2, [r0, #12]
 8004a7e:	4606      	mov	r6, r0
 8004a80:	bb02      	cbnz	r2, 8004ac4 <_dtoa_r+0xa1c>
 8004a82:	4601      	mov	r1, r0
 8004a84:	4648      	mov	r0, r9
 8004a86:	f000 fc4f 	bl	8005328 <__mcmp>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	4631      	mov	r1, r6
 8004a8e:	4658      	mov	r0, fp
 8004a90:	920e      	str	r2, [sp, #56]	@ 0x38
 8004a92:	f000 fa0d 	bl	8004eb0 <_Bfree>
 8004a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004a9a:	9e07      	ldr	r6, [sp, #28]
 8004a9c:	ea43 0102 	orr.w	r1, r3, r2
 8004aa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004aa2:	4319      	orrs	r1, r3
 8004aa4:	d110      	bne.n	8004ac8 <_dtoa_r+0xa20>
 8004aa6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004aaa:	d029      	beq.n	8004b00 <_dtoa_r+0xa58>
 8004aac:	9b08      	ldr	r3, [sp, #32]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	dd02      	ble.n	8004ab8 <_dtoa_r+0xa10>
 8004ab2:	9b02      	ldr	r3, [sp, #8]
 8004ab4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004ab8:	9b00      	ldr	r3, [sp, #0]
 8004aba:	f883 8000 	strb.w	r8, [r3]
 8004abe:	e63f      	b.n	8004740 <_dtoa_r+0x698>
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	e7bb      	b.n	8004a3c <_dtoa_r+0x994>
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	e7e1      	b.n	8004a8c <_dtoa_r+0x9e4>
 8004ac8:	9b08      	ldr	r3, [sp, #32]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	db04      	blt.n	8004ad8 <_dtoa_r+0xa30>
 8004ace:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	d120      	bne.n	8004b1a <_dtoa_r+0xa72>
 8004ad8:	2a00      	cmp	r2, #0
 8004ada:	dded      	ble.n	8004ab8 <_dtoa_r+0xa10>
 8004adc:	4649      	mov	r1, r9
 8004ade:	2201      	movs	r2, #1
 8004ae0:	4658      	mov	r0, fp
 8004ae2:	f000 fbb5 	bl	8005250 <__lshift>
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	4681      	mov	r9, r0
 8004aea:	f000 fc1d 	bl	8005328 <__mcmp>
 8004aee:	2800      	cmp	r0, #0
 8004af0:	dc03      	bgt.n	8004afa <_dtoa_r+0xa52>
 8004af2:	d1e1      	bne.n	8004ab8 <_dtoa_r+0xa10>
 8004af4:	f018 0f01 	tst.w	r8, #1
 8004af8:	d0de      	beq.n	8004ab8 <_dtoa_r+0xa10>
 8004afa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004afe:	d1d8      	bne.n	8004ab2 <_dtoa_r+0xa0a>
 8004b00:	2339      	movs	r3, #57	@ 0x39
 8004b02:	9a00      	ldr	r2, [sp, #0]
 8004b04:	7013      	strb	r3, [r2, #0]
 8004b06:	4633      	mov	r3, r6
 8004b08:	461e      	mov	r6, r3
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004b10:	2a39      	cmp	r2, #57	@ 0x39
 8004b12:	d052      	beq.n	8004bba <_dtoa_r+0xb12>
 8004b14:	3201      	adds	r2, #1
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	e612      	b.n	8004740 <_dtoa_r+0x698>
 8004b1a:	2a00      	cmp	r2, #0
 8004b1c:	dd07      	ble.n	8004b2e <_dtoa_r+0xa86>
 8004b1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004b22:	d0ed      	beq.n	8004b00 <_dtoa_r+0xa58>
 8004b24:	f108 0301 	add.w	r3, r8, #1
 8004b28:	9a00      	ldr	r2, [sp, #0]
 8004b2a:	7013      	strb	r3, [r2, #0]
 8004b2c:	e608      	b.n	8004740 <_dtoa_r+0x698>
 8004b2e:	9b07      	ldr	r3, [sp, #28]
 8004b30:	9a07      	ldr	r2, [sp, #28]
 8004b32:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004b36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d028      	beq.n	8004b8e <_dtoa_r+0xae6>
 8004b3c:	4649      	mov	r1, r9
 8004b3e:	2300      	movs	r3, #0
 8004b40:	220a      	movs	r2, #10
 8004b42:	4658      	mov	r0, fp
 8004b44:	f000 f9d6 	bl	8004ef4 <__multadd>
 8004b48:	42af      	cmp	r7, r5
 8004b4a:	4681      	mov	r9, r0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	f04f 020a 	mov.w	r2, #10
 8004b54:	4639      	mov	r1, r7
 8004b56:	4658      	mov	r0, fp
 8004b58:	d107      	bne.n	8004b6a <_dtoa_r+0xac2>
 8004b5a:	f000 f9cb 	bl	8004ef4 <__multadd>
 8004b5e:	4607      	mov	r7, r0
 8004b60:	4605      	mov	r5, r0
 8004b62:	9b07      	ldr	r3, [sp, #28]
 8004b64:	3301      	adds	r3, #1
 8004b66:	9307      	str	r3, [sp, #28]
 8004b68:	e774      	b.n	8004a54 <_dtoa_r+0x9ac>
 8004b6a:	f000 f9c3 	bl	8004ef4 <__multadd>
 8004b6e:	4629      	mov	r1, r5
 8004b70:	4607      	mov	r7, r0
 8004b72:	2300      	movs	r3, #0
 8004b74:	220a      	movs	r2, #10
 8004b76:	4658      	mov	r0, fp
 8004b78:	f000 f9bc 	bl	8004ef4 <__multadd>
 8004b7c:	4605      	mov	r5, r0
 8004b7e:	e7f0      	b.n	8004b62 <_dtoa_r+0xaba>
 8004b80:	9b00      	ldr	r3, [sp, #0]
 8004b82:	2700      	movs	r7, #0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bfcc      	ite	gt
 8004b88:	461e      	movgt	r6, r3
 8004b8a:	2601      	movle	r6, #1
 8004b8c:	4456      	add	r6, sl
 8004b8e:	4649      	mov	r1, r9
 8004b90:	2201      	movs	r2, #1
 8004b92:	4658      	mov	r0, fp
 8004b94:	f000 fb5c 	bl	8005250 <__lshift>
 8004b98:	4621      	mov	r1, r4
 8004b9a:	4681      	mov	r9, r0
 8004b9c:	f000 fbc4 	bl	8005328 <__mcmp>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	dcb0      	bgt.n	8004b06 <_dtoa_r+0xa5e>
 8004ba4:	d102      	bne.n	8004bac <_dtoa_r+0xb04>
 8004ba6:	f018 0f01 	tst.w	r8, #1
 8004baa:	d1ac      	bne.n	8004b06 <_dtoa_r+0xa5e>
 8004bac:	4633      	mov	r3, r6
 8004bae:	461e      	mov	r6, r3
 8004bb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004bb4:	2a30      	cmp	r2, #48	@ 0x30
 8004bb6:	d0fa      	beq.n	8004bae <_dtoa_r+0xb06>
 8004bb8:	e5c2      	b.n	8004740 <_dtoa_r+0x698>
 8004bba:	459a      	cmp	sl, r3
 8004bbc:	d1a4      	bne.n	8004b08 <_dtoa_r+0xa60>
 8004bbe:	9b04      	ldr	r3, [sp, #16]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	9304      	str	r3, [sp, #16]
 8004bc4:	2331      	movs	r3, #49	@ 0x31
 8004bc6:	f88a 3000 	strb.w	r3, [sl]
 8004bca:	e5b9      	b.n	8004740 <_dtoa_r+0x698>
 8004bcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004bce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004c2c <_dtoa_r+0xb84>
 8004bd2:	b11b      	cbz	r3, 8004bdc <_dtoa_r+0xb34>
 8004bd4:	f10a 0308 	add.w	r3, sl, #8
 8004bd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	4650      	mov	r0, sl
 8004bde:	b019      	add	sp, #100	@ 0x64
 8004be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	f77f ae37 	ble.w	800485a <_dtoa_r+0x7b2>
 8004bec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004bee:	930a      	str	r3, [sp, #40]	@ 0x28
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	e655      	b.n	80048a0 <_dtoa_r+0x7f8>
 8004bf4:	9b00      	ldr	r3, [sp, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f77f aed6 	ble.w	80049a8 <_dtoa_r+0x900>
 8004bfc:	4656      	mov	r6, sl
 8004bfe:	4621      	mov	r1, r4
 8004c00:	4648      	mov	r0, r9
 8004c02:	f7ff f9c4 	bl	8003f8e <quorem>
 8004c06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004c0a:	9b00      	ldr	r3, [sp, #0]
 8004c0c:	f806 8b01 	strb.w	r8, [r6], #1
 8004c10:	eba6 020a 	sub.w	r2, r6, sl
 8004c14:	4293      	cmp	r3, r2
 8004c16:	ddb3      	ble.n	8004b80 <_dtoa_r+0xad8>
 8004c18:	4649      	mov	r1, r9
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	220a      	movs	r2, #10
 8004c1e:	4658      	mov	r0, fp
 8004c20:	f000 f968 	bl	8004ef4 <__multadd>
 8004c24:	4681      	mov	r9, r0
 8004c26:	e7ea      	b.n	8004bfe <_dtoa_r+0xb56>
 8004c28:	08006140 	.word	0x08006140
 8004c2c:	080060c4 	.word	0x080060c4

08004c30 <_free_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4605      	mov	r5, r0
 8004c34:	2900      	cmp	r1, #0
 8004c36:	d041      	beq.n	8004cbc <_free_r+0x8c>
 8004c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c3c:	1f0c      	subs	r4, r1, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	bfb8      	it	lt
 8004c42:	18e4      	addlt	r4, r4, r3
 8004c44:	f000 f8e8 	bl	8004e18 <__malloc_lock>
 8004c48:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc0 <_free_r+0x90>)
 8004c4a:	6813      	ldr	r3, [r2, #0]
 8004c4c:	b933      	cbnz	r3, 8004c5c <_free_r+0x2c>
 8004c4e:	6063      	str	r3, [r4, #4]
 8004c50:	6014      	str	r4, [r2, #0]
 8004c52:	4628      	mov	r0, r5
 8004c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c58:	f000 b8e4 	b.w	8004e24 <__malloc_unlock>
 8004c5c:	42a3      	cmp	r3, r4
 8004c5e:	d908      	bls.n	8004c72 <_free_r+0x42>
 8004c60:	6820      	ldr	r0, [r4, #0]
 8004c62:	1821      	adds	r1, r4, r0
 8004c64:	428b      	cmp	r3, r1
 8004c66:	bf01      	itttt	eq
 8004c68:	6819      	ldreq	r1, [r3, #0]
 8004c6a:	685b      	ldreq	r3, [r3, #4]
 8004c6c:	1809      	addeq	r1, r1, r0
 8004c6e:	6021      	streq	r1, [r4, #0]
 8004c70:	e7ed      	b.n	8004c4e <_free_r+0x1e>
 8004c72:	461a      	mov	r2, r3
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	b10b      	cbz	r3, 8004c7c <_free_r+0x4c>
 8004c78:	42a3      	cmp	r3, r4
 8004c7a:	d9fa      	bls.n	8004c72 <_free_r+0x42>
 8004c7c:	6811      	ldr	r1, [r2, #0]
 8004c7e:	1850      	adds	r0, r2, r1
 8004c80:	42a0      	cmp	r0, r4
 8004c82:	d10b      	bne.n	8004c9c <_free_r+0x6c>
 8004c84:	6820      	ldr	r0, [r4, #0]
 8004c86:	4401      	add	r1, r0
 8004c88:	1850      	adds	r0, r2, r1
 8004c8a:	6011      	str	r1, [r2, #0]
 8004c8c:	4283      	cmp	r3, r0
 8004c8e:	d1e0      	bne.n	8004c52 <_free_r+0x22>
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	4408      	add	r0, r1
 8004c96:	6053      	str	r3, [r2, #4]
 8004c98:	6010      	str	r0, [r2, #0]
 8004c9a:	e7da      	b.n	8004c52 <_free_r+0x22>
 8004c9c:	d902      	bls.n	8004ca4 <_free_r+0x74>
 8004c9e:	230c      	movs	r3, #12
 8004ca0:	602b      	str	r3, [r5, #0]
 8004ca2:	e7d6      	b.n	8004c52 <_free_r+0x22>
 8004ca4:	6820      	ldr	r0, [r4, #0]
 8004ca6:	1821      	adds	r1, r4, r0
 8004ca8:	428b      	cmp	r3, r1
 8004caa:	bf02      	ittt	eq
 8004cac:	6819      	ldreq	r1, [r3, #0]
 8004cae:	685b      	ldreq	r3, [r3, #4]
 8004cb0:	1809      	addeq	r1, r1, r0
 8004cb2:	6063      	str	r3, [r4, #4]
 8004cb4:	bf08      	it	eq
 8004cb6:	6021      	streq	r1, [r4, #0]
 8004cb8:	6054      	str	r4, [r2, #4]
 8004cba:	e7ca      	b.n	8004c52 <_free_r+0x22>
 8004cbc:	bd38      	pop	{r3, r4, r5, pc}
 8004cbe:	bf00      	nop
 8004cc0:	2000046c 	.word	0x2000046c

08004cc4 <malloc>:
 8004cc4:	4b02      	ldr	r3, [pc, #8]	@ (8004cd0 <malloc+0xc>)
 8004cc6:	4601      	mov	r1, r0
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	f000 b825 	b.w	8004d18 <_malloc_r>
 8004cce:	bf00      	nop
 8004cd0:	20000048 	.word	0x20000048

08004cd4 <sbrk_aligned>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	4e0f      	ldr	r6, [pc, #60]	@ (8004d14 <sbrk_aligned+0x40>)
 8004cd8:	460c      	mov	r4, r1
 8004cda:	4605      	mov	r5, r0
 8004cdc:	6831      	ldr	r1, [r6, #0]
 8004cde:	b911      	cbnz	r1, 8004ce6 <sbrk_aligned+0x12>
 8004ce0:	f000 fe4c 	bl	800597c <_sbrk_r>
 8004ce4:	6030      	str	r0, [r6, #0]
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	4628      	mov	r0, r5
 8004cea:	f000 fe47 	bl	800597c <_sbrk_r>
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	d103      	bne.n	8004cfa <sbrk_aligned+0x26>
 8004cf2:	f04f 34ff 	mov.w	r4, #4294967295
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	bd70      	pop	{r4, r5, r6, pc}
 8004cfa:	1cc4      	adds	r4, r0, #3
 8004cfc:	f024 0403 	bic.w	r4, r4, #3
 8004d00:	42a0      	cmp	r0, r4
 8004d02:	d0f8      	beq.n	8004cf6 <sbrk_aligned+0x22>
 8004d04:	1a21      	subs	r1, r4, r0
 8004d06:	4628      	mov	r0, r5
 8004d08:	f000 fe38 	bl	800597c <_sbrk_r>
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d1f2      	bne.n	8004cf6 <sbrk_aligned+0x22>
 8004d10:	e7ef      	b.n	8004cf2 <sbrk_aligned+0x1e>
 8004d12:	bf00      	nop
 8004d14:	20000468 	.word	0x20000468

08004d18 <_malloc_r>:
 8004d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d1c:	1ccd      	adds	r5, r1, #3
 8004d1e:	4606      	mov	r6, r0
 8004d20:	f025 0503 	bic.w	r5, r5, #3
 8004d24:	3508      	adds	r5, #8
 8004d26:	2d0c      	cmp	r5, #12
 8004d28:	bf38      	it	cc
 8004d2a:	250c      	movcc	r5, #12
 8004d2c:	2d00      	cmp	r5, #0
 8004d2e:	db01      	blt.n	8004d34 <_malloc_r+0x1c>
 8004d30:	42a9      	cmp	r1, r5
 8004d32:	d904      	bls.n	8004d3e <_malloc_r+0x26>
 8004d34:	230c      	movs	r3, #12
 8004d36:	6033      	str	r3, [r6, #0]
 8004d38:	2000      	movs	r0, #0
 8004d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e14 <_malloc_r+0xfc>
 8004d42:	f000 f869 	bl	8004e18 <__malloc_lock>
 8004d46:	f8d8 3000 	ldr.w	r3, [r8]
 8004d4a:	461c      	mov	r4, r3
 8004d4c:	bb44      	cbnz	r4, 8004da0 <_malloc_r+0x88>
 8004d4e:	4629      	mov	r1, r5
 8004d50:	4630      	mov	r0, r6
 8004d52:	f7ff ffbf 	bl	8004cd4 <sbrk_aligned>
 8004d56:	1c43      	adds	r3, r0, #1
 8004d58:	4604      	mov	r4, r0
 8004d5a:	d158      	bne.n	8004e0e <_malloc_r+0xf6>
 8004d5c:	f8d8 4000 	ldr.w	r4, [r8]
 8004d60:	4627      	mov	r7, r4
 8004d62:	2f00      	cmp	r7, #0
 8004d64:	d143      	bne.n	8004dee <_malloc_r+0xd6>
 8004d66:	2c00      	cmp	r4, #0
 8004d68:	d04b      	beq.n	8004e02 <_malloc_r+0xea>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	4639      	mov	r1, r7
 8004d6e:	4630      	mov	r0, r6
 8004d70:	eb04 0903 	add.w	r9, r4, r3
 8004d74:	f000 fe02 	bl	800597c <_sbrk_r>
 8004d78:	4581      	cmp	r9, r0
 8004d7a:	d142      	bne.n	8004e02 <_malloc_r+0xea>
 8004d7c:	6821      	ldr	r1, [r4, #0]
 8004d7e:	4630      	mov	r0, r6
 8004d80:	1a6d      	subs	r5, r5, r1
 8004d82:	4629      	mov	r1, r5
 8004d84:	f7ff ffa6 	bl	8004cd4 <sbrk_aligned>
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d03a      	beq.n	8004e02 <_malloc_r+0xea>
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	442b      	add	r3, r5
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	f8d8 3000 	ldr.w	r3, [r8]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	bb62      	cbnz	r2, 8004df4 <_malloc_r+0xdc>
 8004d9a:	f8c8 7000 	str.w	r7, [r8]
 8004d9e:	e00f      	b.n	8004dc0 <_malloc_r+0xa8>
 8004da0:	6822      	ldr	r2, [r4, #0]
 8004da2:	1b52      	subs	r2, r2, r5
 8004da4:	d420      	bmi.n	8004de8 <_malloc_r+0xd0>
 8004da6:	2a0b      	cmp	r2, #11
 8004da8:	d917      	bls.n	8004dda <_malloc_r+0xc2>
 8004daa:	1961      	adds	r1, r4, r5
 8004dac:	42a3      	cmp	r3, r4
 8004dae:	6025      	str	r5, [r4, #0]
 8004db0:	bf18      	it	ne
 8004db2:	6059      	strne	r1, [r3, #4]
 8004db4:	6863      	ldr	r3, [r4, #4]
 8004db6:	bf08      	it	eq
 8004db8:	f8c8 1000 	streq.w	r1, [r8]
 8004dbc:	5162      	str	r2, [r4, r5]
 8004dbe:	604b      	str	r3, [r1, #4]
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f000 f82f 	bl	8004e24 <__malloc_unlock>
 8004dc6:	f104 000b 	add.w	r0, r4, #11
 8004dca:	1d23      	adds	r3, r4, #4
 8004dcc:	f020 0007 	bic.w	r0, r0, #7
 8004dd0:	1ac2      	subs	r2, r0, r3
 8004dd2:	bf1c      	itt	ne
 8004dd4:	1a1b      	subne	r3, r3, r0
 8004dd6:	50a3      	strne	r3, [r4, r2]
 8004dd8:	e7af      	b.n	8004d3a <_malloc_r+0x22>
 8004dda:	6862      	ldr	r2, [r4, #4]
 8004ddc:	42a3      	cmp	r3, r4
 8004dde:	bf0c      	ite	eq
 8004de0:	f8c8 2000 	streq.w	r2, [r8]
 8004de4:	605a      	strne	r2, [r3, #4]
 8004de6:	e7eb      	b.n	8004dc0 <_malloc_r+0xa8>
 8004de8:	4623      	mov	r3, r4
 8004dea:	6864      	ldr	r4, [r4, #4]
 8004dec:	e7ae      	b.n	8004d4c <_malloc_r+0x34>
 8004dee:	463c      	mov	r4, r7
 8004df0:	687f      	ldr	r7, [r7, #4]
 8004df2:	e7b6      	b.n	8004d62 <_malloc_r+0x4a>
 8004df4:	461a      	mov	r2, r3
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	42a3      	cmp	r3, r4
 8004dfa:	d1fb      	bne.n	8004df4 <_malloc_r+0xdc>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	6053      	str	r3, [r2, #4]
 8004e00:	e7de      	b.n	8004dc0 <_malloc_r+0xa8>
 8004e02:	230c      	movs	r3, #12
 8004e04:	4630      	mov	r0, r6
 8004e06:	6033      	str	r3, [r6, #0]
 8004e08:	f000 f80c 	bl	8004e24 <__malloc_unlock>
 8004e0c:	e794      	b.n	8004d38 <_malloc_r+0x20>
 8004e0e:	6005      	str	r5, [r0, #0]
 8004e10:	e7d6      	b.n	8004dc0 <_malloc_r+0xa8>
 8004e12:	bf00      	nop
 8004e14:	2000046c 	.word	0x2000046c

08004e18 <__malloc_lock>:
 8004e18:	4801      	ldr	r0, [pc, #4]	@ (8004e20 <__malloc_lock+0x8>)
 8004e1a:	f7ff b8a8 	b.w	8003f6e <__retarget_lock_acquire_recursive>
 8004e1e:	bf00      	nop
 8004e20:	20000464 	.word	0x20000464

08004e24 <__malloc_unlock>:
 8004e24:	4801      	ldr	r0, [pc, #4]	@ (8004e2c <__malloc_unlock+0x8>)
 8004e26:	f7ff b8a3 	b.w	8003f70 <__retarget_lock_release_recursive>
 8004e2a:	bf00      	nop
 8004e2c:	20000464 	.word	0x20000464

08004e30 <_Balloc>:
 8004e30:	b570      	push	{r4, r5, r6, lr}
 8004e32:	69c6      	ldr	r6, [r0, #28]
 8004e34:	4604      	mov	r4, r0
 8004e36:	460d      	mov	r5, r1
 8004e38:	b976      	cbnz	r6, 8004e58 <_Balloc+0x28>
 8004e3a:	2010      	movs	r0, #16
 8004e3c:	f7ff ff42 	bl	8004cc4 <malloc>
 8004e40:	4602      	mov	r2, r0
 8004e42:	61e0      	str	r0, [r4, #28]
 8004e44:	b920      	cbnz	r0, 8004e50 <_Balloc+0x20>
 8004e46:	4b18      	ldr	r3, [pc, #96]	@ (8004ea8 <_Balloc+0x78>)
 8004e48:	216b      	movs	r1, #107	@ 0x6b
 8004e4a:	4818      	ldr	r0, [pc, #96]	@ (8004eac <_Balloc+0x7c>)
 8004e4c:	f000 fdb4 	bl	80059b8 <__assert_func>
 8004e50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e54:	6006      	str	r6, [r0, #0]
 8004e56:	60c6      	str	r6, [r0, #12]
 8004e58:	69e6      	ldr	r6, [r4, #28]
 8004e5a:	68f3      	ldr	r3, [r6, #12]
 8004e5c:	b183      	cbz	r3, 8004e80 <_Balloc+0x50>
 8004e5e:	69e3      	ldr	r3, [r4, #28]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004e66:	b9b8      	cbnz	r0, 8004e98 <_Balloc+0x68>
 8004e68:	2101      	movs	r1, #1
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	fa01 f605 	lsl.w	r6, r1, r5
 8004e70:	1d72      	adds	r2, r6, #5
 8004e72:	0092      	lsls	r2, r2, #2
 8004e74:	f000 fdbe 	bl	80059f4 <_calloc_r>
 8004e78:	b160      	cbz	r0, 8004e94 <_Balloc+0x64>
 8004e7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004e7e:	e00e      	b.n	8004e9e <_Balloc+0x6e>
 8004e80:	2221      	movs	r2, #33	@ 0x21
 8004e82:	2104      	movs	r1, #4
 8004e84:	4620      	mov	r0, r4
 8004e86:	f000 fdb5 	bl	80059f4 <_calloc_r>
 8004e8a:	69e3      	ldr	r3, [r4, #28]
 8004e8c:	60f0      	str	r0, [r6, #12]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1e4      	bne.n	8004e5e <_Balloc+0x2e>
 8004e94:	2000      	movs	r0, #0
 8004e96:	bd70      	pop	{r4, r5, r6, pc}
 8004e98:	6802      	ldr	r2, [r0, #0]
 8004e9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ea4:	e7f7      	b.n	8004e96 <_Balloc+0x66>
 8004ea6:	bf00      	nop
 8004ea8:	080060d1 	.word	0x080060d1
 8004eac:	08006151 	.word	0x08006151

08004eb0 <_Bfree>:
 8004eb0:	b570      	push	{r4, r5, r6, lr}
 8004eb2:	69c6      	ldr	r6, [r0, #28]
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	b976      	cbnz	r6, 8004ed8 <_Bfree+0x28>
 8004eba:	2010      	movs	r0, #16
 8004ebc:	f7ff ff02 	bl	8004cc4 <malloc>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	61e8      	str	r0, [r5, #28]
 8004ec4:	b920      	cbnz	r0, 8004ed0 <_Bfree+0x20>
 8004ec6:	4b09      	ldr	r3, [pc, #36]	@ (8004eec <_Bfree+0x3c>)
 8004ec8:	218f      	movs	r1, #143	@ 0x8f
 8004eca:	4809      	ldr	r0, [pc, #36]	@ (8004ef0 <_Bfree+0x40>)
 8004ecc:	f000 fd74 	bl	80059b8 <__assert_func>
 8004ed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ed4:	6006      	str	r6, [r0, #0]
 8004ed6:	60c6      	str	r6, [r0, #12]
 8004ed8:	b13c      	cbz	r4, 8004eea <_Bfree+0x3a>
 8004eda:	69eb      	ldr	r3, [r5, #28]
 8004edc:	6862      	ldr	r2, [r4, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ee4:	6021      	str	r1, [r4, #0]
 8004ee6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004eea:	bd70      	pop	{r4, r5, r6, pc}
 8004eec:	080060d1 	.word	0x080060d1
 8004ef0:	08006151 	.word	0x08006151

08004ef4 <__multadd>:
 8004ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef8:	f101 0c14 	add.w	ip, r1, #20
 8004efc:	4607      	mov	r7, r0
 8004efe:	460c      	mov	r4, r1
 8004f00:	461e      	mov	r6, r3
 8004f02:	690d      	ldr	r5, [r1, #16]
 8004f04:	2000      	movs	r0, #0
 8004f06:	f8dc 3000 	ldr.w	r3, [ip]
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	b299      	uxth	r1, r3
 8004f0e:	4285      	cmp	r5, r0
 8004f10:	fb02 6101 	mla	r1, r2, r1, r6
 8004f14:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004f18:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8004f1c:	b289      	uxth	r1, r1
 8004f1e:	fb02 3306 	mla	r3, r2, r6, r3
 8004f22:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004f26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004f2a:	f84c 1b04 	str.w	r1, [ip], #4
 8004f2e:	dcea      	bgt.n	8004f06 <__multadd+0x12>
 8004f30:	b30e      	cbz	r6, 8004f76 <__multadd+0x82>
 8004f32:	68a3      	ldr	r3, [r4, #8]
 8004f34:	42ab      	cmp	r3, r5
 8004f36:	dc19      	bgt.n	8004f6c <__multadd+0x78>
 8004f38:	6861      	ldr	r1, [r4, #4]
 8004f3a:	4638      	mov	r0, r7
 8004f3c:	3101      	adds	r1, #1
 8004f3e:	f7ff ff77 	bl	8004e30 <_Balloc>
 8004f42:	4680      	mov	r8, r0
 8004f44:	b928      	cbnz	r0, 8004f52 <__multadd+0x5e>
 8004f46:	4602      	mov	r2, r0
 8004f48:	4b0c      	ldr	r3, [pc, #48]	@ (8004f7c <__multadd+0x88>)
 8004f4a:	21ba      	movs	r1, #186	@ 0xba
 8004f4c:	480c      	ldr	r0, [pc, #48]	@ (8004f80 <__multadd+0x8c>)
 8004f4e:	f000 fd33 	bl	80059b8 <__assert_func>
 8004f52:	6922      	ldr	r2, [r4, #16]
 8004f54:	f104 010c 	add.w	r1, r4, #12
 8004f58:	300c      	adds	r0, #12
 8004f5a:	3202      	adds	r2, #2
 8004f5c:	0092      	lsls	r2, r2, #2
 8004f5e:	f000 fd1d 	bl	800599c <memcpy>
 8004f62:	4621      	mov	r1, r4
 8004f64:	4644      	mov	r4, r8
 8004f66:	4638      	mov	r0, r7
 8004f68:	f7ff ffa2 	bl	8004eb0 <_Bfree>
 8004f6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004f70:	3501      	adds	r5, #1
 8004f72:	615e      	str	r6, [r3, #20]
 8004f74:	6125      	str	r5, [r4, #16]
 8004f76:	4620      	mov	r0, r4
 8004f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f7c:	08006140 	.word	0x08006140
 8004f80:	08006151 	.word	0x08006151

08004f84 <__hi0bits>:
 8004f84:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004f88:	4603      	mov	r3, r0
 8004f8a:	bf36      	itet	cc
 8004f8c:	0403      	lslcc	r3, r0, #16
 8004f8e:	2000      	movcs	r0, #0
 8004f90:	2010      	movcc	r0, #16
 8004f92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f96:	bf3c      	itt	cc
 8004f98:	021b      	lslcc	r3, r3, #8
 8004f9a:	3008      	addcc	r0, #8
 8004f9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fa0:	bf3c      	itt	cc
 8004fa2:	011b      	lslcc	r3, r3, #4
 8004fa4:	3004      	addcc	r0, #4
 8004fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004faa:	bf3c      	itt	cc
 8004fac:	009b      	lslcc	r3, r3, #2
 8004fae:	3002      	addcc	r0, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	db05      	blt.n	8004fc0 <__hi0bits+0x3c>
 8004fb4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004fb8:	f100 0001 	add.w	r0, r0, #1
 8004fbc:	bf08      	it	eq
 8004fbe:	2020      	moveq	r0, #32
 8004fc0:	4770      	bx	lr

08004fc2 <__lo0bits>:
 8004fc2:	6803      	ldr	r3, [r0, #0]
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	f013 0007 	ands.w	r0, r3, #7
 8004fca:	d00b      	beq.n	8004fe4 <__lo0bits+0x22>
 8004fcc:	07d9      	lsls	r1, r3, #31
 8004fce:	d421      	bmi.n	8005014 <__lo0bits+0x52>
 8004fd0:	0798      	lsls	r0, r3, #30
 8004fd2:	bf47      	ittee	mi
 8004fd4:	085b      	lsrmi	r3, r3, #1
 8004fd6:	2001      	movmi	r0, #1
 8004fd8:	089b      	lsrpl	r3, r3, #2
 8004fda:	2002      	movpl	r0, #2
 8004fdc:	bf4c      	ite	mi
 8004fde:	6013      	strmi	r3, [r2, #0]
 8004fe0:	6013      	strpl	r3, [r2, #0]
 8004fe2:	4770      	bx	lr
 8004fe4:	b299      	uxth	r1, r3
 8004fe6:	b909      	cbnz	r1, 8004fec <__lo0bits+0x2a>
 8004fe8:	0c1b      	lsrs	r3, r3, #16
 8004fea:	2010      	movs	r0, #16
 8004fec:	b2d9      	uxtb	r1, r3
 8004fee:	b909      	cbnz	r1, 8004ff4 <__lo0bits+0x32>
 8004ff0:	3008      	adds	r0, #8
 8004ff2:	0a1b      	lsrs	r3, r3, #8
 8004ff4:	0719      	lsls	r1, r3, #28
 8004ff6:	bf04      	itt	eq
 8004ff8:	091b      	lsreq	r3, r3, #4
 8004ffa:	3004      	addeq	r0, #4
 8004ffc:	0799      	lsls	r1, r3, #30
 8004ffe:	bf04      	itt	eq
 8005000:	089b      	lsreq	r3, r3, #2
 8005002:	3002      	addeq	r0, #2
 8005004:	07d9      	lsls	r1, r3, #31
 8005006:	d403      	bmi.n	8005010 <__lo0bits+0x4e>
 8005008:	085b      	lsrs	r3, r3, #1
 800500a:	f100 0001 	add.w	r0, r0, #1
 800500e:	d003      	beq.n	8005018 <__lo0bits+0x56>
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	4770      	bx	lr
 8005014:	2000      	movs	r0, #0
 8005016:	4770      	bx	lr
 8005018:	2020      	movs	r0, #32
 800501a:	4770      	bx	lr

0800501c <__i2b>:
 800501c:	b510      	push	{r4, lr}
 800501e:	460c      	mov	r4, r1
 8005020:	2101      	movs	r1, #1
 8005022:	f7ff ff05 	bl	8004e30 <_Balloc>
 8005026:	4602      	mov	r2, r0
 8005028:	b928      	cbnz	r0, 8005036 <__i2b+0x1a>
 800502a:	4b05      	ldr	r3, [pc, #20]	@ (8005040 <__i2b+0x24>)
 800502c:	f240 1145 	movw	r1, #325	@ 0x145
 8005030:	4804      	ldr	r0, [pc, #16]	@ (8005044 <__i2b+0x28>)
 8005032:	f000 fcc1 	bl	80059b8 <__assert_func>
 8005036:	2301      	movs	r3, #1
 8005038:	6144      	str	r4, [r0, #20]
 800503a:	6103      	str	r3, [r0, #16]
 800503c:	bd10      	pop	{r4, pc}
 800503e:	bf00      	nop
 8005040:	08006140 	.word	0x08006140
 8005044:	08006151 	.word	0x08006151

08005048 <__multiply>:
 8005048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800504c:	4614      	mov	r4, r2
 800504e:	690a      	ldr	r2, [r1, #16]
 8005050:	460f      	mov	r7, r1
 8005052:	b085      	sub	sp, #20
 8005054:	6923      	ldr	r3, [r4, #16]
 8005056:	429a      	cmp	r2, r3
 8005058:	bfa2      	ittt	ge
 800505a:	4623      	movge	r3, r4
 800505c:	460c      	movge	r4, r1
 800505e:	461f      	movge	r7, r3
 8005060:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005064:	68a3      	ldr	r3, [r4, #8]
 8005066:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800506a:	6861      	ldr	r1, [r4, #4]
 800506c:	eb0a 0609 	add.w	r6, sl, r9
 8005070:	42b3      	cmp	r3, r6
 8005072:	bfb8      	it	lt
 8005074:	3101      	addlt	r1, #1
 8005076:	f7ff fedb 	bl	8004e30 <_Balloc>
 800507a:	b930      	cbnz	r0, 800508a <__multiply+0x42>
 800507c:	4602      	mov	r2, r0
 800507e:	4b45      	ldr	r3, [pc, #276]	@ (8005194 <__multiply+0x14c>)
 8005080:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005084:	4844      	ldr	r0, [pc, #272]	@ (8005198 <__multiply+0x150>)
 8005086:	f000 fc97 	bl	80059b8 <__assert_func>
 800508a:	f100 0514 	add.w	r5, r0, #20
 800508e:	2200      	movs	r2, #0
 8005090:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005094:	462b      	mov	r3, r5
 8005096:	4543      	cmp	r3, r8
 8005098:	d321      	bcc.n	80050de <__multiply+0x96>
 800509a:	f107 0114 	add.w	r1, r7, #20
 800509e:	f104 0214 	add.w	r2, r4, #20
 80050a2:	f104 0715 	add.w	r7, r4, #21
 80050a6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80050aa:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80050ae:	9302      	str	r3, [sp, #8]
 80050b0:	1b13      	subs	r3, r2, r4
 80050b2:	3b15      	subs	r3, #21
 80050b4:	f023 0303 	bic.w	r3, r3, #3
 80050b8:	3304      	adds	r3, #4
 80050ba:	42ba      	cmp	r2, r7
 80050bc:	bf38      	it	cc
 80050be:	2304      	movcc	r3, #4
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	9b02      	ldr	r3, [sp, #8]
 80050c4:	9103      	str	r1, [sp, #12]
 80050c6:	428b      	cmp	r3, r1
 80050c8:	d80c      	bhi.n	80050e4 <__multiply+0x9c>
 80050ca:	2e00      	cmp	r6, #0
 80050cc:	dd03      	ble.n	80050d6 <__multiply+0x8e>
 80050ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d05b      	beq.n	800518e <__multiply+0x146>
 80050d6:	6106      	str	r6, [r0, #16]
 80050d8:	b005      	add	sp, #20
 80050da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050de:	f843 2b04 	str.w	r2, [r3], #4
 80050e2:	e7d8      	b.n	8005096 <__multiply+0x4e>
 80050e4:	f8b1 a000 	ldrh.w	sl, [r1]
 80050e8:	f1ba 0f00 	cmp.w	sl, #0
 80050ec:	d024      	beq.n	8005138 <__multiply+0xf0>
 80050ee:	f104 0e14 	add.w	lr, r4, #20
 80050f2:	46a9      	mov	r9, r5
 80050f4:	f04f 0c00 	mov.w	ip, #0
 80050f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80050fc:	f8d9 3000 	ldr.w	r3, [r9]
 8005100:	fa1f fb87 	uxth.w	fp, r7
 8005104:	4572      	cmp	r2, lr
 8005106:	b29b      	uxth	r3, r3
 8005108:	fb0a 330b 	mla	r3, sl, fp, r3
 800510c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005110:	f8d9 7000 	ldr.w	r7, [r9]
 8005114:	4463      	add	r3, ip
 8005116:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800511a:	fb0a c70b 	mla	r7, sl, fp, ip
 800511e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005122:	b29b      	uxth	r3, r3
 8005124:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005128:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800512c:	f849 3b04 	str.w	r3, [r9], #4
 8005130:	d8e2      	bhi.n	80050f8 <__multiply+0xb0>
 8005132:	9b01      	ldr	r3, [sp, #4]
 8005134:	f845 c003 	str.w	ip, [r5, r3]
 8005138:	9b03      	ldr	r3, [sp, #12]
 800513a:	3104      	adds	r1, #4
 800513c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005140:	f1b9 0f00 	cmp.w	r9, #0
 8005144:	d021      	beq.n	800518a <__multiply+0x142>
 8005146:	682b      	ldr	r3, [r5, #0]
 8005148:	f104 0c14 	add.w	ip, r4, #20
 800514c:	46ae      	mov	lr, r5
 800514e:	f04f 0a00 	mov.w	sl, #0
 8005152:	f8bc b000 	ldrh.w	fp, [ip]
 8005156:	b29b      	uxth	r3, r3
 8005158:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800515c:	fb09 770b 	mla	r7, r9, fp, r7
 8005160:	4457      	add	r7, sl
 8005162:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005166:	f84e 3b04 	str.w	r3, [lr], #4
 800516a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800516e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005172:	f8be 3000 	ldrh.w	r3, [lr]
 8005176:	4562      	cmp	r2, ip
 8005178:	fb09 330a 	mla	r3, r9, sl, r3
 800517c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005180:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005184:	d8e5      	bhi.n	8005152 <__multiply+0x10a>
 8005186:	9f01      	ldr	r7, [sp, #4]
 8005188:	51eb      	str	r3, [r5, r7]
 800518a:	3504      	adds	r5, #4
 800518c:	e799      	b.n	80050c2 <__multiply+0x7a>
 800518e:	3e01      	subs	r6, #1
 8005190:	e79b      	b.n	80050ca <__multiply+0x82>
 8005192:	bf00      	nop
 8005194:	08006140 	.word	0x08006140
 8005198:	08006151 	.word	0x08006151

0800519c <__pow5mult>:
 800519c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051a0:	4615      	mov	r5, r2
 80051a2:	f012 0203 	ands.w	r2, r2, #3
 80051a6:	4607      	mov	r7, r0
 80051a8:	460e      	mov	r6, r1
 80051aa:	d007      	beq.n	80051bc <__pow5mult+0x20>
 80051ac:	3a01      	subs	r2, #1
 80051ae:	4c25      	ldr	r4, [pc, #148]	@ (8005244 <__pow5mult+0xa8>)
 80051b0:	2300      	movs	r3, #0
 80051b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80051b6:	f7ff fe9d 	bl	8004ef4 <__multadd>
 80051ba:	4606      	mov	r6, r0
 80051bc:	10ad      	asrs	r5, r5, #2
 80051be:	d03d      	beq.n	800523c <__pow5mult+0xa0>
 80051c0:	69fc      	ldr	r4, [r7, #28]
 80051c2:	b97c      	cbnz	r4, 80051e4 <__pow5mult+0x48>
 80051c4:	2010      	movs	r0, #16
 80051c6:	f7ff fd7d 	bl	8004cc4 <malloc>
 80051ca:	4602      	mov	r2, r0
 80051cc:	61f8      	str	r0, [r7, #28]
 80051ce:	b928      	cbnz	r0, 80051dc <__pow5mult+0x40>
 80051d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005248 <__pow5mult+0xac>)
 80051d2:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80051d6:	481d      	ldr	r0, [pc, #116]	@ (800524c <__pow5mult+0xb0>)
 80051d8:	f000 fbee 	bl	80059b8 <__assert_func>
 80051dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80051e0:	6004      	str	r4, [r0, #0]
 80051e2:	60c4      	str	r4, [r0, #12]
 80051e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80051e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80051ec:	b94c      	cbnz	r4, 8005202 <__pow5mult+0x66>
 80051ee:	f240 2171 	movw	r1, #625	@ 0x271
 80051f2:	4638      	mov	r0, r7
 80051f4:	f7ff ff12 	bl	800501c <__i2b>
 80051f8:	2300      	movs	r3, #0
 80051fa:	4604      	mov	r4, r0
 80051fc:	f8c8 0008 	str.w	r0, [r8, #8]
 8005200:	6003      	str	r3, [r0, #0]
 8005202:	f04f 0900 	mov.w	r9, #0
 8005206:	07eb      	lsls	r3, r5, #31
 8005208:	d50a      	bpl.n	8005220 <__pow5mult+0x84>
 800520a:	4631      	mov	r1, r6
 800520c:	4622      	mov	r2, r4
 800520e:	4638      	mov	r0, r7
 8005210:	f7ff ff1a 	bl	8005048 <__multiply>
 8005214:	4680      	mov	r8, r0
 8005216:	4631      	mov	r1, r6
 8005218:	4638      	mov	r0, r7
 800521a:	4646      	mov	r6, r8
 800521c:	f7ff fe48 	bl	8004eb0 <_Bfree>
 8005220:	106d      	asrs	r5, r5, #1
 8005222:	d00b      	beq.n	800523c <__pow5mult+0xa0>
 8005224:	6820      	ldr	r0, [r4, #0]
 8005226:	b938      	cbnz	r0, 8005238 <__pow5mult+0x9c>
 8005228:	4622      	mov	r2, r4
 800522a:	4621      	mov	r1, r4
 800522c:	4638      	mov	r0, r7
 800522e:	f7ff ff0b 	bl	8005048 <__multiply>
 8005232:	6020      	str	r0, [r4, #0]
 8005234:	f8c0 9000 	str.w	r9, [r0]
 8005238:	4604      	mov	r4, r0
 800523a:	e7e4      	b.n	8005206 <__pow5mult+0x6a>
 800523c:	4630      	mov	r0, r6
 800523e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005242:	bf00      	nop
 8005244:	080061ac 	.word	0x080061ac
 8005248:	080060d1 	.word	0x080060d1
 800524c:	08006151 	.word	0x08006151

08005250 <__lshift>:
 8005250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005254:	460c      	mov	r4, r1
 8005256:	4607      	mov	r7, r0
 8005258:	4691      	mov	r9, r2
 800525a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800525e:	6923      	ldr	r3, [r4, #16]
 8005260:	6849      	ldr	r1, [r1, #4]
 8005262:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005266:	68a3      	ldr	r3, [r4, #8]
 8005268:	f108 0601 	add.w	r6, r8, #1
 800526c:	42b3      	cmp	r3, r6
 800526e:	db0b      	blt.n	8005288 <__lshift+0x38>
 8005270:	4638      	mov	r0, r7
 8005272:	f7ff fddd 	bl	8004e30 <_Balloc>
 8005276:	4605      	mov	r5, r0
 8005278:	b948      	cbnz	r0, 800528e <__lshift+0x3e>
 800527a:	4602      	mov	r2, r0
 800527c:	4b28      	ldr	r3, [pc, #160]	@ (8005320 <__lshift+0xd0>)
 800527e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005282:	4828      	ldr	r0, [pc, #160]	@ (8005324 <__lshift+0xd4>)
 8005284:	f000 fb98 	bl	80059b8 <__assert_func>
 8005288:	3101      	adds	r1, #1
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	e7ee      	b.n	800526c <__lshift+0x1c>
 800528e:	2300      	movs	r3, #0
 8005290:	f100 0114 	add.w	r1, r0, #20
 8005294:	f100 0210 	add.w	r2, r0, #16
 8005298:	4618      	mov	r0, r3
 800529a:	4553      	cmp	r3, sl
 800529c:	db33      	blt.n	8005306 <__lshift+0xb6>
 800529e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80052a2:	f104 0314 	add.w	r3, r4, #20
 80052a6:	6920      	ldr	r0, [r4, #16]
 80052a8:	f019 091f 	ands.w	r9, r9, #31
 80052ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80052b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80052b4:	d02b      	beq.n	800530e <__lshift+0xbe>
 80052b6:	f1c9 0e20 	rsb	lr, r9, #32
 80052ba:	468a      	mov	sl, r1
 80052bc:	2200      	movs	r2, #0
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	fa00 f009 	lsl.w	r0, r0, r9
 80052c4:	4310      	orrs	r0, r2
 80052c6:	f84a 0b04 	str.w	r0, [sl], #4
 80052ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80052ce:	459c      	cmp	ip, r3
 80052d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80052d4:	d8f3      	bhi.n	80052be <__lshift+0x6e>
 80052d6:	ebac 0304 	sub.w	r3, ip, r4
 80052da:	f104 0015 	add.w	r0, r4, #21
 80052de:	3b15      	subs	r3, #21
 80052e0:	f023 0303 	bic.w	r3, r3, #3
 80052e4:	3304      	adds	r3, #4
 80052e6:	4584      	cmp	ip, r0
 80052e8:	bf38      	it	cc
 80052ea:	2304      	movcc	r3, #4
 80052ec:	50ca      	str	r2, [r1, r3]
 80052ee:	b10a      	cbz	r2, 80052f4 <__lshift+0xa4>
 80052f0:	f108 0602 	add.w	r6, r8, #2
 80052f4:	3e01      	subs	r6, #1
 80052f6:	4638      	mov	r0, r7
 80052f8:	4621      	mov	r1, r4
 80052fa:	612e      	str	r6, [r5, #16]
 80052fc:	f7ff fdd8 	bl	8004eb0 <_Bfree>
 8005300:	4628      	mov	r0, r5
 8005302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005306:	3301      	adds	r3, #1
 8005308:	f842 0f04 	str.w	r0, [r2, #4]!
 800530c:	e7c5      	b.n	800529a <__lshift+0x4a>
 800530e:	3904      	subs	r1, #4
 8005310:	f853 2b04 	ldr.w	r2, [r3], #4
 8005314:	459c      	cmp	ip, r3
 8005316:	f841 2f04 	str.w	r2, [r1, #4]!
 800531a:	d8f9      	bhi.n	8005310 <__lshift+0xc0>
 800531c:	e7ea      	b.n	80052f4 <__lshift+0xa4>
 800531e:	bf00      	nop
 8005320:	08006140 	.word	0x08006140
 8005324:	08006151 	.word	0x08006151

08005328 <__mcmp>:
 8005328:	4603      	mov	r3, r0
 800532a:	690a      	ldr	r2, [r1, #16]
 800532c:	6900      	ldr	r0, [r0, #16]
 800532e:	1a80      	subs	r0, r0, r2
 8005330:	b530      	push	{r4, r5, lr}
 8005332:	d10e      	bne.n	8005352 <__mcmp+0x2a>
 8005334:	3314      	adds	r3, #20
 8005336:	3114      	adds	r1, #20
 8005338:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800533c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005340:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005344:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005348:	4295      	cmp	r5, r2
 800534a:	d003      	beq.n	8005354 <__mcmp+0x2c>
 800534c:	d205      	bcs.n	800535a <__mcmp+0x32>
 800534e:	f04f 30ff 	mov.w	r0, #4294967295
 8005352:	bd30      	pop	{r4, r5, pc}
 8005354:	42a3      	cmp	r3, r4
 8005356:	d3f3      	bcc.n	8005340 <__mcmp+0x18>
 8005358:	e7fb      	b.n	8005352 <__mcmp+0x2a>
 800535a:	2001      	movs	r0, #1
 800535c:	e7f9      	b.n	8005352 <__mcmp+0x2a>
	...

08005360 <__mdiff>:
 8005360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005364:	4689      	mov	r9, r1
 8005366:	4606      	mov	r6, r0
 8005368:	4611      	mov	r1, r2
 800536a:	4614      	mov	r4, r2
 800536c:	4648      	mov	r0, r9
 800536e:	f7ff ffdb 	bl	8005328 <__mcmp>
 8005372:	1e05      	subs	r5, r0, #0
 8005374:	d112      	bne.n	800539c <__mdiff+0x3c>
 8005376:	4629      	mov	r1, r5
 8005378:	4630      	mov	r0, r6
 800537a:	f7ff fd59 	bl	8004e30 <_Balloc>
 800537e:	4602      	mov	r2, r0
 8005380:	b928      	cbnz	r0, 800538e <__mdiff+0x2e>
 8005382:	4b41      	ldr	r3, [pc, #260]	@ (8005488 <__mdiff+0x128>)
 8005384:	f240 2137 	movw	r1, #567	@ 0x237
 8005388:	4840      	ldr	r0, [pc, #256]	@ (800548c <__mdiff+0x12c>)
 800538a:	f000 fb15 	bl	80059b8 <__assert_func>
 800538e:	2301      	movs	r3, #1
 8005390:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005394:	4610      	mov	r0, r2
 8005396:	b003      	add	sp, #12
 8005398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800539c:	bfbc      	itt	lt
 800539e:	464b      	movlt	r3, r9
 80053a0:	46a1      	movlt	r9, r4
 80053a2:	4630      	mov	r0, r6
 80053a4:	bfb8      	it	lt
 80053a6:	2501      	movlt	r5, #1
 80053a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80053ac:	bfb4      	ite	lt
 80053ae:	461c      	movlt	r4, r3
 80053b0:	2500      	movge	r5, #0
 80053b2:	f7ff fd3d 	bl	8004e30 <_Balloc>
 80053b6:	4602      	mov	r2, r0
 80053b8:	b918      	cbnz	r0, 80053c2 <__mdiff+0x62>
 80053ba:	4b33      	ldr	r3, [pc, #204]	@ (8005488 <__mdiff+0x128>)
 80053bc:	f240 2145 	movw	r1, #581	@ 0x245
 80053c0:	e7e2      	b.n	8005388 <__mdiff+0x28>
 80053c2:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80053c6:	f104 0e14 	add.w	lr, r4, #20
 80053ca:	6926      	ldr	r6, [r4, #16]
 80053cc:	f100 0b14 	add.w	fp, r0, #20
 80053d0:	60c5      	str	r5, [r0, #12]
 80053d2:	f109 0514 	add.w	r5, r9, #20
 80053d6:	f109 0310 	add.w	r3, r9, #16
 80053da:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80053de:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80053e2:	46d9      	mov	r9, fp
 80053e4:	f04f 0c00 	mov.w	ip, #0
 80053e8:	9301      	str	r3, [sp, #4]
 80053ea:	9b01      	ldr	r3, [sp, #4]
 80053ec:	f85e 0b04 	ldr.w	r0, [lr], #4
 80053f0:	f853 af04 	ldr.w	sl, [r3, #4]!
 80053f4:	4576      	cmp	r6, lr
 80053f6:	9301      	str	r3, [sp, #4]
 80053f8:	fa1f f38a 	uxth.w	r3, sl
 80053fc:	4619      	mov	r1, r3
 80053fe:	b283      	uxth	r3, r0
 8005400:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8005404:	eba1 0303 	sub.w	r3, r1, r3
 8005408:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800540c:	4463      	add	r3, ip
 800540e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005412:	b29b      	uxth	r3, r3
 8005414:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005418:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800541c:	f849 3b04 	str.w	r3, [r9], #4
 8005420:	d8e3      	bhi.n	80053ea <__mdiff+0x8a>
 8005422:	1b33      	subs	r3, r6, r4
 8005424:	3415      	adds	r4, #21
 8005426:	3b15      	subs	r3, #21
 8005428:	f023 0303 	bic.w	r3, r3, #3
 800542c:	3304      	adds	r3, #4
 800542e:	42a6      	cmp	r6, r4
 8005430:	bf38      	it	cc
 8005432:	2304      	movcc	r3, #4
 8005434:	441d      	add	r5, r3
 8005436:	445b      	add	r3, fp
 8005438:	462c      	mov	r4, r5
 800543a:	461e      	mov	r6, r3
 800543c:	4544      	cmp	r4, r8
 800543e:	d30e      	bcc.n	800545e <__mdiff+0xfe>
 8005440:	f108 0103 	add.w	r1, r8, #3
 8005444:	1b49      	subs	r1, r1, r5
 8005446:	3d03      	subs	r5, #3
 8005448:	f021 0103 	bic.w	r1, r1, #3
 800544c:	45a8      	cmp	r8, r5
 800544e:	bf38      	it	cc
 8005450:	2100      	movcc	r1, #0
 8005452:	440b      	add	r3, r1
 8005454:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005458:	b199      	cbz	r1, 8005482 <__mdiff+0x122>
 800545a:	6117      	str	r7, [r2, #16]
 800545c:	e79a      	b.n	8005394 <__mdiff+0x34>
 800545e:	f854 1b04 	ldr.w	r1, [r4], #4
 8005462:	46e6      	mov	lr, ip
 8005464:	fa1f fc81 	uxth.w	ip, r1
 8005468:	0c08      	lsrs	r0, r1, #16
 800546a:	4471      	add	r1, lr
 800546c:	44f4      	add	ip, lr
 800546e:	b289      	uxth	r1, r1
 8005470:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005478:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800547c:	f846 1b04 	str.w	r1, [r6], #4
 8005480:	e7dc      	b.n	800543c <__mdiff+0xdc>
 8005482:	3f01      	subs	r7, #1
 8005484:	e7e6      	b.n	8005454 <__mdiff+0xf4>
 8005486:	bf00      	nop
 8005488:	08006140 	.word	0x08006140
 800548c:	08006151 	.word	0x08006151

08005490 <__d2b>:
 8005490:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005494:	460f      	mov	r7, r1
 8005496:	2101      	movs	r1, #1
 8005498:	4616      	mov	r6, r2
 800549a:	ec59 8b10 	vmov	r8, r9, d0
 800549e:	f7ff fcc7 	bl	8004e30 <_Balloc>
 80054a2:	4604      	mov	r4, r0
 80054a4:	b930      	cbnz	r0, 80054b4 <__d2b+0x24>
 80054a6:	4602      	mov	r2, r0
 80054a8:	4b23      	ldr	r3, [pc, #140]	@ (8005538 <__d2b+0xa8>)
 80054aa:	f240 310f 	movw	r1, #783	@ 0x30f
 80054ae:	4823      	ldr	r0, [pc, #140]	@ (800553c <__d2b+0xac>)
 80054b0:	f000 fa82 	bl	80059b8 <__assert_func>
 80054b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80054b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80054bc:	b10d      	cbz	r5, 80054c2 <__d2b+0x32>
 80054be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054c2:	9301      	str	r3, [sp, #4]
 80054c4:	f1b8 0300 	subs.w	r3, r8, #0
 80054c8:	d023      	beq.n	8005512 <__d2b+0x82>
 80054ca:	4668      	mov	r0, sp
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	f7ff fd78 	bl	8004fc2 <__lo0bits>
 80054d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80054d6:	b1d0      	cbz	r0, 800550e <__d2b+0x7e>
 80054d8:	f1c0 0320 	rsb	r3, r0, #32
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	40c2      	lsrs	r2, r0
 80054e2:	430b      	orrs	r3, r1
 80054e4:	9201      	str	r2, [sp, #4]
 80054e6:	6163      	str	r3, [r4, #20]
 80054e8:	9b01      	ldr	r3, [sp, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	61a3      	str	r3, [r4, #24]
 80054ee:	bf0c      	ite	eq
 80054f0:	2201      	moveq	r2, #1
 80054f2:	2202      	movne	r2, #2
 80054f4:	6122      	str	r2, [r4, #16]
 80054f6:	b1a5      	cbz	r5, 8005522 <__d2b+0x92>
 80054f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80054fc:	4405      	add	r5, r0
 80054fe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005502:	603d      	str	r5, [r7, #0]
 8005504:	6030      	str	r0, [r6, #0]
 8005506:	4620      	mov	r0, r4
 8005508:	b003      	add	sp, #12
 800550a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800550e:	6161      	str	r1, [r4, #20]
 8005510:	e7ea      	b.n	80054e8 <__d2b+0x58>
 8005512:	a801      	add	r0, sp, #4
 8005514:	f7ff fd55 	bl	8004fc2 <__lo0bits>
 8005518:	9b01      	ldr	r3, [sp, #4]
 800551a:	3020      	adds	r0, #32
 800551c:	2201      	movs	r2, #1
 800551e:	6163      	str	r3, [r4, #20]
 8005520:	e7e8      	b.n	80054f4 <__d2b+0x64>
 8005522:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005526:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800552a:	6038      	str	r0, [r7, #0]
 800552c:	6918      	ldr	r0, [r3, #16]
 800552e:	f7ff fd29 	bl	8004f84 <__hi0bits>
 8005532:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005536:	e7e5      	b.n	8005504 <__d2b+0x74>
 8005538:	08006140 	.word	0x08006140
 800553c:	08006151 	.word	0x08006151

08005540 <__ssputs_r>:
 8005540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005544:	461f      	mov	r7, r3
 8005546:	688e      	ldr	r6, [r1, #8]
 8005548:	4682      	mov	sl, r0
 800554a:	460c      	mov	r4, r1
 800554c:	42be      	cmp	r6, r7
 800554e:	4690      	mov	r8, r2
 8005550:	680b      	ldr	r3, [r1, #0]
 8005552:	d82d      	bhi.n	80055b0 <__ssputs_r+0x70>
 8005554:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005558:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800555c:	d026      	beq.n	80055ac <__ssputs_r+0x6c>
 800555e:	6965      	ldr	r5, [r4, #20]
 8005560:	6909      	ldr	r1, [r1, #16]
 8005562:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005566:	eba3 0901 	sub.w	r9, r3, r1
 800556a:	1c7b      	adds	r3, r7, #1
 800556c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005570:	444b      	add	r3, r9
 8005572:	106d      	asrs	r5, r5, #1
 8005574:	429d      	cmp	r5, r3
 8005576:	bf38      	it	cc
 8005578:	461d      	movcc	r5, r3
 800557a:	0553      	lsls	r3, r2, #21
 800557c:	d527      	bpl.n	80055ce <__ssputs_r+0x8e>
 800557e:	4629      	mov	r1, r5
 8005580:	f7ff fbca 	bl	8004d18 <_malloc_r>
 8005584:	4606      	mov	r6, r0
 8005586:	b360      	cbz	r0, 80055e2 <__ssputs_r+0xa2>
 8005588:	464a      	mov	r2, r9
 800558a:	6921      	ldr	r1, [r4, #16]
 800558c:	f000 fa06 	bl	800599c <memcpy>
 8005590:	89a3      	ldrh	r3, [r4, #12]
 8005592:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800559a:	81a3      	strh	r3, [r4, #12]
 800559c:	6126      	str	r6, [r4, #16]
 800559e:	444e      	add	r6, r9
 80055a0:	6165      	str	r5, [r4, #20]
 80055a2:	eba5 0509 	sub.w	r5, r5, r9
 80055a6:	6026      	str	r6, [r4, #0]
 80055a8:	463e      	mov	r6, r7
 80055aa:	60a5      	str	r5, [r4, #8]
 80055ac:	42be      	cmp	r6, r7
 80055ae:	d900      	bls.n	80055b2 <__ssputs_r+0x72>
 80055b0:	463e      	mov	r6, r7
 80055b2:	4632      	mov	r2, r6
 80055b4:	4641      	mov	r1, r8
 80055b6:	6820      	ldr	r0, [r4, #0]
 80055b8:	f000 f9c6 	bl	8005948 <memmove>
 80055bc:	68a3      	ldr	r3, [r4, #8]
 80055be:	2000      	movs	r0, #0
 80055c0:	1b9b      	subs	r3, r3, r6
 80055c2:	60a3      	str	r3, [r4, #8]
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	4433      	add	r3, r6
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ce:	462a      	mov	r2, r5
 80055d0:	f000 fa36 	bl	8005a40 <_realloc_r>
 80055d4:	4606      	mov	r6, r0
 80055d6:	2800      	cmp	r0, #0
 80055d8:	d1e0      	bne.n	800559c <__ssputs_r+0x5c>
 80055da:	6921      	ldr	r1, [r4, #16]
 80055dc:	4650      	mov	r0, sl
 80055de:	f7ff fb27 	bl	8004c30 <_free_r>
 80055e2:	230c      	movs	r3, #12
 80055e4:	f04f 30ff 	mov.w	r0, #4294967295
 80055e8:	f8ca 3000 	str.w	r3, [sl]
 80055ec:	89a3      	ldrh	r3, [r4, #12]
 80055ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055f2:	81a3      	strh	r3, [r4, #12]
 80055f4:	e7e9      	b.n	80055ca <__ssputs_r+0x8a>
	...

080055f8 <_svfiprintf_r>:
 80055f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055fc:	4698      	mov	r8, r3
 80055fe:	898b      	ldrh	r3, [r1, #12]
 8005600:	b09d      	sub	sp, #116	@ 0x74
 8005602:	4607      	mov	r7, r0
 8005604:	061b      	lsls	r3, r3, #24
 8005606:	460d      	mov	r5, r1
 8005608:	4614      	mov	r4, r2
 800560a:	d510      	bpl.n	800562e <_svfiprintf_r+0x36>
 800560c:	690b      	ldr	r3, [r1, #16]
 800560e:	b973      	cbnz	r3, 800562e <_svfiprintf_r+0x36>
 8005610:	2140      	movs	r1, #64	@ 0x40
 8005612:	f7ff fb81 	bl	8004d18 <_malloc_r>
 8005616:	6028      	str	r0, [r5, #0]
 8005618:	6128      	str	r0, [r5, #16]
 800561a:	b930      	cbnz	r0, 800562a <_svfiprintf_r+0x32>
 800561c:	230c      	movs	r3, #12
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	f04f 30ff 	mov.w	r0, #4294967295
 8005624:	b01d      	add	sp, #116	@ 0x74
 8005626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800562a:	2340      	movs	r3, #64	@ 0x40
 800562c:	616b      	str	r3, [r5, #20]
 800562e:	2300      	movs	r3, #0
 8005630:	f8cd 800c 	str.w	r8, [sp, #12]
 8005634:	f04f 0901 	mov.w	r9, #1
 8005638:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 80057dc <_svfiprintf_r+0x1e4>
 800563c:	9309      	str	r3, [sp, #36]	@ 0x24
 800563e:	2320      	movs	r3, #32
 8005640:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005644:	2330      	movs	r3, #48	@ 0x30
 8005646:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800564a:	4623      	mov	r3, r4
 800564c:	469a      	mov	sl, r3
 800564e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005652:	b10a      	cbz	r2, 8005658 <_svfiprintf_r+0x60>
 8005654:	2a25      	cmp	r2, #37	@ 0x25
 8005656:	d1f9      	bne.n	800564c <_svfiprintf_r+0x54>
 8005658:	ebba 0b04 	subs.w	fp, sl, r4
 800565c:	d00b      	beq.n	8005676 <_svfiprintf_r+0x7e>
 800565e:	465b      	mov	r3, fp
 8005660:	4622      	mov	r2, r4
 8005662:	4629      	mov	r1, r5
 8005664:	4638      	mov	r0, r7
 8005666:	f7ff ff6b 	bl	8005540 <__ssputs_r>
 800566a:	3001      	adds	r0, #1
 800566c:	f000 80a7 	beq.w	80057be <_svfiprintf_r+0x1c6>
 8005670:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005672:	445a      	add	r2, fp
 8005674:	9209      	str	r2, [sp, #36]	@ 0x24
 8005676:	f89a 3000 	ldrb.w	r3, [sl]
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 809f 	beq.w	80057be <_svfiprintf_r+0x1c6>
 8005680:	2300      	movs	r3, #0
 8005682:	f04f 32ff 	mov.w	r2, #4294967295
 8005686:	f10a 0a01 	add.w	sl, sl, #1
 800568a:	9304      	str	r3, [sp, #16]
 800568c:	9307      	str	r3, [sp, #28]
 800568e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005692:	931a      	str	r3, [sp, #104]	@ 0x68
 8005694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005698:	4654      	mov	r4, sl
 800569a:	2205      	movs	r2, #5
 800569c:	484f      	ldr	r0, [pc, #316]	@ (80057dc <_svfiprintf_r+0x1e4>)
 800569e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a2:	f7fe fc66 	bl	8003f72 <memchr>
 80056a6:	9a04      	ldr	r2, [sp, #16]
 80056a8:	b9d8      	cbnz	r0, 80056e2 <_svfiprintf_r+0xea>
 80056aa:	06d0      	lsls	r0, r2, #27
 80056ac:	bf44      	itt	mi
 80056ae:	2320      	movmi	r3, #32
 80056b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056b4:	0711      	lsls	r1, r2, #28
 80056b6:	bf44      	itt	mi
 80056b8:	232b      	movmi	r3, #43	@ 0x2b
 80056ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056be:	f89a 3000 	ldrb.w	r3, [sl]
 80056c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80056c4:	d015      	beq.n	80056f2 <_svfiprintf_r+0xfa>
 80056c6:	9a07      	ldr	r2, [sp, #28]
 80056c8:	4654      	mov	r4, sl
 80056ca:	2000      	movs	r0, #0
 80056cc:	f04f 0c0a 	mov.w	ip, #10
 80056d0:	4621      	mov	r1, r4
 80056d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056d6:	3b30      	subs	r3, #48	@ 0x30
 80056d8:	2b09      	cmp	r3, #9
 80056da:	d94b      	bls.n	8005774 <_svfiprintf_r+0x17c>
 80056dc:	b1b0      	cbz	r0, 800570c <_svfiprintf_r+0x114>
 80056de:	9207      	str	r2, [sp, #28]
 80056e0:	e014      	b.n	800570c <_svfiprintf_r+0x114>
 80056e2:	eba0 0308 	sub.w	r3, r0, r8
 80056e6:	46a2      	mov	sl, r4
 80056e8:	fa09 f303 	lsl.w	r3, r9, r3
 80056ec:	4313      	orrs	r3, r2
 80056ee:	9304      	str	r3, [sp, #16]
 80056f0:	e7d2      	b.n	8005698 <_svfiprintf_r+0xa0>
 80056f2:	9b03      	ldr	r3, [sp, #12]
 80056f4:	1d19      	adds	r1, r3, #4
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	9103      	str	r1, [sp, #12]
 80056fc:	bfbb      	ittet	lt
 80056fe:	425b      	neglt	r3, r3
 8005700:	f042 0202 	orrlt.w	r2, r2, #2
 8005704:	9307      	strge	r3, [sp, #28]
 8005706:	9307      	strlt	r3, [sp, #28]
 8005708:	bfb8      	it	lt
 800570a:	9204      	strlt	r2, [sp, #16]
 800570c:	7823      	ldrb	r3, [r4, #0]
 800570e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005710:	d10a      	bne.n	8005728 <_svfiprintf_r+0x130>
 8005712:	7863      	ldrb	r3, [r4, #1]
 8005714:	2b2a      	cmp	r3, #42	@ 0x2a
 8005716:	d132      	bne.n	800577e <_svfiprintf_r+0x186>
 8005718:	9b03      	ldr	r3, [sp, #12]
 800571a:	3402      	adds	r4, #2
 800571c:	1d1a      	adds	r2, r3, #4
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005724:	9203      	str	r2, [sp, #12]
 8005726:	9305      	str	r3, [sp, #20]
 8005728:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80057ec <_svfiprintf_r+0x1f4>
 800572c:	2203      	movs	r2, #3
 800572e:	7821      	ldrb	r1, [r4, #0]
 8005730:	4650      	mov	r0, sl
 8005732:	f7fe fc1e 	bl	8003f72 <memchr>
 8005736:	b138      	cbz	r0, 8005748 <_svfiprintf_r+0x150>
 8005738:	eba0 000a 	sub.w	r0, r0, sl
 800573c:	2240      	movs	r2, #64	@ 0x40
 800573e:	9b04      	ldr	r3, [sp, #16]
 8005740:	3401      	adds	r4, #1
 8005742:	4082      	lsls	r2, r0
 8005744:	4313      	orrs	r3, r2
 8005746:	9304      	str	r3, [sp, #16]
 8005748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800574c:	2206      	movs	r2, #6
 800574e:	4824      	ldr	r0, [pc, #144]	@ (80057e0 <_svfiprintf_r+0x1e8>)
 8005750:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005754:	f7fe fc0d 	bl	8003f72 <memchr>
 8005758:	2800      	cmp	r0, #0
 800575a:	d036      	beq.n	80057ca <_svfiprintf_r+0x1d2>
 800575c:	4b21      	ldr	r3, [pc, #132]	@ (80057e4 <_svfiprintf_r+0x1ec>)
 800575e:	bb1b      	cbnz	r3, 80057a8 <_svfiprintf_r+0x1b0>
 8005760:	9b03      	ldr	r3, [sp, #12]
 8005762:	3307      	adds	r3, #7
 8005764:	f023 0307 	bic.w	r3, r3, #7
 8005768:	3308      	adds	r3, #8
 800576a:	9303      	str	r3, [sp, #12]
 800576c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800576e:	4433      	add	r3, r6
 8005770:	9309      	str	r3, [sp, #36]	@ 0x24
 8005772:	e76a      	b.n	800564a <_svfiprintf_r+0x52>
 8005774:	fb0c 3202 	mla	r2, ip, r2, r3
 8005778:	460c      	mov	r4, r1
 800577a:	2001      	movs	r0, #1
 800577c:	e7a8      	b.n	80056d0 <_svfiprintf_r+0xd8>
 800577e:	2300      	movs	r3, #0
 8005780:	3401      	adds	r4, #1
 8005782:	f04f 0c0a 	mov.w	ip, #10
 8005786:	4619      	mov	r1, r3
 8005788:	9305      	str	r3, [sp, #20]
 800578a:	4620      	mov	r0, r4
 800578c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005790:	3a30      	subs	r2, #48	@ 0x30
 8005792:	2a09      	cmp	r2, #9
 8005794:	d903      	bls.n	800579e <_svfiprintf_r+0x1a6>
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0c6      	beq.n	8005728 <_svfiprintf_r+0x130>
 800579a:	9105      	str	r1, [sp, #20]
 800579c:	e7c4      	b.n	8005728 <_svfiprintf_r+0x130>
 800579e:	fb0c 2101 	mla	r1, ip, r1, r2
 80057a2:	4604      	mov	r4, r0
 80057a4:	2301      	movs	r3, #1
 80057a6:	e7f0      	b.n	800578a <_svfiprintf_r+0x192>
 80057a8:	ab03      	add	r3, sp, #12
 80057aa:	462a      	mov	r2, r5
 80057ac:	a904      	add	r1, sp, #16
 80057ae:	4638      	mov	r0, r7
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	4b0d      	ldr	r3, [pc, #52]	@ (80057e8 <_svfiprintf_r+0x1f0>)
 80057b4:	f7fd fe7c 	bl	80034b0 <_printf_float>
 80057b8:	1c42      	adds	r2, r0, #1
 80057ba:	4606      	mov	r6, r0
 80057bc:	d1d6      	bne.n	800576c <_svfiprintf_r+0x174>
 80057be:	89ab      	ldrh	r3, [r5, #12]
 80057c0:	065b      	lsls	r3, r3, #25
 80057c2:	f53f af2d 	bmi.w	8005620 <_svfiprintf_r+0x28>
 80057c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057c8:	e72c      	b.n	8005624 <_svfiprintf_r+0x2c>
 80057ca:	ab03      	add	r3, sp, #12
 80057cc:	462a      	mov	r2, r5
 80057ce:	a904      	add	r1, sp, #16
 80057d0:	4638      	mov	r0, r7
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	4b04      	ldr	r3, [pc, #16]	@ (80057e8 <_svfiprintf_r+0x1f0>)
 80057d6:	f7fe f907 	bl	80039e8 <_printf_i>
 80057da:	e7ed      	b.n	80057b8 <_svfiprintf_r+0x1c0>
 80057dc:	080062a8 	.word	0x080062a8
 80057e0:	080062b2 	.word	0x080062b2
 80057e4:	080034b1 	.word	0x080034b1
 80057e8:	08005541 	.word	0x08005541
 80057ec:	080062ae 	.word	0x080062ae

080057f0 <__sflush_r>:
 80057f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f8:	0716      	lsls	r6, r2, #28
 80057fa:	4605      	mov	r5, r0
 80057fc:	460c      	mov	r4, r1
 80057fe:	d454      	bmi.n	80058aa <__sflush_r+0xba>
 8005800:	684b      	ldr	r3, [r1, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	dc02      	bgt.n	800580c <__sflush_r+0x1c>
 8005806:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005808:	2b00      	cmp	r3, #0
 800580a:	dd48      	ble.n	800589e <__sflush_r+0xae>
 800580c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800580e:	2e00      	cmp	r6, #0
 8005810:	d045      	beq.n	800589e <__sflush_r+0xae>
 8005812:	2300      	movs	r3, #0
 8005814:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005818:	682f      	ldr	r7, [r5, #0]
 800581a:	6a21      	ldr	r1, [r4, #32]
 800581c:	602b      	str	r3, [r5, #0]
 800581e:	d030      	beq.n	8005882 <__sflush_r+0x92>
 8005820:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	0759      	lsls	r1, r3, #29
 8005826:	d505      	bpl.n	8005834 <__sflush_r+0x44>
 8005828:	6863      	ldr	r3, [r4, #4]
 800582a:	1ad2      	subs	r2, r2, r3
 800582c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800582e:	b10b      	cbz	r3, 8005834 <__sflush_r+0x44>
 8005830:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005832:	1ad2      	subs	r2, r2, r3
 8005834:	2300      	movs	r3, #0
 8005836:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005838:	6a21      	ldr	r1, [r4, #32]
 800583a:	4628      	mov	r0, r5
 800583c:	47b0      	blx	r6
 800583e:	1c43      	adds	r3, r0, #1
 8005840:	89a3      	ldrh	r3, [r4, #12]
 8005842:	d106      	bne.n	8005852 <__sflush_r+0x62>
 8005844:	6829      	ldr	r1, [r5, #0]
 8005846:	291d      	cmp	r1, #29
 8005848:	d82b      	bhi.n	80058a2 <__sflush_r+0xb2>
 800584a:	4a2a      	ldr	r2, [pc, #168]	@ (80058f4 <__sflush_r+0x104>)
 800584c:	410a      	asrs	r2, r1
 800584e:	07d6      	lsls	r6, r2, #31
 8005850:	d427      	bmi.n	80058a2 <__sflush_r+0xb2>
 8005852:	2200      	movs	r2, #0
 8005854:	04d9      	lsls	r1, r3, #19
 8005856:	6062      	str	r2, [r4, #4]
 8005858:	6922      	ldr	r2, [r4, #16]
 800585a:	6022      	str	r2, [r4, #0]
 800585c:	d504      	bpl.n	8005868 <__sflush_r+0x78>
 800585e:	1c42      	adds	r2, r0, #1
 8005860:	d101      	bne.n	8005866 <__sflush_r+0x76>
 8005862:	682b      	ldr	r3, [r5, #0]
 8005864:	b903      	cbnz	r3, 8005868 <__sflush_r+0x78>
 8005866:	6560      	str	r0, [r4, #84]	@ 0x54
 8005868:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800586a:	602f      	str	r7, [r5, #0]
 800586c:	b1b9      	cbz	r1, 800589e <__sflush_r+0xae>
 800586e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005872:	4299      	cmp	r1, r3
 8005874:	d002      	beq.n	800587c <__sflush_r+0x8c>
 8005876:	4628      	mov	r0, r5
 8005878:	f7ff f9da 	bl	8004c30 <_free_r>
 800587c:	2300      	movs	r3, #0
 800587e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005880:	e00d      	b.n	800589e <__sflush_r+0xae>
 8005882:	2301      	movs	r3, #1
 8005884:	4628      	mov	r0, r5
 8005886:	47b0      	blx	r6
 8005888:	4602      	mov	r2, r0
 800588a:	1c50      	adds	r0, r2, #1
 800588c:	d1c9      	bne.n	8005822 <__sflush_r+0x32>
 800588e:	682b      	ldr	r3, [r5, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0c6      	beq.n	8005822 <__sflush_r+0x32>
 8005894:	2b1d      	cmp	r3, #29
 8005896:	d001      	beq.n	800589c <__sflush_r+0xac>
 8005898:	2b16      	cmp	r3, #22
 800589a:	d11d      	bne.n	80058d8 <__sflush_r+0xe8>
 800589c:	602f      	str	r7, [r5, #0]
 800589e:	2000      	movs	r0, #0
 80058a0:	e021      	b.n	80058e6 <__sflush_r+0xf6>
 80058a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058a6:	b21b      	sxth	r3, r3
 80058a8:	e01a      	b.n	80058e0 <__sflush_r+0xf0>
 80058aa:	690f      	ldr	r7, [r1, #16]
 80058ac:	2f00      	cmp	r7, #0
 80058ae:	d0f6      	beq.n	800589e <__sflush_r+0xae>
 80058b0:	0793      	lsls	r3, r2, #30
 80058b2:	680e      	ldr	r6, [r1, #0]
 80058b4:	600f      	str	r7, [r1, #0]
 80058b6:	bf0c      	ite	eq
 80058b8:	694b      	ldreq	r3, [r1, #20]
 80058ba:	2300      	movne	r3, #0
 80058bc:	eba6 0807 	sub.w	r8, r6, r7
 80058c0:	608b      	str	r3, [r1, #8]
 80058c2:	f1b8 0f00 	cmp.w	r8, #0
 80058c6:	ddea      	ble.n	800589e <__sflush_r+0xae>
 80058c8:	4643      	mov	r3, r8
 80058ca:	463a      	mov	r2, r7
 80058cc:	6a21      	ldr	r1, [r4, #32]
 80058ce:	4628      	mov	r0, r5
 80058d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80058d2:	47b0      	blx	r6
 80058d4:	2800      	cmp	r0, #0
 80058d6:	dc08      	bgt.n	80058ea <__sflush_r+0xfa>
 80058d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058e0:	f04f 30ff 	mov.w	r0, #4294967295
 80058e4:	81a3      	strh	r3, [r4, #12]
 80058e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058ea:	4407      	add	r7, r0
 80058ec:	eba8 0800 	sub.w	r8, r8, r0
 80058f0:	e7e7      	b.n	80058c2 <__sflush_r+0xd2>
 80058f2:	bf00      	nop
 80058f4:	dfbffffe 	.word	0xdfbffffe

080058f8 <_fflush_r>:
 80058f8:	b538      	push	{r3, r4, r5, lr}
 80058fa:	690b      	ldr	r3, [r1, #16]
 80058fc:	4605      	mov	r5, r0
 80058fe:	460c      	mov	r4, r1
 8005900:	b913      	cbnz	r3, 8005908 <_fflush_r+0x10>
 8005902:	2500      	movs	r5, #0
 8005904:	4628      	mov	r0, r5
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	b118      	cbz	r0, 8005912 <_fflush_r+0x1a>
 800590a:	6a03      	ldr	r3, [r0, #32]
 800590c:	b90b      	cbnz	r3, 8005912 <_fflush_r+0x1a>
 800590e:	f7fe fa17 	bl	8003d40 <__sinit>
 8005912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0f3      	beq.n	8005902 <_fflush_r+0xa>
 800591a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800591c:	07d0      	lsls	r0, r2, #31
 800591e:	d404      	bmi.n	800592a <_fflush_r+0x32>
 8005920:	0599      	lsls	r1, r3, #22
 8005922:	d402      	bmi.n	800592a <_fflush_r+0x32>
 8005924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005926:	f7fe fb22 	bl	8003f6e <__retarget_lock_acquire_recursive>
 800592a:	4628      	mov	r0, r5
 800592c:	4621      	mov	r1, r4
 800592e:	f7ff ff5f 	bl	80057f0 <__sflush_r>
 8005932:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005934:	4605      	mov	r5, r0
 8005936:	07da      	lsls	r2, r3, #31
 8005938:	d4e4      	bmi.n	8005904 <_fflush_r+0xc>
 800593a:	89a3      	ldrh	r3, [r4, #12]
 800593c:	059b      	lsls	r3, r3, #22
 800593e:	d4e1      	bmi.n	8005904 <_fflush_r+0xc>
 8005940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005942:	f7fe fb15 	bl	8003f70 <__retarget_lock_release_recursive>
 8005946:	e7dd      	b.n	8005904 <_fflush_r+0xc>

08005948 <memmove>:
 8005948:	4288      	cmp	r0, r1
 800594a:	b510      	push	{r4, lr}
 800594c:	eb01 0402 	add.w	r4, r1, r2
 8005950:	d902      	bls.n	8005958 <memmove+0x10>
 8005952:	4284      	cmp	r4, r0
 8005954:	4623      	mov	r3, r4
 8005956:	d807      	bhi.n	8005968 <memmove+0x20>
 8005958:	1e43      	subs	r3, r0, #1
 800595a:	42a1      	cmp	r1, r4
 800595c:	d008      	beq.n	8005970 <memmove+0x28>
 800595e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005962:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005966:	e7f8      	b.n	800595a <memmove+0x12>
 8005968:	4402      	add	r2, r0
 800596a:	4601      	mov	r1, r0
 800596c:	428a      	cmp	r2, r1
 800596e:	d100      	bne.n	8005972 <memmove+0x2a>
 8005970:	bd10      	pop	{r4, pc}
 8005972:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005976:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800597a:	e7f7      	b.n	800596c <memmove+0x24>

0800597c <_sbrk_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	2300      	movs	r3, #0
 8005980:	4d05      	ldr	r5, [pc, #20]	@ (8005998 <_sbrk_r+0x1c>)
 8005982:	4604      	mov	r4, r0
 8005984:	4608      	mov	r0, r1
 8005986:	602b      	str	r3, [r5, #0]
 8005988:	f7fb fd76 	bl	8001478 <_sbrk>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d102      	bne.n	8005996 <_sbrk_r+0x1a>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	b103      	cbz	r3, 8005996 <_sbrk_r+0x1a>
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	20000460 	.word	0x20000460

0800599c <memcpy>:
 800599c:	440a      	add	r2, r1
 800599e:	1e43      	subs	r3, r0, #1
 80059a0:	4291      	cmp	r1, r2
 80059a2:	d100      	bne.n	80059a6 <memcpy+0xa>
 80059a4:	4770      	bx	lr
 80059a6:	b510      	push	{r4, lr}
 80059a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059ac:	4291      	cmp	r1, r2
 80059ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059b2:	d1f9      	bne.n	80059a8 <memcpy+0xc>
 80059b4:	bd10      	pop	{r4, pc}
	...

080059b8 <__assert_func>:
 80059b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059ba:	4614      	mov	r4, r2
 80059bc:	461a      	mov	r2, r3
 80059be:	4b09      	ldr	r3, [pc, #36]	@ (80059e4 <__assert_func+0x2c>)
 80059c0:	4605      	mov	r5, r0
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68d8      	ldr	r0, [r3, #12]
 80059c6:	b954      	cbnz	r4, 80059de <__assert_func+0x26>
 80059c8:	4b07      	ldr	r3, [pc, #28]	@ (80059e8 <__assert_func+0x30>)
 80059ca:	461c      	mov	r4, r3
 80059cc:	9100      	str	r1, [sp, #0]
 80059ce:	4907      	ldr	r1, [pc, #28]	@ (80059ec <__assert_func+0x34>)
 80059d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80059d4:	462b      	mov	r3, r5
 80059d6:	f000 f86f 	bl	8005ab8 <fiprintf>
 80059da:	f000 f87f 	bl	8005adc <abort>
 80059de:	4b04      	ldr	r3, [pc, #16]	@ (80059f0 <__assert_func+0x38>)
 80059e0:	e7f4      	b.n	80059cc <__assert_func+0x14>
 80059e2:	bf00      	nop
 80059e4:	20000048 	.word	0x20000048
 80059e8:	080062fe 	.word	0x080062fe
 80059ec:	080062d0 	.word	0x080062d0
 80059f0:	080062c3 	.word	0x080062c3

080059f4 <_calloc_r>:
 80059f4:	b570      	push	{r4, r5, r6, lr}
 80059f6:	fba1 5402 	umull	r5, r4, r1, r2
 80059fa:	b93c      	cbnz	r4, 8005a0c <_calloc_r+0x18>
 80059fc:	4629      	mov	r1, r5
 80059fe:	f7ff f98b 	bl	8004d18 <_malloc_r>
 8005a02:	4606      	mov	r6, r0
 8005a04:	b928      	cbnz	r0, 8005a12 <_calloc_r+0x1e>
 8005a06:	2600      	movs	r6, #0
 8005a08:	4630      	mov	r0, r6
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	220c      	movs	r2, #12
 8005a0e:	6002      	str	r2, [r0, #0]
 8005a10:	e7f9      	b.n	8005a06 <_calloc_r+0x12>
 8005a12:	462a      	mov	r2, r5
 8005a14:	4621      	mov	r1, r4
 8005a16:	f7fe fa2c 	bl	8003e72 <memset>
 8005a1a:	e7f5      	b.n	8005a08 <_calloc_r+0x14>

08005a1c <__ascii_mbtowc>:
 8005a1c:	b082      	sub	sp, #8
 8005a1e:	b901      	cbnz	r1, 8005a22 <__ascii_mbtowc+0x6>
 8005a20:	a901      	add	r1, sp, #4
 8005a22:	b142      	cbz	r2, 8005a36 <__ascii_mbtowc+0x1a>
 8005a24:	b14b      	cbz	r3, 8005a3a <__ascii_mbtowc+0x1e>
 8005a26:	7813      	ldrb	r3, [r2, #0]
 8005a28:	600b      	str	r3, [r1, #0]
 8005a2a:	7812      	ldrb	r2, [r2, #0]
 8005a2c:	1e10      	subs	r0, r2, #0
 8005a2e:	bf18      	it	ne
 8005a30:	2001      	movne	r0, #1
 8005a32:	b002      	add	sp, #8
 8005a34:	4770      	bx	lr
 8005a36:	4610      	mov	r0, r2
 8005a38:	e7fb      	b.n	8005a32 <__ascii_mbtowc+0x16>
 8005a3a:	f06f 0001 	mvn.w	r0, #1
 8005a3e:	e7f8      	b.n	8005a32 <__ascii_mbtowc+0x16>

08005a40 <_realloc_r>:
 8005a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a44:	4680      	mov	r8, r0
 8005a46:	4615      	mov	r5, r2
 8005a48:	460c      	mov	r4, r1
 8005a4a:	b921      	cbnz	r1, 8005a56 <_realloc_r+0x16>
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a52:	f7ff b961 	b.w	8004d18 <_malloc_r>
 8005a56:	b92a      	cbnz	r2, 8005a64 <_realloc_r+0x24>
 8005a58:	f7ff f8ea 	bl	8004c30 <_free_r>
 8005a5c:	2400      	movs	r4, #0
 8005a5e:	4620      	mov	r0, r4
 8005a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a64:	f000 f841 	bl	8005aea <_malloc_usable_size_r>
 8005a68:	4285      	cmp	r5, r0
 8005a6a:	4606      	mov	r6, r0
 8005a6c:	d802      	bhi.n	8005a74 <_realloc_r+0x34>
 8005a6e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005a72:	d8f4      	bhi.n	8005a5e <_realloc_r+0x1e>
 8005a74:	4629      	mov	r1, r5
 8005a76:	4640      	mov	r0, r8
 8005a78:	f7ff f94e 	bl	8004d18 <_malloc_r>
 8005a7c:	4607      	mov	r7, r0
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d0ec      	beq.n	8005a5c <_realloc_r+0x1c>
 8005a82:	42b5      	cmp	r5, r6
 8005a84:	462a      	mov	r2, r5
 8005a86:	4621      	mov	r1, r4
 8005a88:	bf28      	it	cs
 8005a8a:	4632      	movcs	r2, r6
 8005a8c:	f7ff ff86 	bl	800599c <memcpy>
 8005a90:	4621      	mov	r1, r4
 8005a92:	4640      	mov	r0, r8
 8005a94:	463c      	mov	r4, r7
 8005a96:	f7ff f8cb 	bl	8004c30 <_free_r>
 8005a9a:	e7e0      	b.n	8005a5e <_realloc_r+0x1e>

08005a9c <__ascii_wctomb>:
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	4608      	mov	r0, r1
 8005aa0:	b141      	cbz	r1, 8005ab4 <__ascii_wctomb+0x18>
 8005aa2:	2aff      	cmp	r2, #255	@ 0xff
 8005aa4:	d904      	bls.n	8005ab0 <__ascii_wctomb+0x14>
 8005aa6:	228a      	movs	r2, #138	@ 0x8a
 8005aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	4770      	bx	lr
 8005ab0:	2001      	movs	r0, #1
 8005ab2:	700a      	strb	r2, [r1, #0]
 8005ab4:	4770      	bx	lr
	...

08005ab8 <fiprintf>:
 8005ab8:	b40e      	push	{r1, r2, r3}
 8005aba:	b503      	push	{r0, r1, lr}
 8005abc:	ab03      	add	r3, sp, #12
 8005abe:	4601      	mov	r1, r0
 8005ac0:	4805      	ldr	r0, [pc, #20]	@ (8005ad8 <fiprintf+0x20>)
 8005ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ac6:	6800      	ldr	r0, [r0, #0]
 8005ac8:	9301      	str	r3, [sp, #4]
 8005aca:	f000 f83f 	bl	8005b4c <_vfiprintf_r>
 8005ace:	b002      	add	sp, #8
 8005ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ad4:	b003      	add	sp, #12
 8005ad6:	4770      	bx	lr
 8005ad8:	20000048 	.word	0x20000048

08005adc <abort>:
 8005adc:	2006      	movs	r0, #6
 8005ade:	b508      	push	{r3, lr}
 8005ae0:	f000 fa08 	bl	8005ef4 <raise>
 8005ae4:	2001      	movs	r0, #1
 8005ae6:	f7fb fc4e 	bl	8001386 <_exit>

08005aea <_malloc_usable_size_r>:
 8005aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aee:	1f18      	subs	r0, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	bfbc      	itt	lt
 8005af4:	580b      	ldrlt	r3, [r1, r0]
 8005af6:	18c0      	addlt	r0, r0, r3
 8005af8:	4770      	bx	lr

08005afa <__sfputc_r>:
 8005afa:	6893      	ldr	r3, [r2, #8]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	6093      	str	r3, [r2, #8]
 8005b02:	b410      	push	{r4}
 8005b04:	da08      	bge.n	8005b18 <__sfputc_r+0x1e>
 8005b06:	6994      	ldr	r4, [r2, #24]
 8005b08:	42a3      	cmp	r3, r4
 8005b0a:	db01      	blt.n	8005b10 <__sfputc_r+0x16>
 8005b0c:	290a      	cmp	r1, #10
 8005b0e:	d103      	bne.n	8005b18 <__sfputc_r+0x1e>
 8005b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b14:	f000 b932 	b.w	8005d7c <__swbuf_r>
 8005b18:	6813      	ldr	r3, [r2, #0]
 8005b1a:	1c58      	adds	r0, r3, #1
 8005b1c:	6010      	str	r0, [r2, #0]
 8005b1e:	4608      	mov	r0, r1
 8005b20:	7019      	strb	r1, [r3, #0]
 8005b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <__sfputs_r>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	4606      	mov	r6, r0
 8005b2c:	460f      	mov	r7, r1
 8005b2e:	4614      	mov	r4, r2
 8005b30:	18d5      	adds	r5, r2, r3
 8005b32:	42ac      	cmp	r4, r5
 8005b34:	d101      	bne.n	8005b3a <__sfputs_r+0x12>
 8005b36:	2000      	movs	r0, #0
 8005b38:	e007      	b.n	8005b4a <__sfputs_r+0x22>
 8005b3a:	463a      	mov	r2, r7
 8005b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b40:	4630      	mov	r0, r6
 8005b42:	f7ff ffda 	bl	8005afa <__sfputc_r>
 8005b46:	1c43      	adds	r3, r0, #1
 8005b48:	d1f3      	bne.n	8005b32 <__sfputs_r+0xa>
 8005b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005b4c <_vfiprintf_r>:
 8005b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b50:	460d      	mov	r5, r1
 8005b52:	b09d      	sub	sp, #116	@ 0x74
 8005b54:	4614      	mov	r4, r2
 8005b56:	4698      	mov	r8, r3
 8005b58:	4606      	mov	r6, r0
 8005b5a:	b118      	cbz	r0, 8005b64 <_vfiprintf_r+0x18>
 8005b5c:	6a03      	ldr	r3, [r0, #32]
 8005b5e:	b90b      	cbnz	r3, 8005b64 <_vfiprintf_r+0x18>
 8005b60:	f7fe f8ee 	bl	8003d40 <__sinit>
 8005b64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b66:	07d9      	lsls	r1, r3, #31
 8005b68:	d405      	bmi.n	8005b76 <_vfiprintf_r+0x2a>
 8005b6a:	89ab      	ldrh	r3, [r5, #12]
 8005b6c:	059a      	lsls	r2, r3, #22
 8005b6e:	d402      	bmi.n	8005b76 <_vfiprintf_r+0x2a>
 8005b70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b72:	f7fe f9fc 	bl	8003f6e <__retarget_lock_acquire_recursive>
 8005b76:	89ab      	ldrh	r3, [r5, #12]
 8005b78:	071b      	lsls	r3, r3, #28
 8005b7a:	d501      	bpl.n	8005b80 <_vfiprintf_r+0x34>
 8005b7c:	692b      	ldr	r3, [r5, #16]
 8005b7e:	b99b      	cbnz	r3, 8005ba8 <_vfiprintf_r+0x5c>
 8005b80:	4629      	mov	r1, r5
 8005b82:	4630      	mov	r0, r6
 8005b84:	f000 f938 	bl	8005df8 <__swsetup_r>
 8005b88:	b170      	cbz	r0, 8005ba8 <_vfiprintf_r+0x5c>
 8005b8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b8c:	07dc      	lsls	r4, r3, #31
 8005b8e:	d504      	bpl.n	8005b9a <_vfiprintf_r+0x4e>
 8005b90:	f04f 30ff 	mov.w	r0, #4294967295
 8005b94:	b01d      	add	sp, #116	@ 0x74
 8005b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b9a:	89ab      	ldrh	r3, [r5, #12]
 8005b9c:	0598      	lsls	r0, r3, #22
 8005b9e:	d4f7      	bmi.n	8005b90 <_vfiprintf_r+0x44>
 8005ba0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ba2:	f7fe f9e5 	bl	8003f70 <__retarget_lock_release_recursive>
 8005ba6:	e7f3      	b.n	8005b90 <_vfiprintf_r+0x44>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bae:	f04f 0901 	mov.w	r9, #1
 8005bb2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8005d68 <_vfiprintf_r+0x21c>
 8005bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bb8:	2320      	movs	r3, #32
 8005bba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005bbe:	2330      	movs	r3, #48	@ 0x30
 8005bc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005bc4:	4623      	mov	r3, r4
 8005bc6:	469a      	mov	sl, r3
 8005bc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bcc:	b10a      	cbz	r2, 8005bd2 <_vfiprintf_r+0x86>
 8005bce:	2a25      	cmp	r2, #37	@ 0x25
 8005bd0:	d1f9      	bne.n	8005bc6 <_vfiprintf_r+0x7a>
 8005bd2:	ebba 0b04 	subs.w	fp, sl, r4
 8005bd6:	d00b      	beq.n	8005bf0 <_vfiprintf_r+0xa4>
 8005bd8:	465b      	mov	r3, fp
 8005bda:	4622      	mov	r2, r4
 8005bdc:	4629      	mov	r1, r5
 8005bde:	4630      	mov	r0, r6
 8005be0:	f7ff ffa2 	bl	8005b28 <__sfputs_r>
 8005be4:	3001      	adds	r0, #1
 8005be6:	f000 80a7 	beq.w	8005d38 <_vfiprintf_r+0x1ec>
 8005bea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bec:	445a      	add	r2, fp
 8005bee:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 809f 	beq.w	8005d38 <_vfiprintf_r+0x1ec>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8005c00:	f10a 0a01 	add.w	sl, sl, #1
 8005c04:	9304      	str	r3, [sp, #16]
 8005c06:	9307      	str	r3, [sp, #28]
 8005c08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c12:	4654      	mov	r4, sl
 8005c14:	2205      	movs	r2, #5
 8005c16:	4854      	ldr	r0, [pc, #336]	@ (8005d68 <_vfiprintf_r+0x21c>)
 8005c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c1c:	f7fe f9a9 	bl	8003f72 <memchr>
 8005c20:	9a04      	ldr	r2, [sp, #16]
 8005c22:	b9d8      	cbnz	r0, 8005c5c <_vfiprintf_r+0x110>
 8005c24:	06d1      	lsls	r1, r2, #27
 8005c26:	bf44      	itt	mi
 8005c28:	2320      	movmi	r3, #32
 8005c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c2e:	0713      	lsls	r3, r2, #28
 8005c30:	bf44      	itt	mi
 8005c32:	232b      	movmi	r3, #43	@ 0x2b
 8005c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c38:	f89a 3000 	ldrb.w	r3, [sl]
 8005c3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c3e:	d015      	beq.n	8005c6c <_vfiprintf_r+0x120>
 8005c40:	9a07      	ldr	r2, [sp, #28]
 8005c42:	4654      	mov	r4, sl
 8005c44:	2000      	movs	r0, #0
 8005c46:	f04f 0c0a 	mov.w	ip, #10
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c50:	3b30      	subs	r3, #48	@ 0x30
 8005c52:	2b09      	cmp	r3, #9
 8005c54:	d94b      	bls.n	8005cee <_vfiprintf_r+0x1a2>
 8005c56:	b1b0      	cbz	r0, 8005c86 <_vfiprintf_r+0x13a>
 8005c58:	9207      	str	r2, [sp, #28]
 8005c5a:	e014      	b.n	8005c86 <_vfiprintf_r+0x13a>
 8005c5c:	eba0 0308 	sub.w	r3, r0, r8
 8005c60:	46a2      	mov	sl, r4
 8005c62:	fa09 f303 	lsl.w	r3, r9, r3
 8005c66:	4313      	orrs	r3, r2
 8005c68:	9304      	str	r3, [sp, #16]
 8005c6a:	e7d2      	b.n	8005c12 <_vfiprintf_r+0xc6>
 8005c6c:	9b03      	ldr	r3, [sp, #12]
 8005c6e:	1d19      	adds	r1, r3, #4
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	9103      	str	r1, [sp, #12]
 8005c76:	bfbb      	ittet	lt
 8005c78:	425b      	neglt	r3, r3
 8005c7a:	f042 0202 	orrlt.w	r2, r2, #2
 8005c7e:	9307      	strge	r3, [sp, #28]
 8005c80:	9307      	strlt	r3, [sp, #28]
 8005c82:	bfb8      	it	lt
 8005c84:	9204      	strlt	r2, [sp, #16]
 8005c86:	7823      	ldrb	r3, [r4, #0]
 8005c88:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c8a:	d10a      	bne.n	8005ca2 <_vfiprintf_r+0x156>
 8005c8c:	7863      	ldrb	r3, [r4, #1]
 8005c8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c90:	d132      	bne.n	8005cf8 <_vfiprintf_r+0x1ac>
 8005c92:	9b03      	ldr	r3, [sp, #12]
 8005c94:	3402      	adds	r4, #2
 8005c96:	1d1a      	adds	r2, r3, #4
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c9e:	9203      	str	r2, [sp, #12]
 8005ca0:	9305      	str	r3, [sp, #20]
 8005ca2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005d78 <_vfiprintf_r+0x22c>
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	7821      	ldrb	r1, [r4, #0]
 8005caa:	4650      	mov	r0, sl
 8005cac:	f7fe f961 	bl	8003f72 <memchr>
 8005cb0:	b138      	cbz	r0, 8005cc2 <_vfiprintf_r+0x176>
 8005cb2:	eba0 000a 	sub.w	r0, r0, sl
 8005cb6:	2240      	movs	r2, #64	@ 0x40
 8005cb8:	9b04      	ldr	r3, [sp, #16]
 8005cba:	3401      	adds	r4, #1
 8005cbc:	4082      	lsls	r2, r0
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	9304      	str	r3, [sp, #16]
 8005cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc6:	2206      	movs	r2, #6
 8005cc8:	4828      	ldr	r0, [pc, #160]	@ (8005d6c <_vfiprintf_r+0x220>)
 8005cca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005cce:	f7fe f950 	bl	8003f72 <memchr>
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d03f      	beq.n	8005d56 <_vfiprintf_r+0x20a>
 8005cd6:	4b26      	ldr	r3, [pc, #152]	@ (8005d70 <_vfiprintf_r+0x224>)
 8005cd8:	bb1b      	cbnz	r3, 8005d22 <_vfiprintf_r+0x1d6>
 8005cda:	9b03      	ldr	r3, [sp, #12]
 8005cdc:	3307      	adds	r3, #7
 8005cde:	f023 0307 	bic.w	r3, r3, #7
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	9303      	str	r3, [sp, #12]
 8005ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ce8:	443b      	add	r3, r7
 8005cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cec:	e76a      	b.n	8005bc4 <_vfiprintf_r+0x78>
 8005cee:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	2001      	movs	r0, #1
 8005cf6:	e7a8      	b.n	8005c4a <_vfiprintf_r+0xfe>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	3401      	adds	r4, #1
 8005cfc:	f04f 0c0a 	mov.w	ip, #10
 8005d00:	4619      	mov	r1, r3
 8005d02:	9305      	str	r3, [sp, #20]
 8005d04:	4620      	mov	r0, r4
 8005d06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d0a:	3a30      	subs	r2, #48	@ 0x30
 8005d0c:	2a09      	cmp	r2, #9
 8005d0e:	d903      	bls.n	8005d18 <_vfiprintf_r+0x1cc>
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d0c6      	beq.n	8005ca2 <_vfiprintf_r+0x156>
 8005d14:	9105      	str	r1, [sp, #20]
 8005d16:	e7c4      	b.n	8005ca2 <_vfiprintf_r+0x156>
 8005d18:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e7f0      	b.n	8005d04 <_vfiprintf_r+0x1b8>
 8005d22:	ab03      	add	r3, sp, #12
 8005d24:	462a      	mov	r2, r5
 8005d26:	a904      	add	r1, sp, #16
 8005d28:	4630      	mov	r0, r6
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	4b11      	ldr	r3, [pc, #68]	@ (8005d74 <_vfiprintf_r+0x228>)
 8005d2e:	f7fd fbbf 	bl	80034b0 <_printf_float>
 8005d32:	4607      	mov	r7, r0
 8005d34:	1c78      	adds	r0, r7, #1
 8005d36:	d1d6      	bne.n	8005ce6 <_vfiprintf_r+0x19a>
 8005d38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d3a:	07d9      	lsls	r1, r3, #31
 8005d3c:	d405      	bmi.n	8005d4a <_vfiprintf_r+0x1fe>
 8005d3e:	89ab      	ldrh	r3, [r5, #12]
 8005d40:	059a      	lsls	r2, r3, #22
 8005d42:	d402      	bmi.n	8005d4a <_vfiprintf_r+0x1fe>
 8005d44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d46:	f7fe f913 	bl	8003f70 <__retarget_lock_release_recursive>
 8005d4a:	89ab      	ldrh	r3, [r5, #12]
 8005d4c:	065b      	lsls	r3, r3, #25
 8005d4e:	f53f af1f 	bmi.w	8005b90 <_vfiprintf_r+0x44>
 8005d52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d54:	e71e      	b.n	8005b94 <_vfiprintf_r+0x48>
 8005d56:	ab03      	add	r3, sp, #12
 8005d58:	462a      	mov	r2, r5
 8005d5a:	a904      	add	r1, sp, #16
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	4b04      	ldr	r3, [pc, #16]	@ (8005d74 <_vfiprintf_r+0x228>)
 8005d62:	f7fd fe41 	bl	80039e8 <_printf_i>
 8005d66:	e7e4      	b.n	8005d32 <_vfiprintf_r+0x1e6>
 8005d68:	080062a8 	.word	0x080062a8
 8005d6c:	080062b2 	.word	0x080062b2
 8005d70:	080034b1 	.word	0x080034b1
 8005d74:	08005b29 	.word	0x08005b29
 8005d78:	080062ae 	.word	0x080062ae

08005d7c <__swbuf_r>:
 8005d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7e:	460e      	mov	r6, r1
 8005d80:	4614      	mov	r4, r2
 8005d82:	4605      	mov	r5, r0
 8005d84:	b118      	cbz	r0, 8005d8e <__swbuf_r+0x12>
 8005d86:	6a03      	ldr	r3, [r0, #32]
 8005d88:	b90b      	cbnz	r3, 8005d8e <__swbuf_r+0x12>
 8005d8a:	f7fd ffd9 	bl	8003d40 <__sinit>
 8005d8e:	69a3      	ldr	r3, [r4, #24]
 8005d90:	60a3      	str	r3, [r4, #8]
 8005d92:	89a3      	ldrh	r3, [r4, #12]
 8005d94:	071a      	lsls	r2, r3, #28
 8005d96:	d501      	bpl.n	8005d9c <__swbuf_r+0x20>
 8005d98:	6923      	ldr	r3, [r4, #16]
 8005d9a:	b943      	cbnz	r3, 8005dae <__swbuf_r+0x32>
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f000 f82a 	bl	8005df8 <__swsetup_r>
 8005da4:	b118      	cbz	r0, 8005dae <__swbuf_r+0x32>
 8005da6:	f04f 37ff 	mov.w	r7, #4294967295
 8005daa:	4638      	mov	r0, r7
 8005dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	b2f6      	uxtb	r6, r6
 8005db2:	6922      	ldr	r2, [r4, #16]
 8005db4:	4637      	mov	r7, r6
 8005db6:	1a98      	subs	r0, r3, r2
 8005db8:	6963      	ldr	r3, [r4, #20]
 8005dba:	4283      	cmp	r3, r0
 8005dbc:	dc05      	bgt.n	8005dca <__swbuf_r+0x4e>
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	f7ff fd99 	bl	80058f8 <_fflush_r>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d1ed      	bne.n	8005da6 <__swbuf_r+0x2a>
 8005dca:	68a3      	ldr	r3, [r4, #8]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	60a3      	str	r3, [r4, #8]
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	6022      	str	r2, [r4, #0]
 8005dd6:	701e      	strb	r6, [r3, #0]
 8005dd8:	1c43      	adds	r3, r0, #1
 8005dda:	6962      	ldr	r2, [r4, #20]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d004      	beq.n	8005dea <__swbuf_r+0x6e>
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	07db      	lsls	r3, r3, #31
 8005de4:	d5e1      	bpl.n	8005daa <__swbuf_r+0x2e>
 8005de6:	2e0a      	cmp	r6, #10
 8005de8:	d1df      	bne.n	8005daa <__swbuf_r+0x2e>
 8005dea:	4621      	mov	r1, r4
 8005dec:	4628      	mov	r0, r5
 8005dee:	f7ff fd83 	bl	80058f8 <_fflush_r>
 8005df2:	2800      	cmp	r0, #0
 8005df4:	d0d9      	beq.n	8005daa <__swbuf_r+0x2e>
 8005df6:	e7d6      	b.n	8005da6 <__swbuf_r+0x2a>

08005df8 <__swsetup_r>:
 8005df8:	b538      	push	{r3, r4, r5, lr}
 8005dfa:	4b29      	ldr	r3, [pc, #164]	@ (8005ea0 <__swsetup_r+0xa8>)
 8005dfc:	4605      	mov	r5, r0
 8005dfe:	460c      	mov	r4, r1
 8005e00:	6818      	ldr	r0, [r3, #0]
 8005e02:	b118      	cbz	r0, 8005e0c <__swsetup_r+0x14>
 8005e04:	6a03      	ldr	r3, [r0, #32]
 8005e06:	b90b      	cbnz	r3, 8005e0c <__swsetup_r+0x14>
 8005e08:	f7fd ff9a 	bl	8003d40 <__sinit>
 8005e0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e10:	0719      	lsls	r1, r3, #28
 8005e12:	d422      	bmi.n	8005e5a <__swsetup_r+0x62>
 8005e14:	06da      	lsls	r2, r3, #27
 8005e16:	d407      	bmi.n	8005e28 <__swsetup_r+0x30>
 8005e18:	2209      	movs	r2, #9
 8005e1a:	602a      	str	r2, [r5, #0]
 8005e1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e20:	f04f 30ff 	mov.w	r0, #4294967295
 8005e24:	81a3      	strh	r3, [r4, #12]
 8005e26:	e033      	b.n	8005e90 <__swsetup_r+0x98>
 8005e28:	0758      	lsls	r0, r3, #29
 8005e2a:	d512      	bpl.n	8005e52 <__swsetup_r+0x5a>
 8005e2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e2e:	b141      	cbz	r1, 8005e42 <__swsetup_r+0x4a>
 8005e30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e34:	4299      	cmp	r1, r3
 8005e36:	d002      	beq.n	8005e3e <__swsetup_r+0x46>
 8005e38:	4628      	mov	r0, r5
 8005e3a:	f7fe fef9 	bl	8004c30 <_free_r>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e42:	89a3      	ldrh	r3, [r4, #12]
 8005e44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e48:	81a3      	strh	r3, [r4, #12]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	6063      	str	r3, [r4, #4]
 8005e4e:	6923      	ldr	r3, [r4, #16]
 8005e50:	6023      	str	r3, [r4, #0]
 8005e52:	89a3      	ldrh	r3, [r4, #12]
 8005e54:	f043 0308 	orr.w	r3, r3, #8
 8005e58:	81a3      	strh	r3, [r4, #12]
 8005e5a:	6923      	ldr	r3, [r4, #16]
 8005e5c:	b94b      	cbnz	r3, 8005e72 <__swsetup_r+0x7a>
 8005e5e:	89a3      	ldrh	r3, [r4, #12]
 8005e60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e68:	d003      	beq.n	8005e72 <__swsetup_r+0x7a>
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	f000 f882 	bl	8005f76 <__smakebuf_r>
 8005e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e76:	f013 0201 	ands.w	r2, r3, #1
 8005e7a:	d00a      	beq.n	8005e92 <__swsetup_r+0x9a>
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	60a2      	str	r2, [r4, #8]
 8005e80:	6962      	ldr	r2, [r4, #20]
 8005e82:	4252      	negs	r2, r2
 8005e84:	61a2      	str	r2, [r4, #24]
 8005e86:	6922      	ldr	r2, [r4, #16]
 8005e88:	b942      	cbnz	r2, 8005e9c <__swsetup_r+0xa4>
 8005e8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005e8e:	d1c5      	bne.n	8005e1c <__swsetup_r+0x24>
 8005e90:	bd38      	pop	{r3, r4, r5, pc}
 8005e92:	0799      	lsls	r1, r3, #30
 8005e94:	bf58      	it	pl
 8005e96:	6962      	ldrpl	r2, [r4, #20]
 8005e98:	60a2      	str	r2, [r4, #8]
 8005e9a:	e7f4      	b.n	8005e86 <__swsetup_r+0x8e>
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	e7f7      	b.n	8005e90 <__swsetup_r+0x98>
 8005ea0:	20000048 	.word	0x20000048

08005ea4 <_raise_r>:
 8005ea4:	291f      	cmp	r1, #31
 8005ea6:	b538      	push	{r3, r4, r5, lr}
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	460c      	mov	r4, r1
 8005eac:	d904      	bls.n	8005eb8 <_raise_r+0x14>
 8005eae:	2316      	movs	r3, #22
 8005eb0:	6003      	str	r3, [r0, #0]
 8005eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb6:	bd38      	pop	{r3, r4, r5, pc}
 8005eb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005eba:	b112      	cbz	r2, 8005ec2 <_raise_r+0x1e>
 8005ebc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ec0:	b94b      	cbnz	r3, 8005ed6 <_raise_r+0x32>
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	f000 f830 	bl	8005f28 <_getpid_r>
 8005ec8:	4622      	mov	r2, r4
 8005eca:	4601      	mov	r1, r0
 8005ecc:	4628      	mov	r0, r5
 8005ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ed2:	f000 b817 	b.w	8005f04 <_kill_r>
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d00a      	beq.n	8005ef0 <_raise_r+0x4c>
 8005eda:	1c59      	adds	r1, r3, #1
 8005edc:	d103      	bne.n	8005ee6 <_raise_r+0x42>
 8005ede:	2316      	movs	r3, #22
 8005ee0:	6003      	str	r3, [r0, #0]
 8005ee2:	2001      	movs	r0, #1
 8005ee4:	e7e7      	b.n	8005eb6 <_raise_r+0x12>
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005eee:	4798      	blx	r3
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	e7e0      	b.n	8005eb6 <_raise_r+0x12>

08005ef4 <raise>:
 8005ef4:	4b02      	ldr	r3, [pc, #8]	@ (8005f00 <raise+0xc>)
 8005ef6:	4601      	mov	r1, r0
 8005ef8:	6818      	ldr	r0, [r3, #0]
 8005efa:	f7ff bfd3 	b.w	8005ea4 <_raise_r>
 8005efe:	bf00      	nop
 8005f00:	20000048 	.word	0x20000048

08005f04 <_kill_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	2300      	movs	r3, #0
 8005f08:	4d06      	ldr	r5, [pc, #24]	@ (8005f24 <_kill_r+0x20>)
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	4611      	mov	r1, r2
 8005f10:	602b      	str	r3, [r5, #0]
 8005f12:	f7fb fa28 	bl	8001366 <_kill>
 8005f16:	1c43      	adds	r3, r0, #1
 8005f18:	d102      	bne.n	8005f20 <_kill_r+0x1c>
 8005f1a:	682b      	ldr	r3, [r5, #0]
 8005f1c:	b103      	cbz	r3, 8005f20 <_kill_r+0x1c>
 8005f1e:	6023      	str	r3, [r4, #0]
 8005f20:	bd38      	pop	{r3, r4, r5, pc}
 8005f22:	bf00      	nop
 8005f24:	20000460 	.word	0x20000460

08005f28 <_getpid_r>:
 8005f28:	f7fb ba15 	b.w	8001356 <_getpid>

08005f2c <__swhatbuf_r>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	460c      	mov	r4, r1
 8005f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f34:	b096      	sub	sp, #88	@ 0x58
 8005f36:	4615      	mov	r5, r2
 8005f38:	2900      	cmp	r1, #0
 8005f3a:	461e      	mov	r6, r3
 8005f3c:	da0c      	bge.n	8005f58 <__swhatbuf_r+0x2c>
 8005f3e:	89a3      	ldrh	r3, [r4, #12]
 8005f40:	2100      	movs	r1, #0
 8005f42:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005f46:	bf14      	ite	ne
 8005f48:	2340      	movne	r3, #64	@ 0x40
 8005f4a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005f4e:	2000      	movs	r0, #0
 8005f50:	6031      	str	r1, [r6, #0]
 8005f52:	602b      	str	r3, [r5, #0]
 8005f54:	b016      	add	sp, #88	@ 0x58
 8005f56:	bd70      	pop	{r4, r5, r6, pc}
 8005f58:	466a      	mov	r2, sp
 8005f5a:	f000 f849 	bl	8005ff0 <_fstat_r>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	dbed      	blt.n	8005f3e <__swhatbuf_r+0x12>
 8005f62:	9901      	ldr	r1, [sp, #4]
 8005f64:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005f68:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005f6c:	4259      	negs	r1, r3
 8005f6e:	4159      	adcs	r1, r3
 8005f70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f74:	e7eb      	b.n	8005f4e <__swhatbuf_r+0x22>

08005f76 <__smakebuf_r>:
 8005f76:	898b      	ldrh	r3, [r1, #12]
 8005f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f7a:	079d      	lsls	r5, r3, #30
 8005f7c:	4606      	mov	r6, r0
 8005f7e:	460c      	mov	r4, r1
 8005f80:	d507      	bpl.n	8005f92 <__smakebuf_r+0x1c>
 8005f82:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005f86:	6023      	str	r3, [r4, #0]
 8005f88:	6123      	str	r3, [r4, #16]
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	6163      	str	r3, [r4, #20]
 8005f8e:	b003      	add	sp, #12
 8005f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f92:	ab01      	add	r3, sp, #4
 8005f94:	466a      	mov	r2, sp
 8005f96:	f7ff ffc9 	bl	8005f2c <__swhatbuf_r>
 8005f9a:	9f00      	ldr	r7, [sp, #0]
 8005f9c:	4605      	mov	r5, r0
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	4639      	mov	r1, r7
 8005fa2:	f7fe feb9 	bl	8004d18 <_malloc_r>
 8005fa6:	b948      	cbnz	r0, 8005fbc <__smakebuf_r+0x46>
 8005fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fac:	059a      	lsls	r2, r3, #22
 8005fae:	d4ee      	bmi.n	8005f8e <__smakebuf_r+0x18>
 8005fb0:	f023 0303 	bic.w	r3, r3, #3
 8005fb4:	f043 0302 	orr.w	r3, r3, #2
 8005fb8:	81a3      	strh	r3, [r4, #12]
 8005fba:	e7e2      	b.n	8005f82 <__smakebuf_r+0xc>
 8005fbc:	89a3      	ldrh	r3, [r4, #12]
 8005fbe:	6020      	str	r0, [r4, #0]
 8005fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fc4:	81a3      	strh	r3, [r4, #12]
 8005fc6:	9b01      	ldr	r3, [sp, #4]
 8005fc8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005fcc:	b15b      	cbz	r3, 8005fe6 <__smakebuf_r+0x70>
 8005fce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	f000 f81e 	bl	8006014 <_isatty_r>
 8005fd8:	b128      	cbz	r0, 8005fe6 <__smakebuf_r+0x70>
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	f023 0303 	bic.w	r3, r3, #3
 8005fe0:	f043 0301 	orr.w	r3, r3, #1
 8005fe4:	81a3      	strh	r3, [r4, #12]
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	431d      	orrs	r5, r3
 8005fea:	81a5      	strh	r5, [r4, #12]
 8005fec:	e7cf      	b.n	8005f8e <__smakebuf_r+0x18>
	...

08005ff0 <_fstat_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	4d06      	ldr	r5, [pc, #24]	@ (8006010 <_fstat_r+0x20>)
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	4608      	mov	r0, r1
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	602b      	str	r3, [r5, #0]
 8005ffe:	f7fb fa12 	bl	8001426 <_fstat>
 8006002:	1c43      	adds	r3, r0, #1
 8006004:	d102      	bne.n	800600c <_fstat_r+0x1c>
 8006006:	682b      	ldr	r3, [r5, #0]
 8006008:	b103      	cbz	r3, 800600c <_fstat_r+0x1c>
 800600a:	6023      	str	r3, [r4, #0]
 800600c:	bd38      	pop	{r3, r4, r5, pc}
 800600e:	bf00      	nop
 8006010:	20000460 	.word	0x20000460

08006014 <_isatty_r>:
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	2300      	movs	r3, #0
 8006018:	4d05      	ldr	r5, [pc, #20]	@ (8006030 <_isatty_r+0x1c>)
 800601a:	4604      	mov	r4, r0
 800601c:	4608      	mov	r0, r1
 800601e:	602b      	str	r3, [r5, #0]
 8006020:	f7fb fa11 	bl	8001446 <_isatty>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d102      	bne.n	800602e <_isatty_r+0x1a>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	b103      	cbz	r3, 800602e <_isatty_r+0x1a>
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	20000460 	.word	0x20000460

08006034 <_init>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	bf00      	nop
 8006038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800603a:	bc08      	pop	{r3}
 800603c:	469e      	mov	lr, r3
 800603e:	4770      	bx	lr

08006040 <_fini>:
 8006040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006042:	bf00      	nop
 8006044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006046:	bc08      	pop	{r3}
 8006048:	469e      	mov	lr, r3
 800604a:	4770      	bx	lr
